### Using memory copies of storage variables when repeated access is required uses less gas `credit` should be copied ```solidity         if (credit > 0) {             uint toBurn = Math.min(vusd.balanceOf(address(this)), credit);             credit -= toBurn; ``` https://github.com/code-423n4/2022-02-hubble/blob/ed1d885d5dbc2eae24e43c3ecbf291a0f5a52765/contracts/MarginAccount.sol#L574-L576   ### Functions not called by the contract itself should be `external` rather than `public` ```solidity function getUnderlyingTwapPrice(uint256 _intervalInSeconds) public view returns (int256) {         ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/AMM.sol#L387  ```solidity function liquidateMaker(address maker) override public whenNotPaused {          ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/ClearingHouse.sol#L148  ```solidity function liquidateTaker(address trader) override public whenNotPaused {          ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/ClearingHouse.sol#L153  ```solidity function syncDeps(IRegistry _registry) public onlyGovernance {           ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/InsuranceFund.sol#L116  ```solidity function getNormalizedMargin(address trader) override public view returns(int256 weighted) {        ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/MarginAccount.sol#L509  ```solidity function syncDeps(address _registry, uint _liquidationIncentive) public onlyGovernance {         ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/MarginAccount.sol#L599   ### `require()` strings longer than 32 bytes cost extra gas ```solidity require(baseAssetQuantity > 0, "VAMM._longbaseAssetQuantity is <= 0");                  ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/AMM.sol#L487  ```solidity require(baseAssetQuantity < 0, "VAMM._shortbaseAssetQuantity is >= 0");                  ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/AMM.sol#L511  ```solidity require(margin[VUSD_IDX][trader] >= 0, "Cannot remove margin when vusd balance is negative");              ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/MarginAccount.sol#L174  ```solidity require(notionalPosition == 0, "Liquidate positions before settling bad debt");                ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/MarginAccount.sol#L354  ```solidity require(repay <= maxRepay, "Need to repay more to seize that much");              ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/MarginAccount.sol#L453  ```solidity require(reserve >= withdrawals[start].amount, 'Cannot process withdrawals at this timeNot enough balance');              ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/VUSD.sol#L55  ```solidity require(isAboveMinAllowableMargin(trader), "CHBelow Minimum Allowable Margin");                    ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/ClearingHouse.sol#L84  ```solidity require(isAboveMinAllowableMargin(maker), "CHBelow Minimum Allowable Margin");                    ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/ClearingHouse.sol#L101  ```solidity require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), "HubbleErc20.allowTransfers.noAuth");                      ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/tests/ERC20Mintable.sol#L32  ```solidity require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), "HubbleErc20.allowTransfers.noAuth");                      ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/tests/ERC20Mintable.sol#L60  ```solidity require(prices[underlying] != 0, "underlying price has not been set as yet");              ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/tests/TestOracle.sol#L20  ```solidity require(twapPrices[underlying] != 0, "underlying twap price has not been set as yet");             ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/tests/TestOracle.sol#L33   ### Using `> 0` costs more gas than `!= 0` when used in on uints in a `require()` statement ```solidity require(amount > 0, "Add non-zero margin");           ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/MarginAccount.sol#L150  ```solidity require(_round > 0, "Not enough history");           ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/Oracle.sol#L153   ### Splitting `require()` statements that use `&&` saves gas See [this issue](https://github.com/code-423n4/2022-01-xdefi-findings/issues/128) for an example ```solidity require(idx > VUSD_IDX && idx < supportedCollateral.length, "collateral not seizable");       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/MarginAccount.sol   ### It costs more gas to initialize variables to zero than to let the default of zero be applied ```solidity uint constant VUSD_IDX = 0;            ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/MarginAccount.sol#L31  ```solidity for (uint i = 0; i < idxs.length; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/MarginAccount.sol#L331  ```solidity for (uint i = 0; i < assets.length; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/MarginAccount.sol#L521  ```solidity for (uint i = 0; i < _collaterals.length; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/MarginAccount.sol#L552  ```solidity uint constant VUSD_IDX = 0;            ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/MarginAccountHelper.sol#L13  ```solidity for (uint i = 0; i < amms.length; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/ClearingHouse.sol#L122  ```solidity for (uint i = 0; i < amms.length; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/ClearingHouse.sol#L130  ```solidity for (uint i = 0; i < amms.length; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/ClearingHouse.sol#L170  ```solidity for (uint i = 0; i < amms.length; i++) { // liquidate all positions   ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/ClearingHouse.sol#L194  ```solidity for (uint i = 0; i < amms.length; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/ClearingHouse.sol#L251  ```solidity for (uint i = 0; i < amms.length; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/ClearingHouse.sol#L263  ```solidity for (uint i = 0; i < amms.length; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/ClearingHouse.sol#L277  ```solidity uint shares = 0;             ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/InsuranceFund.sol#L52  ```solidity uint constant VUSD_IDX = 0;            ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/HubbleViewer.sol#L15  ```solidity for (uint i = 0; i < len; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/HubbleViewer.sol#L52  ```solidity for (uint i = 0; i < traders.length; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/HubbleViewer.sol#L65  ```solidity for (uint i = 0; i < traders.length; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/HubbleViewer.sol#L78  ```solidity for (uint i = 0; i < l; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/HubbleViewer.sol#L95  ```solidity for (uint i = 0; i < l; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/HubbleViewer.sol#L120  ```solidity for (uint i = 0; i < l; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/HubbleViewer.sol#L137  ```solidity for (uint256 i = 0; i < recipients.length; i++)        ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/tests/Disperse.sol#L9  ```solidity uint256 total = 0;             ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/tests/Disperse.sol#L17  ```solidity for (uint256 i = 0; i < recipients.length; i++)        ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/tests/Disperse.sol#L18  ```solidity for (uint256 i = 0; i < recipients.length; i++)        ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/tests/Disperse.sol#L21  ```solidity for (uint256 i = 0; i < recipients.length; i++)        ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/tests/Disperse.sol#L27  ```solidity for (uint256 i = 0; i < recipients.length; i++)        ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/tests/Disperse.sol#L32  ```solidity for (uint i = 0; i < numTraders; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/tests/Leaderboard.sol#L43  ```solidity for (uint j = 0; j < l; j++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/tests/Leaderboard.sol#L45  ```solidity for (uint i = 0; i < targets.length; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/tests/Executor.sol#L19  ```solidity for (uint i = 0; i < traders.length; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/tests/BatchLiquidator.sol#L25  ```solidity for (uint i = 0; i < traders.length; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/tests/BatchLiquidator.sol#L31  ```solidity for (uint i = 0; i < traders.length; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/tests/BatchLiquidator.sol#L37   ### `<array>.length` should not be looked up in every loop of a for-loop Even memory arrays incur the overhead of bit tests and bit shifts to calculate the array length ```solidity for (uint i = 0; i < idxs.length; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/MarginAccount.sol#L331  ```solidity for (uint i = 1 /* skip vusd */; i < assets.length; i++) {   ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/MarginAccount.sol#L373  ```solidity for (uint i = 0; i < assets.length; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/MarginAccount.sol#L521  ```solidity for (uint i = 0; i < _collaterals.length; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/MarginAccount.sol#L552  ```solidity for (uint i = 0; i < amms.length; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/ClearingHouse.sol#L122  ```solidity for (uint i = 0; i < amms.length; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/ClearingHouse.sol#L130  ```solidity for (uint i = 0; i < amms.length; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/ClearingHouse.sol#L170  ```solidity for (uint i = 0; i < amms.length; i++) { // liquidate all positions   ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/ClearingHouse.sol#L194  ```solidity for (uint i = 0; i < amms.length; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/ClearingHouse.sol#L251  ```solidity for (uint i = 0; i < amms.length; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/ClearingHouse.sol#L263  ```solidity for (uint i = 0; i < amms.length; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/ClearingHouse.sol#L277  ```solidity for (uint i = 0; i < traders.length; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/HubbleViewer.sol#L65  ```solidity for (uint i = 0; i < traders.length; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/HubbleViewer.sol#L78  ```solidity for (uint i = 1; i < length; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/HubbleViewer.sol#L367  ```solidity for (uint256 i = 0; i < recipients.length; i++)        ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/tests/Disperse.sol#L9  ```solidity for (uint256 i = 0; i < recipients.length; i++)        ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/tests/Disperse.sol#L18  ```solidity for (uint256 i = 0; i < recipients.length; i++)        ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/tests/Disperse.sol#L21  ```solidity for (uint256 i = 0; i < recipients.length; i++)        ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/tests/Disperse.sol#L27  ```solidity for (uint256 i = 0; i < recipients.length; i++)        ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/tests/Disperse.sol#L32  ```solidity for (uint i = 0; i < targets.length; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/tests/Executor.sol#L19  ```solidity for (uint i = 0; i < traders.length; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/tests/BatchLiquidator.sol#L25  ```solidity for (uint i = 0; i < traders.length; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/tests/BatchLiquidator.sol#L31  ```solidity for (uint i = 0; i < traders.length; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/tests/BatchLiquidator.sol#L37   ### `++i`/`i++` should be `unchecked{++i}`/`unchecked{++i}` when it is not possible for them to overflow, as is the case when used in for- and while-loops ```solidity for (uint i = 0; i < idxs.length; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/MarginAccount.sol#L331  ```solidity for (uint i = 1 /* skip vusd */; i < assets.length; i++) {   ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/MarginAccount.sol#L373  ```solidity for (uint i = 0; i < assets.length; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/MarginAccount.sol#L521  ```solidity for (uint i = 0; i < _collaterals.length; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/MarginAccount.sol#L552  ```solidity for (uint i = 0; i < amms.length; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/ClearingHouse.sol#L122  ```solidity for (uint i = 0; i < amms.length; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/ClearingHouse.sol#L130  ```solidity for (uint i = 0; i < amms.length; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/ClearingHouse.sol#L170  ```solidity for (uint i = 0; i < amms.length; i++) { // liquidate all positions   ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/ClearingHouse.sol#L194  ```solidity for (uint i = 0; i < amms.length; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/ClearingHouse.sol#L251  ```solidity for (uint i = 0; i < amms.length; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/ClearingHouse.sol#L263  ```solidity for (uint i = 0; i < amms.length; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/ClearingHouse.sol#L277  ```solidity for (uint i = 0; i < len; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/HubbleViewer.sol#L52  ```solidity for (uint i = 0; i < traders.length; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/HubbleViewer.sol#L65  ```solidity for (uint i = 0; i < traders.length; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/HubbleViewer.sol#L78  ```solidity for (uint i = 0; i < l; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/HubbleViewer.sol#L95  ```solidity for (uint i = 0; i < l; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/HubbleViewer.sol#L120  ```solidity for (uint i = 0; i < l; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/HubbleViewer.sol#L137  ```solidity for (uint i = 1; i < length; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/HubbleViewer.sol#L367  ```solidity for (uint256 i = 0; i < recipients.length; i++)        ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/tests/Disperse.sol#L9  ```solidity for (uint256 i = 0; i < recipients.length; i++)        ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/tests/Disperse.sol#L18  ```solidity for (uint256 i = 0; i < recipients.length; i++)        ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/tests/Disperse.sol#L21  ```solidity for (uint256 i = 0; i < recipients.length; i++)        ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/tests/Disperse.sol#L27  ```solidity for (uint256 i = 0; i < recipients.length; i++)        ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/tests/Disperse.sol#L32  ```solidity for (uint i = 0; i < numTraders; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/tests/Leaderboard.sol#L43  ```solidity for (uint j = 0; j < l; j++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/tests/Leaderboard.sol#L45  ```solidity for (uint i = 0; i < targets.length; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/tests/Executor.sol#L19  ```solidity for (uint i = 0; i < traders.length; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/tests/BatchLiquidator.sol#L25  ```solidity for (uint i = 0; i < traders.length; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/tests/BatchLiquidator.sol#L31  ```solidity for (uint i = 0; i < traders.length; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/tests/BatchLiquidator.sol#L37   ### `++i` costs less gas than `++i`, especially when it's used in for-loops (`--i`/`i--` too) ```solidity for (uint i = 0; i < idxs.length; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/MarginAccount.sol#L331  ```solidity for (uint i = 1 /* skip vusd */; i < assets.length; i++) {   ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/MarginAccount.sol#L373  ```solidity for (uint i = 0; i < assets.length; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/MarginAccount.sol#L521  ```solidity for (uint i = 0; i < _collaterals.length; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/MarginAccount.sol#L552  ```solidity for (uint i = 0; i < amms.length; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/ClearingHouse.sol#L122  ```solidity for (uint i = 0; i < amms.length; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/ClearingHouse.sol#L130  ```solidity for (uint i = 0; i < amms.length; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/ClearingHouse.sol#L170  ```solidity for (uint i = 0; i < amms.length; i++) { // liquidate all positions   ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/ClearingHouse.sol#L194  ```solidity for (uint i = 0; i < amms.length; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/ClearingHouse.sol#L251  ```solidity for (uint i = 0; i < amms.length; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/ClearingHouse.sol#L263  ```solidity for (uint i = 0; i < amms.length; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/ClearingHouse.sol#L277  ```solidity for (uint i = 0; i < len; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/HubbleViewer.sol#L52  ```solidity for (uint i = 0; i < traders.length; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/HubbleViewer.sol#L65  ```solidity for (uint i = 0; i < traders.length; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/HubbleViewer.sol#L78  ```solidity for (uint i = 0; i < l; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/HubbleViewer.sol#L95  ```solidity for (uint i = 0; i < l; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/HubbleViewer.sol#L120  ```solidity for (uint i = 0; i < l; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/HubbleViewer.sol#L137  ```solidity for (uint i = 1; i < length; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/HubbleViewer.sol#L367  ```solidity for (uint256 i = 0; i < recipients.length; i++)        ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/tests/Disperse.sol#L9  ```solidity for (uint256 i = 0; i < recipients.length; i++)        ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/tests/Disperse.sol#L18  ```solidity for (uint256 i = 0; i < recipients.length; i++)        ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/tests/Disperse.sol#L21  ```solidity for (uint256 i = 0; i < recipients.length; i++)        ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/tests/Disperse.sol#L27  ```solidity for (uint256 i = 0; i < recipients.length; i++)        ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/tests/Disperse.sol#L32  ```solidity for (uint i = 0; i < numTraders; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/tests/Leaderboard.sol#L43  ```solidity for (uint j = 0; j < l; j++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/tests/Leaderboard.sol#L45  ```solidity for (uint i = 0; i < targets.length; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/tests/Executor.sol#L19  ```solidity for (uint i = 0; i < traders.length; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/tests/BatchLiquidator.sol#L25  ```solidity for (uint i = 0; i < traders.length; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/tests/BatchLiquidator.sol#L31  ```solidity for (uint i = 0; i < traders.length; i++) {       ``` https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/tests/BatchLiquidator.sol#L37 
