# Lines of code  https://github.com/code-423n4/2023-01-biconomy/blob/main/scw-contracts/contracts/smart-contract-wallet/Proxy.sol#L36   # Vulnerability details  ### Impact  Proxy.sol is an enforcer of the the user's wallet standard. In its fallback function, it calls the actual implementation in order to handle additional logic.  If Proxy.sol is called with no calldata and some msg.value, the call will reach the receive() function, which does not forward the call down to the implementation.  This can be a serious value leak issue, because the underlying implementation may have valid behavior for handling sending of value.  This logic is never reached, the entire msg.value is just leaked.   ```js contracts/smart-contract-wallet/Proxy.sol:   35     36:     receive() external payable {   37:         emit Received(msg.value, msg.sender, "");   38:     } ```  ### Proof Of Concept  Because the implementation contract is a constant , although we can confirm whether the `receive()` function exists, a different vulnerability is exposed this time; Even if the proxy contract can receive ether with `receive()`, there is no withdraw function to withdraw this ether and ethers remain locked in the contract.   ### Recommended Mitigation Steps  Consider moving the `receive()` function to the implementation contract 
