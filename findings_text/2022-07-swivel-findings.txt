# Lines of code  https://github.com/code-423n4/2022-07-swivel/blob/fd36ce96b46943026cb2dfcb76dfa3f884f51c18/Swivel/Swivel.sol#L473 https://github.com/code-423n4/2022-07-swivel/blob/fd36ce96b46943026cb2dfcb76dfa3f884f51c18/Swivel/Swivel.sol#L495   # Vulnerability details  ## Impact Swivel.scheduleFeeChange(), Swivel.setFee() wouldn't work as expected for user preference.  Users can't react properly after [ScheduleFeeChange() event](https://github.com/code-423n4/2022-07-swivel/blob/fd36ce96b46943026cb2dfcb76dfa3f884f51c18/Swivel/Swivel.sol#L477) because they don't know whether the new fee settings would be better/worse for them.   ## Proof of Concept According to [this explanation](https://github.com/code-423n4/2022-07-swivel#admin-privileges), these functions are to ensure users can feel comfortable.  Btw with Swivel.scheduleFeeChange(), it emits only when to change fee settings without detailed values.  So users don't know whether the new fee settings will be better or worse for them.  Even if the admin is going to set larger feenominators for lower fee percent, users don't know that until actual fees are set using setFee() and such delays are almost meaningless for users.  I think we should announce the detailed fee settings with Swivel.scheduleFeeChange() function so that users can react accordingly after checking new fee settings.   ## Tools Used Solidity Visual Developer of VSCode   ## Recommended Mitigation Steps Recommend adding an additional array - pendingFeenominators [here](https://github.com/code-423n4/2022-07-swivel/blob/fd36ce96b46943026cb2dfcb76dfa3f884f51c18/Swivel/Swivel.sol#L37).  ``` uint16[4] public pendingFeenominators; ```  And scheduleFeeChange() function should have i, d parameters same as current setFee() function so that pendingFeenominators save new settings. (Also keep original fee settings if some indexs aren't updated.)  After that, we can call setFee() without any params and feenominators will be replaced with pendingFeenominators.  
# Summary | Issue | Instances | | ------ | :--------: | | `++i` uses less gas compared to `i++` | 5 | | `uint8` incurs more gas overhead compared to `uint256` | 7 |  | Use named return variable instead of using return | 2 |  | Named return variable is not used | 8 |  | Use != 0 instead of > 0 for a `uint`  | 17 |     # Gas Optimizations  ## `++i` uses less gas compared to `i++`   This is especially relevant for the use of `i++` in `for` loops. This saves 6 gas per loop.   _There are 5 instances of this issue:_  ``` FILE: Swivel/Swivel.sol  100:   unchecked {i++;} ``` https://github.com/code-423n4/2022-07-swivel/blob/main/Swivel/Swivel.sol#L100  ``` FILE: Swivel/Swivel.sol  269:    unchecked {i++;} ``` https://github.com/code-423n4/2022-07-swivel/blob/main/Swivel/Swivel.sol#L269  ``` FILE: Swivel/Swivel.sol  417      unchecked { 418        i++; 419:      } ``` https://github.com/code-423n4/2022-07-swivel/blob/main/Swivel/Swivel.sol#L417-L419  ``` FILE: Swivel/Swivel.sol  510      unchecked { 511        x++; 512:      } ``` https://github.com/code-423n4/2022-07-swivel/blob/main/Swivel/Swivel.sol#L510-L512  ``` FILE: Swivel/Swivel.sol  563      unchecked { 564        i++; 565:      } ``` https://github.com/code-423n4/2022-07-swivel/blob/main/Swivel/Swivel.sol#L563-L565   ## `uint8`, `uint16`,  incurs more gas overhead compared to `uint256`  _There are 7 instances of this issue:_  ``` File: Swivel/Swivel.sol  35:   uint16 constant public MIN_FEENOMINATOR = 33; ``` https://github.com/code-423n4/2022-07-swivel/blob/main/Swivel/Swivel.sol#L35  ``` File: Swivel/Swivel.sol  37:   uint16[4] public feenominators; ``` https://github.com/code-423n4/2022-07-swivel/blob/main/Swivel/Swivel.sol#L37  ``` FILE: Marketplace/MarketPlace.sol  65:   uint8 p, ``` https://github.com/code-423n4/2022-07-swivel/blob/main/Marketplace/MarketPlace.sol#L65  ``` FILE: Creator/Creator.sol  31:   uint8 p, ``` https://github.com/code-423n4/2022-07-swivel/blob/main/Creator/Creator.sol#L31  ``` FILE: Creator/Creator.sol  38:   uint8 d ``` https://github.com/code-423n4/2022-07-swivel/blob/main/Creator/Creator.sol#L38  ``` FILE: VaultTracker/VaultTracker.sol  26:   uint8 public immutable protocol; ``` https://github.com/code-423n4/2022-07-swivel/blob/main/VaultTracker/VaultTracker.sol#L26  ``` FILE: Creator/ZcToken.sol  17:   uint8 public immutable protocol; ``` https://github.com/code-423n4/2022-07-swivel/blob/main/Creator/ZcToken.sol#L17   ## Use named return variable instead of using return  _There are 2 instances of this issue:_  ``` FILE: Swivel/Swivel.sol  697:  return hash; ``` https://github.com/code-423n4/2022-07-swivel/blob/main/Swivel/Swivel.sol#L697  ``` FILE: Swivel/Swivel.sol  207:    return interest; ``` https://github.com/code-423n4/2022-07-swivel/blob/main/Marketplace/MarketPlace.sol#L207   ## Named return variable is not used  Remove the named return variable to save 25 gas per function call.   _There are 8 instances of this issue:_  ``` FILE: Marketplace/Marketplace.sol  148:     function authRedeem(uint8 p, address u, uint256 m, address f, address t, uint256 a) public authorized(markets[p][u][m].zcToken) returns (uint256 underlyingAmount) { ``` https://github.com/code-423n4/2022-07-swivel/blob/main/Marketplace/MarketPlace.sol#L148  ``` FILE: Creator/ZcToken.sol  43:    function convertToUnderlying(uint256 principalAmount) external override view returns (uint256 underlyingAmount){ ``` https://github.com/code-423n4/2022-07-swivel/blob/main/Creator/ZcToken.sol#L43  ``` FILE: Creator/ZcToken.sol  52:   function convertToPrincipal(uint256 underlyingAmount) external override view returns (uint256 principalAmount){ ``` https://github.com/code-423n4/2022-07-swivel/blob/main/Creator/ZcToken.sol#L52  ``` FILE: Creator/ZcToken.sol  61:   function maxRedeem(address owner) external override view returns (uint256 maxPrincipalAmount){ ``` https://github.com/code-423n4/2022-07-swivel/blob/main/Creator/ZcToken.sol#L61  ``` FILE: Creator/ZcToken.sol  70:    function previewRedeem(uint256 principalAmount) external override view returns (uint256 underlyingAmount){ ``` https://github.com/code-423n4/2022-07-swivel/blob/main/Creator/ZcToken.sol#L70  ``` FILE: Creator/ZcToken.sol  79:   function maxWithdraw(address owner) external override view returns (uint256 maxUnderlyingAmount){ ``` https://github.com/code-423n4/2022-07-swivel/blob/main/Creator/ZcToken.sol#L79  ``` FILE: Creator/ZcToken.sol  88:     function previewWithdraw(uint256 underlyingAmount) external override view returns (uint256 principalAmount){ ``` https://github.com/code-423n4/2022-07-swivel/blob/main/Creator/ZcToken.sol#L88  ``` FILE: Creator/ZcToken.sol  98:     function withdraw(uint256 underlyingAmount, address receiver, address holder) external override returns (uint256 principalAmount){ ``` https://github.com/code-423n4/2022-07-swivel/blob/main/Creator/ZcToken.sol#L98  ``` FILE: Creator/ZcToken.sol  124:     function redeem(uint256 principalAmount, address receiver, address holder) external override returns (uint256 underlyingAmount){ ``` https://github.com/code-423n4/2022-07-swivel/blob/main/Creator/ZcToken.sol#L124   ## Use != 0 instead of > 0 for a `uint`  This saves 6 gas per instance.   _There are 17 instances of this issue:_  ``` FILE: Swivel/Swivel.sol  118:    if (amount > o.premium) { revert Exception(5, amount, o.premium, address(0), address(0)); } ``` https://github.com/code-423n4/2022-07-swivel/blob/main/Swivel/Swivel.sol#L118  ``` FILE: Swivel/Swivel.sol  155:   if (amount > o.principal) { revert Exception(5, amount, o.principal, address(0), address(0)); } ``` https://github.com/code-423n4/2022-07-swivel/blob/main/Swivel/Swivel.sol#L155  ``` FILE: Swivel/Swivel.sol  190:   if (amount > o.principal) { revert Exception(5, amount, o.principal, address(0), address(0)); } ``` https://github.com/code-423n4/2022-07-swivel/blob/main/Swivel/Swivel.sol#L190  ``` FILE: Swivel/Swivel.sol  219:   if (amount > o.premium) { revert Exception(5, amount, o.premium, address(0), address(0)); } ``` https://github.com/code-423n4/2022-07-swivel/blob/main/Swivel/Swivel.sol#L219  ``` FILE: Swivel/Swivel.sol  284:  if (amount > o.premium) { revert Exception(5, amount, o.premium, address(0), address(0)); } ``` https://github.com/code-423n4/2022-07-swivel/blob/main/Swivel/Swivel.sol#L284  ``` FILE: Swivel/Swivel.sol  315:   if (amount > o.principal) { revert Exception(5, amount, o.principal, address(0), address(0)); } ``` https://github.com/code-423n4/2022-07-swivel/blob/main/Swivel/Swivel.sol#L315  ``` FILE: Swivel/Swivel.sol  345:   if (amount > o.principal) { revert Exception(5, amount, o.principal, address(0), address(0)); } ``` https://github.com/code-423n4/2022-07-swivel/blob/main/Swivel/Swivel.sol#L345  ``` FILE: Swivel/Swivel.sol  380:   if (amount > o.premium) { revert Exception(5, amount, o.premium, address(0), address(0)); } ``` https://github.com/code-423n4/2022-07-swivel/blob/main/Swivel/Swivel.sol#L380  ``` FILE: VaultTracker/VaultTracker.sol  54:    if (vlt.notional > 0) { ``` https://github.com/code-423n4/2022-07-swivel/blob/main/VaultTracker/VaultTracker.sol#L54  ``` FILE: VaultTracker/VaultTracker.sol  59:   if (maturityRate > 0) { // Calculate marginal interest ``` https://github.com/code-423n4/2022-07-swivel/blob/main/VaultTracker/VaultTracker.sol#L59  ``` FILE: VaultTracker/VaultTracker.sol  86:  if (a > vlt.notional) { revert Exception(31, a, vlt.notional, address(0), address(0)); } ``` https://github.com/code-423n4/2022-07-swivel/blob/main/VaultTracker/VaultTracker.sol#L86  ``` FILE: VaultTracker/VaultTracker.sol  93:   if (maturityRate > 0) { // Calculate marginal interest ``` https://github.com/code-423n4/2022-07-swivel/blob/main/VaultTracker/VaultTracker.sol#L93  ``` FILE: VaultTracker/VaultTracker.sol  123:   if (maturityRate > 0) { // Calculate marginal interest ``` https://github.com/code-423n4/2022-07-swivel/blob/main/VaultTracker/VaultTracker.sol#L123  ``` FILE: VaultTracker/VaultTracker.sol  158:   if (a > from.notional) { revert Exception(31, a, from.notional, address(0), address(0)); } ``` https://github.com/code-423n4/2022-07-swivel/blob/main/VaultTracker/VaultTracker.sol#L158  ``` FILE: VaultTracker/VaultTracker.sol  165:   if (maturityRate > 0) {  ``` https://github.com/code-423n4/2022-07-swivel/blob/main/VaultTracker/VaultTracker.sol#L165  ``` FILE: VaultTracker/VaultTracker.sol  181:   if (to.notional > 0) { ``` https://github.com/code-423n4/2022-07-swivel/blob/main/VaultTracker/VaultTracker.sol#L181  ``` FILE: VaultTracker/VaultTracker.sol  184:   if (maturityRate > 0) {  ``` https://github.com/code-423n4/2022-07-swivel/blob/main/VaultTracker/VaultTracker.sol#L184  ``` FILE: VaultTracker/VaultTracker.sol  224:  if (maturityRate > 0) {  ``` https://github.com/code-423n4/2022-07-swivel/blob/main/VaultTracker/VaultTracker.sol#L222  
# Lines of code  https://github.com/code-423n4/2022-07-swivel/blob/main/Marketplace/MarketPlace.sol#L148   # Vulnerability details  ## Impact Due to missing modifier, User will be able to redeem zcTokens and withdraw underlying even in paused Market. This happens due to missing unpaused(p) modifier  ## Proof of Concept 1. Lets see function definition for authRedeem function  ``` function authRedeem(uint8 p, address u, uint256 m, address f, address t, uint256 a) public authorized(markets[p][u][m].zcToken) returns (uint256 underlyingAmount) ```  2. Observe that unpaused(p) modifier is missing  3. This means if Marketplace is placed under paused state by Admin, then also User can call authRedeem at Marketplace via withdraw/redeem at ZcToken contract.   4. This will allow Users to withdraw in paused state which is incorrect  ## Recommended Mitigation Steps Add unpaused(p) modifier in authRedeem function  ``` function authRedeem(uint8 p, address u, uint256 m, address f, address t, uint256 a) public authorized(markets[p][u][m].zcToken) unpaused(p) returns (uint256 underlyingAmount) { ... } ```  
# Lines of code  https://github.com/code-423n4/2022-07-swivel/blob/fd36ce96b46943026cb2dfcb76dfa3f884f51c18/Marketplace/Interfaces.sol#L52 https://github.com/code-423n4/2022-07-swivel/blob/fd36ce96b46943026cb2dfcb76dfa3f884f51c18/Marketplace/MarketPlace.sol#L164 https://github.com/code-423n4/2022-07-swivel/blob/fd36ce96b46943026cb2dfcb76dfa3f884f51c18/Swivel/Swivel.sol#L620 https://github.com/Swivel-Finance/gost/blob/a76ac859df049527c3e5df85e706dec6ffa0e2bb/test/swivel/Swivel.sol#L10   # Vulnerability details  ## Impact MarketPlace.authRedeem() call interface ISwivel.authRedeem() but Swivel contract  does not have this method only method  "authRedeemZcToken()" The result will cause MarketPlace.authRedeem() to fail forever, thus causing ZcToken.withdraw() to fail forever  ## Proof of Concept   MarketPlace.sol call ISwivel.authRedeem()  ```   function authRedeem(uint8 p, address u, uint256 m, address f, address t, uint256 a) public authorized(markets[p][u][m].zcToken) returns (uint256 underlyingAmount) {      .....        ISwivel(swivel).authRedeem(p, u, market.cTokenAddr, t, a);       .....     } else {       .....       ISwivel(swivel).authRedeem(p, u, market.cTokenAddr, t, amount);      ....     } ```  Swivel.sol does not have   authRedeem() ,only authRedeemZcToken() ```   function authRedeemZcToken(uint8 p, address u, address c, address t, uint256 a) external authorized(marketPlace) returns(bool) {     // redeem underlying from compounding     if (!withdraw(p, u, c, a)) { revert Exception(7, 0, 0, address(0), address(0)); }     // transfer underlying back to msg.sender     Safe.transfer(IErc20(u), t, a);      return (true);   }  ```  ## Tools Used  ## Recommended Mitigation Steps  Swivel contract need declare "is ISwivel" and change method name Other contracts should also declare "is Iinterfacename" to avoid method name errors like IMarketPlace    
# Lines of code  https://github.com/code-423n4/2022-07-swivel/blob/main/Marketplace/MarketPlace.sol#L77 https://github.com/code-423n4/2022-07-swivel/blob/main/Creator/Creator.sol#L41 https://github.com/code-423n4/2022-07-swivel/blob/main/VaultTracker/VaultTracker.sol#L32   # Vulnerability details  ## Description  `MarketPlace.createMarket()` calls `Creator.create()` which creates an instance of `ZcToken` and a `VaultTracker`. `VaultTracker` takes `msg.sender` as the admin. We know that if contract A calls contract B which calls contract C, `msg.sender` in contract C is the address of B i.e. the `msg.sender` in VaultTracker is the address of the creator contract. However, the creator contract is not able (and not supposed to) interact with the VaultTracker unlike the marketplace contract.  ## Tools used Manual analysis  ## Recommended Mitigation Steps  Modify the constructor of the VaultTracker contract so that the creator contract can pass in msg.sender (MarketPlace’s address) to be used as admin.  
# Lines of code  https://github.com/code-423n4/2022-07-swivel/blob/fd36ce96b46943026cb2dfcb76dfa3f884f51c18/Tokens/ZcToken.sol#L99 https://github.com/code-423n4/2022-07-swivel/blob/fd36ce96b46943026cb2dfcb76dfa3f884f51c18/Tokens/ZcToken.sol#L92   # Vulnerability details  ## Impact  If `maturityRate` is still `0` after maturity deadline (because no transactions setting `maturityRate` have been executed yet), then `previewWithdraw` calculated amount (used by `ZcToken.withdraw` function) is `0` and thus `withdraw` function will send `0` underlying tokens to user, which might be very confusing to user. Subsequent call to the same function will send him correct amount.  The same problem applies to all view functions in `ZcToken` contract - they use saved market `maturityRate`, which can be `0` even past deadline time and functions revert or return `0` in this case.  Incorrect withdrawal behaviour:  1. Bob has some `ZcToken`s. 2. Right at the time of maturity Bob tries to withdraw his underlying tokens by calling `ZcToken.withdraw` with some underlying amount. 3. Instead of receiving corresponding amount, Bob receives nothing (but transaction still succeeds and he uses gas for it).  ## Proof of Concept  1. `withdraw`: calculates `previewAmount` from `previewWithdraw`  https://github.com/code-423n4/2022-07-swivel/blob/fd36ce96b46943026cb2dfcb76dfa3f884f51c18/Tokens/ZcToken.sol#L99   2. `previewWithdraw`: multiplication by `maturityRate` returns 0  https://github.com/code-423n4/2022-07-swivel/blob/fd36ce96b46943026cb2dfcb76dfa3f884f51c18/Tokens/ZcToken.sol#L92  ## Recommended Mitigation Steps  Add `getMaturityRate` function to `ZcToken`, which will return either market's `maturityRate` or (if it's `0`) current market's `exchangeRate`. Use this function instead of `maturityRate` everywhere across `ZcToken`.   
# Lines of code  https://github.com/code-423n4/2022-07-swivel/blob/fd36ce96b46943026cb2dfcb76dfa3f884f51c18/VaultTracker/VaultTracker.sol#L86 https://github.com/code-423n4/2022-07-swivel/blob/fd36ce96b46943026cb2dfcb76dfa3f884f51c18/VaultTracker/VaultTracker.sol#L158   # Vulnerability details  ## should use >= instead of >   ### description  https://github.com/code-423n4/2022-07-swivel/blob/fd36ce96b46943026cb2dfcb76dfa3f884f51c18/VaultTracker/VaultTracker.sol#L86 https://github.com/code-423n4/2022-07-swivel/blob/fd36ce96b46943026cb2dfcb76dfa3f884f51c18/VaultTracker/VaultTracker.sol#L158  the comparison should be 'a >= vlt.notional' instead of a > vlt.notional  otherwise dust amounts will always be left in vlt.notional when calling `removeNotional()` or `transferNotionalFrom()`   
# Lines of code  https://github.com/code-423n4/2022-07-swivel/blob/fd36ce96b46943026cb2dfcb76dfa3f884f51c18/Swivel/Swivel.sol#L473 https://github.com/code-423n4/2022-07-swivel/blob/fd36ce96b46943026cb2dfcb76dfa3f884f51c18/Swivel/Swivel.sol#L495   # Vulnerability details  ## Impact Swivel.scheduleFeeChange(), Swivel.setFee() wouldn't work as expected for user preference.  Users can't react properly after [ScheduleFeeChange() event](https://github.com/code-423n4/2022-07-swivel/blob/fd36ce96b46943026cb2dfcb76dfa3f884f51c18/Swivel/Swivel.sol#L477) because they don't know whether the new fee settings would be better/worse for them.   ## Proof of Concept According to [this explanation](https://github.com/code-423n4/2022-07-swivel#admin-privileges), these functions are to ensure users can feel comfortable.  Btw with Swivel.scheduleFeeChange(), it emits only when to change fee settings without detailed values.  So users don't know whether the new fee settings will be better or worse for them.  Even if the admin is going to set larger feenominators for lower fee percent, users don't know that until actual fees are set using setFee() and such delays are almost meaningless for users.  I think we should announce the detailed fee settings with Swivel.scheduleFeeChange() function so that users can react accordingly after checking new fee settings.   ## Tools Used Solidity Visual Developer of VSCode   ## Recommended Mitigation Steps Recommend adding an additional array - pendingFeenominators [here](https://github.com/code-423n4/2022-07-swivel/blob/fd36ce96b46943026cb2dfcb76dfa3f884f51c18/Swivel/Swivel.sol#L37).  ``` uint16[4] public pendingFeenominators; ```  And scheduleFeeChange() function should have i, d parameters same as current setFee() function so that pendingFeenominators save new settings. (Also keep original fee settings if some indexs aren't updated.)  After that, we can call setFee() without any params and feenominators will be replaced with pendingFeenominators.  
# Summary | Issue | Instances | | ------ | :--------: | | `++i` uses less gas compared to `i++` | 5 | | `uint8` incurs more gas overhead compared to `uint256` | 7 |  | Use named return variable instead of using return | 2 |  | Named return variable is not used | 8 |  | Use != 0 instead of > 0 for a `uint`  | 17 |     # Gas Optimizations  ## `++i` uses less gas compared to `i++`   This is especially relevant for the use of `i++` in `for` loops. This saves 6 gas per loop.   _There are 5 instances of this issue:_  ``` FILE: Swivel/Swivel.sol  100:   unchecked {i++;} ``` https://github.com/code-423n4/2022-07-swivel/blob/main/Swivel/Swivel.sol#L100  ``` FILE: Swivel/Swivel.sol  269:    unchecked {i++;} ``` https://github.com/code-423n4/2022-07-swivel/blob/main/Swivel/Swivel.sol#L269  ``` FILE: Swivel/Swivel.sol  417      unchecked { 418        i++; 419:      } ``` https://github.com/code-423n4/2022-07-swivel/blob/main/Swivel/Swivel.sol#L417-L419  ``` FILE: Swivel/Swivel.sol  510      unchecked { 511        x++; 512:      } ``` https://github.com/code-423n4/2022-07-swivel/blob/main/Swivel/Swivel.sol#L510-L512  ``` FILE: Swivel/Swivel.sol  563      unchecked { 564        i++; 565:      } ``` https://github.com/code-423n4/2022-07-swivel/blob/main/Swivel/Swivel.sol#L563-L565   ## `uint8`, `uint16`,  incurs more gas overhead compared to `uint256`  _There are 7 instances of this issue:_  ``` File: Swivel/Swivel.sol  35:   uint16 constant public MIN_FEENOMINATOR = 33; ``` https://github.com/code-423n4/2022-07-swivel/blob/main/Swivel/Swivel.sol#L35  ``` File: Swivel/Swivel.sol  37:   uint16[4] public feenominators; ``` https://github.com/code-423n4/2022-07-swivel/blob/main/Swivel/Swivel.sol#L37  ``` FILE: Marketplace/MarketPlace.sol  65:   uint8 p, ``` https://github.com/code-423n4/2022-07-swivel/blob/main/Marketplace/MarketPlace.sol#L65  ``` FILE: Creator/Creator.sol  31:   uint8 p, ``` https://github.com/code-423n4/2022-07-swivel/blob/main/Creator/Creator.sol#L31  ``` FILE: Creator/Creator.sol  38:   uint8 d ``` https://github.com/code-423n4/2022-07-swivel/blob/main/Creator/Creator.sol#L38  ``` FILE: VaultTracker/VaultTracker.sol  26:   uint8 public immutable protocol; ``` https://github.com/code-423n4/2022-07-swivel/blob/main/VaultTracker/VaultTracker.sol#L26  ``` FILE: Creator/ZcToken.sol  17:   uint8 public immutable protocol; ``` https://github.com/code-423n4/2022-07-swivel/blob/main/Creator/ZcToken.sol#L17   ## Use named return variable instead of using return  _There are 2 instances of this issue:_  ``` FILE: Swivel/Swivel.sol  697:  return hash; ``` https://github.com/code-423n4/2022-07-swivel/blob/main/Swivel/Swivel.sol#L697  ``` FILE: Swivel/Swivel.sol  207:    return interest; ``` https://github.com/code-423n4/2022-07-swivel/blob/main/Marketplace/MarketPlace.sol#L207   ## Named return variable is not used  Remove the named return variable to save 25 gas per function call.   _There are 8 instances of this issue:_  ``` FILE: Marketplace/Marketplace.sol  148:     function authRedeem(uint8 p, address u, uint256 m, address f, address t, uint256 a) public authorized(markets[p][u][m].zcToken) returns (uint256 underlyingAmount) { ``` https://github.com/code-423n4/2022-07-swivel/blob/main/Marketplace/MarketPlace.sol#L148  ``` FILE: Creator/ZcToken.sol  43:    function convertToUnderlying(uint256 principalAmount) external override view returns (uint256 underlyingAmount){ ``` https://github.com/code-423n4/2022-07-swivel/blob/main/Creator/ZcToken.sol#L43  ``` FILE: Creator/ZcToken.sol  52:   function convertToPrincipal(uint256 underlyingAmount) external override view returns (uint256 principalAmount){ ``` https://github.com/code-423n4/2022-07-swivel/blob/main/Creator/ZcToken.sol#L52  ``` FILE: Creator/ZcToken.sol  61:   function maxRedeem(address owner) external override view returns (uint256 maxPrincipalAmount){ ``` https://github.com/code-423n4/2022-07-swivel/blob/main/Creator/ZcToken.sol#L61  ``` FILE: Creator/ZcToken.sol  70:    function previewRedeem(uint256 principalAmount) external override view returns (uint256 underlyingAmount){ ``` https://github.com/code-423n4/2022-07-swivel/blob/main/Creator/ZcToken.sol#L70  ``` FILE: Creator/ZcToken.sol  79:   function maxWithdraw(address owner) external override view returns (uint256 maxUnderlyingAmount){ ``` https://github.com/code-423n4/2022-07-swivel/blob/main/Creator/ZcToken.sol#L79  ``` FILE: Creator/ZcToken.sol  88:     function previewWithdraw(uint256 underlyingAmount) external override view returns (uint256 principalAmount){ ``` https://github.com/code-423n4/2022-07-swivel/blob/main/Creator/ZcToken.sol#L88  ``` FILE: Creator/ZcToken.sol  98:     function withdraw(uint256 underlyingAmount, address receiver, address holder) external override returns (uint256 principalAmount){ ``` https://github.com/code-423n4/2022-07-swivel/blob/main/Creator/ZcToken.sol#L98  ``` FILE: Creator/ZcToken.sol  124:     function redeem(uint256 principalAmount, address receiver, address holder) external override returns (uint256 underlyingAmount){ ``` https://github.com/code-423n4/2022-07-swivel/blob/main/Creator/ZcToken.sol#L124   ## Use != 0 instead of > 0 for a `uint`  This saves 6 gas per instance.   _There are 17 instances of this issue:_  ``` FILE: Swivel/Swivel.sol  118:    if (amount > o.premium) { revert Exception(5, amount, o.premium, address(0), address(0)); } ``` https://github.com/code-423n4/2022-07-swivel/blob/main/Swivel/Swivel.sol#L118  ``` FILE: Swivel/Swivel.sol  155:   if (amount > o.principal) { revert Exception(5, amount, o.principal, address(0), address(0)); } ``` https://github.com/code-423n4/2022-07-swivel/blob/main/Swivel/Swivel.sol#L155  ``` FILE: Swivel/Swivel.sol  190:   if (amount > o.principal) { revert Exception(5, amount, o.principal, address(0), address(0)); } ``` https://github.com/code-423n4/2022-07-swivel/blob/main/Swivel/Swivel.sol#L190  ``` FILE: Swivel/Swivel.sol  219:   if (amount > o.premium) { revert Exception(5, amount, o.premium, address(0), address(0)); } ``` https://github.com/code-423n4/2022-07-swivel/blob/main/Swivel/Swivel.sol#L219  ``` FILE: Swivel/Swivel.sol  284:  if (amount > o.premium) { revert Exception(5, amount, o.premium, address(0), address(0)); } ``` https://github.com/code-423n4/2022-07-swivel/blob/main/Swivel/Swivel.sol#L284  ``` FILE: Swivel/Swivel.sol  315:   if (amount > o.principal) { revert Exception(5, amount, o.principal, address(0), address(0)); } ``` https://github.com/code-423n4/2022-07-swivel/blob/main/Swivel/Swivel.sol#L315  ``` FILE: Swivel/Swivel.sol  345:   if (amount > o.principal) { revert Exception(5, amount, o.principal, address(0), address(0)); } ``` https://github.com/code-423n4/2022-07-swivel/blob/main/Swivel/Swivel.sol#L345  ``` FILE: Swivel/Swivel.sol  380:   if (amount > o.premium) { revert Exception(5, amount, o.premium, address(0), address(0)); } ``` https://github.com/code-423n4/2022-07-swivel/blob/main/Swivel/Swivel.sol#L380  ``` FILE: VaultTracker/VaultTracker.sol  54:    if (vlt.notional > 0) { ``` https://github.com/code-423n4/2022-07-swivel/blob/main/VaultTracker/VaultTracker.sol#L54  ``` FILE: VaultTracker/VaultTracker.sol  59:   if (maturityRate > 0) { // Calculate marginal interest ``` https://github.com/code-423n4/2022-07-swivel/blob/main/VaultTracker/VaultTracker.sol#L59  ``` FILE: VaultTracker/VaultTracker.sol  86:  if (a > vlt.notional) { revert Exception(31, a, vlt.notional, address(0), address(0)); } ``` https://github.com/code-423n4/2022-07-swivel/blob/main/VaultTracker/VaultTracker.sol#L86  ``` FILE: VaultTracker/VaultTracker.sol  93:   if (maturityRate > 0) { // Calculate marginal interest ``` https://github.com/code-423n4/2022-07-swivel/blob/main/VaultTracker/VaultTracker.sol#L93  ``` FILE: VaultTracker/VaultTracker.sol  123:   if (maturityRate > 0) { // Calculate marginal interest ``` https://github.com/code-423n4/2022-07-swivel/blob/main/VaultTracker/VaultTracker.sol#L123  ``` FILE: VaultTracker/VaultTracker.sol  158:   if (a > from.notional) { revert Exception(31, a, from.notional, address(0), address(0)); } ``` https://github.com/code-423n4/2022-07-swivel/blob/main/VaultTracker/VaultTracker.sol#L158  ``` FILE: VaultTracker/VaultTracker.sol  165:   if (maturityRate > 0) {  ``` https://github.com/code-423n4/2022-07-swivel/blob/main/VaultTracker/VaultTracker.sol#L165  ``` FILE: VaultTracker/VaultTracker.sol  181:   if (to.notional > 0) { ``` https://github.com/code-423n4/2022-07-swivel/blob/main/VaultTracker/VaultTracker.sol#L181  ``` FILE: VaultTracker/VaultTracker.sol  184:   if (maturityRate > 0) {  ``` https://github.com/code-423n4/2022-07-swivel/blob/main/VaultTracker/VaultTracker.sol#L184  ``` FILE: VaultTracker/VaultTracker.sol  224:  if (maturityRate > 0) {  ``` https://github.com/code-423n4/2022-07-swivel/blob/main/VaultTracker/VaultTracker.sol#L222  
# Lines of code  https://github.com/code-423n4/2022-07-swivel/blob/main/Marketplace/MarketPlace.sol#L148   # Vulnerability details  ## Impact Due to missing modifier, User will be able to redeem zcTokens and withdraw underlying even in paused Market. This happens due to missing unpaused(p) modifier  ## Proof of Concept 1. Lets see function definition for authRedeem function  ``` function authRedeem(uint8 p, address u, uint256 m, address f, address t, uint256 a) public authorized(markets[p][u][m].zcToken) returns (uint256 underlyingAmount) ```  2. Observe that unpaused(p) modifier is missing  3. This means if Marketplace is placed under paused state by Admin, then also User can call authRedeem at Marketplace via withdraw/redeem at ZcToken contract.   4. This will allow Users to withdraw in paused state which is incorrect  ## Recommended Mitigation Steps Add unpaused(p) modifier in authRedeem function  ``` function authRedeem(uint8 p, address u, uint256 m, address f, address t, uint256 a) public authorized(markets[p][u][m].zcToken) unpaused(p) returns (uint256 underlyingAmount) { ... } ```  
# Lines of code  https://github.com/code-423n4/2022-07-swivel/blob/fd36ce96b46943026cb2dfcb76dfa3f884f51c18/Marketplace/Interfaces.sol#L52 https://github.com/code-423n4/2022-07-swivel/blob/fd36ce96b46943026cb2dfcb76dfa3f884f51c18/Marketplace/MarketPlace.sol#L164 https://github.com/code-423n4/2022-07-swivel/blob/fd36ce96b46943026cb2dfcb76dfa3f884f51c18/Swivel/Swivel.sol#L620 https://github.com/Swivel-Finance/gost/blob/a76ac859df049527c3e5df85e706dec6ffa0e2bb/test/swivel/Swivel.sol#L10   # Vulnerability details  ## Impact MarketPlace.authRedeem() call interface ISwivel.authRedeem() but Swivel contract  does not have this method only method  "authRedeemZcToken()" The result will cause MarketPlace.authRedeem() to fail forever, thus causing ZcToken.withdraw() to fail forever  ## Proof of Concept   MarketPlace.sol call ISwivel.authRedeem()  ```   function authRedeem(uint8 p, address u, uint256 m, address f, address t, uint256 a) public authorized(markets[p][u][m].zcToken) returns (uint256 underlyingAmount) {      .....        ISwivel(swivel).authRedeem(p, u, market.cTokenAddr, t, a);       .....     } else {       .....       ISwivel(swivel).authRedeem(p, u, market.cTokenAddr, t, amount);      ....     } ```  Swivel.sol does not have   authRedeem() ,only authRedeemZcToken() ```   function authRedeemZcToken(uint8 p, address u, address c, address t, uint256 a) external authorized(marketPlace) returns(bool) {     // redeem underlying from compounding     if (!withdraw(p, u, c, a)) { revert Exception(7, 0, 0, address(0), address(0)); }     // transfer underlying back to msg.sender     Safe.transfer(IErc20(u), t, a);      return (true);   }  ```  ## Tools Used  ## Recommended Mitigation Steps  Swivel contract need declare "is ISwivel" and change method name Other contracts should also declare "is Iinterfacename" to avoid method name errors like IMarketPlace    
# Lines of code  https://github.com/code-423n4/2022-07-swivel/blob/main/Marketplace/MarketPlace.sol#L77 https://github.com/code-423n4/2022-07-swivel/blob/main/Creator/Creator.sol#L41 https://github.com/code-423n4/2022-07-swivel/blob/main/VaultTracker/VaultTracker.sol#L32   # Vulnerability details  ## Description  `MarketPlace.createMarket()` calls `Creator.create()` which creates an instance of `ZcToken` and a `VaultTracker`. `VaultTracker` takes `msg.sender` as the admin. We know that if contract A calls contract B which calls contract C, `msg.sender` in contract C is the address of B i.e. the `msg.sender` in VaultTracker is the address of the creator contract. However, the creator contract is not able (and not supposed to) interact with the VaultTracker unlike the marketplace contract.  ## Tools used Manual analysis  ## Recommended Mitigation Steps  Modify the constructor of the VaultTracker contract so that the creator contract can pass in msg.sender (MarketPlace’s address) to be used as admin.  
# Lines of code  https://github.com/code-423n4/2022-07-swivel/blob/fd36ce96b46943026cb2dfcb76dfa3f884f51c18/Tokens/ZcToken.sol#L99 https://github.com/code-423n4/2022-07-swivel/blob/fd36ce96b46943026cb2dfcb76dfa3f884f51c18/Tokens/ZcToken.sol#L92   # Vulnerability details  ## Impact  If `maturityRate` is still `0` after maturity deadline (because no transactions setting `maturityRate` have been executed yet), then `previewWithdraw` calculated amount (used by `ZcToken.withdraw` function) is `0` and thus `withdraw` function will send `0` underlying tokens to user, which might be very confusing to user. Subsequent call to the same function will send him correct amount.  The same problem applies to all view functions in `ZcToken` contract - they use saved market `maturityRate`, which can be `0` even past deadline time and functions revert or return `0` in this case.  Incorrect withdrawal behaviour:  1. Bob has some `ZcToken`s. 2. Right at the time of maturity Bob tries to withdraw his underlying tokens by calling `ZcToken.withdraw` with some underlying amount. 3. Instead of receiving corresponding amount, Bob receives nothing (but transaction still succeeds and he uses gas for it).  ## Proof of Concept  1. `withdraw`: calculates `previewAmount` from `previewWithdraw`  https://github.com/code-423n4/2022-07-swivel/blob/fd36ce96b46943026cb2dfcb76dfa3f884f51c18/Tokens/ZcToken.sol#L99   2. `previewWithdraw`: multiplication by `maturityRate` returns 0  https://github.com/code-423n4/2022-07-swivel/blob/fd36ce96b46943026cb2dfcb76dfa3f884f51c18/Tokens/ZcToken.sol#L92  ## Recommended Mitigation Steps  Add `getMaturityRate` function to `ZcToken`, which will return either market's `maturityRate` or (if it's `0`) current market's `exchangeRate`. Use this function instead of `maturityRate` everywhere across `ZcToken`.   
# Lines of code  https://github.com/code-423n4/2022-07-swivel/blob/fd36ce96b46943026cb2dfcb76dfa3f884f51c18/VaultTracker/VaultTracker.sol#L86 https://github.com/code-423n4/2022-07-swivel/blob/fd36ce96b46943026cb2dfcb76dfa3f884f51c18/VaultTracker/VaultTracker.sol#L158   # Vulnerability details  ## should use >= instead of >   ### description  https://github.com/code-423n4/2022-07-swivel/blob/fd36ce96b46943026cb2dfcb76dfa3f884f51c18/VaultTracker/VaultTracker.sol#L86 https://github.com/code-423n4/2022-07-swivel/blob/fd36ce96b46943026cb2dfcb76dfa3f884f51c18/VaultTracker/VaultTracker.sol#L158  the comparison should be 'a >= vlt.notional' instead of a > vlt.notional  otherwise dust amounts will always be left in vlt.notional when calling `removeNotional()` or `transferNotionalFrom()`   
