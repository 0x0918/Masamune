# Lines of code  https://github.com/code-423n4/2022-10-paladin/blob/main/contracts/WardenPledge.sol#L451-L452 https://github.com/code-423n4/2022-10-paladin/blob/main/contracts/WardenPledge.sol#L469   # Vulnerability details  ## Impact Pledge can be silently closed by calling retrievePledgeRewards.  ## Proof of Concept The comments for `retrievePledgeRewards` says: https://github.com/code-423n4/2022-10-paladin/blob/main/contracts/WardenPledge.sol#L451-L452 ```     /**     * @notice Retrieves all non distributed rewards from a closed Pledge     * @dev Retrieves all non distributed rewards from a closed Pledge & send them to the given receiver     * @param pledgeId ID fo the Pledge     * @param receiver Address to receive the remaining rewards     */ ``` There's no line of code in `retrievePledgeRewards` method to ensure the pledge is indeed closed, instead the pledge is set to `closed` state if it is not closed. https://github.com/code-423n4/2022-10-paladin/blob/main/contracts/WardenPledge.sol#L469 ```solidity if(!pledgeParams.closed) pledgeParams.closed = true;  ``` This implementation doesn't follow the sepc and the pledge is closed silently(without triggering the `ClosePledge` event) if the pledge is not closed, which could lead to the pledge creator unexpectedly close the pledge that he doesn't intend to.  ## Tools Used manual review  ## Recommended Mitigation Steps `retrievePledgeRewards` can only retrieve distribution rewards from a closed pledge. ```solidity function retrievePledgeRewards(uint256 pledgeId, address receiver) external whenNotPaused nonReentrant {        ......          // Get the current remaining amount of rewards not distributed for the Pledge         uint256 remainingAmount = pledgeAvailableRewardAmounts[pledgeId];          if (!pledgeParams.closed) revert Errors.PledgeNotClosed();          if(remainingAmount > 0) {             // Transfer the non used rewards and reset storage             pledgeAvailableRewardAmounts[pledgeId] = 0;              IERC20(pledgeParams.rewardToken).safeTransfer(receiver, remainingAmount);              emit RetrievedPledgeRewards(pledgeId, receiver, remainingAmount);          }     } ```
