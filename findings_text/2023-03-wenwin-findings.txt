Judge has assessed an item in Issue #345 as 2 risk. The relevant finding follows:   Issue #2 - Undermining the fairness of the protocol in swapSource() and possibilities for stealing a jackpot
Judge has assessed an item in Issue #345 as 2 risk. The relevant finding follows:   Issue #1 - An attacker can leave the protocol in a "drawing" state for extended period of time
See the markdown file with the details of this report [here](https://github.com/code-423n4/2023-03-wenwin-findings/blob/main/data/juancito-Q.md).
See the markdown file with the details of this report [here](https://github.com/code-423n4/2023-03-wenwin-findings/blob/main/data/seeu-Q.md).
See the markdown file with the details of this report [here](https://github.com/code-423n4/2023-03-wenwin-findings/blob/main/data/lukris02-Q.md).
See the markdown file with the details of this report [here](https://github.com/code-423n4/2023-03-wenwin-findings/blob/main/data/adriro-G.md).
See the markdown file with the details of this report [here](https://github.com/code-423n4/2023-03-wenwin-findings/blob/main/data/adriro-Q.md).
See the markdown file with the details of this report [here](https://github.com/code-423n4/2023-03-wenwin-findings/blob/main/data/0xSmartContract-G.md).
See the markdown file with the details of this report [here](https://github.com/code-423n4/2023-03-wenwin-findings/blob/main/data/nadin-Q.md).
See the markdown file with the details of this report [here](https://github.com/code-423n4/2023-03-wenwin-findings/blob/main/data/horsefacts-Q.md).
See the markdown file with the details of this report [here](https://github.com/code-423n4/2023-03-wenwin-findings/blob/main/data/MohammedRizwan-Q.md).
# Lines of code  https://github.com/code-423n4/2023-03-wenwin/blob/main/src/LotteryMath.sol#L24 https://github.com/code-423n4/2023-03-wenwin/blob/main/src/Lottery.sol#L164-L166 https://github.com/code-423n4/2023-03-wenwin/blob/main/src/Lottery.sol#L271-L277   # Vulnerability details  ## Constant DRAWS_PER_YEAR will break if drawPeriod != 1 week Currently the constant `DRAWS_PER_YEAR` is set to 52 as the Lottery expects the drawPeriod to be 1 week.  The documentation states that a user has 1 year to claim his winnings https://docs.wenwin.com/wenwin-lottery/the-game/prizes#claiming-prizes  If the drawPeriod is set < 7 days it will break this and the user has less time than 1 year to claim his price.  For example if the drawPeriod will be 1 day (86400) there should be 365 DRAWS_PER_YEAR, but as it is fixed to 52, the user only has 52 days to claim his rewards and after that it's not possible anymore.  ## Proof of Concept If the drawPeriod is not set to 7 days (604800 seconds) it will return a unclaimedJackpot early and also will prevent user to claim their winnings.  ```solidity File: src/Lottery.sol 159:     function claimable(uint256 ticketId) external view override returns (uint256 claimableAmount, uint8 winTier) { 160:         TicketInfo memory ticketInfo = ticketsInfo[ticketId]; 161:         if (!ticketInfo.claimed) { 162:             uint120 _winningTicket = winningTicket[ticketInfo.drawId]; 163:             winTier = TicketUtils.ticketWinTier(ticketInfo.combination, _winningTicket, selectionSize, selectionMax); 164:             if (block.timestamp <= ticketRegistrationDeadline(ticketInfo.drawId + LotteryMath.DRAWS_PER_YEAR)) { 165:                 claimableAmount = winAmount[ticketInfo.drawId][winTier]; 166:             } 167:         } 168:     }  File: src/Lottery.sol 271:     function returnUnclaimedJackpotToThePot() private { 272:         if (currentDraw >= LotteryMath.DRAWS_PER_YEAR) { 273:             uint128 drawId = currentDraw - LotteryMath.DRAWS_PER_YEAR; 274:             uint256 unclaimedJackpotTickets = unclaimedCount[drawId][winningTicket[drawId]]; 275:             currentNetProfit += int256(unclaimedJackpotTickets * winAmount[drawId][selectionSize]); 276:         } 277:     } ```  ## Tools Used manual review  ## Recommended Mitigation Steps Use a fixed `drawPeriod` of 604800 or change the logic in the function `claimable` and `returnUnclaimedJackpotToThePot` to use a calculated DRAWS_PER_YEAR variable like the following:  ```solidity function getDrawsPerYear() public view returns (uint128) {     return uint128(365 days / drawPeriod); } ```
See the markdown file with the details of this report [here](https://github.com/code-423n4/2023-03-wenwin-findings/blob/main/data/zaskoh-Q.md).
See the markdown file with the details of this report [here](https://github.com/code-423n4/2023-03-wenwin-findings/blob/main/data/tnevler-Q.md).
See the markdown file with the details of this report [here](https://github.com/code-423n4/2023-03-wenwin-findings/blob/main/data/Udsen-Q.md).
See the markdown file with the details of this report [here](https://github.com/code-423n4/2023-03-wenwin-findings/blob/main/data/martin-Q.md).
See the markdown file with the details of this report [here](https://github.com/code-423n4/2023-03-wenwin-findings/blob/main/data/SAAJ-Q.md).
See the markdown file with the details of this report [here](https://github.com/code-423n4/2023-03-wenwin-findings/blob/main/data/peanuts-Q.md).
See the markdown file with the details of this report [here](https://github.com/code-423n4/2023-03-wenwin-findings/blob/main/data/descharre-G.md).
See the markdown file with the details of this report [here](https://github.com/code-423n4/2023-03-wenwin-findings/blob/main/data/catellatech-Q.md).
See the markdown file with the details of this report [here](https://github.com/code-423n4/2023-03-wenwin-findings/blob/main/data/0xAgro-Q.md).
# Lines of code  https://github.com/code-423n4/2023-03-wenwin/blob/91b89482aaedf8b8feb73c771d11c257eed997e8/src/staking/Staking.sol#L91 https://github.com/code-423n4/2023-03-wenwin/blob/91b89482aaedf8b8feb73c771d11c257eed997e8/src/staking/Staking.sol#L97   # Vulnerability details  ## Impact  Getting rewards from staking Lottery token can be blocked if used in conjunction with a reward token that does not support zero value transfer. Such token is https://github.com/d-xo/weird-erc20#revert-on-zero-value-transfers   ## Proof of Concept  Lets examine the following scenario:  For the current draw we have accumulated some non zero rewards.  1. User A calls for the first time `getReward`   https://github.com/code-423n4/2023-03-wenwin/blob/91b89482aaedf8b8feb73c771d11c257eed997e8/src/staking/Staking.sol#L91  This user has earned some reward by staking so the call proceeds internally by calling `Lottery#claimRewards(LotteryRewardType.STAKING)` which will transfer **all accumulated rewards to the staking contract at once** so on next user claim this transferred value can be distributed from the staking contract to the claiming users.  https://github.com/code-423n4/2023-03-wenwin/blob/91b89482aaedf8b8feb73c771d11c257eed997e8/src/staking/Staking.sol#L97  `claimRewards` internally calls `dueTicketsSoldAndReset` which will for the first time return `claimedAmount` value that is in our scenario greater than zero and will succeed to transfer this value to the staking (which is the current `beneficiary`) contract with:  ```solidity rewardToken.safeTransfer(beneficiary, claimedAmount); ``` From the staking contract will go directly to the user A that claimed its reward  https://github.com/code-423n4/2023-03-wenwin/blob/91b89482aaedf8b8feb73c771d11c257eed997e8/src/staking/Staking.sol#L98  2. When a second user B comes around and tries to call `getReward` it will revert because   `dueTicketsSoldAndReset` has already reset the `claimedAmount` to zero the first time and now will fail when trying to transfer zero amount from the reward token to the staking contract.  ## Tools Used Manual review  ## Recommended Mitigation Steps  ```diff  function claimRewards(LotteryRewardType rewardType) external override returns (uint256 claimedAmount) {         // audit-ok : someone (staking contract) need/is to call/ing this to get staking reward         // audit-ok : is recipent correct => it is         address beneficiary = (rewardType == LotteryRewardType.FRONTEND) ? msg.sender : stakingRewardRecipient;         claimedAmount = LotteryMath.calculateRewards(ticketPrice, dueTicketsSoldAndReset(beneficiary), rewardType);          emit ClaimedRewards(beneficiary, claimedAmount, rewardType); + +       if (claimedAmount > 0) +           rewardToken.safeTransfer(beneficiary, claimedAmount);  -        rewardToken.safeTransfer(beneficiary, claimedAmount);     } ```
See the markdown file with the details of this report [here](https://github.com/code-423n4/2023-03-wenwin-findings/blob/main/data/hunter_w3b-G.md).
See the markdown file with the details of this report [here](https://github.com/code-423n4/2023-03-wenwin-findings/blob/main/data/Pheonix-G.md).
See the markdown file with the details of this report [here](https://github.com/code-423n4/2023-03-wenwin-findings/blob/main/data/Bason-Q.md).
# Lines of code  https://github.com/code-423n4/2023-03-wenwin/blob/a260ecba74720c631ab06ecdd67167317b976b60/src/RNSourceController.sol#L89-L104   # Vulnerability details  ## Impact  The protocol uses the direct funding method of VRF V2. This method requires that the consuming contracts have sufficient LINK tokens before they request randomness. If there are not enough LINK tokens, the request will be reverted. This creates an attack vector: If the lottery contracts run out of LINK tokens, after maxFailedAttempts, a new untrusted source can be swapped in. This poses a risk of manipulating the random source.  https://github.com/code-423n4/2023-03-wenwin/blob/a260ecba74720c631ab06ecdd67167317b976b60/src/RNSourceController.sol#L89-L104  https://docs.chain.link/vrf/v2/direct-funding          Make sure that your consuming contracts are funded with enough LINK tokens to cover the transaction costs. If the consuming contract doesnâ€™t have enough LINK tokens, your request will revert.  ## Proof of Concept   ## Tools Used  Manually Chainlink docs  ## Recommended Mitigation Steps  Adding mechanism to evaluate the LINK token balance and refill it.   One possible mechanism to evaluate and refill the LINK token balance is to check it after each draw. If it falls below a certain level, the Lottery contract can call UNISWAP to swap some DAI for LINK and record the transaction as an expense that reduces the lottery net profit.
# Lines of code  https://github.com/code-423n4/2023-03-wenwin/blob/a260ecba74720c631ab06ecdd67167317b976b60/src/staking/StakedTokenLock.sol#L39-L41   # Vulnerability details  ## Impact  According to the design and communication to investors, the tokens that are staked will be locked for a certain period before they can be released to the owner account. However, the owner can still withdraw the tokens if the `block.timestamp` exceeds the `depositDeadline`.  We do not suspect that the owner is a malicious account. But if the code does not match the specifications and documents in a contract that holds critical assets, it can raise questions about potential risks from investors and holders of LOT.   ## Proof of Concept  If the `block.timestamp < depositDeadline`, owner can still withdraw the tokens. https://github.com/code-423n4/2023-03-wenwin/blob/a260ecba74720c631ab06ecdd67167317b976b60/src/staking/StakedTokenLock.sol#L39-L41  ## Tools Used  Manual  ## Recommended Mitigation Steps  Change that if the block.timestamp before releasing period, cannot withdraw tokens.  ```diff -    if (block.timestamp > depositDeadline && block.timestamp < depositDeadline + lockDuration) {  +    if (block.timestamp < depositDeadline + lockDuration) {            revert LockPeriodOngoing();     } ```
See the markdown file with the details of this report [here](https://github.com/code-423n4/2023-03-wenwin-findings/blob/main/data/cryptostellar5-Q.md).
See the markdown file with the details of this report [here](https://github.com/code-423n4/2023-03-wenwin-findings/blob/main/data/erictee-Q.md).
# Lines of code  https://github.com/code-423n4/2023-03-wenwin/blob/91b89482aaedf8b8feb73c771d11c257eed997e8/src/LotteryToken.sol#L23   # Vulnerability details  ## Impact LotteryToken is the native token of Wenwin Lottery. It can be staked (stakers receive a portion of ticket sales) and referral rewards.   considering that this token is the native token of this project, the security of the tokens and economic design is very important for this token.  In the LotteryToken.sol#L23 the role owner has authority over the mint function. Any compromise to the owner account may allow the hacker to take advantage of this authority and mint any LotteryToken to any address.  ## Proof of Concept In the LotteryToken.sol#L23 the role owner has authority over the mint function. Any compromise to the owner account may allow the hacker to take advantage of this authority and mint any LotteryToken to any address. function mint(address account, uint256 amount) external override {  if (msg.sender != owner) {  revert UnauthorizedMint();  }  _mint(account, amount);  }  Unauthorized token minting can cause the loss of users' funds and the destruction of the project.  ## Tools Used Manually  ## Recommended Mitigation Steps strongly recommend to use multi-sign to prevent a single point of failure due to the private key compromised.
See the markdown file with the details of this report [here](https://github.com/code-423n4/2023-03-wenwin-findings/blob/main/data/glcanvas-Q.md).
See the markdown file with the details of this report [here](https://github.com/code-423n4/2023-03-wenwin-findings/blob/main/data/rokso-G.md).
See the markdown file with the details of this report [here](https://github.com/code-423n4/2023-03-wenwin-findings/blob/main/data/Rolezn-G.md).
See the markdown file with the details of this report [here](https://github.com/code-423n4/2023-03-wenwin-findings/blob/main/data/ReyAdmirado-G.md).
See the markdown file with the details of this report [here](https://github.com/code-423n4/2023-03-wenwin-findings/blob/main/data/yongskiws-G.md).
See the markdown file with the details of this report [here](https://github.com/code-423n4/2023-03-wenwin-findings/blob/main/data/matrix_0wl-G.md).
See the markdown file with the details of this report [here](https://github.com/code-423n4/2023-03-wenwin-findings/blob/main/data/JCN-G.md).
See the markdown file with the details of this report [here](https://github.com/code-423n4/2023-03-wenwin-findings/blob/main/data/Sathish9098-G.md).
See the markdown file with the details of this report [here](https://github.com/code-423n4/2023-03-wenwin-findings/blob/main/data/0xnev-Q.md).
See the markdown file with the details of this report [here](https://github.com/code-423n4/2023-03-wenwin-findings/blob/main/data/georgits-Q.md).
See the markdown file with the details of this report [here](https://github.com/code-423n4/2023-03-wenwin-findings/blob/main/data/Madalad-Q.md).
See the markdown file with the details of this report [here](https://github.com/code-423n4/2023-03-wenwin-findings/blob/main/data/Madalad-G.md).
