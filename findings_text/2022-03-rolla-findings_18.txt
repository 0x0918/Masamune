# Lines of code  https://github.com/code-423n4/2022-03-rolla/blob/main/quant-protocol/contracts/pricing/oracle/ChainlinkOracleManager.sol#L128 https://github.com/code-423n4/2022-03-rolla/blob/main/quant-protocol/contracts/pricing/oracle/ChainlinkOracleManager.sol#L30 https://github.com/code-423n4/2022-03-rolla/blob/main/quant-protocol/contracts/pricing/oracle/ChainlinkOracleManager.sol#L107 https://github.com/code-423n4/2022-03-rolla/blob/main/quant-protocol/contracts/pricing/oracle/ChainlinkOracleManager.sol#L250   # Vulnerability details  ## Impact The `ChainlinkOracleManager` contract expects every oracle to provide the price data with 8 decimals. But, that's not always the case. Depending on the asset, the decimals could also be 16. In that case, the protocol would continue the computation with the wrong price which brings up a whole lot of problems.  List of assets and their decimals: https://docs.chain.link/docs/ethereum-addresses/#Ethereum%20Mainnet  ## Proof of Concept The received price is standardized to a `FixedPointInt` using the decimals value: https://github.com/code-423n4/2022-03-rolla/blob/main/quant-protocol/contracts/pricing/oracle/ChainlinkOracleManager.sol#L128  The contract uses a constant value `8` for that.  ## Tools Used none  ## Recommended Mitigation Steps Use `aggregator.decimals()` to get the correct number of decimals for the current asset. Use that for the computation  
