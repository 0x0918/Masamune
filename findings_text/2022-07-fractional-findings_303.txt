# Summary | Issue | Instances | | ------ | :--------: | | `++i` uses less gas compared to `i++` | 3 | | `uint8` incures more gas overhead compared to `uint256` | 2 | | Use custom errors instead of `revert()`/`require()` to save gas | 3 | | Add `require()` earlier in functions | 1 | | Cache array length outside of loop | 4 | | `internal` functions that are only called once can be inlined to save gas | 5 | | Return values directly without an intermediate return variable | 6 |  | Let the default value `0` be applied to variables initialized to `0` | 2 | | Functions guaranteed to revert when called by normal users can be marked `payable` | 8 | | `public` functions not called by the contract should be declared `external` | 6 |     # Gas Optimisations  ## `++i` uses less gas compared to `i++`   This is especially relevant for the use of `i++` in `for` loops. This saves 6 gas per loop.   _There are 3 instances of this issue:_  ``` File: src/Vault.sol  78     for (uint256 i = 0; i < length; i++) { 79         methods[_selectors[i]] = _plugins[i]; 80:    } ``` https://github.com/code-423n4/2022-07-fractional/blob/e2c5a962a94106f9495eb96769d7f60f7d5b14c9/src/Vault.sol#L78-L80  ``` File: src/Vault.sol  104    for (uint256 i = 0; i < length; i++) { 105        methods[_selectors[i]] = address(0); 106:   } ``` https://github.com/code-423n4/2022-07-fractional/blob/e2c5a962a94106f9495eb96769d7f60f7d5b14c9/src/Vault.sol#L104-L106  ``` File:  src/utils/MerkelBase.sol  186    while (x > 0) { 187       x >>= 1; 188       ceil++; 189:   } ``` https://github.com/code-423n4/2022-07-fractional/blob/e2c5a962a94106f9495eb96769d7f60f7d5b14c9/src/utils/MerkleBase.sol#L186-L189  ## `uint8` incures more gas overhead compared to `uint256`  _There are 2 instances of this issue:_  ``` File: src/FERC1155.sol  98    function permit( 99        address _owner, 100        address _operator, 101        uint256 _id, 102        bool _approved, 103        uint256 _deadline, 104        uint8 _v, 105        bytes32 _r, 106        bytes32 _s 107:    ) external { ``` https://github.com/code-423n4/2022-07-fractional/blob/e2c5a962a94106f9495eb96769d7f60f7d5b14c9/src/FERC1155.sol#L98-L107  ``` File: src/FERC1155.sol  145    function permitAll( 146        address _owner, 147        address _operator, 148        bool _approved, 149        uint256 _deadline, 150        uint8 _v, 151        bytes32 _r, 152        bytes32 _s 153:    ) external { ``` https://github.com/code-423n4/2022-07-fractional/blob/e2c5a962a94106f9495eb96769d7f60f7d5b14c9/src/FERC1155.sol#L145-L153  ## Use custom errors instead of `revert()`/`require()` to save gas Custom errors are available from solidity version 0.8.4. The instances below match or exceed that version.  _There are 3 instances of this issue:_  ``` File: src/FERC1155.sol  263  require( 264  msg.sender == _from || 265   isApprovedForAll[_from][msg.sender] || 267   isApproved[_from][msg.sender][_id], 268  "NOT_AUTHORIZED" 269: ); ``` https://github.com/code-423n4/2022-07-fractional/blob/e2c5a962a94106f9495eb96769d7f60f7d5b14c9/src/FERC1155.sol#L263-L269  ``` File: src/FERC1155.sol  275  require( 276  _to.code.length == 0 277   ? _to != address(0) 278   : INFTReceiver(_to).onERC1155Received( 279    msg.sender, 280    _from, 281    _id, 282    _amount, 283    _data 284   ) == INFTReceiver.onERC1155Received.selector, 285  "UNSAFE_RECIPIENT" 286:  ); ``` https://github.com/code-423n4/2022-07-fractional/blob/e2c5a962a94106f9495eb96769d7f60f7d5b14c9/src/FERC1155.sol#L275-L286  ``` File: src/FERC1155.sol  297: require(metadata[_id] != address(0), "NO METADATA"); ``` https://github.com/code-423n4/2022-07-fractional/blob/e2c5a962a94106f9495eb96769d7f60f7d5b14c9/src/FERC1155.sol#L297   ## Add `require()` earlier in functions This saves gas on operations between the start of the function and where the `require` function is actually being called.   _There is 1 instance of this issue:_  ``` File: src/FERC1155.sol  276  require( 277  _to.code.length == 0 278   ? _to != address(0) 279   : INFTReceiver(_to).onERC1155Received( 280    msg.sender, 281    _from, 282    _id, 283    _amount, 284    _data 285   ) == INFTReceiver.onERC1155Received.selector, 286  "UNSAFE_RECIPIENT" 287:  ); ``` https://github.com/code-423n4/2022-07-fractional/blob/e2c5a962a94106f9495eb96769d7f60f7d5b14c9/src/FERC1155.sol#L276-L287   ## Cache array length outside of loop Reading array length at each iteration of the loop takes 6 gas (3 for mload and 3 to place memory_offset) in the stack.  Caching the array length in the stack saves around 3 gas per iteration. To do this, create a variables containing the array length before the loop.    _There are 4 instances of this issue:_  ``` File: src/modules/Buyout.sol  276:  for (uint256 i; i < permissions.length; ) { ``` https://github.com/code-423n4/2022-07-fractional/blob/e2c5a962a94106f9495eb96769d7f60f7d5b14c9/src/modules/Buyout.sol#L454  ``` File: src/utils/MerkleBase.sol  51:  for (uint256 i = 0; i < _proof.length; ++i) { ``` https://github.com/code-423n4/2022-07-fractional/blob/e2c5a962a94106f9495eb96769d7f60f7d5b14c9/src/utils/MerkleBase.sol#L51  ``` File: src/utils/MerkleBase.sol  63:   while (_data.length > 1) { ``` https://github.com/code-423n4/2022-07-fractional/blob/e2c5a962a94106f9495eb96769d7f60f7d5b14c9/src/utils/MerkleBase.sol#L63  ``` File: src/utils/MerkleBase.sol  110: for (uint256 i; i < result.length; ++i) { ``` https://github.com/code-423n4/2022-07-fractional/blob/e2c5a962a94106f9495eb96769d7f60f7d5b14c9/src/utils/MerkleBase.sol#L110   ## `internal` functions that are only called once can be inlined to save gas Depending on the function contents, this will save 20~40 gas by omiting two JUMP operations and stack operations needed for the function call.   _There are 5 instances of this issue:_  ``` File: src/FERC1155.sol  324  function _computePermitStructHash( 325    address _owner, 326    address _operator, 327    uint256 _id, 328    bool _approved, 329    uint256 _deadline 330:  ) internal returns (bytes32) { ``` https://github.com/code-423n4/2022-07-fractional/blob/e2c5a962a94106f9495eb96769d7f60f7d5b14c9/src/FERC1155.sol#L324-L330  ``` File: src/FERC1155.sol  350    function _computePermitAllStructHash( 351        address _owner, 352        address _operator, 353        bool _approved, 354        uint256 _deadline 355:   ) internal returns (bytes32) { ``` https://github.com/code-423n4/2022-07-fractional/blob/e2c5a962a94106f9495eb96769d7f60f7d5b14c9/src/FERC1155.sol#L350-L355  ``` File: src/Vault.sol  142    function _revertedWithReason(bytes memory _response) internal pure { 143        assembly { 144            let returndata_size := mload(_response) 145            revert(add(32, _response), returndata_size) 146        } 147:    } ``` https://github.com/code-423n4/2022-07-fractional/blob/e2c5a962a94106f9495eb96769d7f60f7d5b14c9/src/Vault.sol#L142-L147  ``` File: src/utils/Multicall.sol  39    function _revertedWithReason(bytes memory _response) internal pure { 40        assembly { 41            let returndata_size := mload(_response) 42            revert(add(32, _response), returndata_size) 43        } 44:    } ``` https://github.com/code-423n4/2022-07-fractional/blob/e2c5a962a94106f9495eb96769d7f60f7d5b14c9/src/utils/Multicall.sol#L39-L44  ``` File: src/utils/SafeSend.sol  18    function _attemptETHTransfer(address _to, uint256 _value) 19        internal 20        returns (bool success) 21:    { ``` https://github.com/code-423n4/2022-07-fractional/blob/e2c5a962a94106f9495eb96769d7f60f7d5b14c9/src/utils/SafeSend.sol#L18-L21  ## Return values directly without an intermediate return variable Initializing a return variable for a function, then assigning a value to it requires more gas compared to simply returning the value, as long as the variable is not being used elsewhere in the function.   _There are 6 instances of this issue:_  ``` File: src/Vault.sol  67:  (success, response) = _execute(_target, _data); ``` https://github.com/code-423n4/2022-07-fractional/blob/e2c5a962a94106f9495eb96769d7f60f7d5b14c9/src/Vault.sol#L49-L68  ``` File: src/VaultFactory.sol  26    function deploy() external returns (address payable vault) { 27        vault = deployFor(msg.sender); 28:    } ``` https://github.com/code-423n4/2022-07-fractional/blob/e2c5a962a94106f9495eb96769d7f60f7d5b14c9/src/VaultFactory.sol#L26-L28  ``` File: src/VaultFactory.sol  49:        vault = address(uint160(uint256(data))); ``` https://github.com/code-423n4/2022-07-fractional/blob/e2c5a962a94106f9495eb96769d7f60f7d5b14c9/src/VaultFactory.sol#L33-L50  ``` File: src/VaultRegistry.sol  51    function create( 52        bytes32 _merkleRoot, 53       address[] memory _plugins, 54        bytes4[] memory _selectors 55    ) external returns (address vault) { 56        vault = _deployVault(_merkleRoot, address(fNFT), _plugins, _selectors); 57:   } ``` https://github.com/code-423n4/2022-07-fractional/blob/e2c5a962a94106f9495eb96769d7f60f7d5b14c9/src/VaultRegistry.sol#L51-L57  ``` File: src/VaultRegistry.sol  83    function createCollection( 84        bytes32 _merkleRoot, 85        address[] memory _plugins, 86        bytes4[] memory _selectors 87    ) external returns (address vault, address token) { 88        (vault, token) = createCollectionFor( 89            _merkleRoot, 90            msg.sender, 91            _plugins, 92            _selectors 93        ); 94:   } ``` https://github.com/code-423n4/2022-07-fractional/blob/e2c5a962a94106f9495eb96769d7f60f7d5b14c9/src/VaultRegistry.sol#L83-L94  ``` File: src/VaultRegistry.sol  102    function createInCollection( 103        bytes32 _merkleRoot, 104        address _token, 105        address[] memory _plugins, 106        bytes4[] memory _selectors 107    ) external returns (address vault) { 108        address controller = FERC1155(_token).controller(); 109        if (controller != msg.sender) 110            revert InvalidController(controller, msg.sender); 111        vault = _deployVault(_merkleRoot, _token, _plugins, _selectors); 112:   } ``` https://github.com/code-423n4/2022-07-fractional/blob/e2c5a962a94106f9495eb96769d7f60f7d5b14c9/src/VaultRegistry.sol#L102-L112  ## Let the default value `0` be applied to variables initialized to `0` Letting the default value of `0` be initialized to variables costs less gas compared to initializing it to a value of `0`.   _There are 2 instances of this issue:_  ``` File: src/Vault.sol  78:   for (uint256 i = 0; i < length; i++) { ``` https://github.com/code-423n4/2022-07-fractional/blob/e2c5a962a94106f9495eb96769d7f60f7d5b14c9/src/Vault.sol#L78  ``` File: src/utils/MerkleBase.sol  51:   for (uint256 i = 0; i < _proof.length; ++i) { ``` https://github.com/code-423n4/2022-07-fractional/blob/e2c5a962a94106f9495eb96769d7f60f7d5b14c9/src/utils/MerkleBase.sol#L51   ## Functions guaranteed to revert when called by normal users can be marked `payable`  For example, a function modifier such as `onlyController` is used. Adding the `payable` marker will lower gas cost for legitimate callers because the compiler will not include checks for whether a payment was provided. Saves about 21 gas per call to the function, as well as saving on deployment cost.   _There are 8 instances of this issue:_  ``` File: src/FERC1155.sol  56    function burn( 57        address _from, 58        uint256 _id, 59        uint256 _amount 60:    ) external onlyRegistry { ``` https://github.com/code-423n4/2022-07-fractional/blob/e2c5a962a94106f9495eb96769d7f60f7d5b14c9/src/FERC1155.sol#L56-L60  ``` File: src/FERC1155.sol  79    function mint( 80        address _to, 81        uint256 _id, 82        uint256 _amount, 83        bytes memory _data 84:   ) external onlyRegistry { ``` https://github.com/code-423n4/2022-07-fractional/blob/e2c5a962a94106f9495eb96769d7f60f7d5b14c9/src/FERC1155.sol#L79-L84  ``` File: src/FERC1155.sol  198:   function setContractURI(string calldata _uri) external onlyController { ``` https://github.com/code-423n4/2022-07-fractional/blob/e2c5a962a94106f9495eb96769d7f60f7d5b14c9/src/FERC1155.sol#L198  ``` File: src/FERC1155.sol  205    function setMetadata(address _metadata, uint256 _id) 206        external 207        onlyController 208:   { ``` https://github.com/code-423n4/2022-07-fractional/blob/e2c5a962a94106f9495eb96769d7f60f7d5b14c9/src/FERC1155.sol#L205-L208  ``` File: src/FERC1155.sol  217    function setRoyalties( 218        uint256 _id, 219        address _receiver, 220        uint256 _percentage 221:   ) external onlyController { ``` https://github.com/code-423n4/2022-07-fractional/blob/e2c5a962a94106f9495eb96769d7f60f7d5b14c9/src/FERC1155.sol#L217-L221  ``` File: src/FERC1155.sol  229    function transferController(address _newController) 230        external 231        onlyController 232:   { ``` https://github.com/code-423n4/2022-07-fractional/blob/e2c5a962a94106f9495eb96769d7f60f7d5b14c9/src/FERC1155.sol#L229-L232  ``` File: src/VaultRegistry.sol  39    function burn(address _from, uint256 _value) external { 40        VaultInfo memory info = vaultToToken[msg.sender]; 41        uint256 id = info.id; 42        if (id == 0) revert UnregisteredVault(msg.sender); 43        FERC1155(info.token).burn(_from, id, _value); 44:    } ``` https://github.com/code-423n4/2022-07-fractional/blob/e2c5a962a94106f9495eb96769d7f60f7d5b14c9/src/VaultRegistry.sol#L39-L44  ``` File: src/VaultRegistry.sol  117    function mint(address _to, uint256 _value) external { 118        VaultInfo memory info = vaultToToken[msg.sender]; 119        uint256 id = info.id; 120        if (id == 0) revert UnregisteredVault(msg.sender); 121        FERC1155(info.token).mint(_to, id, _value, ""); 122:   } ``` https://github.com/code-423n4/2022-07-fractional/blob/e2c5a962a94106f9495eb96769d7f60f7d5b14c9/src/VaultRegistry.sol#L117-L122  ## `public` functions not called by the contract should be declared `external`  Contracts are allowed to override their parents' functions and change the visibility from `external` to `public` if required.    _There are 6 instances of this issue:_  ``` File: src/FERC1155.sol  256    function safeTransferFrom( 257        address _from, 258        address _to, 259        uint256 _id, 260        uint256 _amount, 261        bytes memory _data 262:    ) public override(ERC1155, IFERC1155) { ``` https://github.com/code-423n4/2022-07-fractional/blob/e2c5a962a94106f9495eb96769d7f60f7d5b14c9/src/FERC1155.sol#L256-L262  ``` File: src/FERC1155.sol  291    function uri(uint256 _id) 292        public 293        view 294        override(ERC1155, IFERC1155) 295        returns (string memory) 296:    { ``` https://github.com/code-423n4/2022-07-fractional/blob/e2c5a962a94106f9495eb96769d7f60f7d5b14c9/src/FERC1155.sol#L291-L296  ``` File: src/utils/MerkleBase.sol  43    function verifyProof( 44        bytes32 _root, 45        bytes32[] memory _proof, 46        bytes32 _valueToProve 47:   ) public pure returns (bool) { ``` https://github.com/code-423n4/2022-07-fractional/blob/e2c5a962a94106f9495eb96769d7f60f7d5b14c9/src/utils/MerkleBase.sol#L43-L47  ``` File: src/utils/MerkleBase.sol  61:    function getRoot(bytes32[] memory _data) public pure returns (bytes32) { ``` https://github.com/code-423n4/2022-07-fractional/blob/e2c5a962a94106f9495eb96769d7f60f7d5b14c9/src/utils/MerkleBase.sol#L61  ``` File: src/utils/MerkleBase.sol  73    function getProof(bytes32[] memory _data, uint256 _node) 74        public 75        pure 76        returns (bytes32[] memory) 77:   { ``` https://github.com/code-423n4/2022-07-fractional/blob/e2c5a962a94106f9495eb96769d7f60f7d5b14c9/src/utils/MerkleBase.sol#L73-L77  ``` File: src/utils/Metadata.sol  36    function uri(uint256 _id) public view returns (string memory) { 37        return tokenMetadata[_id]; 38:    } ``` https://github.com/code-423n4/2022-07-fractional/blob/e2c5a962a94106f9495eb96769d7f60f7d5b14c9/src/utils/Metadata.sol#L36-L38
