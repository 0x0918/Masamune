## Redacted Cartel QA Report  Unless otherwise noted, manual auditing and testing were done using Visual Studio Code and Remix. The audit was done from February 15-17, 2022 by ye0lde through code4rena.  Overall, I found the code to be clear to follow and understand. A test suite was provided. Including more tests that tackle edge scenarios and providing coverage and gas reports by default would be useful.  - [Findings](#findings)   - [L-1 - Restrict funds receivable to be only from `BribeVault` (RewardDistributor.sol)](#l-1---restrict-funds-receivable-to-be-only-from-bribevault-rewarddistributorsol)   - [L-2 - Unchecked ERC20 transfer calls](#l-2---unchecked-erc20-transfer-calls)   - [NC-1 - Incorrect return value description for `getBribe` (TokemakBribe.sol)](#nc-1---incorrect-return-value-description-for-getbribe-tokemakbribesol)  ## Findings    ### L-1 - Restrict funds receivable to be only from `BribeVault` (RewardDistributor.sol)  #### Impact Native fund transfers into the `RewardDistributor` contract are only expected from the `BribeVault` contract. It would be good to restrict incoming fund transfers to prevent accidental native fund transfers from other sources.  #### Proof of Concept The `receive` function is here: https://github.com/code-423n4/2022-02-redacted-cartel/blob/92c4d5810df7b9de15eae55dc7641c8b36cd799d/contracts/RewardDistributor.sol#L58-L59  ``` // Enables BribeVault to transfer native tokens receive() external payable {} ```  #### Recommended Mitigation Steps Modify the receive() function to only accept transfers from the `BribeVault` contract.  ``` receive() external payable {       require(msg.sender == address(bribeVault), "Not BribeVault..."); } ``` ---  ### L-2 - Unchecked ERC20 transfer calls   #### Impact ERC20 transfer and transferFrom calls normally return true on a successful transfer.  If transfers are done with ERC20 token which does not comply with the EIP-20 standard it might return false on a failed transaction rather than revert. In this case, it would count as a valid transaction even though it is not.   #### Proof of Concept Unchecked transfer calls are here: https://github.com/code-423n4/2022-02-redacted-cartel/blob/92c4d5810df7b9de15eae55dc7641c8b36cd799d/contracts/BribeVault.sol#L296-L297 https://github.com/code-423n4/2022-02-redacted-cartel/blob/92c4d5810df7b9de15eae55dc7641c8b36cd799d/contracts/BribeVault.sol#L337 https://github.com/code-423n4/2022-02-redacted-cartel/blob/92c4d5810df7b9de15eae55dc7641c8b36cd799d/contracts/ThecosomataETH.sol#L146 https://github.com/code-423n4/2022-02-redacted-cartel/blob/92c4d5810df7b9de15eae55dc7641c8b36cd799d/contracts/ThecosomataETH.sol#L164  #### Recommended Mitigation Steps Consider using OpenZeppelin's library with safe versions of transfer functions as used in other areas of the code.  ---  ### NC-1 - Incorrect return value description for `getBribe` (TokemakBribe.sol)  #### Impact Code clarity  #### Proof of Concept The incorrect comment which appears to be copied from line #192 is here: https://github.com/code-423n4/2022-02-redacted-cartel/blob/92c4d5810df7b9de15eae55dc7641c8b36cd799d/contracts/TokemakBribe.sol#L193  #### Recommended Mitigation Steps Correct the comment/description.  ---
