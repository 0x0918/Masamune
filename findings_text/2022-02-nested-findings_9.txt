## Missing token whitelisting puts stakeholders on risk  Contract: https://github.com/code-423n4/2022-02-nested/blob/main/contracts/FeeSplitter.sol#L146  1. Attacker can call sendFees with a malicious token contract   2. This increases the share balance of malicious token for each stake holder  3. When stakeholders tries to withdraw there share of malicious token using releaseTokens, malicious contract will be called and code written by attacker will be executed (asking for unauthorized approvals, wasting Gas etc)  ## sendFees & sendFeesWithRoyalties not handling ETH token  Contract: https://github.com/code-423n4/2022-02-nested/blob/main/contracts/FeeSplitter.sol#L175  1. Both sendFees & sendFeesWithRoyalties are not considering if the input _token is ETH as done in releaseTokens  ## Incorrect return message  Contract: https://github.com/code-423n4/2022-02-nested/blob/main/contracts/abstracts/MixinOperatorResolver.sol#L101  1. The require statement incorrectly mentions INVALID_OUTPUT_TOKEN when it should be INVALID_INPUT_TOKEN
