## G01: Redundant variables / events  The following variables / events are initialized / declared, but their values are not used in the contract subsequently. Consider removing them.  ### Variables  ### Events  `[INestedFactory.ReserveUpdated](https://github.com/code-423n4/2022-02-nested/blob/main/contracts/interfaces/INestedFactory.sol#L16-L18)`  ## G02: NestedFactory: Redundant `weth` casting  [https://github.com/code-423n4/2022-02-nested/blob/main/contracts/NestedFactory.sol#L554](https://github.com/code-423n4/2022-02-nested/blob/main/contracts/NestedFactory.sol#L554)  `weth` is already of type `IWETH`, so the casting is redundant.  ## G03: NestedFactory: Shift `RESERVE_MISMATCH` checks in `_processInputOrders()` and `_processOutputOrders()` to external functions  [https://github.com/code-423n4/2022-02-nested/blob/main/contracts/NestedFactory.sol#L271](https://github.com/code-423n4/2022-02-nested/blob/main/contracts/NestedFactory.sol#L271)  [https://github.com/code-423n4/2022-02-nested/blob/main/contracts/NestedFactory.sol#L289](https://github.com/code-423n4/2022-02-nested/blob/main/contracts/NestedFactory.sol#L289)  The checks above can be shifted to the parent functions `processInputOrders()`, `processOutputOrders()` and `processInputAndOutputOrders()` to prevent a duplicate check in the combined function `processInputAndOutputOrders()`.  ## G04: NestedFactory: Use a locally scoped variable in `destroy()`  [https://github.com/code-423n4/2022-02-nested/blob/main/contracts/NestedFactory.sol#L213-L219](https://github.com/code-423n4/2022-02-nested/blob/main/contracts/NestedFactory.sol#L213-L219)  Instead of calling `tokens[i]` multiple times, you can store it as a locally scoped variable and use the variable multiple times instead.  ## G05: FeeSplitter: Redundant check on `totalWeights` in `updateShareholder()`  [https://github.com/code-423n4/2022-02-nested/blob/main/contracts/FeeSplitter.sol#L137](https://github.com/code-423n4/2022-02-nested/blob/main/contracts/FeeSplitter.sol#L137)  The check `require(totalWeights != 0, "FS: TOTAL_WEIGHTS_ZERO");` is redundant because `totalWeights` is minimally `royaltiesWeight`, and `royaltiesWeight` is strictly greater than zero when it is set.  ## G06: FeeSplitter: Replace nested loop in `setShareholders` with previous proposed solution of sorting array off-chain, or a mapping  [https://github.com/code-423n4/2021-11-nested-findings/issues/135](https://github.com/code-423n4/2021-11-nested-findings/issues/135)  [https://github.com/code-423n4/2022-02-nested/blob/main/contracts/FeeSplitter.sol#L120](https://github.com/code-423n4/2022-02-nested/blob/main/contracts/FeeSplitter.sol#L120)  [https://github.com/code-423n4/2022-02-nested/blob/main/contracts/FeeSplitter.sol#L315](https://github.com/code-423n4/2022-02-nested/blob/main/contracts/FeeSplitter.sol#L315)  `setShareholders()` iterates through all the accounts to be added but at each iteration, `_addShareholders()` iterates through all the previously added shareholders to ensure there are no duplicates. This nested loop is very expensive.   It would be more gas-efficient to sort the array off-chain first, then check that the next address is greater than the previous, as suggested in our initial finding.  Alternatively, use a mapping to check if a shareholder exists and if it doesnâ€™t, then push it to the `shareholders` array. Note that in order to delete the mapping, you need to iterate through the old `shareholders` array and delete the mapping first before deleting the old `shareholders`.
