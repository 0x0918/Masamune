### Redundant checks can be removed  **Details**: The checks on [L575](https://github.com/code-423n4/2022-05-backd/blob/1136e0cdc8579614a33832fe2a21785d60aac19b/protocol/contracts/tokenomics/InflationManager.sol#L575), [L589](https://github.com/code-423n4/2022-05-backd/blob/1136e0cdc8579614a33832fe2a21785d60aac19b/protocol/contracts/tokenomics/InflationManager.sol#L589) and [L602](https://github.com/code-423n4/2022-05-backd/blob/1136e0cdc8579614a33832fe2a21785d60aac19b/protocol/contracts/tokenomics/InflationManager.sol#L602) of CrvDepositor.sol can be removed since the variables `totalKeeperPoolWeight`, `totalLpPoolWeight` and `totalAmmTokenWeight` are `uint256` and the unchecked versions of add and sub are not used before these lines.   ### Some if conditions can be simplified changing ≤ to ==  **Details**: Some variables in the contract are of the type `uint256` and will never be strictly negative. Thus, to check if these variables are not strictly positive you only need to check if they are equal to 0 — this will economize gas because EVM instruction set does not have an opcode for the condition "less than or eq", only for "less than" and "equal" opcodes.   In view of this it is suggested to perform the following simplifications:  - Since `amount` in [L62](https://github.com/code-423n4/2022-05-backd/blob/2a5664d35cde5b036074edef3c1369b984d10010/protocol/contracts/tokenomics/AmmGauge.sol#L62) of AmmGauge.sol is `uint256`, the if condition at [L63](https://github.com/code-423n4/2022-05-backd/blob/2a5664d35cde5b036074edef3c1369b984d10010/protocol/contracts/tokenomics/AmmGauge.sol#L63) can be simplified to          ```solidity     if (amount == 0) return 0;     ```      - Since the variables `amount`, `crvAmount` and `crxAmount` in [L70-72](https://github.com/code-423n4/2022-05-backd/blob/2a5664d35cde5b036074edef3c1369b984d10010/protocol/contracts/tokenomics/AmmConvexGauge.sol#L70-L72) of AmmConvexGauge.sol are `uint256`, the if condition at [L73](https://github.com/code-423n4/2022-05-backd/blob/2a5664d35cde5b036074edef3c1369b984d10010/protocol/contracts/tokenomics/AmmConvexGauge.sol#L73) can be simplified to          ```solidity     if (amount == 0 && crvAmount == 0 && cvxAmount == 0) return 0;     ```      - Since the variable `amount` in [L58](https://github.com/code-423n4/2022-05-backd/blob/2a5664d35cde5b036074edef3c1369b984d10010/protocol/contracts/tokenomics/LpGauge.sol#L58) of LpGauge.sol is `uint256`, the if condition at [L59](https://github.com/code-423n4/2022-05-backd/blob/2a5664d35cde5b036074edef3c1369b984d10010/protocol/contracts/tokenomics/LpGauge.sol#L59) can be simplified to          ```solidity     if (amount == 0) return 0;     ```       ### Pre-incrementing a variable is cheaper than post-incrementing it  **Details**: Consider changing [L59](https://github.com/code-423n4/2022-05-backd/blob/2a5664d35cde5b036074edef3c1369b984d10010/protocol/contracts/tokenomics/KeeperGauge.sol#L59) and [L98](https://github.com/code-423n4/2022-05-backd/blob/2a5664d35cde5b036074edef3c1369b984d10010/protocol/contracts/tokenomics/KeeperGauge.sol#L98) of KeeperGauge.sol to `++epoch;`. For more information, see [G012](https://github.com/byterocket/c4-common-issues/blob/main/0-Gas-Optimizations.md/#g012---use-prefix-increment-instead-of-postfix-increment-if-possible) of c4-common-issues.  ### Unused library  **Details**: `ScaledMath` is added to `uint256` in BkdToken.sol, but its functions are not used. Consider removing it.
