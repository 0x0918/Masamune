# QA Report  ## Low severity findings  ### token transfer in `CoreCollection:withdraw` will fail  In function `CoreCollection` mintfee is transfered to same address if vault is not initialized, these tokens can be withdrawn by owner using `withdraw` function, but transferFrom function will fail due to lack of allowance  #### Proof of concept  https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/core-contracts/contracts/CoreCollection.sol#L173  ``` function withdraw() external onlyOwner {     uint256 amount = payableToken.balanceOf(address(this));     payableToken.transferFrom(address(this), msg.sender, amount);      emit NewWithdrawal(msg.sender, amount); } ```  #### Mitigation  `transferFrom` can be replaced with `transfer`  ### Increment window and transfer funds  Function `Splitter:incrementWindow` is executed by `vault:sendToSplitter` transfered tokens is pushed into `balanceForWindow` array and window is incremented, but the function can be executed by any contract and more than allowed share of tokens can be transfered by whitelisted users  #### Proof of concept  ``` bytes4 public constant IID_IROYALTY = type(IRoyaltyVault).interfaceId;  function incrementWindow(uint256 royaltyAmount) public returns (bool) {     uint256 wethBalance;      require(         IRoyaltyVault(msg.sender).supportsInterface(IID_IROYALTY),         "Royalty Vault not supported"     );     require(         IRoyaltyVault(msg.sender).getSplitter() == address(this),         "Unauthorised to increment window"     );      wethBalance = IERC20(splitAsset).balanceOf(address(this));     require(wethBalance >= royaltyAmount, "Insufficient funds");      require(royaltyAmount > 0, "No additional funds for window");     balanceForWindow.push(royaltyAmount);     currentWindow += 1;     emit WindowIncremented(currentWindow, royaltyAmount);     return true; } ``` The function can be executed by any contract with function `supportsInterface` and `getSplitter` that returns splitter address     royaltyAmount equivalent to current unclaimed balance can be added to window and the window can be incremented to add windows  `claimForAllWindows` can be executed by whitelisted user to transfer percent allocated tokens from each new window    #### Mitigation  A storage variable with tokens added to the window can be added, and `total-windowBalance` can be added to next window, and when token is transfered windowBalance can be decremented  ### `CoreCollection` can be re-initialized by owner  Function `CoreCollection:initialize` can be executed by owner after initialisation and state variables like mintFee, maxSupply can be changed to increase/decrease fee and supply, isForSale can be set to false to stop token sale  #### Proof of concept  https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/core-contracts/contracts/CoreCollection.sol#L78-L97  #### Mitigation   require statement can be added to revert if function is already initialized   ## Non-critical findings  ### Unused import  Imported file is not used in the contract and can be removed  #### Proof of concept  https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/core-contracts/contracts/CoreFactory.sol#L6  https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/core-contracts/contracts/CoreProxy.sol#L6  #### Mitigation  import statement can be removed  ### Lack of input validation  #### Impact  Input validation is absent for address variables which may result in re-deployment if address is wrong in constructor or value transfer to wrong address, it is recommended to add validation statements in all address inputs especially in value transfers and immutable variable initialisation.  #### Proof of concept  https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/core-contracts/contracts/CoreFactory.sol#L27   https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/core-contracts/contracts/CoreCollection.sol#L140  https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/splits/contracts/SplitFactory.sol#L59-64  #### Mitigation  Add address validation statement    ### Lack of comments  #### Impact  Some functions in the code are not commented or missing parts of comments. Adding comments can improve readability of the code   #### Proof of concept  https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/core-contracts/contracts/CoreFactory.sol#L128  missing return comment https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/core-contracts/contracts/CoreFactory.sol#L108  https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/core-contracts/contracts/ERC721Claimable.sol#L33  https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/core-contracts/contracts/ERC721Claimable.sol#L41  missing param comment https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/splits/contracts/SplitFactory.sol#L57  https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/splits/contracts/Splitter.sol#L230  #### Mitigation  Comments can be added to the functions  ### boolean comparison with constant  In function `RoyaltyVault:sentToSplitter` external function return value boolean is compared with boolean constant. The return value can be directly used in the require statement  #### Proof of concept   https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/royalty-vault/contracts/RoyaltyVault.sol#L43  https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/royalty-vault/contracts/RoyaltyVault.sol#L47  https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/royalty-vault/contracts/RoyaltyVault.sol#L51  #### Mitigation  The return value of the function can be directly used in the require statement  ### Code Layout  #### Impact   Code can be structed in order type declarations, state variables, events and functions which can improve readability Refer: https://docs.soliditylang.org/en/v0.8.10/style-guide.html#order-of-layout  #### Proof of concept  https://github.com/code-423n4/2022-03-joyn/blob/main/core-contracts/contracts/CoreFactory.sol
