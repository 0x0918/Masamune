### `require()`/`revert()` strings longer than 32 bytes cost extra gas  1. File: core-contracts/contracts/ERC721Payable.sol (lines [21-24](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/core-contracts/contracts/ERC721Payable.sol#L21-L24)) ```solidity     require(       !royaltyVaultInitialized(),       'CoreCollection: Royalty Vault already initialized'     ); ``` 2. File: core-contracts/contracts/ERC721Payable.sol (lines [29-32](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/core-contracts/contracts/ERC721Payable.sol#L29-L32)) ```solidity     require(       royaltyVaultInitialized(),       'CoreCollection: Royalty Vault not initialized'     ); ``` 3. File: core-contracts/contracts/ERC721Claimable.sol (line [23](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/core-contracts/contracts/ERC721Claimable.sol#L23)) ```solidity     require(!claimableSet(), 'ERC721Claimable: Claimable is already set'); ``` 4. File: core-contracts/contracts/CoreCollection.sol (line [47](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/core-contracts/contracts/CoreCollection.sol#L47)) ```solidity         require(!initialized, "CoreCollection: Already initialized"); ``` 5. File: core-contracts/contracts/CoreCollection.sol (lines [52-55](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/core-contracts/contracts/CoreCollection.sol#L52-L55)) ```solidity         require(             _maxSupply > 0,             "CoreCollection: Max supply should be greater than 0"         ); ``` 6. File: core-contracts/contracts/CoreCollection.sol (line [146](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/core-contracts/contracts/CoreCollection.sol#L146)) ```solidity         require(amount > 0, "CoreCollection: Amount should be greater than 0"); ``` 7. File: core-contracts/contracts/CoreCollection.sol (lines [189-192](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/core-contracts/contracts/CoreCollection.sol#L189-L192)) ```solidity         require(             msg.sender == splitFactory || msg.sender == owner(),             "CoreCollection: Only Split Factory or owner can initialize vault."         ); ``` 8. File: core-contracts/contracts/CoreCollection.sol (lines [204-207](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/core-contracts/contracts/CoreCollection.sol#L204-L207)) ```solidity         require(             bytes(HASHED_PROOF).length == 0,             "CoreCollection: Hashed Proof is set"         ); ``` 9. File: core-contracts/contracts/CoreCollection.sol (lines [220-223](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/core-contracts/contracts/CoreCollection.sol#L220-L223)) ```solidity         require(             startingIndex == 0,             "CoreCollection: Starting index is already set"         ); ``` 10. File: core-contracts/contracts/CoreFactory.sol (lines [35-38](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/core-contracts/contracts/CoreFactory.sol#L35-L38)) ```solidity     require(       projects[_projectId].creator == address(0),       'CoreFactory: Unavailable project id'     ); ``` 11. File: core-contracts/contracts/CoreFactory.sol (lines [43-46](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/core-contracts/contracts/CoreFactory.sol#L43-L46)) ```solidity     require(       projects[_projectId].creator == msg.sender,       'CoreFactory: Not an owner of the project'     ); ``` 12. File: core-contracts/contracts/CoreFactory.sol (lines [51-54](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/core-contracts/contracts/CoreFactory.sol#L51-L54)) ```solidity     require(       collections[_collectionId] == address(0),       'CoreFactory: Unavailable collection id'     ); ``` 13. File: core-contracts/contracts/CoreFactory.sol (lines [74-77](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/core-contracts/contracts/CoreFactory.sol#L74-L77)) ```solidity     require(       _collections.length > 0,       'CoreFactory: should have more at least one collection'     ); ``` 14. File: royalty-vault/contracts/RoyaltyVault.sol (lines [34-37](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/royalty-vault/contracts/RoyaltyVault.sol#L34-L37)) ```solidity         require(             balanceOfVault > 0,             "Vault does not have enough royalty Asset to send"         ); ``` 15. File: royalty-vault/contracts/RoyaltyVault.sol (lines [43-46](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/royalty-vault/contracts/RoyaltyVault.sol#L43-L46)) ```solidity         require(             IERC20(royaltyAsset).transfer(splitterProxy, splitterShare) == true,             "Failed to transfer royalty Asset to splitter"         ); ``` 16. File: royalty-vault/contracts/RoyaltyVault.sol (lines [47-50](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/royalty-vault/contracts/RoyaltyVault.sol#L47-L50)) ```solidity         require(             ISplitter(splitterProxy).incrementWindow(splitterShare) == true,             "Failed to increment splitter window"         ); ``` 17. File: royalty-vault/contracts/RoyaltyVault.sol (lines [51-57](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/royalty-vault/contracts/RoyaltyVault.sol#L51-L57)) ```solidity         require(             IERC20(royaltyAsset).transfer(                 platformFeeRecipient,                 platformShare             ) == true,             "Failed to transfer royalty Asset to platform fee recipient"         ); ``` 18. File: splits/contracts/SplitFactory.sol (lines [48-51](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/splits/contracts/SplitFactory.sol#L48-L51)) ```solidity     require(       splits[_splitId] == address(0),       'SplitFactory : Split ID already in use'     ); ``` 19. File: splits/contracts/SplitFactory.sol (lines [81-84](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/splits/contracts/SplitFactory.sol#L81-L84)) ```solidity     require(       ICoreCollection(_collectionContract).owner() == msg.sender,       'Transaction sender is not collection owner'     ); ``` 20. File: splits/contracts/Splitter.sol (lines [118-121](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/splits/contracts/Splitter.sol#L118-L121)) ```solidity         require(             !isClaimed(msg.sender, window),             "NFT has already claimed the given window"         ); ```  ### Use a more recent version of solidity Use a solidity version of at least 0.8.10 to have external calls skip contract existence checks if the external call has a return value  1. File: royalty-vault/contracts/RoyaltyVault.sol (line [2](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/royalty-vault/contracts/RoyaltyVault.sol#L2)) ```solidity pragma solidity ^0.8.4; ``` 2. File: royalty-vault/contracts/ProxyVault.sol (line [2](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/royalty-vault/contracts/ProxyVault.sol#L2)) ```solidity pragma solidity ^0.8.4; ``` 3. File: splits/contracts/SplitFactory.sol (line [2](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/splits/contracts/SplitFactory.sol#L2)) ```solidity pragma solidity ^0.8.4; ``` 4. File: splits/contracts/SplitProxy.sol (line [2](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/splits/contracts/SplitProxy.sol#L2)) ```solidity pragma solidity ^0.8.4; ``` 5. File: splits/contracts/Splitter.sol (line [2](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/splits/contracts/Splitter.sol#L2)) ```solidity pragma solidity ^0.8.4; ```  ### Use a more recent version of solidity Use a solidity version of at least 0.8.2 to get compiler automatic inlining Use a solidity version of at least 0.8.3 to get better struct packing and cheaper multiple storage reads Use a solidity version of at least 0.8.4 to get custom errors, which are cheaper at deployment than `revert()/require()` strings Use a solidity version of at least 0.8.10 to have external calls skip contract existence checks if the external call has a return value  1. File: core-contracts/contracts/ERC721Payable.sol (line [2](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/core-contracts/contracts/ERC721Payable.sol#L2)) ```solidity pragma solidity ^0.8.0; ``` 2. File: core-contracts/contracts/CoreProxy.sol (line [2](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/core-contracts/contracts/CoreProxy.sol#L2)) ```solidity pragma solidity ^0.8.0; ``` 3. File: core-contracts/contracts/ERC721Claimable.sol (line [2](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/core-contracts/contracts/ERC721Claimable.sol#L2)) ```solidity pragma solidity ^0.8.0; ``` 4. File: core-contracts/contracts/CoreCollection.sol (line [2](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/core-contracts/contracts/CoreCollection.sol#L2)) ```solidity pragma solidity ^0.8.0; ``` 5. File: core-contracts/contracts/CoreFactory.sol (line [2](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/core-contracts/contracts/CoreFactory.sol#L2)) ```solidity pragma solidity ^0.8.0; ```  ### Using `bool`s for storage incurs overhead ```solidity     // Booleans are more expensive than uint256 or any type that takes up a full     // word because each write operation emits an extra SLOAD to first read the     // slot's contents, replace the bits taken up by the boolean, and then write     // back. This is the compiler's defense against contract upgrades and     // pointer aliasing, and it cannot be disabled. ``` https://github.com/OpenZeppelin/openzeppelin-contracts/blob/58f635312aa21f947cae5f8578638a85aa2519f5/contracts/security/ReentrancyGuard.sol#L23-L27  1. File: core-contracts/contracts/ERC721Payable.sol (line [8](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/core-contracts/contracts/ERC721Payable.sol#L8)) ```solidity   bool public isForSale; ``` 2. File: core-contracts/contracts/CoreCollection.sol (line [20](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/core-contracts/contracts/CoreCollection.sol#L20)) ```solidity     bool public initialized; ```  ### Using `> 0` costs more gas than `!= 0` when used on a `uint` in a `require()` statement  1. File: core-contracts/contracts/CoreCollection.sol (lines [52-55](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/core-contracts/contracts/CoreCollection.sol#L52-L55)) ```solidity         require(             _maxSupply > 0,             "CoreCollection: Max supply should be greater than 0"         ); ``` 2. File: core-contracts/contracts/CoreCollection.sol (line [146](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/core-contracts/contracts/CoreCollection.sol#L146)) ```solidity         require(amount > 0, "CoreCollection: Amount should be greater than 0"); ``` 3. File: royalty-vault/contracts/RoyaltyVault.sol (lines [34-37](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/royalty-vault/contracts/RoyaltyVault.sol#L34-L37)) ```solidity         require(             balanceOfVault > 0,             "Vault does not have enough royalty Asset to send"         ); ``` 4. File: splits/contracts/Splitter.sol (line [164](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/splits/contracts/Splitter.sol#L164)) ```solidity         require(royaltyAmount > 0, "No additional funds for window"); ```  ### `<array>.length` should not be looked up in every loop of a `for`-loop Even memory arrays incur the overhead of bit tests and bit shifts to calculate the array length  1. File: core-contracts/contracts/CoreFactory.sol (line [79](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/core-contracts/contracts/CoreFactory.sol#L79)) ```solidity     for (uint256 i; i < _collections.length; i++) { ``` 2. File: splits/contracts/Splitter.sol (line [274](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/splits/contracts/Splitter.sol#L274)) ```solidity         for (uint256 i = 0; i < proof.length; i++) { ```  ### It costs more gas to initialize variables to zero than to let the default of zero be applied  1. File: core-contracts/contracts/CoreCollection.sol (line [279](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/core-contracts/contracts/CoreCollection.sol#L279)) ```solidity         for (uint256 i = 0; i < _amount; i++) { ``` 2. File: splits/contracts/Splitter.sol (line [49](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/splits/contracts/Splitter.sol#L49)) ```solidity         uint256 amount = 0; ``` 3. File: splits/contracts/Splitter.sol (line [50](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/splits/contracts/Splitter.sol#L50)) ```solidity         for (uint256 i = 0; i < currentWindow; i++) { ``` 4. File: splits/contracts/Splitter.sol (line [274](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/splits/contracts/Splitter.sol#L274)) ```solidity         for (uint256 i = 0; i < proof.length; i++) { ```  ### State variables should be cached in stack variables rather than re-reading them from storage The instances below point to the second access of a state variable within a function. Less obvious optimizations include having local storage variables of mappings within state variable mappings or mappings within state variable structs, having local storage variables of structs within mappings, or having local caches of state variable contracts/addresses.  1. File: core-contracts/contracts/CoreCollection.sol (line [231](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/core-contracts/contracts/CoreCollection.sol#L231)) ```solidity         emit StartingIndexSet(startingIndex); ``` 2. File: core-contracts/contracts/CoreCollection.sol (line [264](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/core-contracts/contracts/CoreCollection.sol#L264)) ```solidity         tokenId = ((startingIndex + totalSupply()) % maxSupply) + 1; ``` 3. File: splits/contracts/SplitFactory.sol (line [161](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/splits/contracts/SplitFactory.sol#L161)) ```solidity     delete merkleRoot; ``` 4. File: splits/contracts/SplitFactory.sol (line [171](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/splits/contracts/SplitFactory.sol#L171)) ```solidity     delete splitterProxy; ```  ### Using `calldata` instead of `memory` for read-only arguments in `external` functions saves gas  1. File: core-contracts/contracts/CoreCollection.sol (line [79](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/core-contracts/contracts/CoreCollection.sol#L79)) ```solidity         string memory _collectionName, ``` 2. File: core-contracts/contracts/CoreCollection.sol (line [80](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/core-contracts/contracts/CoreCollection.sol#L80)) ```solidity         string memory _collectionSymbol, ``` 3. File: core-contracts/contracts/CoreCollection.sol (line [81](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/core-contracts/contracts/CoreCollection.sol#L81)) ```solidity         string memory _collectionURI, ``` 4. File: core-contracts/contracts/CoreCollection.sol (line [122](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/core-contracts/contracts/CoreCollection.sol#L122)) ```solidity         string memory _collectionName, ``` 5. File: core-contracts/contracts/CoreCollection.sol (line [123](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/core-contracts/contracts/CoreCollection.sol#L123)) ```solidity         string memory _collectionSymbol ``` 6. File: core-contracts/contracts/CoreFactory.sol (line [71](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/core-contracts/contracts/CoreFactory.sol#L71)) ```solidity     string memory _projectId, ``` 7. File: core-contracts/contracts/CoreFactory.sol (line [72](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/core-contracts/contracts/CoreFactory.sol#L72)) ```solidity     Collection[] memory _collections ``` 8. File: core-contracts/contracts/CoreFactory.sol (line [109](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/core-contracts/contracts/CoreFactory.sol#L109)) ```solidity     string memory _projectId, ``` 9. File: core-contracts/contracts/CoreFactory.sol (line [110](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/core-contracts/contracts/CoreFactory.sol#L110)) ```solidity     Collection memory _collection ``` 10. File: core-contracts/contracts/CoreFactory.sol (line [128](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/core-contracts/contracts/CoreFactory.sol#L128)) ```solidity   function getProject(string memory _projectId) ``` 11. File: splits/contracts/SplitFactory.sol (line [79](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/splits/contracts/SplitFactory.sol#L79)) ```solidity     string memory _splitId ``` 12. File: splits/contracts/SplitFactory.sol (line [105](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/splits/contracts/SplitFactory.sol#L105)) ```solidity     string memory _splitId ```  ### `++i`/`i++` should be `unchecked{++i}`/`unchecked{++i}` when it is not possible for them to overflow, as is the case when used in `for`- and `while`-loops  1. File: core-contracts/contracts/CoreCollection.sol (line [279](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/core-contracts/contracts/CoreCollection.sol#L279)) ```solidity         for (uint256 i = 0; i < _amount; i++) { ``` 2. File: core-contracts/contracts/CoreFactory.sol (line [79](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/core-contracts/contracts/CoreFactory.sol#L79)) ```solidity     for (uint256 i; i < _collections.length; i++) { ``` 3. File: splits/contracts/Splitter.sol (line [50](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/splits/contracts/Splitter.sol#L50)) ```solidity         for (uint256 i = 0; i < currentWindow; i++) { ``` 4. File: splits/contracts/Splitter.sol (line [274](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/splits/contracts/Splitter.sol#L274)) ```solidity         for (uint256 i = 0; i < proof.length; i++) { ```  ### `++i` costs less gas than `++i`, especially when it's used in `for`-loops (`--i`/`i--` too)  1. File: core-contracts/contracts/CoreCollection.sol (line [279](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/core-contracts/contracts/CoreCollection.sol#L279)) ```solidity         for (uint256 i = 0; i < _amount; i++) { ``` 2. File: core-contracts/contracts/CoreFactory.sol (line [79](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/core-contracts/contracts/CoreFactory.sol#L79)) ```solidity     for (uint256 i; i < _collections.length; i++) { ``` 3. File: splits/contracts/Splitter.sol (line [50](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/splits/contracts/Splitter.sol#L50)) ```solidity         for (uint256 i = 0; i < currentWindow; i++) { ``` 4. File: splits/contracts/Splitter.sol (line [274](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/splits/contracts/Splitter.sol#L274)) ```solidity         for (uint256 i = 0; i < proof.length; i++) { ```  ### Usage of `uints`/`ints` smaller than 32 bytes (256 bits) incurs overhead > When using elements that are smaller than 32 bytes, your contract’s gas usage may be higher. This is because the EVM operates on 32 bytes at a time. Therefore, if the element is smaller than that, the EVM must use more operations in order to reduce the size of the element from 32 bytes to the desired size.  https://docs.soliditylang.org/en/v0.8.11/internals/layout_in_storage.html Use a larger size then downcast where needed  1. File: splits/contracts/Splitter.sol (line [217](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/splits/contracts/Splitter.sol#L217)) ```solidity     function amountFromPercent(uint256 amount, uint32 percent) ```  ### Using `private` rather than `public` for constants, saves gas If needed, the value can be read from the verified contract source code  1. File: splits/contracts/Splitter.sol (line [14](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/splits/contracts/Splitter.sol#L14)) ```solidity     uint256 public constant PERCENTAGE_SCALE = 10e5; ``` 2. File: splits/contracts/Splitter.sol (line [15](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/splits/contracts/Splitter.sol#L15)) ```solidity     bytes4 public constant IID_IROYALTY = type(IRoyaltyVault).interfaceId; ```  ### Don't compare boolean expressions to boolean literals `if (<x> == true)` => `if (<x>)`, `if (<x> == false)` => `if (!<x>)`  1. File: royalty-vault/contracts/RoyaltyVault.sol (line [44](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/royalty-vault/contracts/RoyaltyVault.sol#L44)) ```solidity             IERC20(royaltyAsset).transfer(splitterProxy, splitterShare) == true, ``` 2. File: royalty-vault/contracts/RoyaltyVault.sol (line [48](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/royalty-vault/contracts/RoyaltyVault.sol#L48)) ```solidity             ISplitter(splitterProxy).incrementWindow(splitterShare) == true, ``` 3. File: royalty-vault/contracts/RoyaltyVault.sol (lines [52-55](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/royalty-vault/contracts/RoyaltyVault.sol#L52-L55)) ```solidity             IERC20(royaltyAsset).transfer(                 platformFeeRecipient,                 platformShare             ) == true, ```  ### Remove unused variables  1. File: splits/contracts/Splitter.sol (line [14](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/splits/contracts/Splitter.sol#L14)) ```solidity     uint256 public constant PERCENTAGE_SCALE = 10e5; ```  ### State variables only set in the constructor should be declared `immutable`  1. File: royalty-vault/contracts/ProxyVault.sol (line [9](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/royalty-vault/contracts/ProxyVault.sol#L9)) ```solidity     address internal royaltyVault; ```  ### `require()` or `revert()` statements that check input arguments should be at the top of the function  1. File: splits/contracts/Splitter.sol (line [164](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/splits/contracts/Splitter.sol#L164)) ```solidity         require(royaltyAmount > 0, "No additional funds for window"); ```  ### `private` functions not called by the contract should be removed to save deployment gas  1. File: splits/contracts/Splitter.sol (lines [217-220](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/splits/contracts/Splitter.sol#L217-L220)) ```solidity     function amountFromPercent(uint256 amount, uint32 percent)         private         pure         returns (uint256) ``` 2. File: splits/contracts/Splitter.sol (lines [248-250](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/splits/contracts/Splitter.sol#L248-L250)) ```solidity     function attemptETHTransfer(address to, uint256 value)         private         returns (bool) ```  ### `public` functions not called by the contract should be declared `external` instead Contracts [are allowed](https://docs.soliditylang.org/en/latest/contracts.html#function-overriding) to override their parents' functions and change the visibility from `external` to `public`. 1. File: royalty-vault/contracts/RoyaltyVault.sol (lines [95-100](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/royalty-vault/contracts/RoyaltyVault.sol#L95-L100)) ```solidity     function supportsInterface(bytes4 interfaceId)         public         view         virtual         override(IRoyaltyVault, ERC165)         returns (bool) ``` 2. File: royalty-vault/contracts/RoyaltyVault.sol (line [88](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/royalty-vault/contracts/RoyaltyVault.sol#L88)) ```solidity     function getSplitter() public view override returns (address) { ```  ### Use custom errors rather than `revert()`/`require()` strings to save deployment gas  1. File: royalty-vault/contracts/RoyaltyVault.sol (Various lines throughout the [file](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/royalty-vault/contracts/RoyaltyVault.sol)) 2. File: splits/contracts/SplitFactory.sol (Various lines throughout the [file](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/splits/contracts/SplitFactory.sol)) 3. File: splits/contracts/Splitter.sol (Various lines throughout the [file](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/splits/contracts/Splitter.sol))  ### Functions guaranteed to revert when called by normal users can be marked `payable` If a function modifier such as `onlyOwner` is used, the function will revert if a normal user tries to pay the function. Marking the function as `payable` will lower the gas cost for legitimate callers because the compiler will not include checks for whether a payment was provided.  1. File: core-contracts/contracts/CoreCollection.sol (lines [78-87](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/core-contracts/contracts/CoreCollection.sol#L78-L87)) ```solidity     function initialize(         string memory _collectionName,         string memory _collectionSymbol,         string memory _collectionURI,         uint256 _maxSupply,         uint256 _mintFee,         address _payableToken,         bool _isForSale,         address _splitFactory     ) external onlyOwner onlyValidSupply(_maxSupply) { ``` 2. File: core-contracts/contracts/CoreCollection.sol (lines [78-87](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/core-contracts/contracts/CoreCollection.sol#L78-L87)) ```solidity     function initialize(         string memory _collectionName,         string memory _collectionSymbol,         string memory _collectionURI,         uint256 _maxSupply,         uint256 _mintFee,         address _payableToken,         bool _isForSale,         address _splitFactory     ) external onlyOwner onlyValidSupply(_maxSupply) { ``` 3. File: core-contracts/contracts/CoreCollection.sol (lines [105-109](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/core-contracts/contracts/CoreCollection.sol#L105-L109)) ```solidity     function initializeClaims(bytes32 _root)         external         onlyOwner         onlyNotClaimableSet         onlyValidRoot(_root) ``` 4. File: core-contracts/contracts/CoreCollection.sol (lines [105-109](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/core-contracts/contracts/CoreCollection.sol#L105-L109)) ```solidity     function initializeClaims(bytes32 _root)         external         onlyOwner         onlyNotClaimableSet         onlyValidRoot(_root) ``` 5. File: core-contracts/contracts/CoreCollection.sol (lines [105-109](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/core-contracts/contracts/CoreCollection.sol#L105-L109)) ```solidity     function initializeClaims(bytes32 _root)         external         onlyOwner         onlyNotClaimableSet         onlyValidRoot(_root) ``` 6. File: core-contracts/contracts/CoreCollection.sol (lines [121-124](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/core-contracts/contracts/CoreCollection.sol#L121-L124)) ```solidity     function setCollectionMeta(         string memory _collectionName,         string memory _collectionSymbol     ) external onlyOwner { ``` 7. File: core-contracts/contracts/CoreCollection.sol (lines [139-145](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/core-contracts/contracts/CoreCollection.sol#L139-L145)) ```solidity     function mintToken(         address to,         bool isClaim,         uint256 claimableAmount,         uint256 amount,         bytes32[] calldata merkleProof     ) external onlyInitialized { ``` 8. File: core-contracts/contracts/CoreCollection.sol (line [173](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/core-contracts/contracts/CoreCollection.sol#L173)) ```solidity     function withdraw() external onlyOwner { ``` 9. File: core-contracts/contracts/CoreCollection.sol (lines [185-187](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/core-contracts/contracts/CoreCollection.sol#L185-L187)) ```solidity     function setRoyaltyVault(address _royaltyVault)         external         onlyVaultUninitialized ``` 10. File: core-contracts/contracts/CoreCollection.sol (line [203](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/core-contracts/contracts/CoreCollection.sol#L203)) ```solidity     function setHashedProof(string calldata _proof) external onlyOwner { ``` 11. File: core-contracts/contracts/CoreFactory.sol (lines [70-73](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/core-contracts/contracts/CoreFactory.sol#L70-L73)) ```solidity   function createProject(     string memory _projectId,     Collection[] memory _collections   ) external onlyAvailableProject(_projectId) { ``` 12. File: core-contracts/contracts/CoreFactory.sol (lines [108-111](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/core-contracts/contracts/CoreFactory.sol#L108-L111)) ```solidity   function addCollection(     string memory _projectId,     Collection memory _collection   ) external onlyProjectOwner(_projectId) returns (address) { ``` 13. File: core-contracts/contracts/CoreFactory.sol (lines [142-145](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/core-contracts/contracts/CoreFactory.sol#L142-L145)) ```solidity   function _createCollection(Collection memory _collection)     private     onlyAvailableCollection(_collection.id)     returns (address) ``` 14. File: royalty-vault/contracts/RoyaltyVault.sol (line [67](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/royalty-vault/contracts/RoyaltyVault.sol#L67)) ```solidity     function setPlatformFee(uint256 _platformFee) external override onlyOwner { ``` 15. File: royalty-vault/contracts/RoyaltyVault.sol (lines [76-79](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/royalty-vault/contracts/RoyaltyVault.sol#L76-L79)) ```solidity     function setPlatformFeeRecipient(address _platformFeeRecipient)         external         override         onlyOwner ``` 16. File: splits/contracts/SplitFactory.sol (lines [75-80](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/splits/contracts/SplitFactory.sol#L75-L80)) ```solidity   function createSplit(     bytes32 _merkleRoot,     address _splitAsset,     address _collectionContract,     string memory _splitId   ) external onlyAvailableSplit(_splitId) returns (address splitProxy) { ``` 17. File: splits/contracts/SplitFactory.sol (lines [102-106](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/splits/contracts/SplitFactory.sol#L102-L106)) ```solidity   function createSplit(     bytes32 _merkleRoot,     address _splitAsset,     string memory _splitId   ) external onlyAvailableSplit(_splitId) returns (address splitProxy) { ``` 18. File: splits/contracts/SplitFactory.sol (lines [120-122](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/splits/contracts/SplitFactory.sol#L120-L122)) ```solidity   function setPlatformFee(address _vault, uint256 _platformFee)     external     onlyOwner ``` 19. File: splits/contracts/SplitFactory.sol (lines [132-135](https://github.com/code-423n4/2022-03-joyn/blob/c9297ccd925ebb2c44dbc6eaa3effd8db5d2368a/splits/contracts/SplitFactory.sol#L132-L135)) ```solidity   function setPlatformFeeRecipient(     address _vault,     address _platformFeeRecipient   ) external onlyOwner { ```
