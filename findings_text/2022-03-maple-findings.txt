1. Use `!= 0` instead of `> 0` to Save Gas  Proof of Concept: MapleLoan.sol#L201 Migrator.sol#L25  Recommended Mitigation Steps: Change `>` to `!=` for small gas savings.  ========================================================================  2. More efficient gas usage by removing && operator  Proof of Concept: MapleLoanInternals.sol#L296 MapleLoanInternals.sol#L361-L364 MapleLoan.sol#L233  Recommended Mitigation Steps: Change to: ``` require((_nextPaymentDueDate == uint256(0)), "MLI:FL:LOAN_ACTIVE"); require((paymentsRemaining != uint256(0)), "MLI:FL:LOAN_ACTIVE"); ``` ========================================================================  3. The default of uint is already 0  Proof of Concept: MapleLoanInternals.sol#L369-L371  Recommended Mitigation Steps: considered remove 0 value can save gas  ========================================================================  4. considered using bool in `modifier lock()` can save gas  Proof of Concept: RevenueDistributionToken.sol#L38  Recommended Mitigation Steps: Example: ``` pragma solidity =0.8.7;  contract test {  bool internal _locked = true; uint256 internal _lock = 1;  modifier noReenter() {       require(_locked, "LOCKED");       _locked = true;       _;       _locked = false;   } modifier noReentir(){       require(_lock == 1, "LOCKED");       _lock = 2;       _;       _lock = 1; }    function abc() public noReenter returns(uint){       return 12121;       // 22066   }   function def() public noReentir returns(uint){       return 1234;       // 23752   } } ```  ======================================================================== 
## Adding Payable Keyword to Constructor **Context** [ERC20.sol](https://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/ERC20.sol), [Migrator.sol](https://github.com/maple-labs/mpl-migration/blob/a99549d96ed12cd4589a02bccf70747dbaebeb5b/contracts/Migrator.sol), [xMPL.sol](https://github.com/maple-labs/xMPL/blob/23301839c389142f9e75d88121316d9751833b71/contracts/xMPL.sol), [RevenueDistributionToken.sol](https://github.com/maple-labs/revenue-distribution-token/blob/41a3e40bf8c109ff19b38b80fde300c44fd42a3d/contracts/RevenueDistributionToken.sol).  **Description** Making the ```constructor()``` payable eliminates the need for an initial check of msg.value == 0 and saves 21 gas. This shouldn't not increase security risk and the savings is on deployment.  **Recommendation**  Add payable keyword to ```constructors()```   ## Catching The Array Length Prior To Loop. **Context** [MapleLoanInternals.sol](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol).  **Description** One can save gas by caching the array length (in stack) and using that set variable in the loop. This can be done for the function [_acceptNewTerms()](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L229).  **Recommendation**  Simply do something like so before the for loop: ```uint length = calls_.length```. Then add ```length``` in place of ```calls_.length``` in the for loop.   ## Function Ordering via Method ID **Context** [All contracts](https://github.com/code-423n4/2022-03-maple).  **Description** Most called functions could save gas by function ordering via Method ID. Calling a function at runtime will be cheaper if the function is positioned earlier in the order (has a relatively lower Method ID) because 22 gas are added to the cost of a function for every position that came before it. The caller can save on gas if you prioritize most called functions. One could use [This tool](https://emn178.github.io/solidity-optimize-name/) to help find alternative function names with lower Method IDs while keeping the original name intact.  **Recommendation**  Find a lower method ID name for the most called functions for example ```mostCalled()``` vs. ```mostCalled_41q()``` is cheaper by 44 gas.   ## Setting State Variable To Local Variable And Using Keyword delete **Context** [MapleLoanInternals.sol](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol) and [xMPL.sol](https://github.com/maple-labs/xMPL/blob/23301839c389142f9e75d88121316d9751833b71/contracts/xMPL.sol).  **Description** Several functions are clearing state variables by setting them to ```=uint256(0)```. To make these cheaper you could set the state variables to local variables within the function and then use the delete keyword to set them to their initial value. In ```MapleLoanInternals.sol``` there are: [_clearLoanAccounting()](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L63), [_repossess()](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L358), [_closeLoan()](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L143) and [_makePayment()](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L172).   In ```xMPL.sol``` there is: [_cleanupMigration()](https://github.com/maple-labs/xMPL/blob/23301839c389142f9e75d88121316d9751833b71/contracts/xMPL.sol#L91) which uses the ```delete``` keyword but do so to the state variable directly and it would be cheaper to set the state variables to local variables and then use ```delete```.  [scheduleMigration()](https://github.com/maple-labs/xMPL/blob/23301839c389142f9e75d88121316d9751833b71/contracts/xMPL.sol#L76) just setting the state variable and then using them to save gas.  **Recommendation**  Set the state variables to local variables within the function and then use the delete keyword to set them to their initial value. 
**[S]**: Suggested optimation, save a decent amount of gas without compromising readability;  **[M]**: Minor optimation, the amount of gas saved is minor, change when you see fit;  **[N]**: Non-preferred, the amount of gas saved is at cost of readability, only apply when gas saving is a top priority.  ## [S] `ERC20.sol#transferFrom()` Do not reduce approval on transferFrom if current allowance is type(uint256).max  The Wrapped Ether (WETH) ERC-20 contract has a gas optimization that does not update the allowance if it is the max uint.  The latest version of OpenZeppelin's ERC20 token contract also adopted this optimization.  https://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/ERC20.sol#L109-L113  ```solidity     function transferFrom(address owner_, address recipient_, uint256 amount_) external override returns (bool success_) {         _approve(owner_, msg.sender, allowance[owner_][msg.sender] - amount_);         _transfer(owner_, recipient_, amount_);         return true;     } ```  See: -   https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.5.0/contracts/token/ERC20/ERC20.sol#L336 -   https://github.com/OpenZeppelin/openzeppelin-contracts/pull/3085  ### Recommendation  Change to:  ```solidity     function transferFrom(address owner_, address recipient_, uint256 amount_) external override returns (bool success_) {         uint256 currentAllowance = allowance[owner_][msg.sender];         if (currentAllowance != type(uint256).max) {             _approve(owner_, msg.sender, currentAllowance - amount_);         }          _transfer(owner_, recipient_, amount_);         return true;     } ```  ## [S] Use immutable variables can save gas  https://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/ERC20.sol#L25-L26  ```solidity     string public override name;     string public override symbol; ```  https://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/ERC20.sol#L50-L54  ```solidity     constructor(string memory name_, string memory symbol_, uint8 decimals_) {         name     = name_;         symbol   = symbol_;         decimals = decimals_;     } ```  In `ERC20.sol`, `name` and `symbol` will never change, use immutable variable instead of storage variable can save gas.  ## [M] Validation can be done earlier to save gas  https://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/ERC20.sol#L75-L102  ```solidity     function permit(address owner_, address spender_, uint256 amount_, uint256 deadline_, uint8 v_, bytes32 r_, bytes32 s_) external override {         require(deadline_ >= block.timestamp, "ERC20:P:EXPIRED");          // Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines         // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}.         require(             uint256(s_) <= uint256(0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) &&             (v_ == 27 || v_ == 28),             "ERC20:P:MALLEABLE"         );          // Nonce realistically cannot overflow.         unchecked {             bytes32 digest = keccak256(                 abi.encodePacked(                     "\x19\x01",                     DOMAIN_SEPARATOR(),                     keccak256(abi.encode(PERMIT_TYPEHASH, owner_, spender_, amount_, nonces[owner_]++, deadline_))                 )             );              address recoveredAddress = ecrecover(digest, v_, r_, s_);              require(recoveredAddress == owner_ && owner_ != address(0), "ERC20:P:INVALID_SIGNATURE");         }          _approve(owner_, spender_, amount_);     } ```  Check if `owner_ != address(0)` earlier can avoid unnecessary computing when this check failed.   ### Recommendation  Change to:  ```solidity     function permit(address owner_, address spender_, uint256 amount_, uint256 deadline_, uint8 v_, bytes32 r_, bytes32 s_) external override {         require(deadline_ >= block.timestamp, "ERC20:P:EXPIRED");         require(owner_ != address(0), "...");          // Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines         // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}.         require(             uint256(s_) <= uint256(0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) &&             (v_ == 27 || v_ == 28),             "ERC20:P:MALLEABLE"         );          // Nonce realistically cannot overflow.         unchecked {             bytes32 digest = keccak256(                 abi.encodePacked(                     "\x19\x01",                     DOMAIN_SEPARATOR(),                     keccak256(abi.encode(PERMIT_TYPEHASH, owner_, spender_, amount_, nonces[owner_]++, deadline_))                 )             );              address recoveredAddress = ecrecover(digest, v_, r_, s_);              require(recoveredAddress == owner_, "ERC20:P:INVALID_SIGNATURE");         }          _approve(owner_, spender_, amount_);     } ```
# Save gas in for loops by unchecked arithmetic  The for loop of `_acceptNewTerms` in MapleLoanInternals.sol: https://github.com/maple-labs/loan/blob/main/contracts/MapleLoanInternals.sol#L258-L261  There is no overflow risk of `i`.  ## Recommendation  Use `unchecked` block to avoid overflow checks:  ```         for (uint256 i; i < calls_.length; ) {             ( bool success, ) = refinancer_.delegatecall(calls_[i]);             require(success, "MLI:ANT:FAILED");             unchecked {                 ++i;             }         } ``` 
# QA Report  ## Non-Critical Findings  ### Redundant type cast to `address`  #### Description  Variable `asset` is defined as `address public override asset`, the type casting to `address` is redundant.  #### Findings  [RevenueDistributionToken.sol#L162](https://github.com/maple-labs/revenue-distribution-token/blob/v1.0.0-beta.1/contracts/RevenueDistributionToken.sol#L162)   [RevenueDistributionToken.sol#L181](https://github.com/maple-labs/revenue-distribution-token/blob/v1.0.0-beta.1/contracts/RevenueDistributionToken.sol#L181)  #### Recommended mitigation steps  Remove redundant type cast.  From:  ```solidity require(ERC20Helper.transfer(address(asset), receiver_, assets_), "RDT:B:TRANSFER"); ```  To:  ```solidity require(ERC20Helper.transfer(asset, receiver_, assets_), "RDT:B:TRANSFER"); ```  ---  ### Open TODOs in code  #### Description  Open TODOs can hint at programming or architectural errors that still need to be fixed.  #### Findings  [RevenueDistributionToken.sol#L78](https://github.com/maple-labs/revenue-distribution-token/blob/v1.0.0-beta.1/contracts/RevenueDistributionToken.sol#L78)   [RevenueDistributionToken.sol#L276](https://github.com/maple-labs/revenue-distribution-token/blob/v1.0.0-beta.1/contracts/RevenueDistributionToken.sol#L276)    #### Recommended mitigation steps  Implement open TODOs and remove comments.  ### `xMPL.performMigration()` is safe to be called by everyone  #### Description  `xMPL.performMigration()` is currently only allowed to be called by the contract owner, but as there are no funds at risk and no downsides to having everyone (public) call the function, the modifier `onlyOwner` can be removed.  It even states so in the [README](https://github.com/maple-labs/xMPL/blob/v1.0.0-beta.1/README.md):  ``` 3. After the time delay, anyone can call `performMigration`, which executes the migration with the parameters set 10 days prior. ```  #### Findings  [xMPL.performMigration()](https://github.com/maple-labs/xMPL/blob/v1.0.0-beta.1/contracts/xMPL.sol#L51)  #### Recommended mitigation steps  Remove modifier `onlyOwner`.  ## Low Risk  None found. 
# Gas Optimizations  ### An array's length should be cached to save gas in for-loops  Reading array length at each iteration of the loop takes 6 gas (3 for mload and 3 to place memory_offset) in the stack.  Caching the array length in the stack saves around 3 gas per iteration.  #### Findings  [MapleLoanInternals.sol#L258](https://github.com/maple-labs/loan/blob/v3.0.0-beta.1/contracts/MapleLoanInternals.sol#L258)  #### Recommended mitigation steps  ```solidity uint length = calls_.length;  for (uint256 i; i < length; ++i) {     ( bool success, ) = refinancer_.delegatecall(calls_[i]);     require(success, "MLI:ANT:FAILED"); } ```  ---  ### Use `unchecked {}` primitive within for loops  Given the use of Solidity compiler >= 0.8.0, there are default arithmetic checks for mathematical operations which consume additional gas for such checks internally. In expressions where we are absolutely sure of no overflows/underflows, one can use the `unchecked` primitive to wrap such expressions to avoid checks and save gas.  #### Findings  [MapleLoanInternals.sol#L258](https://github.com/maple-labs/loan/blob/v3.0.0-beta.1/contracts/MapleLoanInternals.sol#L258)  #### Recommended mitigation steps  Change to  ```solidity for (uint256 i; i < calls_.length;) {     ( bool success, ) = refinancer_.delegatecall(calls_[i]);     require(success, "MLI:ANT:FAILED");      unchecked { ++i; } } ```  ---  ### Use assignment `=` instead of `+=`  Named return variable `lateInterest_` is unused before line [MapleLoanInternals.sol#L589](https://github.com/maple-labs/loan/blob/v3.0.0-beta.1/contracts/MapleLoanInternals.sol#L589), therefore it's not necessary to use `+=`.  #### Findings  [MapleLoanInternals.sol#L589](https://github.com/maple-labs/loan/blob/v3.0.0-beta.1/contracts/MapleLoanInternals.sol#L589)  #### Recommended mitigation steps  Change to assignment (`=`) to save gas.  ```solidity lateInterest_ = _getInterest(principal_, interestRate_ + lateInterestPremium_, fullDaysLate); lateInterest_ += (lateFeeRate_ * principal_) / SCALED_ONE; ```  ---  ### Unused named returns can be removed  #### Description  Removing unused named return variables can reduce gas usage and improve code clarity.  #### Recommended mitigation steps  Remove the unused named return variables or use them instead of creating additional variables.  #### Findings  **[RevenueDistributionToken.sol](https://github.com/maple-labs/revenue-distribution-token/blob/v1.0.0-beta.1/contracts/RevenueDistributionToken.sol)**  [#L193](https://github.com/maple-labs/revenue-distribution-token/blob/v1.0.0-beta.1/contracts/RevenueDistributionToken.sol#L193) unnecessary named return `apr_`  [#L196](https://github.com/maple-labs/revenue-distribution-token/blob/v1.0.0-beta.1/contracts/RevenueDistributionToken.sol#L196) unnecessary named return `balanceOfAssets_`  [#L258](https://github.com/maple-labs/revenue-distribution-token/blob/v1.0.0-beta.1/contracts/RevenueDistributionToken.sol#L258) unnecessary named return `totalManagedAssets_`  [#L284](https://github.com/maple-labs/revenue-distribution-token/blob/v1.0.0-beta.1/contracts/RevenueDistributionToken.sol#L284) unnecessary named return `result_`  **[MapleLoan.sol](https://github.com/maple-labs/loan/blob/v3.0.0-beta.1/contracts/MapleLoan.sol)**  [#L244](https://github.com/maple-labs/loan/blob/v3.0.0-beta.1/contracts/MapleLoan.sol#L244) unnecessary named return `collateral_`  [#L274-400](https://github.com/maple-labs/loan/blob/v3.0.0-beta.1/contracts/MapleLoan.sol#L274-L400)  **[MapleLoanInternals.sol](https://github.com/maple-labs/loan/blob/v3.0.0-beta.1/contracts/MapleLoanInternals.sol)**  [#L204](https://github.com/maple-labs/loan/blob/v3.0.0-beta.1/contracts/MapleLoanInternals.sol#L204) unnecessary named return `proposedRefinanceCommitment_`  [#L397](https://github.com/maple-labs/loan/blob/v3.0.0-beta.1/contracts/MapleLoanInternals.sol#L397) unnecessary named return `isMaintained_`  [#L434](https://github.com/maple-labs/loan/blob/v3.0.0-beta.1/contracts/MapleLoanInternals.sol#L434) unnecessary named return `unaccountedAmount_`  [#L442](https://github.com/maple-labs/loan/blob/v3.0.0-beta.1/contracts/MapleLoanInternals.sol#L422) unnecessary named return `mapleGlobals_`  [#L456](https://github.com/maple-labs/loan/blob/v3.0.0-beta.1/contracts/MapleLoanInternals.sol#L456) unnecessary named return `collateral_`  [#L495](https://github.com/maple-labs/loan/blob/v3.0.0-beta.1/contracts/MapleLoanInternals.sol#L495) unnecessary named return `interest_`  [#L594](https://github.com/maple-labs/loan/blob/v3.0.0-beta.1/contracts/MapleLoanInternals.sol#L594) unnecessary named return `periodicInterestRate_`  [#L599](https://github.com/maple-labs/loan/blob/v3.0.0-beta.1/contracts/MapleLoanInternals.sol#L599) unnecessary named return `refinanceCommitment_` 
## Low-impact Issues  ### Treasury fees are given to the lender on failure, rather than reverting ```solidity         if (!_sendFee(_mapleGlobals(), IMapleGlobalsLike.mapleTreasury.selector, treasuryFee_)) {             _claimableFunds += treasuryFee_;         } ``` https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L321-L323   ### Inconsistent `approve()` behavior between `ERC20` and `RevenueDistributionToken` `RevenueDistributionToken` considers an approval value of `type(uint256).max` as 'allow all amounts': ```solidity         if (callerAllowance == type(uint256).max) return; ``` https://github.com/maple-labs/revenue-distribution-token/blob/41a3e40bf8c109ff19b38b80fde300c44fd42a3d/contracts/RevenueDistributionToken.sol#L279  whereas `ERC20` considers it as a numerical amount: ```solidity         _approve(owner_, msg.sender, allowance[owner_][msg.sender] - amount_); ``` https://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/ERC20.sol#L110  These inconsistences will likely lead to confusion at some point in the future.  ### Incorrect revert string in `setEndingPrincipal()` ```solidity         require(endingPrincipal_ <= _principal, "R:DP:ABOVE_CURRENT_PRINCIPAL"); ``` https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/Refinancer.sol#L43  It should be `"R:SEP:ABOVE_CURRENT_PRINCIPAL"`.  ### IERC20 should be named IERC20Permit 1. File: erc20-1.0.0-beta.2/contracts/interfaces/IERC20.sol (lines [4-5](https://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/interfaces/IERC20.sol#L4-L5)) There may be cases in the future where you may not want EIP-2612 functionality due to deployment costs, and having the name `IERC20` taken will cause problems ```solidity /// @title Interface of the ERC20 standard as defined in the EIP, including ERC-2612 permit functionality. interface IERC20 { ```  ### IERC20 incorrectly includes `PERMIT_TYPEHASH` `PERMIT_TYPEHASH` is not part of the requirements for EIP-2612, so it shouldn't appear in the interface.  ```solidity     /**      *  @dev    Returns the permit type hash.      *  @return permitTypehash_ The permit type hash.      */     function PERMIT_TYPEHASH() external view returns (bytes32 permitTypehash_); ``` https://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/interfaces/IERC20.sol#L134-L138 OpenZeppelin has it as a `private` `constant`: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/52eeebecda140ebaf4ec8752ed119d8288287fac/contracts/token/ERC20/extensions/draft-ERC20Permit.sol#L28   ### Missing checks for `address(0x0)` when assigning values to `address` state variables  1. File: revenue-distribution-token-1.0.0-beta.1/contracts/RevenueDistributionToken.sol (line [73](https://github.com/maple-labs/revenue-distribution-token/blob/41a3e40bf8c109ff19b38b80fde300c44fd42a3d/contracts/RevenueDistributionToken.sol#L73)) ```solidity         pendingOwner = pendingOwner_; ```  ### Open TODOs There are many open TODOs throughout the various test files, but also some among the code files ``` ./revenue-distribution-token-1.0.0-beta.1/contracts/RevenueDistributionToken.sol:    // TODO: Revisit returns ./revenue-distribution-token-1.0.0-beta.1/contracts/RevenueDistributionToken.sol:        // TODO: investigate whether leave this `require()` in for clarity from error message, or let the safe math check in `callerAllowance - shares_` handle the underflow. ```  ### Incorrect Natspec ```solidity      *  @dev   Emits an event indicating that one account has set the allowance of another account over their tokens. ``` https://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/interfaces/IERC20.sol#L12 The natspec doesn't mention that the event is also emitted when `transferFrom()` is called, even though the natspec for `transferFrom()` explicitly mentions it.  ## Non-critical Issues  ### `_processEstablishmentFees()` should emit events when fee processing fails ```solidity     function _processEstablishmentFees(uint256 delegateFee_, uint256 treasuryFee_) internal {         if (!_sendFee(_lender, ILenderLike.poolDelegate.selector, delegateFee_)) {             _claimableFunds += delegateFee_;         }          if (!_sendFee(_mapleGlobals(), IMapleGlobalsLike.mapleTreasury.selector, treasuryFee_)) {             _claimableFunds += treasuryFee_;         }     } ``` https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L316-L324  ### Multiple `address` mappings can be combined into a single `mapping` of an `address` to a `struct`, where appropriate  1. File: erc20-1.0.0-beta.2/contracts/ERC20.sol (lines [32-34](https://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/ERC20.sol#L32-L34)) ```solidity     mapping(address => uint256) public override balanceOf;      mapping(address => mapping(address => uint256)) public override allowance; ```  ### Use scientific notation (e.g. `10e18`) rather than exponentiation (e.g. `10**18`)  1. File: loan-3.0.0-beta.1/contracts/MapleLoanInternals.sol (line [14](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L14)) ```solidity     uint256 private constant SCALED_ONE = uint256(10 ** 18); ```  ### `public` functions not called by the contract should be declared `external` instead Contracts [are allowed](https://docs.soliditylang.org/en/latest/contracts.html#function-overriding) to override their parents' functions and change the visibility from `external` to `public`.  1. File: loan-3.0.0-beta.1/contracts/MapleLoanFactory.sol (lines [16-18](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanFactory.sol#L16-L18)) ```solidity     function createInstance(bytes calldata arguments_, bytes32 salt_)         override(IMapleProxyFactory, MapleProxyFactory) public returns (             address instance_ ```  ### Use a more recent version of solidity Use a solidity version of at least 0.8.12 to get `string.concat()` to be used instead of `abi.encodePacked(<str>,<str>)`  1. File: erc20-1.0.0-beta.2/contracts/ERC20.sol (line [2](https://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/ERC20.sol#L2)) ```solidity pragma solidity ^0.8.7; ```  ### Typos `owner` => `owner_` https://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/interfaces/IERC20.sol#L129 https://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/interfaces/IERC20.sol#L132 https://github.com/maple-labs/mpl-migration/blob/a99549d96ed12cd4589a02bccf70747dbaebeb5b/contracts/Migrator.sol#L24 https://github.com/maple-labs/mpl-migration/blob/a99549d96ed12cd4589a02bccf70747dbaebeb5b/contracts/Migrator.sol#L26 https://github.com/maple-labs/mpl-migration/blob/a99549d96ed12cd4589a02bccf70747dbaebeb5b/contracts/Migrator.sol#L27 https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/interfaces/IOwnable.sol#L17  `account` => `account_` https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/interfaces/IOwnable.sol#L11  `Emits an event` => `Emitted when` https://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/interfaces/IERC20.sol#L12 https://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/interfaces/IERC20.sol#L20  `ERC-2612` => `EIP-2612` https://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/interfaces/IERC20.sol#L4   ### Grammar Throughout the various interfaces, most of the comments have fragments that end with periods. They should either be converted to actual sentences with both a noun phrase and a verb phrase, or the periods should be removed. 
# Lines of code  https://github.com/maple-labs/loan/blob/main/contracts/MapleLoanInternals.sol#L332-L344   # Vulnerability details  ## Impact MapleLoanInternals._sendFee should check returnData.length == 32 before decoding, otherwise if it returns bytes data, the abi.decode will return 0x20, result in lost tokens. ## Proof of Concept https://github.com/maple-labs/loan/blob/main/contracts/MapleLoanInternals.sol#L332-L344 This contract can test that when the function returns bytes data, abi.encode will decode the return value as 0x20. ``` pragma solidity 0.8.7; contract A{     address public destination;     uint256 public number;     function convertA() external{         (bool su,bytes memory ret )= address(this).call(abi.encodeWithSelector(this.ret.selector));         number = ret.length;         destination = abi.decode(ret, (address));     }     function ret() public returns(bytes memory){         return "0x74d754378a59Ab45d3E6CaC83f0b87E8E8719270";     } } ``` ## Tools Used None ## Recommended Mitigation Steps ```     function _sendFee(address lookup_, bytes4 selector_, uint256 amount_) internal returns (bool success_) {         if (amount_ == uint256(0)) return true;          ( bool success , bytes memory data ) = lookup_.call(abi.encodeWithSelector(selector_));  +       if (!success || data.length != uint256(32)) return false;          address destination = abi.decode(data, (address));          if (destination == address(0)) return false;          return ERC20Helper.transfer(_fundsAsset, destination, amount_);     } ```   
## Low and Non-critical * You should declare that the `RevenueDistributionToken` contract implements the IERC4626 interface * Forgot TODO comments before `updateVestingSchedule` and `_reduceCallerAllowance` functions in the `RevenueDistributionToken` contract * The `ERC20` contract's solidity version is ^0.8.7, while the other contracts' version is 0.8.7 
# Unresolved TODOs ``` ./revenue-distribution-token/contracts/RevenueDistributionToken.sol:78:    // TODO: Revisit returns ./revenue-distribution-token/contracts/RevenueDistributionToken.sol:276:        // TODO: investigate whether leave this `require()` in for clarity from error message, or let the safe math check in `callerAllowance - shares_` handle the underflow. ```  # Lack max fee in `_setEstablishmentFees` Recommend to hardcode some reasonable max fee to protect user https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L347  # Wrong comment re:`issuanceRate` It is the asset/second rate scaled by precision, i.e. already increased precision https://github.com/maple-labs/revenue-distribution-token/blob/41a3e40bf8c109ff19b38b80fde300c44fd42a3d/contracts/RevenueDistributionToken.sol#L28
1. Use `!= 0` instead of `> 0` to Save Gas  Proof of Concept: MapleLoan.sol#L201 Migrator.sol#L25  Recommended Mitigation Steps: Change `>` to `!=` for small gas savings.  ========================================================================  2. More efficient gas usage by removing && operator  Proof of Concept: MapleLoanInternals.sol#L296 MapleLoanInternals.sol#L361-L364 MapleLoan.sol#L233  Recommended Mitigation Steps: Change to: ``` require((_nextPaymentDueDate == uint256(0)), "MLI:FL:LOAN_ACTIVE"); require((paymentsRemaining != uint256(0)), "MLI:FL:LOAN_ACTIVE"); ``` ========================================================================  3. The default of uint is already 0  Proof of Concept: MapleLoanInternals.sol#L369-L371  Recommended Mitigation Steps: considered remove 0 value can save gas  ========================================================================  4. considered using bool in `modifier lock()` can save gas  Proof of Concept: RevenueDistributionToken.sol#L38  Recommended Mitigation Steps: Example: ``` pragma solidity =0.8.7;  contract test {  bool internal _locked = true; uint256 internal _lock = 1;  modifier noReenter() {       require(_locked, "LOCKED");       _locked = true;       _;       _locked = false;   } modifier noReentir(){       require(_lock == 1, "LOCKED");       _lock = 2;       _;       _lock = 1; }    function abc() public noReenter returns(uint){       return 12121;       // 22066   }   function def() public noReentir returns(uint){       return 1234;       // 23752   } } ```  ======================================================================== 
## Adding Payable Keyword to Constructor **Context** [ERC20.sol](https://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/ERC20.sol), [Migrator.sol](https://github.com/maple-labs/mpl-migration/blob/a99549d96ed12cd4589a02bccf70747dbaebeb5b/contracts/Migrator.sol), [xMPL.sol](https://github.com/maple-labs/xMPL/blob/23301839c389142f9e75d88121316d9751833b71/contracts/xMPL.sol), [RevenueDistributionToken.sol](https://github.com/maple-labs/revenue-distribution-token/blob/41a3e40bf8c109ff19b38b80fde300c44fd42a3d/contracts/RevenueDistributionToken.sol).  **Description** Making the ```constructor()``` payable eliminates the need for an initial check of msg.value == 0 and saves 21 gas. This shouldn't not increase security risk and the savings is on deployment.  **Recommendation**  Add payable keyword to ```constructors()```   ## Catching The Array Length Prior To Loop. **Context** [MapleLoanInternals.sol](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol).  **Description** One can save gas by caching the array length (in stack) and using that set variable in the loop. This can be done for the function [_acceptNewTerms()](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L229).  **Recommendation**  Simply do something like so before the for loop: ```uint length = calls_.length```. Then add ```length``` in place of ```calls_.length``` in the for loop.   ## Function Ordering via Method ID **Context** [All contracts](https://github.com/code-423n4/2022-03-maple).  **Description** Most called functions could save gas by function ordering via Method ID. Calling a function at runtime will be cheaper if the function is positioned earlier in the order (has a relatively lower Method ID) because 22 gas are added to the cost of a function for every position that came before it. The caller can save on gas if you prioritize most called functions. One could use [This tool](https://emn178.github.io/solidity-optimize-name/) to help find alternative function names with lower Method IDs while keeping the original name intact.  **Recommendation**  Find a lower method ID name for the most called functions for example ```mostCalled()``` vs. ```mostCalled_41q()``` is cheaper by 44 gas.   ## Setting State Variable To Local Variable And Using Keyword delete **Context** [MapleLoanInternals.sol](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol) and [xMPL.sol](https://github.com/maple-labs/xMPL/blob/23301839c389142f9e75d88121316d9751833b71/contracts/xMPL.sol).  **Description** Several functions are clearing state variables by setting them to ```=uint256(0)```. To make these cheaper you could set the state variables to local variables within the function and then use the delete keyword to set them to their initial value. In ```MapleLoanInternals.sol``` there are: [_clearLoanAccounting()](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L63), [_repossess()](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L358), [_closeLoan()](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L143) and [_makePayment()](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L172).   In ```xMPL.sol``` there is: [_cleanupMigration()](https://github.com/maple-labs/xMPL/blob/23301839c389142f9e75d88121316d9751833b71/contracts/xMPL.sol#L91) which uses the ```delete``` keyword but do so to the state variable directly and it would be cheaper to set the state variables to local variables and then use ```delete```.  [scheduleMigration()](https://github.com/maple-labs/xMPL/blob/23301839c389142f9e75d88121316d9751833b71/contracts/xMPL.sol#L76) just setting the state variable and then using them to save gas.  **Recommendation**  Set the state variables to local variables within the function and then use the delete keyword to set them to their initial value. 
**[S]**: Suggested optimation, save a decent amount of gas without compromising readability;  **[M]**: Minor optimation, the amount of gas saved is minor, change when you see fit;  **[N]**: Non-preferred, the amount of gas saved is at cost of readability, only apply when gas saving is a top priority.  ## [S] `ERC20.sol#transferFrom()` Do not reduce approval on transferFrom if current allowance is type(uint256).max  The Wrapped Ether (WETH) ERC-20 contract has a gas optimization that does not update the allowance if it is the max uint.  The latest version of OpenZeppelin's ERC20 token contract also adopted this optimization.  https://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/ERC20.sol#L109-L113  ```solidity     function transferFrom(address owner_, address recipient_, uint256 amount_) external override returns (bool success_) {         _approve(owner_, msg.sender, allowance[owner_][msg.sender] - amount_);         _transfer(owner_, recipient_, amount_);         return true;     } ```  See: -   https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.5.0/contracts/token/ERC20/ERC20.sol#L336 -   https://github.com/OpenZeppelin/openzeppelin-contracts/pull/3085  ### Recommendation  Change to:  ```solidity     function transferFrom(address owner_, address recipient_, uint256 amount_) external override returns (bool success_) {         uint256 currentAllowance = allowance[owner_][msg.sender];         if (currentAllowance != type(uint256).max) {             _approve(owner_, msg.sender, currentAllowance - amount_);         }          _transfer(owner_, recipient_, amount_);         return true;     } ```  ## [S] Use immutable variables can save gas  https://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/ERC20.sol#L25-L26  ```solidity     string public override name;     string public override symbol; ```  https://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/ERC20.sol#L50-L54  ```solidity     constructor(string memory name_, string memory symbol_, uint8 decimals_) {         name     = name_;         symbol   = symbol_;         decimals = decimals_;     } ```  In `ERC20.sol`, `name` and `symbol` will never change, use immutable variable instead of storage variable can save gas.  ## [M] Validation can be done earlier to save gas  https://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/ERC20.sol#L75-L102  ```solidity     function permit(address owner_, address spender_, uint256 amount_, uint256 deadline_, uint8 v_, bytes32 r_, bytes32 s_) external override {         require(deadline_ >= block.timestamp, "ERC20:P:EXPIRED");          // Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines         // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}.         require(             uint256(s_) <= uint256(0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) &&             (v_ == 27 || v_ == 28),             "ERC20:P:MALLEABLE"         );          // Nonce realistically cannot overflow.         unchecked {             bytes32 digest = keccak256(                 abi.encodePacked(                     "\x19\x01",                     DOMAIN_SEPARATOR(),                     keccak256(abi.encode(PERMIT_TYPEHASH, owner_, spender_, amount_, nonces[owner_]++, deadline_))                 )             );              address recoveredAddress = ecrecover(digest, v_, r_, s_);              require(recoveredAddress == owner_ && owner_ != address(0), "ERC20:P:INVALID_SIGNATURE");         }          _approve(owner_, spender_, amount_);     } ```  Check if `owner_ != address(0)` earlier can avoid unnecessary computing when this check failed.   ### Recommendation  Change to:  ```solidity     function permit(address owner_, address spender_, uint256 amount_, uint256 deadline_, uint8 v_, bytes32 r_, bytes32 s_) external override {         require(deadline_ >= block.timestamp, "ERC20:P:EXPIRED");         require(owner_ != address(0), "...");          // Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines         // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}.         require(             uint256(s_) <= uint256(0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) &&             (v_ == 27 || v_ == 28),             "ERC20:P:MALLEABLE"         );          // Nonce realistically cannot overflow.         unchecked {             bytes32 digest = keccak256(                 abi.encodePacked(                     "\x19\x01",                     DOMAIN_SEPARATOR(),                     keccak256(abi.encode(PERMIT_TYPEHASH, owner_, spender_, amount_, nonces[owner_]++, deadline_))                 )             );              address recoveredAddress = ecrecover(digest, v_, r_, s_);              require(recoveredAddress == owner_, "ERC20:P:INVALID_SIGNATURE");         }          _approve(owner_, spender_, amount_);     } ```
# Save gas in for loops by unchecked arithmetic  The for loop of `_acceptNewTerms` in MapleLoanInternals.sol: https://github.com/maple-labs/loan/blob/main/contracts/MapleLoanInternals.sol#L258-L261  There is no overflow risk of `i`.  ## Recommendation  Use `unchecked` block to avoid overflow checks:  ```         for (uint256 i; i < calls_.length; ) {             ( bool success, ) = refinancer_.delegatecall(calls_[i]);             require(success, "MLI:ANT:FAILED");             unchecked {                 ++i;             }         } ``` 
# QA Report  ## Non-Critical Findings  ### Redundant type cast to `address`  #### Description  Variable `asset` is defined as `address public override asset`, the type casting to `address` is redundant.  #### Findings  [RevenueDistributionToken.sol#L162](https://github.com/maple-labs/revenue-distribution-token/blob/v1.0.0-beta.1/contracts/RevenueDistributionToken.sol#L162)   [RevenueDistributionToken.sol#L181](https://github.com/maple-labs/revenue-distribution-token/blob/v1.0.0-beta.1/contracts/RevenueDistributionToken.sol#L181)  #### Recommended mitigation steps  Remove redundant type cast.  From:  ```solidity require(ERC20Helper.transfer(address(asset), receiver_, assets_), "RDT:B:TRANSFER"); ```  To:  ```solidity require(ERC20Helper.transfer(asset, receiver_, assets_), "RDT:B:TRANSFER"); ```  ---  ### Open TODOs in code  #### Description  Open TODOs can hint at programming or architectural errors that still need to be fixed.  #### Findings  [RevenueDistributionToken.sol#L78](https://github.com/maple-labs/revenue-distribution-token/blob/v1.0.0-beta.1/contracts/RevenueDistributionToken.sol#L78)   [RevenueDistributionToken.sol#L276](https://github.com/maple-labs/revenue-distribution-token/blob/v1.0.0-beta.1/contracts/RevenueDistributionToken.sol#L276)    #### Recommended mitigation steps  Implement open TODOs and remove comments.  ### `xMPL.performMigration()` is safe to be called by everyone  #### Description  `xMPL.performMigration()` is currently only allowed to be called by the contract owner, but as there are no funds at risk and no downsides to having everyone (public) call the function, the modifier `onlyOwner` can be removed.  It even states so in the [README](https://github.com/maple-labs/xMPL/blob/v1.0.0-beta.1/README.md):  ``` 3. After the time delay, anyone can call `performMigration`, which executes the migration with the parameters set 10 days prior. ```  #### Findings  [xMPL.performMigration()](https://github.com/maple-labs/xMPL/blob/v1.0.0-beta.1/contracts/xMPL.sol#L51)  #### Recommended mitigation steps  Remove modifier `onlyOwner`.  ## Low Risk  None found. 
# Gas Optimizations  ### An array's length should be cached to save gas in for-loops  Reading array length at each iteration of the loop takes 6 gas (3 for mload and 3 to place memory_offset) in the stack.  Caching the array length in the stack saves around 3 gas per iteration.  #### Findings  [MapleLoanInternals.sol#L258](https://github.com/maple-labs/loan/blob/v3.0.0-beta.1/contracts/MapleLoanInternals.sol#L258)  #### Recommended mitigation steps  ```solidity uint length = calls_.length;  for (uint256 i; i < length; ++i) {     ( bool success, ) = refinancer_.delegatecall(calls_[i]);     require(success, "MLI:ANT:FAILED"); } ```  ---  ### Use `unchecked {}` primitive within for loops  Given the use of Solidity compiler >= 0.8.0, there are default arithmetic checks for mathematical operations which consume additional gas for such checks internally. In expressions where we are absolutely sure of no overflows/underflows, one can use the `unchecked` primitive to wrap such expressions to avoid checks and save gas.  #### Findings  [MapleLoanInternals.sol#L258](https://github.com/maple-labs/loan/blob/v3.0.0-beta.1/contracts/MapleLoanInternals.sol#L258)  #### Recommended mitigation steps  Change to  ```solidity for (uint256 i; i < calls_.length;) {     ( bool success, ) = refinancer_.delegatecall(calls_[i]);     require(success, "MLI:ANT:FAILED");      unchecked { ++i; } } ```  ---  ### Use assignment `=` instead of `+=`  Named return variable `lateInterest_` is unused before line [MapleLoanInternals.sol#L589](https://github.com/maple-labs/loan/blob/v3.0.0-beta.1/contracts/MapleLoanInternals.sol#L589), therefore it's not necessary to use `+=`.  #### Findings  [MapleLoanInternals.sol#L589](https://github.com/maple-labs/loan/blob/v3.0.0-beta.1/contracts/MapleLoanInternals.sol#L589)  #### Recommended mitigation steps  Change to assignment (`=`) to save gas.  ```solidity lateInterest_ = _getInterest(principal_, interestRate_ + lateInterestPremium_, fullDaysLate); lateInterest_ += (lateFeeRate_ * principal_) / SCALED_ONE; ```  ---  ### Unused named returns can be removed  #### Description  Removing unused named return variables can reduce gas usage and improve code clarity.  #### Recommended mitigation steps  Remove the unused named return variables or use them instead of creating additional variables.  #### Findings  **[RevenueDistributionToken.sol](https://github.com/maple-labs/revenue-distribution-token/blob/v1.0.0-beta.1/contracts/RevenueDistributionToken.sol)**  [#L193](https://github.com/maple-labs/revenue-distribution-token/blob/v1.0.0-beta.1/contracts/RevenueDistributionToken.sol#L193) unnecessary named return `apr_`  [#L196](https://github.com/maple-labs/revenue-distribution-token/blob/v1.0.0-beta.1/contracts/RevenueDistributionToken.sol#L196) unnecessary named return `balanceOfAssets_`  [#L258](https://github.com/maple-labs/revenue-distribution-token/blob/v1.0.0-beta.1/contracts/RevenueDistributionToken.sol#L258) unnecessary named return `totalManagedAssets_`  [#L284](https://github.com/maple-labs/revenue-distribution-token/blob/v1.0.0-beta.1/contracts/RevenueDistributionToken.sol#L284) unnecessary named return `result_`  **[MapleLoan.sol](https://github.com/maple-labs/loan/blob/v3.0.0-beta.1/contracts/MapleLoan.sol)**  [#L244](https://github.com/maple-labs/loan/blob/v3.0.0-beta.1/contracts/MapleLoan.sol#L244) unnecessary named return `collateral_`  [#L274-400](https://github.com/maple-labs/loan/blob/v3.0.0-beta.1/contracts/MapleLoan.sol#L274-L400)  **[MapleLoanInternals.sol](https://github.com/maple-labs/loan/blob/v3.0.0-beta.1/contracts/MapleLoanInternals.sol)**  [#L204](https://github.com/maple-labs/loan/blob/v3.0.0-beta.1/contracts/MapleLoanInternals.sol#L204) unnecessary named return `proposedRefinanceCommitment_`  [#L397](https://github.com/maple-labs/loan/blob/v3.0.0-beta.1/contracts/MapleLoanInternals.sol#L397) unnecessary named return `isMaintained_`  [#L434](https://github.com/maple-labs/loan/blob/v3.0.0-beta.1/contracts/MapleLoanInternals.sol#L434) unnecessary named return `unaccountedAmount_`  [#L442](https://github.com/maple-labs/loan/blob/v3.0.0-beta.1/contracts/MapleLoanInternals.sol#L422) unnecessary named return `mapleGlobals_`  [#L456](https://github.com/maple-labs/loan/blob/v3.0.0-beta.1/contracts/MapleLoanInternals.sol#L456) unnecessary named return `collateral_`  [#L495](https://github.com/maple-labs/loan/blob/v3.0.0-beta.1/contracts/MapleLoanInternals.sol#L495) unnecessary named return `interest_`  [#L594](https://github.com/maple-labs/loan/blob/v3.0.0-beta.1/contracts/MapleLoanInternals.sol#L594) unnecessary named return `periodicInterestRate_`  [#L599](https://github.com/maple-labs/loan/blob/v3.0.0-beta.1/contracts/MapleLoanInternals.sol#L599) unnecessary named return `refinanceCommitment_` 
## Low-impact Issues  ### Treasury fees are given to the lender on failure, rather than reverting ```solidity         if (!_sendFee(_mapleGlobals(), IMapleGlobalsLike.mapleTreasury.selector, treasuryFee_)) {             _claimableFunds += treasuryFee_;         } ``` https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L321-L323   ### Inconsistent `approve()` behavior between `ERC20` and `RevenueDistributionToken` `RevenueDistributionToken` considers an approval value of `type(uint256).max` as 'allow all amounts': ```solidity         if (callerAllowance == type(uint256).max) return; ``` https://github.com/maple-labs/revenue-distribution-token/blob/41a3e40bf8c109ff19b38b80fde300c44fd42a3d/contracts/RevenueDistributionToken.sol#L279  whereas `ERC20` considers it as a numerical amount: ```solidity         _approve(owner_, msg.sender, allowance[owner_][msg.sender] - amount_); ``` https://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/ERC20.sol#L110  These inconsistences will likely lead to confusion at some point in the future.  ### Incorrect revert string in `setEndingPrincipal()` ```solidity         require(endingPrincipal_ <= _principal, "R:DP:ABOVE_CURRENT_PRINCIPAL"); ``` https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/Refinancer.sol#L43  It should be `"R:SEP:ABOVE_CURRENT_PRINCIPAL"`.  ### IERC20 should be named IERC20Permit 1. File: erc20-1.0.0-beta.2/contracts/interfaces/IERC20.sol (lines [4-5](https://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/interfaces/IERC20.sol#L4-L5)) There may be cases in the future where you may not want EIP-2612 functionality due to deployment costs, and having the name `IERC20` taken will cause problems ```solidity /// @title Interface of the ERC20 standard as defined in the EIP, including ERC-2612 permit functionality. interface IERC20 { ```  ### IERC20 incorrectly includes `PERMIT_TYPEHASH` `PERMIT_TYPEHASH` is not part of the requirements for EIP-2612, so it shouldn't appear in the interface.  ```solidity     /**      *  @dev    Returns the permit type hash.      *  @return permitTypehash_ The permit type hash.      */     function PERMIT_TYPEHASH() external view returns (bytes32 permitTypehash_); ``` https://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/interfaces/IERC20.sol#L134-L138 OpenZeppelin has it as a `private` `constant`: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/52eeebecda140ebaf4ec8752ed119d8288287fac/contracts/token/ERC20/extensions/draft-ERC20Permit.sol#L28   ### Missing checks for `address(0x0)` when assigning values to `address` state variables  1. File: revenue-distribution-token-1.0.0-beta.1/contracts/RevenueDistributionToken.sol (line [73](https://github.com/maple-labs/revenue-distribution-token/blob/41a3e40bf8c109ff19b38b80fde300c44fd42a3d/contracts/RevenueDistributionToken.sol#L73)) ```solidity         pendingOwner = pendingOwner_; ```  ### Open TODOs There are many open TODOs throughout the various test files, but also some among the code files ``` ./revenue-distribution-token-1.0.0-beta.1/contracts/RevenueDistributionToken.sol:    // TODO: Revisit returns ./revenue-distribution-token-1.0.0-beta.1/contracts/RevenueDistributionToken.sol:        // TODO: investigate whether leave this `require()` in for clarity from error message, or let the safe math check in `callerAllowance - shares_` handle the underflow. ```  ### Incorrect Natspec ```solidity      *  @dev   Emits an event indicating that one account has set the allowance of another account over their tokens. ``` https://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/interfaces/IERC20.sol#L12 The natspec doesn't mention that the event is also emitted when `transferFrom()` is called, even though the natspec for `transferFrom()` explicitly mentions it.  ## Non-critical Issues  ### `_processEstablishmentFees()` should emit events when fee processing fails ```solidity     function _processEstablishmentFees(uint256 delegateFee_, uint256 treasuryFee_) internal {         if (!_sendFee(_lender, ILenderLike.poolDelegate.selector, delegateFee_)) {             _claimableFunds += delegateFee_;         }          if (!_sendFee(_mapleGlobals(), IMapleGlobalsLike.mapleTreasury.selector, treasuryFee_)) {             _claimableFunds += treasuryFee_;         }     } ``` https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L316-L324  ### Multiple `address` mappings can be combined into a single `mapping` of an `address` to a `struct`, where appropriate  1. File: erc20-1.0.0-beta.2/contracts/ERC20.sol (lines [32-34](https://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/ERC20.sol#L32-L34)) ```solidity     mapping(address => uint256) public override balanceOf;      mapping(address => mapping(address => uint256)) public override allowance; ```  ### Use scientific notation (e.g. `10e18`) rather than exponentiation (e.g. `10**18`)  1. File: loan-3.0.0-beta.1/contracts/MapleLoanInternals.sol (line [14](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L14)) ```solidity     uint256 private constant SCALED_ONE = uint256(10 ** 18); ```  ### `public` functions not called by the contract should be declared `external` instead Contracts [are allowed](https://docs.soliditylang.org/en/latest/contracts.html#function-overriding) to override their parents' functions and change the visibility from `external` to `public`.  1. File: loan-3.0.0-beta.1/contracts/MapleLoanFactory.sol (lines [16-18](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanFactory.sol#L16-L18)) ```solidity     function createInstance(bytes calldata arguments_, bytes32 salt_)         override(IMapleProxyFactory, MapleProxyFactory) public returns (             address instance_ ```  ### Use a more recent version of solidity Use a solidity version of at least 0.8.12 to get `string.concat()` to be used instead of `abi.encodePacked(<str>,<str>)`  1. File: erc20-1.0.0-beta.2/contracts/ERC20.sol (line [2](https://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/ERC20.sol#L2)) ```solidity pragma solidity ^0.8.7; ```  ### Typos `owner` => `owner_` https://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/interfaces/IERC20.sol#L129 https://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/interfaces/IERC20.sol#L132 https://github.com/maple-labs/mpl-migration/blob/a99549d96ed12cd4589a02bccf70747dbaebeb5b/contracts/Migrator.sol#L24 https://github.com/maple-labs/mpl-migration/blob/a99549d96ed12cd4589a02bccf70747dbaebeb5b/contracts/Migrator.sol#L26 https://github.com/maple-labs/mpl-migration/blob/a99549d96ed12cd4589a02bccf70747dbaebeb5b/contracts/Migrator.sol#L27 https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/interfaces/IOwnable.sol#L17  `account` => `account_` https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/interfaces/IOwnable.sol#L11  `Emits an event` => `Emitted when` https://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/interfaces/IERC20.sol#L12 https://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/interfaces/IERC20.sol#L20  `ERC-2612` => `EIP-2612` https://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/interfaces/IERC20.sol#L4   ### Grammar Throughout the various interfaces, most of the comments have fragments that end with periods. They should either be converted to actual sentences with both a noun phrase and a verb phrase, or the periods should be removed. 
# Lines of code  https://github.com/maple-labs/loan/blob/main/contracts/MapleLoanInternals.sol#L332-L344   # Vulnerability details  ## Impact MapleLoanInternals._sendFee should check returnData.length == 32 before decoding, otherwise if it returns bytes data, the abi.decode will return 0x20, result in lost tokens. ## Proof of Concept https://github.com/maple-labs/loan/blob/main/contracts/MapleLoanInternals.sol#L332-L344 This contract can test that when the function returns bytes data, abi.encode will decode the return value as 0x20. ``` pragma solidity 0.8.7; contract A{     address public destination;     uint256 public number;     function convertA() external{         (bool su,bytes memory ret )= address(this).call(abi.encodeWithSelector(this.ret.selector));         number = ret.length;         destination = abi.decode(ret, (address));     }     function ret() public returns(bytes memory){         return "0x74d754378a59Ab45d3E6CaC83f0b87E8E8719270";     } } ``` ## Tools Used None ## Recommended Mitigation Steps ```     function _sendFee(address lookup_, bytes4 selector_, uint256 amount_) internal returns (bool success_) {         if (amount_ == uint256(0)) return true;          ( bool success , bytes memory data ) = lookup_.call(abi.encodeWithSelector(selector_));  +       if (!success || data.length != uint256(32)) return false;          address destination = abi.decode(data, (address));          if (destination == address(0)) return false;          return ERC20Helper.transfer(_fundsAsset, destination, amount_);     } ```   
## Low and Non-critical * You should declare that the `RevenueDistributionToken` contract implements the IERC4626 interface * Forgot TODO comments before `updateVestingSchedule` and `_reduceCallerAllowance` functions in the `RevenueDistributionToken` contract * The `ERC20` contract's solidity version is ^0.8.7, while the other contracts' version is 0.8.7 
# Unresolved TODOs ``` ./revenue-distribution-token/contracts/RevenueDistributionToken.sol:78:    // TODO: Revisit returns ./revenue-distribution-token/contracts/RevenueDistributionToken.sol:276:        // TODO: investigate whether leave this `require()` in for clarity from error message, or let the safe math check in `callerAllowance - shares_` handle the underflow. ```  # Lack max fee in `_setEstablishmentFees` Recommend to hardcode some reasonable max fee to protect user https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L347  # Wrong comment re:`issuanceRate` It is the asset/second rate scaled by precision, i.e. already increased precision https://github.com/maple-labs/revenue-distribution-token/blob/41a3e40bf8c109ff19b38b80fde300c44fd42a3d/contracts/RevenueDistributionToken.sol#L28
