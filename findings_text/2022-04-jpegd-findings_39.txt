# Lines of code  https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/FungibleAssetVaultForDAO.sol#L201   # Vulnerability details  ## Impact  Function `FungibleAssetVaultForDAO.withdraw` in line 201 uses native `transfer` function to send ETH to `msg.sender`.  This is unsafe as transfer has hard coded gas budget (2300 gas) and can fail when the user is a smart contract. Especially when this contract is for DAO and ecosystem contracts as documentation.   ## Proof-of-concept https://github.com/code-423n4/2022-04-jpegd/blob/e72861a9ccb707ced9015166fbded5c97c6991b6/contracts/vaults/FungibleAssetVaultForDAO.sol#L201   ## Tools Used Manual code review  ## Recommended Mitigation Steps  All functions have a `nonReentrant` modifier already, so reentrancy is not an issue and `transfer()` can be replaced.  Using low-level call.value(amount) with the corresponding result check or using the OpenZeppelin Address.sendValue is advised https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol#L60   
