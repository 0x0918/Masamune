# QA Report  ## Table of Contents  - [summary](#summary) - [hash collision with abi.encodePacked](#hash-collision-with-abi.encodepacked) - [Immutable addresses lack zero-address check](#immutable-addresses-lack-zero-address-check) - [Receive function](#receive-function) - [Setters should check the input value](#setters-should-check-the-input-value) - [Unchecked transfer](#unchecked-transfer) - [Comment Missing function parameter](#comment-missing-function-parameter) - [Commented Code](#commented-code) - [Constants instead of magic numbers](#constants-instead-of-magic-numbers) - [Event should be emitted in setters](#event-should-be-emitted-in-setters) - [Function missing comments](#function-missing-comments) - [Function order](#function-order) - [Inconsistent spacing](#inconsistent-spacing) - [Non-library files should use fixed compiler versions](#non-library-files-should-use-fixed-compiler-versions) - [Non-library files should use the same compiler version](#non-library-files-should-use-the-same-compiler-version) - [Public functions can be external](#public-functions-can-be-external) - [Require statements should have descriptive strings](#require-statements-should-have-descriptive-strings) - [Scientific notation](#scientific-notation) - [Timelock for critical parameter change](#timelock-for-critical-parameter-change) - [Uint256 alias](#uint256-alias)     # summary  > Few vulnerabilities were found, the main concerns are with potential lock of ETH in some contracts   # hash collision with abi.encodePacked  ## IMPACT  strings and bytes are encoded with padding when using `abi.encodePacked`. This can lead to [hash collision](https://docs.soliditylang.org/en/v0.8.15/abi-spec.html#non-standard-packed-mode) when passing the result to `keccak256`  ## SEVERITY  Low  ## PROOF OF CONCEPT  Instances include:  ### NibblVaultFactory.sol  [here](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L71-L72) ``` bytes memory code = abi.encodePacked(type(ProxyVault).creationCode, uint256(uint160(address(this)))); bytes32 _hash = keccak256(abi.encodePacked(bytes1(0xff), address(this), newsalt, keccak256(code))) ```  and [here](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L81), with a string ``` ProxyBasket{salt: keccak256(abi.encodePacked(_curator, _mix))}(basketImplementation)) ```   ## TOOLS USED  Manual Analysis  ## MITIGATION  Use `abi.encode()` instead.  # Immutable addresses lack zero-address check  ## IMPACT  constructors should check the address written in an immutable address variable is not the zero address  ## SEVERITY  Low  ## PROOF OF CONCEPT  Instances include:    ### ProxyBasket.sol  [implementation = payable(_implementation)](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Proxy/ProxyBasket.sol#L20)  ### ProxyVault.sol  [factory = payable(_factory)](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Proxy/ProxyVault.sol#L20)  ## TOOLS USED  Manual Analysis  ## MITIGATION  Add a zero address check for the immutable variables aforementioned.  # Receive function  ## PROBLEM  `ProxyBasket` and `ProxyDelegate` have `receive()` functions, but do not have any withdrawal function. A call to these contracts will trigger the `fallback` function. But if a call sends ETH to these contracts with no `msg.data`, `fallback` will not be triggered, only `receive()`, resulting in the ETH getting locked.  ## SEVERITY  Low  ## PROOF OF CONCEPT  ### ProxyBasket.sol  [receive() external payable {    }](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Proxy/ProxyBasket.sol#L56)  ### ProxyVault.sol  [receive() external payable {    }](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Proxy/ProxyVault.sol#L56)  ## TOOLS USED  Manual Analysis  ## MITIGATION  Add `require(0 == msg.value)` in `receive()` or remove the function altogether.   # Setters should check the input value  ## PROBLEM  Setters and initializers should check the input value - ie make revert if it is the zero address or zero  ## SEVERITY  Low  ## PROOF OF CONCEPT  Instances include:  ### NibblVault.sol  [_assetAddress lacks a check in initialize()](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L191)\ [_curator lacks a check in initialize()](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L193)\ [_newCurator lacks a check in updateCurator()](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L487)  ### NibblVaultFactory.sol  [_vaultImplementation lacks a check in the constructor](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L24)\ [_feeTo lacks a check in the constructor](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L25)\ [_basketImplementation lacks a check in the constructor](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L26)\ [_newBasketImplementation lacks a check in proposeNewBasketImplementation](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L100)\ [_newFeeAddress lacks a check in proposeNewAdminFeeAddress](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L124)\ [_newVaultImplementation lacks a check in proposeNewVaultImplementation](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L158)  ## TOOLS USED  Manual Analysis  ## MITIGATION  Add non-zero checks - address - to the setters aforementioned.   # Unchecked transfer  ## PROBLEM  Several tokens do not revert in case of `ERC20.transfer()` failure and return false. It is good practice to use `safeTransfer()` from OpenZeppelin, or simply check the return value of `.transfer()`  ## SEVERITY  Low  ## PROOF OF CONCEPT  Instances include:  ### NibblVault.sol  [IERC20(_asset).transfer(_to, IERC20(_asset).balanceOf(address(this)))](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L517)\ [IERC20(_assets[i]).transfer(_to, IERC20(_assets[i]).balanceOf(address(this)))](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L526)  ## TOOLS USED  Manual Analysis  ## MITIGATION  use `safeTransfer()` from OpenZeppelin or check the return value of `.transfer()`.   # Comment Missing function parameter  ## PROBLEM  Some of the function comments are missing function parameters or returns  ## SEVERITY  Non-Critical  ## PROOF OF CONCEPT  Instances include:  ### NibblVault.sol  [@param _totalSupply](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L275)\ [@param _totalSupply](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L287)\ [@param _totalSupply](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L335)\ [@param _totalSupply](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L347)\ [@return _saleReturn](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L362)\ [@return _buyoutBid](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L398)\ [@param _to](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L464)\ [@return _amtOut](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L464)\ [@return _feeAccruedCurator](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L474)  ### NibblVaultFactory.sol   [@return _proxyVault](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L47)\ [@return _vault](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L69)   ## TOOLS USED  Manual Analysis  ## MITIGATION  Add a comment for these parameters  # Commented code  ## PROBLEM  There are portions of commented code in some files.  ## SEVERITY  Non-Critical  ## PROOF OF CONCEPT  Instances include:  ### NibblVault.sol  [// _purchaseReturn = _buySecondaryCurve(_to, _lowerCurveDiff)](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L321)\ [// buyoutValuationDeposit = _currentValuation - ((primaryReserveBalance - fictitiousPrimaryReserveBalance) + secondaryReserveBalance)](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L405)  ## TOOLS USED  Manual Analysis  ## MITIGATION  Remove commented code  # Constants instead of magic numbers  ## PROBLEM  It is best practice to use constant variables rather than literal values to make the code easier to understand and maintain.  ## SEVERITY  Non-Critical  ## PROOF OF CONCEPT  Instances include:  ### NibblVault.sol  [1e18](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L183)\ [1e18](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L195)\ [1e18](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L226)\ [1e18](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L253)\ [2**32](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L303)\ [2**32](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L365)\ [2**32](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L413)\ [2**32](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L445)   ## TOOLS USED  Manual Analysis  ## MITIGATION  Define constant variables for the literal values aforementioned.  # Event should be emitted in setters  ## PROBLEM  Setters should emit an event so that Dapps can detect important changes to storage  ## SEVERITY  Non-Critical  ## PROOF OF CONCEPT  Instances include:   ### NibblVault.sol  [function updateCurator](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L485)  ### NibblVaultFactory.sol  [function updateBasketImplementation](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L106)\ [function updateNewAdminFeeAddress](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L130)\ [function updateNewAdminFee](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L148)\ [function updateVaultImplementation](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L165)   ## TOOLS USED  Manual Analysis  ## MITIGATION  emit an event in all setters  # Function missing comments  ## PROBLEM  Some functions are missing Natspec comments  ## SEVERITY  Non-Critical  ## PROOF OF CONCEPT  Instances include:  ### NibblVault.sol  [function permit](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L552-L565)\ [function safeTransferETH](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L568)\ [function onERC721Received](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L573)\ [function onERC1155Received](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L577)\ [function onERC1155BatchReceived](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L581)  ### NibblVaultFactory.sol  [function getVaults](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L76)\ [function createBasket](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L80)\ [function getBasketAddress](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L88)\ [function withdrawAdminFee](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L112)   ### Twav.sol  [function getTwavObservations()](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Twav/Twav.sol#L44)  ### EIP712Base.sol  [function INIT_EIP712()](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Utilities/EIP712Base.sol#L15)\ [function getChainID()](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Utilities/EIP712Base.sol#L27)  ## TOOLS USED  Manual Analysis  ## MITIGATION  Add comments to these functions  # Function order  ## PROBLEM  Functions should be ordered following the [Soldiity conventions](https://docs.soliditylang.org/en/v0.8.15/style-guide.html#order-of-functions): `receive()` function should be placed after the constructor and before every other function.  ## SEVERITY  Non-Critical  ## PROOF OF CONCEPT  Several contracts have `receive()` at the end:   - NibblVault.sol  - NibblVaultFactory.sol  - Basket.sol  ## TOOLS USED  Manual Analysis  ## MITIGATION  Place the `receive()`functions after the constructor, before all the other functions.  # Inconsistent spacing  ## PROBLEM  Spacing is present in the vast majority of comments (`// x`), but some comments do not have space.   ## SEVERITY  Non-Critical  ## PROOF OF CONCEPT  ### NibblVault.sol  [///@notice current status of vault](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L122)\ [///@notice reenterancy guard](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L125)\ [///@notice withdraw multiple ERC721s](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L500)   ## TOOLS USED  Manual Analysis  ## MITIGATION  Use spacings consistently in all comments.   # Non-library files should use fixed compiler versions  ## PROBLEM  contracts should be compiled using a fixed compiler version. Locking the pragma helps ensure that contracts do not accidentally get deployed using a different compiler version with which they have been tested the most   ## SEVERITY  Non-Critical     ## PROOF OF CONCEPT   `AccessControlMechanism.sol` has a floating pragma.    ## TOOLS USED  Manual Analysis    ## MITIGATION  Used a fixed compiler version  # Non-library files should use the same compiler version  ## PROBLEM  contracts within the scope should be compiled using the same compiler version.    ## SEVERITY  Non-Critical     ## PROOF OF CONCEPT  All the files in scope have the compiler version set to `0.8.10`, except for `AccessControlMechanism.sol` which has its pragma set to `^0.8.0`.   ## TOOLS USED  Manual Analysis    ## MITIGATION  Use the same compiler version throughout the contracts  # Public functions can be external  ## PROBLEM  It is good practice to mark functions as `external` instead of `public` if they are not called by the contract where they are defined.  ## SEVERITY  Non-Critical  ## PROOF OF CONCEPT  Instances include:  ### NibblVaultFactory.sol  [function getVaultAddress](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L64-L74)\ [function getVaults](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L76-L77)\ [function createBasket](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L80-L86)\ [function getBasketAddress](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L88-L92)  ### Twav.sol  [function getTwavObservations](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Twav/Twav.sol#L44)  ## TOOLS USED  Manual Analysis  ## MITIGATION  Declare these functions as `external` instead of `public`  # Require statements should have descriptive strings  ## PROBLEM  Some require statements are missing error strings, which makes it more difficult to debug when the function reverts.  ### SEVERITY  Non-critical  ## PROOF OF CONCEPT   ### NibblVaultFactory.sol   [require(_success)](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L114)  ## TOOL USED  Manual Analysis  ## MITIGATION  Add error strings to all require statements.  # Scientific notation  ## PROBLEM  For readability, it is best to use scientific notation (e.g `10e5`) rather than decimal literals(`100000`) or exponentiation(`10**5`). Underscores are used throughout the contracts and do improve readability too, so this is more of a suggestion.  ## SEVERITY  Non-Critical  ## PROOF OF CONCEPT  Instances include:  ### NibblVault.sol  [uint256 private constant SCALE = 1_000_000](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L23)  ## TOOLS USED  Manual Analysis   # Timelock for critical parameter change  ## PROBLEM  It is good practice to add timelock to critical parameters changes, such as admin changes, to give users time to react.     ## SEVERITY  Non-Critical     ## PROOF OF CONCEPT  Instances include:   ### NibblVault.sol  There is no timelock in [updateCurator](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L485-L487). If the curator were to input an incorrect address here, they would lose all the curators fees accrued.   ## TOOLS USED  Manual Analysis    ## MITIGATION  Add a timelock to `updateCurator`   # Uint256 alias  ## IMPACT  `uint` is an alias for `uint256`.  It is better to use uint256: it brings readability and consistency in the code, and it future proofs it in case of any changes to the alias of uint. This is all the more valid as `uint256` is used throughout the contracts, `uint` is only used in few instances.   ## SEVERITY  Non-Critical     ## PROOF OF CONCEPT  ### Nibblvault.sol  [uint _primaryReserveBalance = (primaryReserveRatio * _initialTokenSupply * _initialTokenPrice) / (SCALE * 1e18)](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L195)\ [uint _secondaryReserveBalance = secondaryReserveBalance](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L289)\ [uint _primaryReserveBalance = primaryReserveBalance](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L336)\ [uint _secondaryReserveBalance = secondaryReserveBalance](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L348)\ [uint _amount = unsettledBids[msg.sender]](https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L455)  ## TOOLS USED  Manual Analysis    ## MITIGATION  replace `uint` with `uint256`  
