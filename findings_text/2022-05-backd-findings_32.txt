**RoleManager.sol** - L27/46/112/113 - The modifier generates a lot of gas cost, it would be less expensive to use an if with a custom error or a private view function.  **AddressProvider.sol** - L64/71/98/102/176/185/199/241/242/260/270/295/296/325/428/434 - The require are too expensive, it would be saved using the Errors custom + if, instead of requires. Another option could be to use a private view function.  - L101/102/103/118/119/121/122/123 - The get calls to other contracts, being a view method, do not generate any cost, therefore, it would be less expensive not to create variables and call the getter directly.  **Controller.sol** - L49/50/51/66/69/71 - The get calls to other contracts, being a view method, do not generate any cost, therefore, it would be less expensive not to create variables and call the getter directly.  - L66 - A variable is created and gas is consumed to fill a variable that will only be used if the if in line 68 is true, since it is only used within the if, it should be created within the if.  **BkdToken.sol** - L31 - Gas can be saved if instead of a require an if is used, with the custom error already created.  **libraries/UncheckedMath.sol** - L7 - In the uncheckedInc() function, the gas could be further optimized, if instead of unchecked{a+1;} it was unchecked {++a;}  **contracts/RewardHandler.sol** - L63 - It is less expensive to validate that variable != 0, than to validate variable > 0.  **contracts/BkdLocker.sol** - L91/92/137/139/254/301 - It is less expensive to validate that variable != 0, than to validate variable > 0.  - L91/92/119/137/208 - Gas can be saved if instead of a require an if is used, with the custom error already created.  - L140/144 - --i is less expensive than i = i - 1;  - 150/151 - A newTotal variable is created, to only be used in one place, it is not necessary and gas could be saved by not doing it.  **contracts/tokenomics/FeeBurner.sol** - L117 - It is less expensive to validate that variable != 0, than to validate variable > 0.  **contracts/tokenomics/LpGauge.sol** - L59 - The if that validates: (amount <= 0) does not make much sense, since in uint there is no < 0, therefore the correct validation is: (amount == 0).  - L68/114 - The if that validates param > 0, could become less expensive if instead of >, a != is used.  - L111/115 - A currentRate variable is created, which is only used in one place, therefore it is not necessary and more gas is spent.  **contracts/tokenomics/VestedEscrowRevocable.sol** - L101 - The claim() function appears as nonReentrant, but there is no reason for reentrant to occur, since only a transferFrom is performed on line 146 at VestedEscrow.sol  - L97/98 - It is not necessary to create a variable that will only be used once, it would save gas if it is used directly.  - L103/104 - It is possible to create a variable in memory for revokedTime[msg.sender], in this way less gas would be used.  - L52/53/54 - The modifier generates a lot of gas cost, it would be less expensive to use an if with a custom error or a private view function.  - L54 - In the revoke() function the storage treasury address is used multiple times, one way to save gas is to create a variable in memory.  **contracts/tokenomics/VestedEscrow.sol** - L83/84 - It is not necessary to create a variable that will only be used once, it would save gas if it is used directly. Gas is also saved if instead of > 0 we use != 0.  - L89 - It is not necessary for the function to be nonReentrant, since the transfers that occur are only in the rewardToken address that is set by the owner on deploy, so there shouldn't be a problem with reentry.   - L134/135/155/156/168/169 - It is not necessary to create a variable that will only be used once, it would save gas if it is used directly.  **contracts/utils/Preparable.sol** - L28/29/86/98/110/111 - The modifier generates a lot of gas cost, it would be less expensive to use an if with a custom error or a private view function.  **contracts/tokenomics/KeeperGauge.sol** - L59/98 - ++epoch uses less gas than epoch++;  - L39/78/82/126/140 - The requirements are very expensive, it could save gas if instead of a modifier it is an if with a custom error or a private view function.  - L140 - Gas is saved, if instead of totalClaimable > 0 you can use totalClaimable != 0.  **contracts/tokenomics/AmmGauge.sol** - L63 - It should be amount == 0, it doesn't make sense for amount to be <= 0, since it is uint256.  - L88/104/125/147 - Gas would be saved if instead of variable > 0 variable != 0 is used.  
