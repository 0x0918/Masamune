 ## Change if -> revert pattern to require  Change if -> revert pattern to 'require' to save gas and improve code quality, if (some_condition) {          revert(revert_message)  }  to: require(!some_condition, revert_message)  In the following locations:  ### Code instance:          DepositReceiver.sol, 17    ## Do not cache msg.sender   We recommend not to cache msg.sender since calling it is 2 gas while reading a variable is more.   ### Code instance:          https://github.com/code-423n4/2022-07-axelar/tree/main/contracts/Ownable.sol#L12    ## Inline one time use functions   The following functions are used exactly once. Therefore you can inline them and save gas and improve code clearness.       ### Code instances:          AdminMultisigBase.sol, _adminEpoch         AxelarGateway.sol, _setTokenDailyMintAmount         AdminMultisigBase.sol, _getVoteCount         AdminMultisigBase.sol, _hasVoted   ## State variables that could be set immutable  In the following files there are state variables that could be set immutable to save gas.   ### Code instances:          gateway in IAxelarExecutable.sol         DOMAIN_SEPARATOR in ERC20Permit.sol    ## Unused state variables  Unused state variables are gas consuming at deployment (since they are located in storage) and are  a bad code practice. Removing those variables will decrease deployment gas cost and improve code quality.  This is a full list of all the unused storage variables we found in your code base.   ### Code instance:          DepositBase.sol, refundToken    ## Unnecessary array boundaries check when loading an array element twice       There are places in the code (especially in for-each loops) that loads the same array element more than once.      In such cases, only one array boundaries check should take place, and the rest are unnecessary.     Therefore, this array element should be cached in a local variable and then be loaded     again using this local variable, skipping the redundant second array boundaries check:       ### Code instance:          AxelarAuthWeighted.sol._isSortedAscAndContainsNoDuplicate - double load of accounts[i]    ## Caching array length can save gas   Caching the array length is more gas efficient. This is because access to a local variable in solidity is more efficient than query storage / calldata / memory. We recommend to change from:          for (uint256 i=0; i<array.length; i++) { ... }  to:       uint len = array.length       for (uint256 i=0; i<len; i++) { ... }   ### Code instances:          AxelarAuthWeighted.sol, recentOperators, 17         AxelarDepositService.sol, refundTokens, 168         AxelarDepositService.sol, refundTokens, 204         AxelarGasService.sol, tokens, 123         AxelarAuthWeighted.sol, signatures, 98         AxelarGateway.sol, symbols, 207         AxelarDepositService.sol, refundTokens, 114    ## Prefix increments are cheaper than postfix increments  Prefix increments are cheaper than postfix increments.  Further more, using unchecked {++x} is even more gas efficient, and the gas saving accumulates every iteration and can make a real change There is no risk of overflow caused by increamenting the iteration index in for loops (the `++i` in `for (uint256 i = 0; i < numIterations; ++i)`). But increments perform overflow checks that are not necessary in this case. These functions use not using prefix increments (`++x`) or not using the unchecked keyword:   ### Code instances:          change to prefix increment and unchecked: AxelarGasService.sol, i, 123         change to prefix increment and unchecked: AxelarGateway.sol, i, 207         just change to unchecked: AxelarAuthWeighted.sol, i, 69         just change to unchecked: AxelarAuthWeighted.sol, i, 98         just change to unchecked: AxelarAuthWeighted.sol, i, 17         just change to unchecked: AxelarGateway.sol, i, 195         change to prefix increment and unchecked: AxelarDepositService.sol, i, 114         just change to unchecked: AxelarAuthWeighted.sol, i, 116         just change to unchecked: AxelarGateway.sol, i, 292         just change to unchecked: AdminMultisigBase.sol, i, 158         change to prefix increment and unchecked: AxelarDepositService.sol, i, 168         change to prefix increment and unchecked: AxelarDepositService.sol, i, 204         just change to unchecked: AdminMultisigBase.sol, i, 51    ## Unnecessary index init   In for loops you initialize the index to start from 0, but it already initialized to 0 in default and this assignment cost gas.  It is more clear and gas efficient to declare without assigning 0 and will have the same meaning:  ### Code instances:          AxelarAuthWeighted.sol, 98         AxelarGateway.sol, 207         AxelarAuthWeighted.sol, 69    ## Use != 0 instead of > 0   Using != 0 is slightly cheaper than > 0. (see https://github.com/code-423n4/2021-12-maple-findings/issues/75 for similar issue)   ### Code instances:          AxelarDepositService.sol, 165: change 'balance > 0' to 'balance != 0'         ReceiverImplementation.sol, 71: change 'balance > 0' to 'balance != 0'         ReceiverImplementation.sol, 23: change 'balance > 0' to 'balance != 0'         ReceiverImplementation.sol, 51: change 'balance > 0' to 'balance != 0' 
