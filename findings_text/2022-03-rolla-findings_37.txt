## Low-impact Issues  ### The current code will not be able to support compound options (options on options) The code that adds new assets checks whether the asset already exists or not by checking the token's symbol. Since  `QToken`s' symbols do not contain the full year, once a token with a specific year is added, a similar token 100 years into the future (or into the past) cannot be added 1. File: contracts/libraries/OptionsUtils.sol (lines [152-165](https://github.com/code-423n4/2022-03-rolla/blob/efe4a3c1af8d77c5dfb5ba110c3507e67a061bdd/quant-protocol/contracts/libraries/OptionsUtils.sol#L152-L165)) ```solidity     function isInAssetsRegistry(address _asset, address _quantConfig)         internal         view         returns (bool)     {         string memory symbol;         (, symbol, ) = IAssetsRegistry(             IQuantConfig(_quantConfig).protocolAddresses(                 ProtocolValue.encode("assetsRegistry")             )         ).assetProperties(_asset);          return bytes(symbol).length != 0;     } ```  ### Missing checks for `address(0x0)` when assigning values to `address` state variables  1. File: contracts/QuantCalculator.sol (line [57](https://github.com/code-423n4/2022-03-rolla/tree/main/quant-protocol/contracts/QuantCalculator.sol#L57)) ```solidity         optionsFactory = _optionsFactory; ```   ### Upgradeable contract is missing a `__gap[50]` storage variable to allow for new storage variables in later versions See [this](https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps) link for a description of this storage variable. While some contracts may not currently be sub-classed, adding the variable now protects against forgetting to add it in the future.  1. File: contracts/Controller.sol (lines [30-33](https://github.com/code-423n4/2022-03-rolla/tree/main/quant-protocol/contracts/Controller.sol#L30-L33)) ```solidity contract Controller is     IController,     EIP712MetaTransaction,     ReentrancyGuardUpgradeable ``` 2. File: contracts/utils/EIP712MetaTransaction.sol (line [13](https://github.com/code-423n4/2022-03-rolla/tree/main/quant-protocol/contracts/utils/EIP712MetaTransaction.sol#L13)) ```solidity contract EIP712MetaTransaction is EIP712Upgradeable { ``` 3. File: contracts/QuantConfig.sol (lines [13-16](https://github.com/code-423n4/2022-03-rolla/tree/main/quant-protocol/contracts/QuantConfig.sol#L13-L16)) ```solidity contract QuantConfig is     AccessControlUpgradeable,     OwnableUpgradeable,     ITimelockedConfig ```  ## Non-critical Issues  ### Use a switch statement for long if-else-if chains involving a single variable https://github.com/code-423n4/2022-03-rolla/blob/a06418c9cc847395f3699bdf684a9ac066651ed7/quant-protocol/contracts/Controller.sol#L59-L123   ### _encodeSetProtocolRole() should take in a `ProtocolValue` like the other functions It's inconsistent for roles to be passed in as strings when they can easily be `ProtocolValue`s  1. File: contracts/timelock/ConfigTimelockController.sol ((lines [434-447](https://github.com/code-423n4/2022-03-rolla/blob/a06418c9cc847395f3699bdf684a9ac066651ed7/quant-protocol/contracts/timelock/ConfigTimelockController.sol#L434-L447)) ```solidity     function executeSetProtocolRole(         string calldata protocolRole,         address roleAdmin,         address quantConfig,         uint256 eta     ) public onlyRole(EXECUTOR_ROLE) {         execute(             quantConfig,             0,             _encodeSetProtocolRole(protocolRole, roleAdmin, quantConfig),             bytes32(0),             bytes32(eta)         );     } ```  ### `public` functions not called by the contract should be declared `external` instead Inconsistencies make code hard to maintain Contracts [are allowed](https://docs.soliditylang.org/en/latest/contracts.html#function-overriding) to override their parents' functions and change the visibility from `external` to `public`.  1. File: contracts/Controller.sol (lines [134-139](https://github.com/code-423n4/2022-03-rolla/tree/main/quant-protocol/contracts/Controller.sol#L134-L139)) ```solidity     function initialize(         string memory _name,         string memory _version,         address _optionsFactory,         address _quantCalculator     ) public override initializer { ``` 2. File: contracts/utils/EIP712MetaTransaction.sol (lines [106-108](https://github.com/code-423n4/2022-03-rolla/tree/main/quant-protocol/contracts/utils/EIP712MetaTransaction.sol#L106-L108)) ```solidity     function initializeEIP712(string memory _name, string memory _version)         public         initializer ``` 3. File: contracts/timelock/ConfigTimelockController.sol (lines [250-255](https://github.com/code-423n4/2022-03-rolla/tree/main/quant-protocol/contracts/timelock/ConfigTimelockController.sol#L250-L255)) ```solidity     function scheduleBatchSetProtocolAddress(         bytes32[] calldata protocolValues,         address[] calldata newAddresses,         address quantConfig,         uint256 eta     ) public onlyRole(PROPOSER_ROLE) { ``` 4. File: contracts/timelock/ConfigTimelockController.sol (lines [281-286](https://github.com/code-423n4/2022-03-rolla/tree/main/quant-protocol/contracts/timelock/ConfigTimelockController.sol#L281-L286)) ```solidity     function scheduleBatchSetProtocolUints(         bytes32[] calldata protocolValues,         uint256[] calldata newUints,         address quantConfig,         uint256 eta     ) public onlyRole(PROPOSER_ROLE) { ``` 5. File: contracts/timelock/ConfigTimelockController.sol (lines [312-317](https://github.com/code-423n4/2022-03-rolla/tree/main/quant-protocol/contracts/timelock/ConfigTimelockController.sol#L312-L317)) ```solidity     function scheduleBatchSetProtocolBooleans(         bytes32[] calldata protocolValues,         bool[] calldata newBooleans,         address quantConfig,         uint256 eta     ) public onlyRole(PROPOSER_ROLE) { ``` 6. File: contracts/timelock/ConfigTimelockController.sol (lines [343-348](https://github.com/code-423n4/2022-03-rolla/tree/main/quant-protocol/contracts/timelock/ConfigTimelockController.sol#L343-L348)) ```solidity     function scheduleBatchSetProtocolRoles(         string[] calldata protocolRoles,         address[] calldata roleAdmins,         address quantConfig,         uint256 eta     ) public onlyRole(PROPOSER_ROLE) { ``` 7. File: contracts/timelock/ConfigTimelockController.sol (lines [374-379](https://github.com/code-423n4/2022-03-rolla/tree/main/quant-protocol/contracts/timelock/ConfigTimelockController.sol#L374-L379)) ```solidity     function executeSetProtocolAddress(         bytes32 protocolAddress,         address newAddress,         address quantConfig,         uint256 eta     ) public onlyRole(EXECUTOR_ROLE) { ``` 8. File: contracts/timelock/ConfigTimelockController.sol (lines [394-399](https://github.com/code-423n4/2022-03-rolla/tree/main/quant-protocol/contracts/timelock/ConfigTimelockController.sol#L394-L399)) ```solidity     function executeSetProtocolUint256(         bytes32 protocolUint256,         uint256 newUint256,         address quantConfig,         uint256 eta     ) public onlyRole(EXECUTOR_ROLE) { ``` 9. File: contracts/timelock/ConfigTimelockController.sol (lines [414-419](https://github.com/code-423n4/2022-03-rolla/tree/main/quant-protocol/contracts/timelock/ConfigTimelockController.sol#L414-L419)) ```solidity     function executeSetProtocolBoolean(         bytes32 protocolBoolean,         bool newBoolean,         address quantConfig,         uint256 eta     ) public onlyRole(EXECUTOR_ROLE) { ``` 10. File: contracts/timelock/ConfigTimelockController.sol (lines [434-439](https://github.com/code-423n4/2022-03-rolla/tree/main/quant-protocol/contracts/timelock/ConfigTimelockController.sol#L434-L439)) ```solidity     function executeSetProtocolRole(         string calldata protocolRole,         address roleAdmin,         address quantConfig,         uint256 eta     ) public onlyRole(EXECUTOR_ROLE) { ``` 11. File: contracts/timelock/ConfigTimelockController.sol (lines [454-459](https://github.com/code-423n4/2022-03-rolla/tree/main/quant-protocol/contracts/timelock/ConfigTimelockController.sol#L454-L459)) ```solidity     function executeBatchSetProtocolAddress(         bytes32[] calldata protocolValues,         address[] calldata newAddresses,         address quantConfig,         uint256 eta     ) public onlyRole(EXECUTOR_ROLE) { ``` 12. File: contracts/timelock/ConfigTimelockController.sol (lines [490-495](https://github.com/code-423n4/2022-03-rolla/tree/main/quant-protocol/contracts/timelock/ConfigTimelockController.sol#L490-L495)) ```solidity     function executeBatchSetProtocolUint256(         bytes32[] calldata protocolValues,         uint256[] calldata newUints,         address quantConfig,         uint256 eta     ) public onlyRole(EXECUTOR_ROLE) { ``` 13. File: contracts/timelock/ConfigTimelockController.sol (lines [526-531](https://github.com/code-423n4/2022-03-rolla/tree/main/quant-protocol/contracts/timelock/ConfigTimelockController.sol#L526-L531)) ```solidity     function executeBatchSetProtocolBoolean(         bytes32[] calldata protocolValues,         bool[] calldata newBooleans,         address quantConfig,         uint256 eta     ) public onlyRole(EXECUTOR_ROLE) { ``` 14. File: contracts/timelock/ConfigTimelockController.sol (lines [562-567](https://github.com/code-423n4/2022-03-rolla/tree/main/quant-protocol/contracts/timelock/ConfigTimelockController.sol#L562-L567)) ```solidity     function executeBatchSetProtocolRoles(         string[] calldata protocolRoles,         address[] calldata roleAdmins,         address quantConfig,         uint256 eta     ) public onlyRole(EXECUTOR_ROLE) { ``` 15. File: contracts/QuantConfig.sol (lines [148-151](https://github.com/code-423n4/2022-03-rolla/tree/main/quant-protocol/contracts/QuantConfig.sol#L148-L151)) ```solidity     function initialize(address payable _timelockController)         public         override         initializer ``` 16. File: contracts/pricing/oracle/ChainlinkFixedTimeOracleManager.sol (lines [53-61](https://github.com/code-423n4/2022-03-rolla/tree/main/quant-protocol/contracts/pricing/oracle/ChainlinkFixedTimeOracleManager.sol#L53-L61)) ```solidity     function isValidOption(         address,         uint256 _expiryTime,         uint256     )         public         view         override(ChainlinkOracleManager, IProviderOracleManager)         returns (bool) ``` 17. File: contracts/pricing/PriceRegistry.sol (lines [112-116](https://github.com/code-423n4/2022-03-rolla/tree/main/quant-protocol/contracts/pricing/PriceRegistry.sol#L112-L116)) ```solidity     function hasSettlementPrice(         address _oracle,         address _asset,         uint256 _expiryTimestamp     ) public view override returns (bool) { ```  ### Adding a `return` statement when the function defines a named return variable, is redundant  1. File: contracts/utils/EIP712MetaTransaction.sol (line [133](https://github.com/code-423n4/2022-03-rolla/tree/main/quant-protocol/contracts/utils/EIP712MetaTransaction.sol#L133)) ```solidity         return sender; ```    ### Using `calldata` instead of `memory` for read-only arguments in `external` does not follow const-correctness This is an example of [const-correctness](https://stackoverflow.com/questions/8277801/what-is-the-definition-of-const-correctness) 1. File: contracts/Controller.sol (line [49](https://github.com/code-423n4/2022-03-rolla/tree/main/quant-protocol/contracts/Controller.sol#L49)) ```solidity     function operate(ActionArgs[] memory _actions) ``` 2. File: contracts/utils/EIP712MetaTransaction.sol (line [56](https://github.com/code-423n4/2022-03-rolla/tree/main/quant-protocol/contracts/utils/EIP712MetaTransaction.sol#L56)) ```solidity         MetaAction memory metaAction, ``` 3. File: contracts/utils/OperateProxy.sol (line [10](https://github.com/code-423n4/2022-03-rolla/tree/main/quant-protocol/contracts/utils/OperateProxy.sol#L10)) ```solidity     function callFunction(address callee, bytes memory data) external override { ``` 4. File: contracts/interfaces/IEIP712MetaTransaction.sol (line [7](https://github.com/code-423n4/2022-03-rolla/tree/main/quant-protocol/contracts/interfaces/IEIP712MetaTransaction.sol#L7)) ```solidity         bytes memory, ``` 5. File: contracts/interfaces/IEIP712MetaTransaction.sol (line [13](https://github.com/code-423n4/2022-03-rolla/tree/main/quant-protocol/contracts/interfaces/IEIP712MetaTransaction.sol#L13)) ```solidity     function initializeEIP712(string memory, string memory) external; ``` 6. File: contracts/interfaces/IEIP712MetaTransaction.sol (line [13](https://github.com/code-423n4/2022-03-rolla/tree/main/quant-protocol/contracts/interfaces/IEIP712MetaTransaction.sol#L13)) ```solidity     function initializeEIP712(string memory, string memory) external; ``` 7. File: contracts/interfaces/IController.sol (line [90](https://github.com/code-423n4/2022-03-rolla/tree/main/quant-protocol/contracts/interfaces/IController.sol#L90)) ```solidity     function operate(ActionArgs[] memory _actions) external returns (bool); ``` 8. File: contracts/interfaces/IController.sol (line [94](https://github.com/code-423n4/2022-03-rolla/tree/main/quant-protocol/contracts/interfaces/IController.sol#L94)) ```solidity         string memory, ``` 9. File: contracts/interfaces/IController.sol (line [95](https://github.com/code-423n4/2022-03-rolla/tree/main/quant-protocol/contracts/interfaces/IController.sol#L95)) ```solidity         string memory, ``` 10. File: contracts/interfaces/IProviderOracleManager.sol (line [25](https://github.com/code-423n4/2022-03-rolla/tree/main/quant-protocol/contracts/interfaces/IProviderOracleManager.sol#L25)) ```solidity         bytes memory _calldata ``` 11. File: contracts/interfaces/IOperateProxy.sol (line [14](https://github.com/code-423n4/2022-03-rolla/tree/main/quant-protocol/contracts/interfaces/IOperateProxy.sol#L14)) ```solidity     function callFunction(address callee, bytes memory data) external; ``` 12. File: contracts/pricing/oracle/ChainlinkOracleManager.sol (line [60](https://github.com/code-423n4/2022-03-rolla/tree/main/quant-protocol/contracts/pricing/oracle/ChainlinkOracleManager.sol#L60)) ```solidity         bytes memory ``` 13. File: contracts/pricing/oracle/ProviderOracleManager.sol (line [47](https://github.com/code-423n4/2022-03-rolla/tree/main/quant-protocol/contracts/pricing/oracle/ProviderOracleManager.sol#L47)) ```solidity         bytes memory _calldata ```  ### Not using the named return variables when a function returns is confusing  1. File: contracts/timelock/TimelockController.sol (line [279](https://github.com/code-423n4/2022-03-rolla/tree/main/quant-protocol/contracts/timelock/TimelockController.sol#L279)) ```solidity         return getTimestamp(id) > 0; ``` 2. File: contracts/timelock/TimelockController.sol (line [291](https://github.com/code-423n4/2022-03-rolla/tree/main/quant-protocol/contracts/timelock/TimelockController.sol#L291)) ```solidity         return getTimestamp(id) > _DONE_TIMESTAMP; ``` 3. File: contracts/timelock/TimelockController.sol (line [305](https://github.com/code-423n4/2022-03-rolla/tree/main/quant-protocol/contracts/timelock/TimelockController.sol#L305)) ```solidity         return timestamp > _DONE_TIMESTAMP && timestamp <= block.timestamp; ``` 4. File: contracts/timelock/TimelockController.sol (line [317](https://github.com/code-423n4/2022-03-rolla/tree/main/quant-protocol/contracts/timelock/TimelockController.sol#L317)) ```solidity         return getTimestamp(id) == _DONE_TIMESTAMP; ``` 5. File: contracts/timelock/TimelockController.sol (line [330](https://github.com/code-423n4/2022-03-rolla/tree/main/quant-protocol/contracts/timelock/TimelockController.sol#L330)) ```solidity         return _timestamps[id]; ``` 6. File: contracts/timelock/TimelockController.sol (line [339](https://github.com/code-423n4/2022-03-rolla/tree/main/quant-protocol/contracts/timelock/TimelockController.sol#L339)) ```solidity         return _minDelay; ``` 7. File: contracts/timelock/TimelockController.sol (line [353](https://github.com/code-423n4/2022-03-rolla/tree/main/quant-protocol/contracts/timelock/TimelockController.sol#L353)) ```solidity         return keccak256(abi.encode(target, value, data, predecessor, salt)); ``` 8. File: contracts/timelock/TimelockController.sol (line [367](https://github.com/code-423n4/2022-03-rolla/tree/main/quant-protocol/contracts/timelock/TimelockController.sol#L367)) ```solidity         return keccak256(abi.encode(targets, values, datas, predecessor, salt)); ``` 9. File: contracts/QuantCalculator.sol (line [247](https://github.com/code-423n4/2022-03-rolla/tree/main/quant-protocol/contracts/QuantCalculator.sol#L247)) ```solidity             return (false, address(0), 0); ``` 10. File: contracts/QuantCalculator.sol (line [247](https://github.com/code-423n4/2022-03-rolla/tree/main/quant-protocol/contracts/QuantCalculator.sol#L247)) ```solidity             return (false, address(0), 0); ``` 11. File: contracts/QuantCalculator.sol (line [247](https://github.com/code-423n4/2022-03-rolla/tree/main/quant-protocol/contracts/QuantCalculator.sol#L247)) ```solidity             return (false, address(0), 0); ```  ### Duplicated `require()`/`revert()` checks should be refactored to a modifier or function Copy-paste code shouldn't be done and should always be refactored for clean code 1. File: contracts/timelock/TimelockController.sol (lines [246-249](https://github.com/code-423n4/2022-03-rolla/tree/main/quant-protocol/contracts/timelock/TimelockController.sol#L246-L249)) ```solidity         require(             targets.length == values.length,             "TimelockController: length mismatch"         ); ``` 2. File: contracts/timelock/TimelockController.sol (lines [250-253](https://github.com/code-423n4/2022-03-rolla/tree/main/quant-protocol/contracts/timelock/TimelockController.sol#L250-L253)) ```solidity         require(             targets.length == datas.length,             "TimelockController: length mismatch"         ); ``` 3. File: contracts/timelock/TimelockController.sol (lines [424-427](https://github.com/code-423n4/2022-03-rolla/tree/main/quant-protocol/contracts/timelock/TimelockController.sol#L424-L427)) ```solidity         require(             isOperationReady(id),             "TimelockController: operation is not ready"         ); ``` 4. File: contracts/timelock/ConfigTimelockController.sol (lines [122-125](https://github.com/code-423n4/2022-03-rolla/tree/main/quant-protocol/contracts/timelock/ConfigTimelockController.sol#L122-L125)) ```solidity         require(             eta >= delay + block.timestamp,             "ConfigTimelockController: Estimated execution block must satisfy delay"         ); ``` 5. File: contracts/timelock/ConfigTimelockController.sol (lines [462-465](https://github.com/code-423n4/2022-03-rolla/tree/main/quant-protocol/contracts/timelock/ConfigTimelockController.sol#L462-L465)) ```solidity         require(             length == newAddresses.length,             "ConfigTimelockController: length mismatch"         ); ``` 6. File: contracts/timelock/ConfigTimelockController.sol (lines [498-501](https://github.com/code-423n4/2022-03-rolla/tree/main/quant-protocol/contracts/timelock/ConfigTimelockController.sol#L498-L501)) ```solidity         require(             length == newUints.length,             "ConfigTimelockController: length mismatch"         ); ``` 7. File: contracts/timelock/ConfigTimelockController.sol (lines [534-537](https://github.com/code-423n4/2022-03-rolla/tree/main/quant-protocol/contracts/timelock/ConfigTimelockController.sol#L534-L537)) ```solidity         require(             length == newBooleans.length,             "ConfigTimelockController: length mismatch"         ); ``` 8. File: contracts/timelock/ConfigTimelockController.sol (lines [570-573](https://github.com/code-423n4/2022-03-rolla/tree/main/quant-protocol/contracts/timelock/ConfigTimelockController.sol#L570-L573)) ```solidity         require(             length == roleAdmins.length,             "ConfigTimelockController: length mismatch"         ); ``` 9. File: contracts/options/CollateralToken.sol (lines [143-149](https://github.com/code-423n4/2022-03-rolla/tree/main/quant-protocol/contracts/options/CollateralToken.sol#L143-L149)) ```solidity         require(             quantConfig.hasRole(                 quantConfig.quantRoles("COLLATERAL_MINTER_ROLE"),                 msg.sender             ),             "CollateralToken: Only a collateral minter can mint CollateralTokens"         ); ``` 10. File: contracts/options/CollateralToken.sol (lines [168-174](https://github.com/code-423n4/2022-03-rolla/tree/main/quant-protocol/contracts/options/CollateralToken.sol#L168-L174)) ```solidity         require(             quantConfig.hasRole(                 quantConfig.quantRoles("COLLATERAL_BURNER_ROLE"),                 msg.sender             ),             "CollateralToken: Only a collateral burner can burn CollateralTokens"         ); ``` 11. File: contracts/pricing/PriceRegistry.sol (lines [98-101](https://github.com/code-423n4/2022-03-rolla/tree/main/quant-protocol/contracts/pricing/PriceRegistry.sol#L98-L101)) ```solidity         require(             settlementPrice.price != 0,             "PriceRegistry: No settlement price has been set"         ); ``` 12. File: contracts/pricing/OracleRegistry.sol (lines [62-68](https://github.com/code-423n4/2022-03-rolla/tree/main/quant-protocol/contracts/pricing/OracleRegistry.sol#L62-L68)) ```solidity         require(             config.hasRole(                 config.quantRoles("ORACLE_MANAGER_ROLE"),                 msg.sender             ),             "OracleRegistry: Only an oracle admin can add an oracle"         ); ```  ### Remove unused variables  1. File: contracts/timelock/ConfigTimelockController.sol (line [15](https://github.com/code-423n4/2022-03-rolla/tree/main/quant-protocol/contracts/timelock/ConfigTimelockController.sol#L15)) ```solidity     mapping(bytes32 => uint256) private _timestamps; ``` 
