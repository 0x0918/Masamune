# Report  * [Use SafeERC20 when working with arbitrary ERC20 tokens](#use-safeerc20-when-working-with-arbitrary-erc20-tokens) * [Force a new round to be greater than the old one in `TokemakBribe.sol`](#force-a-new-round-to-be-greater-than-the-old-one-in-tokemakbribesol) * [BribeVault doesn't work with fee-on-transfer tokens](#bribevault-doesnt-work-with-fee-on-transfer-tokens) * [Use `.call()` instead of `transfer()` to send funds](#use-call-instead-of-transfer-to-send-funds)  ## Use SafeERC20 when working with arbitrary ERC20 tokens  `SafeERC20` is already used in a couple of spots but not consistently.  - https://github.com/code-423n4/2022-02-redacted-cartel/blob/main/contracts/BribeVault.sol#L296-L297 - https://github.com/code-423n4/2022-02-redacted-cartel/blob/main/contracts/BribeVault.sol#L337  ## Force a new round to be greater than the old one in `TokemakBribe.sol`  Currently the admin can set the `newRound` to any value. But logically it should always be greater than the previous one. Adding the constraint to the function would prevent that from happening. If a smaller number is used an already finished round might be usable again.  - https://github.com/code-423n4/2022-02-redacted-cartel/blob/main/contracts/TokemakBribe.sol#L109  ```sol function setRound(uint256 _newRound) external onlyAuthorized {     require(_newRound > _round);     _round = _newRound; } ```  ## BribeVault doesn't work with fee-on-transfer tokens  There's no documentation on whether they are supported or not so I wanted to still mention it here. The `bribe.amount` value won't match with the actual tokens the vault holds. An easy way to do that would be to use the actual received amount instead of the user passed `amount` parameter:  - https://github.com/code-423n4/2022-02-redacted-cartel/blob/main/contracts/BribeVault.sol#L187-L189  ```sol uint prevBalance = IERC20(token).balanceOf(address(this)); IERC20(token).safeTransferFrom(briber, address(this), amount); uint afterBalance = IERC20(token).balanceOf(address(this));  b.amount += afterBalance - prevBalance; // Allow bribers to increase bribe ```  ## Use `.call()` instead of `transfer()` to send funds  It's generally recommended to use `call()` instead of `transfer()` to send funds. The issue is that contracts might use more than 2300 gas in their receive function. In that case the transfer would fail. Since the state is written before the transfer of funds there shouldn't be a risk of reentrancy:  - https://github.com/code-423n4/2022-02-redacted-cartel/blob/main/contracts/RewardDistributor.sol#L181  ```sol (bool success, ) = _account.call{value:_amount}(""); require(success, "Transfer failed."); ```
