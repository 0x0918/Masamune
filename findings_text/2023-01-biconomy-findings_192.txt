# Lines of code  https://github.com/code-423n4/2023-01-biconomy/blob/main/scw-contracts/contracts/smart-contract-wallet/SmartAccount.sol#L511   # Vulnerability details  ## Impact As specified in the [EIP](https://eips.ethereum.org/EIPS/eip-4337#forbidden-opcodes) certain opcodes are forbidden when a UserOperation is validated because their outputs can differ between simulation and execution. One of those opcodes is `ORIGIN`. The SmartAccount uses that opcode in its validation logic. The client will reject those UserOperations because they are invalid. The wallet won't be usable with EIP-4337.  Because this breaks the main functionality of the wallet I rate it as HIGH.  ## Proof of Concept In `validateUserOp()` the contract calls `_validateSignature()` which in turn accesses `tx.origin` and thus the `ORIGIN` opcode: ```sol     function validateUserOp(UserOperation calldata userOp, bytes32 userOpHash, address aggregator, uint256 missingAccountFunds)     external override virtual returns (uint256 deadline) {         _requireFromEntryPoint();         deadline = _validateSignature(userOp, userOpHash, aggregator);         if (userOp.initCode.length == 0) {             _validateAndUpdateNonce(userOp);         }         _payPrefund(missingAccountFunds);     }      function _validateSignature(UserOperation calldata userOp, bytes32 userOpHash, address)     internal override virtual returns (uint256 deadline) {         bytes32 hash = userOpHash.toEthSignedMessageHash();         //ignore signature mismatch of from==ZERO_ADDRESS (for eth_callUserOp validation purposes)         // solhint-disable-next-line avoid-tx-origin         require(owner == hash.recover(userOp.signature) || tx.origin == address(0), "account: wrong signature");         return 0;     } ```  The EIP specifies that for the simulation, the client calls `EntryPoint.simulateValidation()`. That function calls account's `validateUserOp()` function which triggers the forbidden opcode: https://eips.ethereum.org/EIPS/eip-4337#specification-1  You can find it in the implementation as well: https://github.com/eth-infinitism/account-abstraction/blob/develop/contracts/core/EntryPoint.sol#L267-L273  ## Tools Used none  ## Recommended Mitigation Steps There's no real reason to check that `tx.origin == address(0)`. It's not specified in the EIP. Just remove it. 
