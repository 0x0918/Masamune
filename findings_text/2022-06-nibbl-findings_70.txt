1. Title: Using multiple `require` instead `&&` can save gas  Proof of Concept: https://github.com/code-423n4/2022-06-nibbl/blob/main/contracts/NibblVaultFactory.sol#L107 https://github.com/code-423n4/2022-06-nibbl/blob/main/contracts/NibblVaultFactory.sol#L131  Recommended Mitigation Steps: ```  require(basketUpdateTime != 0, "NibblVaultFactory: UPDATE_TIME has not passed");  require(block.timestamp >= basketUpdateTime, "NibblVaultFactory: UPDATE_TIME has not passed"); ``` ________________________________________________________________________  2. Title: Comparison operators  Proof of Concept: https://github.com/code-423n4/2022-06-nibbl/blob/main/contracts/NibblVaultFactory.sol#L107 https://github.com/code-423n4/2022-06-nibbl/blob/main/contracts/NibblVaultFactory.sol#L131 https://github.com/code-423n4/2022-06-nibbl/blob/main/contracts/NibblVaultFactory.sol#L141 https://github.com/code-423n4/2022-06-nibbl/blob/main/contracts/NibblVaultFactory.sol#L149  Recommended Mitigation Steps: Replace `<=` with `<`, and `>=` with `>` for gas optimization ________________________________________________________________________  3. Title: Reduce the size of error messages (Long revert Strings)  Impact:  Shortening revert strings to fit in 32 bytes will decrease deployment time gas and will decrease runtime gas when the revert condition is met. Revert strings that are longer than 32 bytes require at least one additional mstore, along with additional overhead for computing memory offset, etc.  Proof of Concept: https://github.com/code-423n4/2022-06-nibbl/blob/main/contracts/NibblVaultFactory.sol#L48 https://github.com/code-423n4/2022-06-nibbl/blob/main/contracts/NibblVaultFactory.sol#L107 https://github.com/code-423n4/2022-06-nibbl/blob/main/contracts/NibblVaultFactory.sol#L131  Recommended Mitigation Steps: Consider shortening the revert strings to fit in 32 bytes ________________________________________________________________________  4. Title: Custom errors from Solidity 0.8.4 are cheaper than revert strings  Impact: Custom errors from Solidity 0.8.4 are cheaper than revert strings (cheaper deployment cost and runtime cost when the revert condition is met) while providing the same amount of information  Custom errors are defined using the error statement reference: https://blog.soliditylang.org/2021/04/21/custom-errors/  Proof of Concept: https://github.com/code-423n4/2022-06-nibbl/blob/main/contracts/NibblVaultFactory.sol https://github.com/code-423n4/2022-06-nibbl/blob/main/contracts/NibblVault.sol https://github.com/code-423n4/2022-06-nibbl/blob/main/contracts/Basket.sol  Recommended Mitigation Steps: Replace require statements with custom errors. ________________________________________________________________________  5. Title: Expression for `constant` values such as a call to `keccak256()`, should use `immutable` rather than `constant`  Proof of Concept: https://github.com/code-423n4/2022-06-nibbl/blob/main/contracts/NibblVault.sol#L51  Recommended Mitigation Steps: Change from `constant` to `immutable` reference: https://github.com/ethereum/solidity/issues/9232 ________________________________________________________________________  6. Title: `>=` is cheaper than `>`  Impact:  Strict inequalities (`>`) are more expensive than non-strict ones (`>=`). This is due to some supplementary checks (ISZERO, 3 gas)  Proof of Concept: https://github.com/code-423n4/2022-06-nibbl/blob/main/contracts/NibblVault.sol#L224  Recommended Mitigation Steps: Consider using `>=` instead of `>` to avoid some opcodes ________________________________________________________________________  7. Title: Using unchecked can save gas  Proof of Concept: https://github.com/code-423n4/2022-06-nibbl/blob/main/contracts/NibblVault.sol#L319  Recommended Mitigation Steps: using `unchecked` can save gas due to L#311  ________________________________________________________________________  8. Title: function sell(): L#378 should be unchecked due to L#373  Proof of Concept: https://github.com/code-423n4/2022-06-nibbl/blob/main/contracts/NibblVault.sol#L378  Recommended Mitigation Steps: Use `unchecked` ________________________________________________________________________  9. Title: Caching `length` for loop can save gas  Proof of Concept: https://github.com/code-423n4/2022-06-nibbl/blob/main/contracts/NibblVault.sol#L525 https://github.com/code-423n4/2022-06-nibbl/blob/main/contracts/NibblVault.sol#L547  Recommended Mitigation Steps: Change to: ```     uint256 Length = _assets.length;      for (uint256 i = 0; i < Length; i++) { ``` ________________________________________________________________________  10. Title: Default value initialization  Impact: If a variable is not set/initialized, it is assumed to have the default value (0, false, 0x0 etc depending on the data type). Explicitly initializing it with its default value is an anti-pattern and wastes gas.  Proof of Concept: https://github.com/code-423n4/2022-06-nibbl/blob/main/contracts/NibblVault.sol#L525 https://github.com/code-423n4/2022-06-nibbl/blob/main/contracts/NibblVault.sol#L547  Recommended Mitigation Steps: Remove explicit initialization for default values. ________________________________________________________________________  11. Title: Using unchecked and prefix increment is more effective for gas saving:  Proof of Concept: https://github.com/code-423n4/2022-06-nibbl/blob/main/contracts/NibblVault.sol#L525 https://github.com/code-423n4/2022-06-nibbl/blob/main/contracts/NibblVault.sol#L547  Recommended Mitigation Steps: Change to: ```  for (uint i = 0; i < _assets.length;) {             // ...    unchecked { ++i; }          } ``` ________________________________________________________________________  12. Title: Consider make constant as private to save gas  Proof of Concept: https://github.com/code-423n4/2022-06-nibbl/blob/main/contracts/Utilities/AccessControlMechanism.sol#L12-L14  Recommended Mitigation Steps: I suggest changing the visibility from `public` to `internal` or `private` ________________________________________________________________________  13. Title: Expression for `constant` values such as a call to `keccak256()`, should use `immutable` rather than `constant`  Proof of Concept: https://github.com/code-423n4/2022-06-nibbl/blob/main/contracts/Utilities/AccessControlMechanism.sol#L12-L14 https://github.com/code-423n4/2022-06-nibbl/blob/main/contracts/Utilities/EIP712Base.sol#L7  Recommended Mitigation Steps: Change from `constant` to `immutable` reference: https://github.com/ethereum/solidity/issues/9232 ________________________________________________________________________
