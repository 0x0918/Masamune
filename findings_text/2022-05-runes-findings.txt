# Lines of code  https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L616-L619   # Vulnerability details  ## Impact Owner of the contract can call `withdrawAll` before the refund process is done to send all ETH to the vault. Since there are no payable receive function in `ForgottenRunesWarriorsMinter`, the owner won't be able to replenish the contract for the refund process.  ## Proof of Concept https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L616-L619  ```solidity     function withdrawAll() public payable onlyOwner {         require(address(vault) != address(0), 'no vault');         require(payable(vault).send(address(this).balance));     } ```  ## Recommended Mitigation Steps Only allow owner to call `withdrawAll` after refund period  
# Non Critical ## [N01] Delete `payable` from `withdrawAll()`: `withdrawAll()` do not use `msg.value` and just withdraw eth so it doesn't need to be `payable`. ### Recommended Mitigation Steps: ```ForgottenRunesWarriorsGuild.sol:163   - function withdrawAll() public payable onlyOwner {   + function withdrawAll() public onlyOwner {  ForgottenRunesWarriorsMinter.sol:616   - function withdrawAll() public payable onlyOwner {   + function withdrawAll() public onlyOwner { ```  ## [N02] Check `.transfer()` return's value: It is good to add a `require()` statement that checks the return value of token transfers or to use something like OpenZeppelin’s `safeTransfer` unless one is sure the given token reverts in case of a failure. Failure to do so will cause silent failures.  ``` ForgottenRunesWarriorsGuild.sol   175,9:         token.transfer(msg.sender, amount);  ForgottenRunesWarriorsMinter.sol   629,9:         token.transfer(msg.sender, amount);  ForgottenRunesWarriorsMinter.sol   402,13:             IERC20(weth).transfer(to, amount); ``` ### Recommended Mitigation Steps Consider using safeTransfer or check transfer's return with require().  ## [N03] `type(uint256).max` is more readable than hex version of the number: ``` ForgottenRunesWarriorsMinter.sol   18,9:         0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;   23,9:         0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;   27,9:         0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;   31,9:         0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;   35,9:         0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff; ``` ### Recommended Mitigation Steps: Use `type(uint256).max` instead of `0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff`. 
1. In ForgottenRunesWarriorsGuild.mint the function isn't following the checks-effects-interactions pattern. Even though there is nonReentrant modifier it is still better to follow the pattern since in very rare cases there can still be possible reentrancy.  Recommended steps:  Move numMinted += 1; Before the _safeMint()  See here: https://inspexco.medium.com/cross-contract-reentrancy-attack-402d27a02a15  2. In both contracts you are using a floating pragma.   Recommended Steps:  Remove the ^ from both contracts. This will lock the compiler version.  See here: https://swcregistry.io/docs/SWC-103
# Typo in state variable documentation.  Change `claimlistMinted`'s documentation to something like:  `Tracks whether an address claimed its free warrior`.  https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L88
# Lines of code  https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsGuild.sol#L173-L176 https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L627-L630   # Vulnerability details  Token like [USDT](https://etherscan.io/address/0xdac17f958d2ee523a2206206994597c13d831ec7#contracts) known for using non-standard ERC20. ([Missing return boolean on transfer](https://forum.openzeppelin.com/t/can-not-call-the-function-approve-of-the-usdt-contract/2130/4)).  Contract function [forwardERC20](https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsGuild.sol#L173-L176) will always revert when try to transfer this kind of tokens.  ## Impact  Cannot withdraw some special ERC20 token through contract call. Unexpected contract functionality = Medium severity  ## Migration  Use [SafeTransferLib.safeTransfer](https://github.com/Rari-Capital/solmate/blob/4197b521ef3eb81f675d35e64b7b597b24d33500/src/utils/SafeTransferLib.sol#L65-L94) instead of IERC20 transfer. This accepts ERC20 token with no boolean return like USDT.   
# 1. Usage of legacy ETH transfer function ## Risk Low  ## Impact Contract `ForgottenRunesWarriors` for withdrawing ETH to `vault` uses `send` function, which has a fixed gas stipend and can fail.  The reason behind this is that, after the Istanbul hardfork, any smart contract that uses `transfer()` or `send()` is taking a hard dependency on a gas costs by forwarding a fixed amount of gas (2300). This forwards 2300 gas, which may not be enough if the recipient is a contract and the cost of gas changes.  ## Proof of Concept `ForgottenRunesWarriorsMinter`: * https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L610 * https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L618  `ForgottenRunesWarriorsGuild`: * https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsGuild.sol#L164  ## Tools Used Manual Review / VSCode  ## Recommended Mitigation Steps It is recommended to use safe wrapper library, such as the OpenZeppelin Address library’s and its sendValue function that forwards sufficient gas for the transfer regardless of the underlying OPCODE gas costs.  # 2. Missing zero address checks ## Risk Low  ## Impact Multiple functions in `ForgottenRunesWarriorsMinter` and `ForgottenRunesWarriorsGuild` contracts do not check for zero addresses which might lead to loss of funds, failed transactions and can break the protocol functionality.  ## Proof of Concept `ForgottenRunesWarriorsMinter`: * Missing check for `_warriors` and `_weth` addresses - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L110 * Missing check for `minter` - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L364 * Missing check for `_newVaultAddress` - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L527 * Missing check for `_newWarriorsAddress` - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L535 * Missing check for `_newWethAddress` - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L543  `ForgottenRunesWarriorsGuild`: * Missing check for `newMinter` - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsGuild.sol#L52 * Missing check for `recipient` - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsGuild.sol#L94 * Missing check for `newMinter` - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsGuild.sol#L137  ## Tools Used Manual Review / VSCode  ## Recommended Mitigation Steps It is recommended to add zero address checks for listed parameters.  # 3. Missing/Invalid validation checks ## Risk Low  ## Impact Function `ForgottenRunesWarriorsMinter.setPhaseTimes` setups times for different phases of minting. Phases should be launched one after the other.  Missing check: * `newDaStartTime < newMintlistStartTime` - making sure that Phase DA is before Mintlist Phase  Invalid checks that might lead to unintentional overlapping of phases: * `newPublicStartTime >= newMintlistStartTime` should use `>` instead of `>=` * `newClaimsStartTime >= newPublicStartTime` should `>` instead of `>=`  ## Proof of Concept * https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L480-L500  ## Tools Used Manual Review / VSCode  ## Recommended Mitigation Steps It is recommended to add missing check `newDaStartTime > newMintlistStartTime` and fix invalid checks comparisons from `>=` to `>`.  # 4. ERC20 Return values not checked ## Risk Low  ## Impact The `IERC20.transfer()` function returns a boolean value indicating success. This parameter needs to be checked for success. Some tokens do not revert if the transfer failed but return false instead.  Tokens that don't actually perform the transfer and return false are still counted as a correct transfer. Furthermore, tokens that do not correctly implement the EIP20 standard, like USDT which does not return a success boolean, will revert.  ## Proof of Concept * https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L402 * https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L629  ## Tools Used Manual Review / VSCode  ## Recommended Mitigation Steps It is recommended to use OpenZeppelin's SafeERC20 with the `safeTransfer` function that handles the return value check as well as non-standard-compliant tokens.  # 5. Owner - critical address change ## Risk Low  ## Impact Changing critical addresses such as ownership of `ForgottenRunesWarriorsMinter` and `ForgottenRunesWarriorsGuild` contracts should be a two-step process where the first transaction (from the old/current address) registers the new address (i.e. grants ownership) and the second transaction (from the new address) replaces the old address with the new one. This gives an opportunity to recover from incorrect addresses mistakenly used in the first step. If not, contract functionality might become inaccessible.  ## Proof of Concept * https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L15 * https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsGuild.sol#L14  ## Tools Used Manual Review / VSCode  ## Recommended Mitigation Steps It is recommended to implement two-step process for passing ownership for `ForgottenRunesWarriorsMinter` and `ForgottenRunesWarriorsGuild` contracts.  # 6. Missing error messages ## Risk Non-Critical  ## Impact Contracts `ForgottenRunesWarriorsMinter` and `ForgottenRunesWarriorsGuild` are missing error messages for multiple of `require` statements. Lack of clear error messages might lead to confusion in case of transactions being rejected.  ## Proof of Concept `ForgottenRunesWarriorsMinter.sol`: * https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L610 * https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L618 * https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L628  `ForgottenRunesWarriorsGuild.sol` * https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsGuild.sol#L164 * https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsGuild.sol#L174  ## Tools Used Manual Review / VSCode  ## Recommended Mitigation Steps It is recommended to add error messages to listed `require` statements.  # 7. The contracts use unlocked pragma ## Risk Non-Critical  ## Impact As different compiler versions have critical behavior specifics if the contract gets accidentally deployed using another compiler version compared to one they tested with, various types of undesired behavior can be introduced.  ## Proof of Concept All the contracts in scope use unlocked pragma: * (^0.8.0) - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsGuild.sol#L1 * (^0.8.0) - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L1  ## Tools Used Manual Review / VSCode  ## Recommended Mitigation Steps Consider using a single compiler version for compiling both contracts, for example 0.8.10  # 8. Obsolete function ForgottenRunesWarriorsGuild.withdrawAll ## Risk Non-Critical  ## Impact Contract `ForgottenRunesWarriorsGuild` implements `withdrawAll` function that allows withdrawing all ether from the contract if it was accidentally sent to it. Function `withdrawAll` is the only payable function in the whole `ForgottenRunesWarriorsGuild` contract which makes it impossible to receive "accidental" ether.  ## Proof of Concept * https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsGuild.sol#L163-L165  ## Tools Used Manual Review / VSCode  ## Recommended Mitigation Steps It is recommended to remove `withdrawAll` function from `ForgottenRunesWarriorsGuild` contract.  # 9. Missing events ## Risk Non-Critical  ## Impact Contracts `ForgottenRunesWarriorsGuild` and `ForgottenRunesWarriorsMinter` are not implementing events for multiple critical functions. Lack of events makes it difficult for off-chain applications to monitor the protocol.  ## Proof of Concept `ForgottenRunesWarriorsGuild` * Missing `setMinter` event - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsGuild.sol#L137 * Missing `setProvenanceHash` event - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsGuild.sol#L145 * Missing `setBaseURI` event - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsGuild.sol#L129 * Missing `forwardERC20s` event - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsGuild.sol#L173  `ForgottenRunesWarriorsMinter`: * Missing `bidSummon` event - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L130 * Missing `mintlistSummon` event - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L171 * Missing `publicSummon` event - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L201  * Missing `claimSummon` event - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L229 * Missing `teamSummon` event - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L257 * Missing `_refundAddress` event - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L376  * Missing `setDaStartTime` event - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L441 * Missing `setMintlistStartTime` event - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L448 * Missing `setPublicStartTime` event - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L455 * Missing `setClaimsStartTime` event - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L462 * Missing `setSelfRefundsStartTime` event - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L469 * Missing `setMintlist1MerkleRoot` event - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L505 * Missing `setMintlist2MerkleRoot` event - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L513 * Missing `setClaimlistMerkleRoot` event - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L520 * Missing `setVaultAddress` event - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L527 * Missing `setWarriorAddress` event - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L534 * Missing `setWethAddress` event - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L543 * Missing `setStartPrice` event - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L550 * Missing `setLowestPrice` event - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L557 * Missing `setDaPriceCurveLength` event - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L564 * Missing `setDaDropInterval` event - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L571 * Missing `setFinalPrice` event - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L579  * Missing `setMaxDaSupply` event - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L586 * Missing `setMaxForSale` event - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L593 * Missing `setMaxForClaim` event - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L600 * Missing `withdraw` event - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L608 * Missing `withdrawAll` event - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L616 * Missing `forwardERC20s` event - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L627  ## Tools Used Manual Review / VSCode  ## Recommended Mitigation Steps It is recommended to go through listed functions and add emitting events for the one that change storage variables and should be monitored.  # 10. Usage of boolean values ## Risk Non-Critical  ## Impact Contract `ForgottenRunesWarriorsMinter` in functions `mintlistSummon` and `claimSummon` uses `false` boolean expression for require statement in functions.  ## Proof of Concept * https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L182 * https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L238  ## Tools Used Manual Review / VSCode  ## Recommended Mitigation Steps It is recommended to remove `false` expression: `require(!mintlistMinted[msg.sender], 'Already minted');` and `require(!claimlistMinted[msg.sender], 'Already claimed');`  # 11. Use constant max uint256 as a default value for timestamp variables ## Risk Non-Critical  ## Impact Contract `ForgottenRunesWarriorsMinter` as a default value for `daStartTime`, `mintlistStartTime`, `publicStartTime`, `claimsStartTime` and `selfRefundsStartTime` uses maximum value of `uint256` variable written in hexadecimal format. It makes code less readable and might lead to accidental typos in their values.  ## Proof of Concept * https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L17-L35  ## Tools Used Manual Review / VSCode  ## Recommended Mitigation Steps It is recommended to add constant value `MAX_UINT = type(uint256).max` and then reuse it as a default value for "timestamp" variables.  # 12. Risk of centralization ## Risk Non-Critical  ## Impact Protocol is highly centralized and depends on the good will of the team. Owner of the contract(s) can withdraw all deposited funds at any time, can start and stop minting and can mint arbitrary number of NFTs. This might lead to trust issues and users losses if the owner account will get compromised.  The issue has been downgraded to non-critical since the team is aware of the risk and has accepted it.  ## Proof of Concept * https://github.com/code-423n4/2022-05-runes/blob/main/contracts/ForgottenRunesWarriorsGuild.sol * https://github.com/code-423n4/2022-05-runes/blob/main/contracts/ForgottenRunesWarriorsMinter.sol  ## Tools Used Manual Review / VSCode  ## Recommended Mitigation Steps It is recommended to decentralize protocol by adding multiple safeguards and limit power of the contract(s) owner.
# Lines of code  https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L616-L619   # Vulnerability details  ## Impact Owner of the contract can call `withdrawAll` before the refund process is done to send all ETH to the vault. Since there are no payable receive function in `ForgottenRunesWarriorsMinter`, the owner won't be able to replenish the contract for the refund process.  ## Proof of Concept https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L616-L619  ```solidity     function withdrawAll() public payable onlyOwner {         require(address(vault) != address(0), 'no vault');         require(payable(vault).send(address(this).balance));     } ```  ## Recommended Mitigation Steps Only allow owner to call `withdrawAll` after refund period  
# Non Critical ## [N01] Delete `payable` from `withdrawAll()`: `withdrawAll()` do not use `msg.value` and just withdraw eth so it doesn't need to be `payable`. ### Recommended Mitigation Steps: ```ForgottenRunesWarriorsGuild.sol:163   - function withdrawAll() public payable onlyOwner {   + function withdrawAll() public onlyOwner {  ForgottenRunesWarriorsMinter.sol:616   - function withdrawAll() public payable onlyOwner {   + function withdrawAll() public onlyOwner { ```  ## [N02] Check `.transfer()` return's value: It is good to add a `require()` statement that checks the return value of token transfers or to use something like OpenZeppelin’s `safeTransfer` unless one is sure the given token reverts in case of a failure. Failure to do so will cause silent failures.  ``` ForgottenRunesWarriorsGuild.sol   175,9:         token.transfer(msg.sender, amount);  ForgottenRunesWarriorsMinter.sol   629,9:         token.transfer(msg.sender, amount);  ForgottenRunesWarriorsMinter.sol   402,13:             IERC20(weth).transfer(to, amount); ``` ### Recommended Mitigation Steps Consider using safeTransfer or check transfer's return with require().  ## [N03] `type(uint256).max` is more readable than hex version of the number: ``` ForgottenRunesWarriorsMinter.sol   18,9:         0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;   23,9:         0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;   27,9:         0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;   31,9:         0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;   35,9:         0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff; ``` ### Recommended Mitigation Steps: Use `type(uint256).max` instead of `0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff`. 
1. In ForgottenRunesWarriorsGuild.mint the function isn't following the checks-effects-interactions pattern. Even though there is nonReentrant modifier it is still better to follow the pattern since in very rare cases there can still be possible reentrancy.  Recommended steps:  Move numMinted += 1; Before the _safeMint()  See here: https://inspexco.medium.com/cross-contract-reentrancy-attack-402d27a02a15  2. In both contracts you are using a floating pragma.   Recommended Steps:  Remove the ^ from both contracts. This will lock the compiler version.  See here: https://swcregistry.io/docs/SWC-103
# Typo in state variable documentation.  Change `claimlistMinted`'s documentation to something like:  `Tracks whether an address claimed its free warrior`.  https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L88
# Lines of code  https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsGuild.sol#L173-L176 https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L627-L630   # Vulnerability details  Token like [USDT](https://etherscan.io/address/0xdac17f958d2ee523a2206206994597c13d831ec7#contracts) known for using non-standard ERC20. ([Missing return boolean on transfer](https://forum.openzeppelin.com/t/can-not-call-the-function-approve-of-the-usdt-contract/2130/4)).  Contract function [forwardERC20](https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsGuild.sol#L173-L176) will always revert when try to transfer this kind of tokens.  ## Impact  Cannot withdraw some special ERC20 token through contract call. Unexpected contract functionality = Medium severity  ## Migration  Use [SafeTransferLib.safeTransfer](https://github.com/Rari-Capital/solmate/blob/4197b521ef3eb81f675d35e64b7b597b24d33500/src/utils/SafeTransferLib.sol#L65-L94) instead of IERC20 transfer. This accepts ERC20 token with no boolean return like USDT.   
# 1. Usage of legacy ETH transfer function ## Risk Low  ## Impact Contract `ForgottenRunesWarriors` for withdrawing ETH to `vault` uses `send` function, which has a fixed gas stipend and can fail.  The reason behind this is that, after the Istanbul hardfork, any smart contract that uses `transfer()` or `send()` is taking a hard dependency on a gas costs by forwarding a fixed amount of gas (2300). This forwards 2300 gas, which may not be enough if the recipient is a contract and the cost of gas changes.  ## Proof of Concept `ForgottenRunesWarriorsMinter`: * https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L610 * https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L618  `ForgottenRunesWarriorsGuild`: * https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsGuild.sol#L164  ## Tools Used Manual Review / VSCode  ## Recommended Mitigation Steps It is recommended to use safe wrapper library, such as the OpenZeppelin Address library’s and its sendValue function that forwards sufficient gas for the transfer regardless of the underlying OPCODE gas costs.  # 2. Missing zero address checks ## Risk Low  ## Impact Multiple functions in `ForgottenRunesWarriorsMinter` and `ForgottenRunesWarriorsGuild` contracts do not check for zero addresses which might lead to loss of funds, failed transactions and can break the protocol functionality.  ## Proof of Concept `ForgottenRunesWarriorsMinter`: * Missing check for `_warriors` and `_weth` addresses - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L110 * Missing check for `minter` - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L364 * Missing check for `_newVaultAddress` - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L527 * Missing check for `_newWarriorsAddress` - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L535 * Missing check for `_newWethAddress` - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L543  `ForgottenRunesWarriorsGuild`: * Missing check for `newMinter` - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsGuild.sol#L52 * Missing check for `recipient` - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsGuild.sol#L94 * Missing check for `newMinter` - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsGuild.sol#L137  ## Tools Used Manual Review / VSCode  ## Recommended Mitigation Steps It is recommended to add zero address checks for listed parameters.  # 3. Missing/Invalid validation checks ## Risk Low  ## Impact Function `ForgottenRunesWarriorsMinter.setPhaseTimes` setups times for different phases of minting. Phases should be launched one after the other.  Missing check: * `newDaStartTime < newMintlistStartTime` - making sure that Phase DA is before Mintlist Phase  Invalid checks that might lead to unintentional overlapping of phases: * `newPublicStartTime >= newMintlistStartTime` should use `>` instead of `>=` * `newClaimsStartTime >= newPublicStartTime` should `>` instead of `>=`  ## Proof of Concept * https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L480-L500  ## Tools Used Manual Review / VSCode  ## Recommended Mitigation Steps It is recommended to add missing check `newDaStartTime > newMintlistStartTime` and fix invalid checks comparisons from `>=` to `>`.  # 4. ERC20 Return values not checked ## Risk Low  ## Impact The `IERC20.transfer()` function returns a boolean value indicating success. This parameter needs to be checked for success. Some tokens do not revert if the transfer failed but return false instead.  Tokens that don't actually perform the transfer and return false are still counted as a correct transfer. Furthermore, tokens that do not correctly implement the EIP20 standard, like USDT which does not return a success boolean, will revert.  ## Proof of Concept * https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L402 * https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L629  ## Tools Used Manual Review / VSCode  ## Recommended Mitigation Steps It is recommended to use OpenZeppelin's SafeERC20 with the `safeTransfer` function that handles the return value check as well as non-standard-compliant tokens.  # 5. Owner - critical address change ## Risk Low  ## Impact Changing critical addresses such as ownership of `ForgottenRunesWarriorsMinter` and `ForgottenRunesWarriorsGuild` contracts should be a two-step process where the first transaction (from the old/current address) registers the new address (i.e. grants ownership) and the second transaction (from the new address) replaces the old address with the new one. This gives an opportunity to recover from incorrect addresses mistakenly used in the first step. If not, contract functionality might become inaccessible.  ## Proof of Concept * https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L15 * https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsGuild.sol#L14  ## Tools Used Manual Review / VSCode  ## Recommended Mitigation Steps It is recommended to implement two-step process for passing ownership for `ForgottenRunesWarriorsMinter` and `ForgottenRunesWarriorsGuild` contracts.  # 6. Missing error messages ## Risk Non-Critical  ## Impact Contracts `ForgottenRunesWarriorsMinter` and `ForgottenRunesWarriorsGuild` are missing error messages for multiple of `require` statements. Lack of clear error messages might lead to confusion in case of transactions being rejected.  ## Proof of Concept `ForgottenRunesWarriorsMinter.sol`: * https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L610 * https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L618 * https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L628  `ForgottenRunesWarriorsGuild.sol` * https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsGuild.sol#L164 * https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsGuild.sol#L174  ## Tools Used Manual Review / VSCode  ## Recommended Mitigation Steps It is recommended to add error messages to listed `require` statements.  # 7. The contracts use unlocked pragma ## Risk Non-Critical  ## Impact As different compiler versions have critical behavior specifics if the contract gets accidentally deployed using another compiler version compared to one they tested with, various types of undesired behavior can be introduced.  ## Proof of Concept All the contracts in scope use unlocked pragma: * (^0.8.0) - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsGuild.sol#L1 * (^0.8.0) - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L1  ## Tools Used Manual Review / VSCode  ## Recommended Mitigation Steps Consider using a single compiler version for compiling both contracts, for example 0.8.10  # 8. Obsolete function ForgottenRunesWarriorsGuild.withdrawAll ## Risk Non-Critical  ## Impact Contract `ForgottenRunesWarriorsGuild` implements `withdrawAll` function that allows withdrawing all ether from the contract if it was accidentally sent to it. Function `withdrawAll` is the only payable function in the whole `ForgottenRunesWarriorsGuild` contract which makes it impossible to receive "accidental" ether.  ## Proof of Concept * https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsGuild.sol#L163-L165  ## Tools Used Manual Review / VSCode  ## Recommended Mitigation Steps It is recommended to remove `withdrawAll` function from `ForgottenRunesWarriorsGuild` contract.  # 9. Missing events ## Risk Non-Critical  ## Impact Contracts `ForgottenRunesWarriorsGuild` and `ForgottenRunesWarriorsMinter` are not implementing events for multiple critical functions. Lack of events makes it difficult for off-chain applications to monitor the protocol.  ## Proof of Concept `ForgottenRunesWarriorsGuild` * Missing `setMinter` event - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsGuild.sol#L137 * Missing `setProvenanceHash` event - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsGuild.sol#L145 * Missing `setBaseURI` event - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsGuild.sol#L129 * Missing `forwardERC20s` event - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsGuild.sol#L173  `ForgottenRunesWarriorsMinter`: * Missing `bidSummon` event - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L130 * Missing `mintlistSummon` event - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L171 * Missing `publicSummon` event - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L201  * Missing `claimSummon` event - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L229 * Missing `teamSummon` event - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L257 * Missing `_refundAddress` event - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L376  * Missing `setDaStartTime` event - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L441 * Missing `setMintlistStartTime` event - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L448 * Missing `setPublicStartTime` event - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L455 * Missing `setClaimsStartTime` event - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L462 * Missing `setSelfRefundsStartTime` event - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L469 * Missing `setMintlist1MerkleRoot` event - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L505 * Missing `setMintlist2MerkleRoot` event - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L513 * Missing `setClaimlistMerkleRoot` event - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L520 * Missing `setVaultAddress` event - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L527 * Missing `setWarriorAddress` event - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L534 * Missing `setWethAddress` event - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L543 * Missing `setStartPrice` event - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L550 * Missing `setLowestPrice` event - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L557 * Missing `setDaPriceCurveLength` event - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L564 * Missing `setDaDropInterval` event - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L571 * Missing `setFinalPrice` event - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L579  * Missing `setMaxDaSupply` event - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L586 * Missing `setMaxForSale` event - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L593 * Missing `setMaxForClaim` event - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L600 * Missing `withdraw` event - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L608 * Missing `withdrawAll` event - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L616 * Missing `forwardERC20s` event - https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L627  ## Tools Used Manual Review / VSCode  ## Recommended Mitigation Steps It is recommended to go through listed functions and add emitting events for the one that change storage variables and should be monitored.  # 10. Usage of boolean values ## Risk Non-Critical  ## Impact Contract `ForgottenRunesWarriorsMinter` in functions `mintlistSummon` and `claimSummon` uses `false` boolean expression for require statement in functions.  ## Proof of Concept * https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L182 * https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L238  ## Tools Used Manual Review / VSCode  ## Recommended Mitigation Steps It is recommended to remove `false` expression: `require(!mintlistMinted[msg.sender], 'Already minted');` and `require(!claimlistMinted[msg.sender], 'Already claimed');`  # 11. Use constant max uint256 as a default value for timestamp variables ## Risk Non-Critical  ## Impact Contract `ForgottenRunesWarriorsMinter` as a default value for `daStartTime`, `mintlistStartTime`, `publicStartTime`, `claimsStartTime` and `selfRefundsStartTime` uses maximum value of `uint256` variable written in hexadecimal format. It makes code less readable and might lead to accidental typos in their values.  ## Proof of Concept * https://github.com/code-423n4/2022-05-runes/blob/060b4f82b79c8308fe65674a39a07c44fa586cd3/contracts/ForgottenRunesWarriorsMinter.sol#L17-L35  ## Tools Used Manual Review / VSCode  ## Recommended Mitigation Steps It is recommended to add constant value `MAX_UINT = type(uint256).max` and then reuse it as a default value for "timestamp" variables.  # 12. Risk of centralization ## Risk Non-Critical  ## Impact Protocol is highly centralized and depends on the good will of the team. Owner of the contract(s) can withdraw all deposited funds at any time, can start and stop minting and can mint arbitrary number of NFTs. This might lead to trust issues and users losses if the owner account will get compromised.  The issue has been downgraded to non-critical since the team is aware of the risk and has accepted it.  ## Proof of Concept * https://github.com/code-423n4/2022-05-runes/blob/main/contracts/ForgottenRunesWarriorsGuild.sol * https://github.com/code-423n4/2022-05-runes/blob/main/contracts/ForgottenRunesWarriorsMinter.sol  ## Tools Used Manual Review / VSCode  ## Recommended Mitigation Steps It is recommended to decentralize protocol by adding multiple safeguards and limit power of the contract(s) owner.
