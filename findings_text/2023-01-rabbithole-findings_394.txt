# Lines of code  https://github.com/rabbitholegg/quest-protocol/blob/8c4c1f71221570b14a0479c216583342bd652d8d/contracts/Erc20Quest.sol#L74 https://github.com/rabbitholegg/quest-protocol/blob/8c4c1f71221570b14a0479c216583342bd652d8d/contracts/Erc20Quest.sol#L81   # Vulnerability details  ## Lines of code  [1. File: Erc20Quest.sol#L74](https://github.com/rabbitholegg/quest-protocol/blob/8c4c1f71221570b14a0479c216583342bd652d8d/contracts/Erc20Quest.sol#L74)  [2. File: Erc20Quest.sol#L81](https://github.com/rabbitholegg/quest-protocol/blob/8c4c1f71221570b14a0479c216583342bd652d8d/contracts/Erc20Quest.sol#L81)   ## Vulnerability details  ### The logic for  calculating reward, unclaimed, and fee funds all multiply by `rewardAmountInWeiOrTokenId`, which will always result in a value of zero, leaving no possible way to withdraw funds.  ``` solidity function _calculateRewards(uint256 redeemableTokenCount_) internal view override returns (uint256) {         return redeemableTokenCount_ * rewardAmountInWeiOrTokenId;     } ``` ``` solidity function withdrawRemainingTokens(address to_) public override onlyOwner {         super.withdrawRemainingTokens(to_);          uint unclaimedTokens = (receiptRedeemers() - redeemedTokens) * rewardAmountInWeiOrTokenId;         uint256 nonClaimableTokens = IERC20(rewardToken).balanceOf(address(this)) - protocolFee() - unclaimedTokens;         IERC20(rewardToken).safeTransfer(to_, nonClaimableTokens);     } ```    This issue could arise when the account creating a quest mistakenly passes in zero for `rewardAmountInWeiOrTokenId` and deposits the rewards into the distribution contract before realizing the mistake.  This issue would be further compounded if a smart contract was used to deploy the quest and deposit the funds all in one transaction, leaving no room for recovery.  ## Proof of Concept  A smart contract with the `CREATE_QUEST_ROLE` and the following pseudo code.  ```solidity  newQuest = QuestFactory.createQuest(...,rewardAmountOrTokenId_=0,...);  IERC20(rewardToken).safeTransfer(newQuest, amount);  newQuest.start();  ``` A similar situation could also arise when using a script to deploy and fund the quest.  ## Tools Used Vscode  ## Recommended Mitigation Steps  Require `rewardAmountOrTokenId_` to be greater than 0 on `Erc20Quest` creation.  
