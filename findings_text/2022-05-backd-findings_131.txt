### [G-01] Unnecessary check for positive value  #### Description  A `uint256` value can not be negative, hence there is no need to check for it.  #### Findings  [tokenomics/InflationManager.sol#L589](https://github.com/code-423n4/2022-05-backd/blob/2a5664d35cde5b036074edef3c1369b984d10010/protocol/contracts/tokenomics/InflationManager.sol#L589)  ```solidity totalLpPoolWeight = totalLpPoolWeight > 0 ? totalLpPoolWeight : 0; ```  [tokenomics/InflationManager.sol#L602](https://github.com/code-423n4/2022-05-backd/blob/2a5664d35cde5b036074edef3c1369b984d10010/protocol/contracts/tokenomics/InflationManager.sol#L602)  ```solidity totalAmmTokenWeight = totalAmmTokenWeight > 0 ? totalAmmTokenWeight : 0; ```  [tokenomics/InflationManager.sol#L575](https://github.com/code-423n4/2022-05-backd/blob/2a5664d35cde5b036074edef3c1369b984d10010/protocol/contracts/tokenomics/InflationManager.sol#L575)  ```solidity totalKeeperPoolWeight = totalKeeperPoolWeight > 0 ? totalKeeperPoolWeight : 0; ```  #### Recommended mitigation steps  Remove the check and use the value directly to save gas.  ### [G-02] Unnecessary `poolCheckpoint` function call  The `AmmGauge` and `KeeperGauge` contracts call the function `poolCheckpoint()` within the `kill()` function. Therefore, functions which call this `kill()` function do not have to additionally call the `poolCheckpoint()` function.  #### Description  A `uint256` value can not be negative, hence there is no need to check for it.  #### Findings  [tokenomics/InflationManager.sol#L427](https://github.com/code-423n4/2022-05-backd/blob/2a5664d35cde5b036074edef3c1369b984d10010/protocol/contracts/tokenomics/InflationManager.sol#L427)\ [tokenomics/InflationManager.sol#L461](https://github.com/code-423n4/2022-05-backd/blob/2a5664d35cde5b036074edef3c1369b984d10010/protocol/contracts/tokenomics/InflationManager.sol#L461)  #### Recommended mitigation steps  Remove the call to `poolCheckpoint()` to save gas. 
