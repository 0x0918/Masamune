**[S]**: Suggested optimation, save a decent amount of gas without compromising readability;  **[M]**: Minor optimation, the amount of gas saved is minor, change when you see fit;  **[N]**: Non-preferred, the amount of gas saved is at cost of readability, only apply when gas saving is a top priority.  ## [S] Avoid unnecessary storage read can save gas  https://github.com/code-423n4/2022-03-timeswap/blob/00317d9a8319715a8e28361901ab14fe50d06172/Timeswap/Core/contracts/TimeswapPair.sol#L56-L64  ```solidity     function constantProduct(uint256 maturity)         external         view         override         returns (uint112, uint112, uint112)     {         State storage state = pools[maturity].state;         return (state.x, state.y, state.z);     } ```  Can be changed to:  ```solidity     function constantProduct(uint256 maturity)         external         view         override         returns (uint112, uint112, uint112)     {         State memory state = pools[maturity].state;         return (state.x, state.y, state.z);     } ```  ## [M] "> 0" is less efficient than "!= 0" for unsigned integers  It is cheaper to use `!= 0` than `> 0` for uint256.  https://github.com/code-423n4/2022-03-timeswap/blob/00317d9a8319715a8e28361901ab14fe50d06172/Timeswap/Core/contracts/TimeswapPair.sol#L225-L226  ```solidity         require(pool.state.totalLiquidity > 0, 'E206');  ```  ## [S] Cache storage variables in the stack can save gas  For the storage variables that will be accessed multiple times, cache them in the stack can save ~100 gas from each extra read (`SLOAD` after Berlin).  For example:  https://github.com/code-423n4/2022-03-timeswap/blob/00317d9a8319715a8e28361901ab14fe50d06172/Timeswap/Core/contracts/TimeswapPair.sol#L459-L510  `param.ids.length` can be cached as it will be read for more than 4 times.   ## [S] Do not reduce approval on transferFrom if current allowance is type(uint256).max  The Wrapped Ether (WETH) ERC-20 contract has a gas optimization that does not update the allowance if it is the max uint.  The latest version of OpenZeppelin's ERC20 token contract also adopted this optimization.  https://github.com/code-423n4/2022-03-timeswap/blob/00317d9a8319715a8e28361901ab14fe50d06172/Timeswap/Convenience/contracts/base/ERC20.sol#L16-L25  ```solidity function transferFrom(         address from,         address to,         uint256 amount     ) external override returns (bool) {         _approve(from, msg.sender, allowance[from][msg.sender] - amount);         _transfer(from, to, amount);          return true;     } ``` ```  See: -   https://github.com/OpenZeppelin/openzeppelin-contracts/blob/80d8da05644ceef3cd8e81860882571f037f8667/contracts/token/ERC20/ERC20.sol#L162 -   https://github.com/OpenZeppelin/openzeppelin-contracts/pull/3085 
