  #### Variable name  The name `value` could be related to `_address`. `value` may confuse others with fund or numeric type.  ```     /// @dev Governance function to set other liquidation contracts that may have taken vaults already.     /// @param value The address that may be set/unset as another witch     /// @param isWitch Is this address a witch or not     function setAnotherWitch(address value, bool isWitch) external auth {         otherWitches[value] = isWitch;         emit AnotherWitchSet(value, isWitch);     } ```   #### NATSPEC not complete   ```     /// @notice Return how much collateral should be given out.     function _calcPayout(         DataTypes.Auction memory auction_,         address to,         uint256 artIn     ) internal view returns (uint256 liquidatorCut, uint256 auctioneerCut) { ```  suggestion: Follow NATSPEC.     #### MAGICAL NUMBER CAN BE DOCUMENTED AND EXPLAINED  `1e18` is used several times through the code. This may both obscure the purpose of the function and unnecessarily lead to potential error if the constants are changed during development.  ``` 102-108:         require(initialOffer <= 1e18, "InitialOffer above 100%");         require(proportion <= 1e18, "Proportion above 100%");         require(             initialOffer == 0 || initialOffer >= 0.01e18,             "InitialOffer below 1%"         );  162-164:         if (auctioneerReward_ > 1e18) {             revert AuctioneerRewardTooHigh(1e18, auctioneerReward_);         }  587:         proportionNow = 1e18;  591:         uint256(1e18 - initialProportion).wmul(elapsed.wdiv(duration)); ```  Suggestion: Use constants as this would make the code more maintainable and readable while costing nothing gas-wise.      #### Arithmic operation order  The division is performed first, and multiplication later.  ``` 594:        uint256 inkAtEnd = uint256(artIn).wdiv(auction_.art).wmul(auction_.ink); ```  It might be arithmically safer to do the multiplication first instead.   
