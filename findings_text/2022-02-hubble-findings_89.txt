# Unused import https://github.com/code-423n4/2022-02-hubble/blob/ed1d885d5dbc2eae24e43c3ecbf291a0f5a52765/contracts/AdminProxy.sol#L6-7  # Unresolved todos ``` $ egrep -Rn "todo" contracts contracts/AMM.sol:142:        // sending market orders can fk the trader. @todo put some safe guards around price of liquidations contracts/AMM.sol:555:            // @todo handle case when totalPosition = 0 contracts/ClearingHouse.sol:172:            // @todo put checks on slippage contracts/MarginAccount.sol:277:            @todo consider providing some incentive from insurance fund to execute a liquidation in this scenario. ```  # Lack checks to make sure minAllowableMargin >= maintenanceMargin User might get liquidated immediated if maintenanceMargin > minAllowableMargin https://github.com/code-423n4/2022-02-hubble/blob/ed1d885d5dbc2eae24e43c3ecbf291a0f5a52765/contracts/ClearingHouse.sol#L344 ```     function setParams(         int _maintenanceMargin,         int _minAllowableMargin,         uint _tradeFee,         uint _liquidationPenality     ) external onlyGovernance {         tradeFee = _tradeFee;         liquidationPenalty = _liquidationPenality;         maintenanceMargin = _maintenanceMargin;         minAllowableMargin = _minAllowableMargin;     } ```  # Lack events on critical parameters change https://github.com/code-423n4/2022-02-hubble/blob/ed1d885d5dbc2eae24e43c3ecbf291a0f5a52765/contracts/ClearingHouse.sol#L344 ```     function setParams(         int _maintenanceMargin,         int _minAllowableMargin,         uint _tradeFee,         uint _liquidationPenality     ) external onlyGovernance {         tradeFee = _tradeFee;         liquidationPenalty = _liquidationPenality;         maintenanceMargin = _maintenanceMargin;         minAllowableMargin = _minAllowableMargin;     } ``` https://github.com/code-423n4/2022-02-hubble/blob/ed1d885d5dbc2eae24e43c3ecbf291a0f5a52765/contracts/AMM.sol#L722 ```     function setAmmState(AMMState _state) external onlyGovernance {         require(ammState != _state, "AMM.setAmmState.sameState");         ammState = _state;         if (_state == AMMState.Active) {             nextFundingTime = ((_blockTimestamp() + fundingPeriod) / 1 hours) * 1 hours;         }     }      function syncDeps(address _registry) public onlyGovernance {         IRegistry registry = IRegistry(_registry);         clearingHouse = registry.clearingHouse();         oracle = IOracle(registry.oracle());     }      function setFundingBufferPeriod(uint _fundingBufferPeriod) external onlyGovernance {         fundingBufferPeriod = _fundingBufferPeriod;     } ```  # Lack liquidation events in _liquidateMaker https://github.com/code-423n4/2022-02-hubble/blob/ed1d885d5dbc2eae24e43c3ecbf291a0f5a52765/contracts/ClearingHouse.sol#L163  # Governance can set the orcale price to arbitary number `price` can be set to any number including negative numbers, which will have serious impact  https://github.com/code-423n4/2022-02-hubble/blob/ed1d885d5dbc2eae24e43c3ecbf291a0f5a52765/contracts/Oracle.sol#L169 ```     function setStablePrice(address underlying, int256 price) external onlyGovernance {         requireNonEmptyAddress(underlying);         stablePrice[underlying] = price;     } ```  # Lack chainlink oracle sanity check Recommened to uncoment the sanity check https://github.com/code-423n4/2022-02-hubble/blob/ed1d885d5dbc2eae24e43c3ecbf291a0f5a52765/contracts/Oracle.sol#L166  # Fund frozen on Oracle malfunction If Oracle malfunction, most fund in the protocol would be frozen 
