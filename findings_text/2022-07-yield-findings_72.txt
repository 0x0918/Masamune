# Yield-Witch-v2-code4rena Report  - [Yield-Witch-v2-code4rena Report](#yield-witch-v2-code4rena-report)   - [QA Report](#qa-report)   - [Files Description Table](#files-description-table)   - [Issues found](#issues-found)     - [[N-01]: Typos](#n-01-typos)       - [Impact](#impact)       - [Code Affected and Mitigation](#code-affected-and-mitigation)       - [Tools used](#tools-used)  ##  QA Report  ##  Files Description Table | File Name                         | SHA-1 Hash                               | | --------------------------------- | ---------------------------------------- | | 2022-07-yield/contracts/Witch.sol | 07190e9e6d7769e20bcc07030eee3802ee199a5f |  ## Issues found  ### [N-01]: Typos  #### Impact None.  #### Code Affected and Mitigation  ```diff diff --git a/contracts/Witch.sol b/contracts/Witch.sol index f98dd6a..92ca566 100644 --- a/contracts/Witch.sol +++ b/contracts/Witch.sol @@ -217,7 +217,7 @@ contract Witch is AccessControl {          emit Auctioned(vaultId, uint32(block.timestamp));      }   -    /// @dev Calculates the auction initial values, the 2 non-trivial values are how much art must be repayed +    /// @dev Calculates the auction initial values, the 2 non-trivial values are how much art must be repaid      /// and what's the max ink that will be offered in exchange. For the realtime amount of ink that's on offer      /// use `_calcPayout`      function _calcAuction( @@ -264,7 +264,7 @@ contract Witch is AccessControl {      }        /// @dev Moves the vault ownership back to the original owner & clean internal state. -    /// Useful as a method so it can be overriden by specialised witches that may need to do extra accounting or notify 3rd parties +    /// Useful as a method so it can be overridden by specialised witches that may need to do extra accounting or notify 3rd parties      function _auctionEnded(bytes12 vaultId, address owner) internal virtual {          cauldron.give(vaultId, owner);          delete auctions[vaultId]; @@ -382,7 +382,7 @@ contract Witch is AccessControl {          _collateralBought(vaultId, to, liquidatorCut + auctioneerCut, artIn);      }   -    /// @dev transfers funds from the ilkJoin to the liquidator (and potentially the auctioneer if they're differente people) +    /// @dev transfers funds from the ilkJoin to the liquidator (and potentially the auctioneer if they're different people)      function _payInk(          DataTypes.Auction memory auction_,          address to, @@ -459,7 +459,7 @@ contract Witch is AccessControl {      }        /// @dev Logs that a certain amount of a vault was liquidated -    /// Useful as a method so it can be overriden by specialised witches that may need to do extra accounting or notify 3rd parties +    /// Useful as a method so it can be overridden by specialised witches that may need to do extra accounting or notify 3rd parties      function _collateralBought(          bytes12 vaultId,          address buyer, @@ -517,7 +517,7 @@ contract Witch is AccessControl {          */ -    /// @dev quoutes hoy much ink a liquidator is expected to get if it repays an `artIn` amount +    /// @dev Quotes how much ink a liquidator is expected to get if it repays an `artIn` amount      /// Works for both Auctioned and ToBeAuctioned vaults      /// @param vaultId The vault to get a quote for      /// @param to Address that would get the collateral bought  ```  #### Tools used VS Code 
