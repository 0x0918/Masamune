## [L1] Add check against parameters `_amount` and `_shares`:  Assessed risk: 1/10  Urgency: N/A  Codebase frequency: 2  ### [L1 - Impact]:  The `amount` that the user deposits is not checked against being `!=0`. Itâ€™s a good practice to check arbitrary inputs against being null. Although the transaction would revert anyhow(due to arithmetic error of division `/0`) you should consider adding a check against it. The same goes with parameter `_shares` in the `withdraw()` function.  ### [L1 - References]:   InsuranceFund.sol lines [62](https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/InsuranceFund.sol#L62) and [39](https://github.com/code-423n4/2022-02-hubble/blob/main/contracts/InsuranceFund.sol#L39)   ### [L1 - Mitigation]:  Adding `require` statements would prevent such operations.  ```bash function deposit(uint _amount) external {      require(_amount !=0, "IF.deposit.amount_zero");  ... }  function withdraw(uint _shares) external {     require(_shares !=0, "IF.withdraw.shares_not_zero");  ... } ```
