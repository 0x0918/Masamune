# Lines of code  https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/PaladinRewardReserve.sol#L31 https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/PaladinRewardReserve.sol#L38-L39 https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/PaladinRewardReserve.sol#L47   # Vulnerability details  ## Impact - In function  `updateSpenderAllowance` of `PaladinRewardReserve`, line 38 `safeApprove` to 0 before `safeApprove` to amount in line 39. This is because we can only approve their allowance to zero or from zero in `SafeERC20`.  - In `SafeERC20`, it is used to prevent front-run by approved addresses and usually users have to do 2 TXs. - But when we do both in 1 TX, it does not add any layer of security and just wasting gas. Such behavior creates a false sense of security. Also `safeApprove` is deprecated by OZ (ref) ## Proof of concept - https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/PaladinRewardReserve.sol#L31 - https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/PaladinRewardReserve.sol#L38-L39 - https://github.com/code-423n4/2022-03-paladin/blob/9c26ec8556298fb1dc3cf71f471aadad3a5c74a0/contracts/PaladinRewardReserve.sol#L47 ## Recommended Mitigation Steps - As suggested by the OpenZeppelin comment, replace `safeApprove()` with `safeIncreaseAllowance()`. - And in the case of line 38-39, just use normal `approve` instead of 2 `safeApprove`.   
