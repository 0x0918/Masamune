#1 using != instead < https://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Core/contracts/TimeswapPair.sol#L225 https://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Core/contracts/TimeswapPair.sol#L225 by using != instead of > or < to validate can save gas  #2 Simple way to set `assetOut` value https://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Core/contracts/TimeswapPair.sol#L238-L239 https://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Core/contracts/TimeswapPair.sol#L436-L438 In the current implementation the value of `assetOut` was set multipleTime. use this to save gas: ``` assetOut = _assetOut + feeOut; ``` #3  Removing && operator can saving more gas usage  POC it can be seen from my report here : https://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Core/contracts/TimeswapFactory.sol#L49 instead of using operator && on single require check. using additional require check can save more execution gas. occurance : https://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Core/contracts/TimeswapFactory.sol#L49  Recommended Mitigation Steps: ``` require(asset != IERC20(address(0)), 'E101'); require(collateral != IERC20(address(0)), 'E101'); ```  #4 Simple way to set `assetIn` value https://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Core/contracts/TimeswapPair.sol#L189-L190 https://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Core/contracts/TimeswapPair.sol#L314-L316 In the current implementation the value of `assetIn` was set multiple times. use this to save gas: ``` assetIn = param.xIncrease + feeStoredIncrease ``` #5 Unused `SafeERC20` lib https://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Core/contracts/TimeswapPair.sol#L18 The `SafeERC20.functions()` was never called in this contract. Remove L6 and L18.  #6 Better way to use library for saving more gas  https://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Convenience/contracts/TimeswapConvenience.sol#L29-L35  less gas usage by not declearing library used (L28-L35). Removing line which declare that       using Mint for mapping(IERC20 => mapping(IERC20 => mapping(uint256 => Native)));     using Burn for mapping(IERC20 => mapping(IERC20 => mapping(uint256 => Native)));     using Lend for mapping(IERC20 => mapping(IERC20 => mapping(uint256 => Native)));     using Withdraw for mapping(IERC20 => mapping(IERC20 => mapping(uint256 => Native)));     using Borrow for mapping(IERC20 => mapping(IERC20 => mapping(uint256 => Native)));     using Pay for mapping(IERC20 => mapping(IERC20 => mapping(uint256 => Native)));     using DeployNative for mapping(IERC20 => mapping(IERC20 => mapping(uint256 => Native)));   and call library.function() directly can saving both deploying and execution gas usage.  for ex.      function deployNatives(DeployNatives calldata params) external override {         natives.deploy(this, factory, params);      }       change to   DeployNatives.deploy(natives, this, factory, params); //--> Call the library name directly and passed natives to the first argument.    #7 Unnecessary SafeTransfer Library  https://github.com/code-423n4/2022-03-timeswap/blob/00317d9a8319715a8e28361901ab14fe50d06172/Timeswap/Convenience/contracts/TimeswapConvenience.sol#L28  because it was the only SafeERC20.function lib were used, so it better to just use transfer and transferFrom from ERC20.function to saving more gas.  
