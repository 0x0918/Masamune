### Storage of `uints`/`ints` smaller than 32 bytes incurs overhead > When using elements that are smaller than 32 bytes, your contractâ€™s gas usage may be higher. This is because the EVM operates on 32 bytes at a time. Therefore, if the element is smaller than that, the EVM must use more operations in order to reduce the size of the element from 32 bytes to the desired size.  https://docs.soliditylang.org/en/v0.8.11/internals/layout_in_storage.html Use a larger size then downcast where needed ```solidity uint16 public immutable override fee;            ``` https://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Core/contracts/TimeswapPair.sol#L30  ```solidity uint16 public immutable override protocolFee;            ``` https://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Core/contracts/TimeswapPair.sol#L32  ```solidity uint16 public immutable override fee;            ``` https://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Core/contracts/TimeswapFactory.sol#L21  ```solidity uint16 public immutable override protocolFee;            ``` https://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Core/contracts/TimeswapFactory.sol#L23   ### `abi.encode()` is less efficient than `abi.encodePacked()` ```solidity bytes32 salt = keccak256(abi.encode(asset, collateral, maturity.toString()));           ``` https://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Convenience/contracts/libraries/Deploy.sol#L35  ```solidity bytes(abi.encode(params.asset, params.collateral, params.from, params.maturity))             ``` https://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Convenience/contracts/libraries/Pay.sol#L127  ```solidity bytes(abi.encode(params.asset, params.collateral, params.from))              ``` https://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Convenience/contracts/libraries/Borrow.sol#L510  ```solidity bytes(abi.encode(params.asset, params.collateral, params.from))              ``` https://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Convenience/contracts/libraries/Lend.sol#L383  ```solidity bytes(abi.encode(params.asset, params.collateral, params.assetFrom, params.collateralFrom))             ``` https://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Convenience/contracts/libraries/Mint.sol#L690  ```solidity pair = new TimeswapPair{saltkeccak256(abi.encode(asset, collateral))}(asset, collateral, fee, protocolFee);         ``` https://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Core/contracts/TimeswapFactory.sol#L52   ### `require()` strings longer than 32 bytes cost extra gas Consider not using the version of this function that takes in a `string` ```solidity "balanceOf Call to IERC20 token not successful" ``` https://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Core/contracts/libraries/SafeBalance.sol#L16  ### Using `> 0` costs more gas than `!= 0` when used on uints in a `require()` statement ```solidity require(pool.state.totalLiquidity > 0, 'E206');             ``` https://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Core/contracts/TimeswapPair.sol#L225   ### Splitting `require()` statements that use `&&` saves gas See [this issue](https://github.com/code-423n4/2022-01-xdefi-findings/issues/128) for an example ```solidity require(asset != IERC20(address(0)) && collateral != IERC20(address(0)), 'E101');         ``` https://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Core/contracts/TimeswapFactory.sol   ### `<array>.length` should not be looked up in every loop of a for-loop Even memory arrays incur the overhead of bit tests and bit shifts to calculate the array length ```solidity for (uint256 i; i < data.length; i++) {         ``` https://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Convenience/contracts/libraries/NFTTokenURIScaffold.sol#L228  ```solidity for (uint256 i; i < param.ids.length;) {          ``` https://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Core/contracts/TimeswapPair.sol#L480  ### `++i`/`i++` should be `unchecked{++i}`/`unchecked{++i}` when it is not possible for them to overflow, as is the case when used in for- and while-loops ```solidity for (i = 0; i < 32 && data[i] != 0; i++) {    ``` https://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Convenience/contracts/libraries/SafeMetadata.sol#L38  ```solidity for (uint256 i; i < lengthDiff; i++) {         ``` https://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Convenience/contracts/libraries/NFTTokenURIScaffold.sol#L146  ```solidity for (uint256 i; i < lengthDiff; i++) {         ``` https://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Convenience/contracts/libraries/NFTTokenURIScaffold.sol#L174  ```solidity for (uint256 i; i < data.length; i++) {         ``` https://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Convenience/contracts/libraries/NFTTokenURIScaffold.sol#L228  ```solidity for (uint256 i; i <= end - begin; i++) {       ``` https://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Convenience/contracts/libraries/NFTTokenURIScaffold.sol#L241   ### `++i` costs less gas than `++i`, especially when it's used in for-loops (`--i`/`i--` too) ```solidity for (i = 0; i < 32 && data[i] != 0; i++) {    ``` https://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Convenience/contracts/libraries/SafeMetadata.sol#L38  ```solidity for (uint256 i; i < lengthDiff; i++) {         ``` https://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Convenience/contracts/libraries/NFTTokenURIScaffold.sol#L146  ```solidity for (uint256 i; i < lengthDiff; i++) {         ``` https://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Convenience/contracts/libraries/NFTTokenURIScaffold.sol#L174  ```solidity for (uint256 i; i < data.length; i++) {         ``` https://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Convenience/contracts/libraries/NFTTokenURIScaffold.sol#L228  ```solidity for (uint256 i; i <= end - begin; i++) {       ``` https://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Convenience/contracts/libraries/NFTTokenURIScaffold.sol#L241   ### It costs more gas to initialize variables to zero than to let the default of zero be applied ```solidity uint8 i = 0;             ``` https://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Convenience/contracts/libraries/SafeMetadata.sol#L33 
