1. considered using require instead of && can save gas https://github.com/code-423n4/2022-02-nested/blob/main/contracts/FeeSplitter.sol#L123 // gas cost 35473  Change to: ``` require(accountsLength != 0); require (accountsLength == _weights.length, "FS: INPUTS_LENGTH_MUST_MATCH"); ``` // gas cost 35465  ========================================================================  2. considered add unchecked can save gas https://github.com/code-423n4/2022-02-nested/blob/main/contracts/FeeSplitter.sol#L327 // gas cost 22798  add unchecked ``` unchecked { return (_amount * _weight) / _totalWeights; } ``` // gas cost 22440  ========================================================================  3. avoid unnecessary `i = 0` because the default of uint is already 0 https://github.com/code-423n4/2022-02-nested/blob/main/contracts/FeeSplitter.sol#L126  considered removing 0 value can save gas  ========================================================================  4. `SafeERC20` Gas Optimization https://github.com/code-423n4/2022-02-nested/blob/main/contracts/NestedFactory.sol#L19 by not declaring this ``` using SafeERC20 for IERC20; ```  and for example, use this: ``` SafeERC20.safeTransfer(IERC20(_inputToken)_msgSender(), _amountToSpend - amounts[1]); ```  ========================================================================  5. just read it directly to storage can save gas  https://github.com/code-423n4/2022-02-nested/blob/main/contracts/FeeSplitter.sol#L279 // gas cost 24794  Change to: ``` Shareholder[] storage shareholdersCache = shareholders; ``` // gas cost 24684  ========================================================================  6. the original function will return 0 which a default value for uint256 https://github.com/code-423n4/2022-02-nested/blob/main/contracts/FeeSplitter.sol#L216  // gas cost 24940  Change to: ```      function getAmountDue(address _account, IERC20 _token) public view returns (uint256) {         TokenRecords storage _tokenRecords = tokenRecords[address(_token)];         if (_tokenRecords.totalShares != 0) {          uint256 totalReceived = _tokenRecords.totalReleased + _token.balanceOf(address(this));         return             (totalReceived * _tokenRecords.shares[_account]) /             _tokenRecords.totalShares -             _tokenRecords.released[_account];         }     } ``` // gas cost 24919  ========================================================================
