# FINDINGS FOR NIBBL CONTEST **Commit:** `N/A` **Type of Audit:** Security Review **Type of Project:** NFT Fractionalization Protocol **Language**: Solidity **Methods**: Manual review ## Audit Scope  --- ## 1.  Contract `NibblVault.sol`   ### [LOW] Missing event emission for state-changing function `updateCurator` function  **File**: [L485](https://github.com/code-423n4/2022-06-nibbl/blob/main/contracts/NibblVault.sol#L485-L488)  **Description**: State-changing function, `_updateCurator` function does not emit an appropriate event.  ```= solidity function updateCurator(address _newCurator) external override {     require(msg.sender == curator,"NibblVault: Only Curator");     curator = _newCurator; }  ``` **Recommendation**: Consider creating and emitting appropriate event for `_updateCurator` function   --- ## 2.  Contract `NibblVaultFactory.sol`  ### [LOW] Unused Openzeppelin's `SafeMath` Library  **File**: [L9](https://github.com/code-423n4/2022-06-nibbl/blob/main/contracts/NibblVaultFactory.sol#L9)  **Description**: Whereas Openzeppelin's `SafeMath` Library is imported, it is never used in the contract ``` = solidity import { SafeMath } from  "@openzeppelin/contracts/utils/math/SafeMath.sol";  ```  **Recommendation**: Consider utilizing the imported Openzeppelin's `SafeMath` library for efficiency in all logic involving arithmetic operations or consider removing this library if it will be used in the contract.   ---    ### [LOW] Missing access control and possibility of reentrancy attack  **File**: [L112](https://github.com/NibblNFT/nibbl-smartcontracts/blob/master/contracts/NibblVaultFactory.sol#L112)  **Description**: No access control logic to restrict calls to  `withdrawAdminFee(...)` function and missing reentrancy guard to mitigate the risks of reentrancy. The code is shown below:  ```solidity= function withdrawAdminFee() external override {     (bool _success, ) = payable(feeTo).call{value: address(this).balance}("");     require(_success); } ```  **Recommendation**: Consider adding  access control to restrict calls to `withdrawAdminFee(...)` function and consider implementing reentrancy guard to mitigate the risks of reentrancy.  
