#  [L-01] Unused `receive()` function will lock Ether in contract :-   1. https://github.com/code-423n4/2022-07-axelar/blob/main/contracts/deposit-service/DepositReceiver.sol#L29 :      `receive() external payable {}`       2. https://github.com/code-423n4/2022-07-axelar/blob/main/contracts/deposit-service/AxelarDepositServiceProxy.sol#L13 :      `receive() external payable override {}`           #  [L-02] Missing checks for `address(0x0)` when assigning values to address state variables :-     1. https://github.com/code-423n4/2022-07-axelar/blob/main/xc20/contracts/XC20Wrapper.sol#L37 :        `xc20Codehash = codehash_;`          2. https://github.com/code-423n4/2022-07-axelar/blob/main/xc20/contracts/XC20Wrapper.sol#L45 :        `xc20Codehash = newCodehash;`    3. File: https://github.com/code-423n4/2022-07-axelar/blob/main/contracts/AxelarGateway.sol#L52 :         'AUTH_MODULE = authModule;'         4. File: https://github.com/code-423n4/2022-07-axelar/blob/main/contracts/AxelarGateway.sol#L53 :        `TOKEN_DEPLOYER_IMPLEMENTATION = tokenDeployerImplementation;`    5. https://github.com/code-423n4/2022-07-axelar/blob/main/contracts/deposit-service/DepositBase.sol#L24 :        `gateway = gateway_;`          6. https://github.com/code-423n4/2022-07-axelar/blob/main/xc20/contracts/XC20Wrapper.sol#L27 :        `gatewayAddress = gatewayAddress_;`        #  [L-03] address.call{value:x}() should be used instead of payable.transfer() :-     1. https://github.com/code-423n4/2022-07-axelar/blob/main/xc20/contracts/XC20Wrapper.sol#L63 :        `payable(msg.sender).transfer(address(this).balance);`          #  [L-04] approve should be replaced with safeApprove or safeIncreaseAllowance() / safeDecreaseAllowance() :-     1. https://github.com/code-423n4/2022-07-axelar/blob/main/contracts/deposit-service/AxelarDepositService.sol#L30 :        `IERC20(wrappedTokenAddress).approve(gateway, amount);`          2. https://github.com/code-423n4/2022-07-axelar/blob/main/contracts/deposit-service/ReceiverImplementation.sol#L38 :        `IERC20(tokenAddress).approve(gateway, amount);`    3. File: https://github.com/code-423n4/2022-07-axelar/blob/main/contracts/deposit-service/ReceiverImplementation.sol#L64 :         'IERC20(wrappedTokenAddress).approve(gateway, amount);'                #  [L-05] Low level calls donâ€™t check for contract existence :-     1. https://github.com/code-423n4/2022-07-axelar/blob/main/contracts/AxelarGateway.sol#L320 :        `(bool success, ) = address(this).call(abi.encodeWithSelector(commandSelector, params[i], commandId));`          2. https://github.com/code-423n4/2022-07-axelar/blob/main/contracts/AxelarGateway.sol#L460#L463 :        `function _callERC20Token(address tokenAddress, bytes memory callData) internal returns (bool) {         (bool success, bytes memory returnData) = tokenAddress.call(callData);         return success && (returnData.length == uint256(0) || abi.decode(returnData, (bool)));     }`    3. File: https://github.com/code-423n4/2022-07-axelar/blob/main/contracts/gas-service/AxelarGasService.sol#L158 :         '(bool success, bytes memory returnData) = tokenAddress.call(abi.encodeWithSelector(IERC20.transfer.selector, receiver, amount));'         4. File: https://github.com/code-423n4/2022-07-axelar/blob/main/contracts/gas-service/AxelarGasService.sol#L172#L174 :        `(bool success, bytes memory returnData) = tokenAddress.call(             abi.encodeWithSelector(IERC20.transferFrom.selector, from, address(this), amount)         );`    5. https://github.com/code-423n4/2022-07-axelar/blob/main/contracts/deposit-service/DepositBase.sol#L71 :        `(bool success, bytes memory returnData) = tokenAddress.call(abi.encodeWithSelector(IERC20.transfer.selector, receiver, amount));`          6. https://github.com/code-423n4/2022-07-axelar/blob/main/xc20/contracts/XC20Wrapper.sol#L95 :        `(bool success, bytes memory returnData) = tokenAddress.call(abi.encodeWithSelector(IERC20.transfer.selector, receiver, amount));`    7. https://github.com/code-423n4/2022-07-axelar/blob/main/xc20/contracts/XC20Wrapper.sol#L106#L108 :        `(bool success, bytes memory returnData) = tokenAddress.call(             abi.encodeWithSelector(IERC20.transferFrom.selector, from, address(this), amount)         );`               #  [L-06] an unbounded loop on array can lead to DoS :-     1. https://github.com/code-423n4/2022-07-axelar/blob/main/contracts/gas-service/AxelarGasService.sol#L123L#124 :        `for (uint256 i; i < tokens.length; i++) {             address token = tokens[i];`          2. https://github.com/code-423n4/2022-07-axelar/blob/main/contracts/deposit-service/AxelarDepositService.sol#L168#L169 :        `for (uint256 i; i < refundTokens.length; i++) {             refundToken = refundTokens[i];`    3. File: https://github.com/code-423n4/2022-07-axelar/blob/main/contracts/auth/AxelarAuthWeighted.sol#L116#L120 :         'for (uint256 i; i < accounts.length - 1; ++i) {             if (accounts[i] >= accounts[i + 1]) {                 return false;             }         }'                 #  [N-01] Adding a return statement when the function defines a named return variable, is redundant:-   1. File: https://github.com/code-423n4/2022-07-axelar/blob/main/contracts/AxelarGateway.sol#L182 :      `return _adminEpoch();`          #  [N-02] require()/revert() statements should have descriptive reason strings :-   1. File: https://github.com/code-423n4/2022-07-axelar/blob/main/xc20/contracts/XC20Wrapper.sol#L55#L58 :      ` revert('NotAxelarToken()');       revert('NotXc20Token()');       revert('AlreadyWrappingAxelarToken()');       revert('AlreadyWrappingXC20Token()');`       2. https://github.com/code-423n4/2022-07-axelar/blob/main/xc20/contracts/XC20Wrapper.sol#L60#L61 :      `revert('NotOwner()');      revert('CannotSetMetadata()');`  3. File: https://github.com/code-423n4/2022-07-axelar/blob/main/xc20/contracts/XC20Wrapper.sol#L68 :       'revert('NotAxelarToken()');'       4. File: https://github.com/code-423n4/2022-07-axelar/blob/main/xc20/contracts/XC20Wrapper.sol#L70 :      `revert('NotWrappingToken()');`  1. File: https://github.com/code-423n4/2022-07-axelar/blob/main/xc20/contracts/XC20Wrapper.sol#L78#L79 :      `revert('NotAxelarToken()');      revert('CannotMint()');`       2. https://github.com/code-423n4/2022-07-axelar/blob/main/xc20/contracts/XC20Wrapper.sol#L84#L86 :      `revert('NotXc20Token()');      revert('InsufficientBalance()');      revert('CannotBurn()');`  3. File: https://github.com/code-423n4/2022-07-axelar/blob/main/xc20/contracts/XC20Wrapper.sol#L98 :       'revert('TransferFailed()');'       4. File: https://github.com/code-423n4/2022-07-axelar/blob/main/xc20/contracts/XC20Wrapper.sol#L111 :      `revert('TransferFailed()');`         #  [N-03] Use a more recent version of solidity (Use a solidity version of at least 0.8.12 to get `string.concat()` to be used instead of `abi.encodePacked(<str>,<str>)`) :-   1. https://github.com/code-423n4/2022-07-axelar/blob/main/contracts/AxelarGateway.sol#L3 :      `pragma solidity 0.8.9;`          2. File: https://github.com/code-423n4/2022-07-axelar/blob/main/contracts/deposit-service/AxelarDepositService.sol#L3 :      `pragma solidity 0.8.9;`  3. File: https://github.com/code-423n4/2022-07-axelar/blob/main/contracts/deposit-service/DepositBase.sol#L3 :       'pragma solidity 0.8.9;'                #  [N-04] Event is missing indexed fields (Each `event` should use three `indexed` fields if there are three or more fields) :-   1. https://github.com/code-423n4/2022-07-axelar/blob/main/contracts/interfaces/IAxelarGasService.sol#L13#L57 :      `    event GasPaidForContractCall(         address indexed sourceAddress,         string destinationChain,         string destinationAddress,         bytes32 indexed payloadHash,         address gasToken,         uint256 gasFeeAmount,         address refundAddress     );      event GasPaidForContractCallWithToken(         address indexed sourceAddress,         string destinationChain,         string destinationAddress,         bytes32 indexed payloadHash,         string symbol,         uint256 amount,         address gasToken,         uint256 gasFeeAmount,         address refundAddress     );      event NativeGasPaidForContractCall(         address indexed sourceAddress,         string destinationChain,         string destinationAddress,         bytes32 indexed payloadHash,         uint256 gasFeeAmount,         address refundAddress     );      event NativeGasPaidForContractCallWithToken(         address indexed sourceAddress,         string destinationChain,         string destinationAddress,         bytes32 indexed payloadHash,         string symbol,         uint256 amount,         uint256 gasFeeAmount,         address refundAddress     );      event GasAdded(bytes32 indexed txHash, uint256 indexed logIndex, address gasToken, uint256 gasFeeAmount, address refundAddress);      event NativeGasAdded(bytes32 indexed txHash, uint256 indexed logIndex, uint256 gasFeeAmount, address refundAddress);`          2. File: https://github.com/code-423n4/2022-07-axelar/blob/main/contracts/interfaces/IAxelarAuthWeighted.sol#L14 :      `event OperatorshipTransferred(address[] newOperators, uint256[] newWeights, uint256 newThreshold);`        #  [N-05] Use of sensitive/non-inclusive terms :-   1. https://github.com/code-423n4/2022-07-axelar/blob/main/contracts/AxelarGateway.sol#L496 :      `bool burnSuccess;`                   #  [N-06] public functions not called by the contract should be declared external instead () :-   1. https://github.com/code-423n4/2022-07-axelar/blob/main/contracts/AxelarGateway.sol#L152#L178 :      `    function tokenDailyMintLimit(string memory symbol) public view override returns (uint256) {         return getUint(_getTokenDailyMintLimitKey(symbol));     }      function tokenDailyMintAmount(string memory symbol) public view override returns (uint256) {         return getUint(_getTokenDailyMintAmountKey(symbol, block.timestamp / 1 days));     }      function allTokensFrozen() external pure override returns (bool) {         return false;     }      function implementation() public view override returns (address) {         return getAddress(KEY_IMPLEMENTATION);     }      function tokenAddresses(string memory symbol) public view override returns (address) {         return getAddress(_getTokenAddressKey(symbol));     }      function tokenFrozen(string memory) external pure override returns (bool) {         return false;     }      function isCommandExecuted(bytes32 commandId) public view override returns (bool) {         return getBool(_getIsCommandExecutedKey(commandId));     }`          2. File: https://github.com/code-423n4/2022-07-axelar/blob/main/contracts/deposit-service/AxelarDepositService.sol#L56#L61 :      `  function addressForNativeDeposit(         bytes32 salt,         address refundAddress,         string calldata destinationChain,         string calldata destinationAddress     ) public view returns (address) {`  3. File: https://github.com/code-423n4/2022-07-axelar/blob/main/contracts/deposit-service/AxelarDepositService.sol#L241 :       'function contractId() public pure returns (bytes32) {'  4. File: https://github.com/code-423n4/2022-07-axelar/blob/main/contracts/deposit-service/DepositBase.sol#L41#L47 :      `    function wrappedToken() public view returns (address) {         return IAxelarGateway(gateway).tokenAddresses(wrappedSymbol());     }      // @dev Converts bytes32 from immutable storage into a string     function wrappedSymbol() public view returns (string memory symbol) {         bytes32 symbolData = wrappedSymbolBytes;`  5. File: https://github.com/code-423n4/2022-07-axelar/blob/main/xc20/contracts/XC20Wrapper.sol#L30#L32 :       'function gateway() public view override returns (IAxelarGateway) {         return IAxelarGateway(gatewayAddress);     }'  6. File: https://github.com/code-423n4/2022-07-axelar/blob/main/xc20/contracts/XC20Wrapper.sol#L40#L42 :       '   function contractId() public pure returns (bytes32) {         return keccak256('xc20-wrapper');     }'               #  [N-07] public functions not called by the contract should be declared external instead () :-   1. https://github.com/code-423n4/2022-07-axelar/blob/main/contracts/interfaces/IDepositBase.sol#L5 :      `interface IDepositBase {`                   #  [N-08] public functions not called by the contract should be declared external instead () :-   1. https://github.com/code-423n4/2022-07-axelar/blob/main/contracts/auth/AxelarAuthWeighted.sol#L4 :      ` uint8 internal constant OLD_KEY_RETENTION = 16;`             #  [N-09] Use a more recent version of solidity :-   1. https://github.com/code-423n4/2022-07-axelar/blob/main/contracts/AxelarGateway.sol#L1 :      `// SPDX-License-Identifier: MIT`       2. https://github.com/code-423n4/2022-07-axelar/blob/main/contracts/interfaces/IDepositBase.sol#L1 :      `// SPDX-License-Identifier: MIT`  3. File: https://github.com/code-423n4/2022-07-axelar/blob/main/contracts/gas-service/AxelarGasService.sol#L1 :       '// SPDX-License-Identifier: MIT'       4. File: https://github.com/code-423n4/2022-07-axelar/blob/main/contracts/gas-service/AxelarGasServiceProxy.sol#L1 :      `// SPDX-License-Identifier: MIT`  5. https://github.com/code-423n4/2022-07-axelar/blob/main/contracts/interfaces/IAxelarAuth.sol#L1 :      `// SPDX-License-Identifier: MIT`       6. https://github.com/code-423n4/2022-07-axelar/blob/main/contracts/interfaces/IAxelarGasService.sol#L1 :      `// SPDX-License-Identifier: MIT`  7. File: https://github.com/code-423n4/2022-07-axelar/blob/main/contracts/interfaces/IAxelarDepositService.sol#L1 :       '// SPDX-License-Identifier: MIT'       8. File: https://github.com/code-423n4/2022-07-axelar/blob/main/contracts/interfaces/IAxelarAuthWeighted.sol#L1 :      `// SPDX-License-Identifier: MIT`             9. File: https://github.com/code-423n4/2022-07-axelar/blob/main/contracts/deposit-service/DepositReceiver.sol#L1 :      `// SPDX-License-Identifier: MIT`       10. File: https://github.com/code-423n4/2022-07-axelar/blob/main/contracts/deposit-service/AxelarDepositService.sol#L1 :      `// SPDX-License-Identifier: MIT`  11. File: https://github.com/code-423n4/2022-07-axelar/blob/main/contracts/deposit-service/DepositBase.sol#L1 :       '// SPDX-License-Identifier: MIT'       12. File: https://github.com/code-423n4/2022-07-axelar/blob/main/contracts/deposit-service/ReceiverImplementation.sol#L1 :      `// SPDX-License-Identifier: MIT`  13. https://github.com/code-423n4/2022-07-axelar/blob/main/contracts/deposit-service/AxelarDepositServiceProxy.sol#L1 :      `// SPDX-License-Identifier: MIT`       14. https://github.com/code-423n4/2022-07-axelar/blob/main/contracts/auth/AxelarAuthWeighted.sol#L1 :      `// SPDX-License-Identifier: MIT`  15. File: https://github.com/code-423n4/2022-07-axelar/blob/main/xc20/contracts/XC20Wrapper.sol#L1 :       '// SPDX-License-Identifier: MIT' 
