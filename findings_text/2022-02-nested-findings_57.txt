GAS :  1. Title: Unnecessary owner function call  Impact: In the `https://github.com/code-423n4/2022-02-nested/blob/main/contracts/NestedFactory.sol#L134` it uses owner function call, instead of _owner, using _owner directly can save some gas  POC :  https://github.com/code-423n4/2022-02-nested/blob/main/contracts/NestedFactory.sol#L134  2. Title: It cheaper to remove the `&&` operator and make the 2 different require  POC :  https://github.com/code-423n4/2022-02-nested/blob/main/contracts/NestedAsset.sol#L78  Mitigation :  ``` require(_exists(_replicatedTokenId), "NA: INVALID_REPLICATED_TOKEN_ID"); require(tokenId != _replicatedTokenId, "NA: INVALID_REPLICATED_TOKEN_ID"); ```  3. Title : It Cheaper to use 0 instead of empty string  Impact : change bytes32("") to bytes32(0) can save +- 3 gas, both check for zero bytes32  POC :  https://github.com/code-423n4/2022-02-nested/blob/main/contracts/NestedFactory.sol#L101  Mitigation :   ``` require(operator != bytes32(0), "NF: INVALID_OPERATOR_NAME"); ```  4. Title : It cheaper to cached the operators to a memory instead use storage multiple times  Impact : In the `removeOperator` function it do the check in the loop by calling the operators storage, instead checking it with memory, multiple storage read is more expansive than doing multiple read from memory therefore saving the operator value to a memory first before checking inside a loop can make this call cheaper, just like `addOperator` function do.  POC :  https://github.com/code-423n4/2022-02-nested/blob/main/contracts/NestedFactory.sol#L111  Mitigation :  ``` function removeOperator(bytes32 operator) external override onlyOwner {         bytes32[] memory operatorsCache = operators;         uint256 operatorsLength = operatorsCache.length;         for (uint256 i = 0; i < operatorsLength; i++) {             if (operatorsCache[i] == operator) {                 operators[i] = operatorsCache[operatorsLength - 1];                 operators.pop();                 emit OperatorRemoved(operator);                 return;             }         }         revert("NF: NON_EXISTENT_OPERATOR");     } ``` 
