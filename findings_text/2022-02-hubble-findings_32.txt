# Lines of code  https://github.com/code-423n4/2022-02-hubble/blob/ed1d885d5dbc2eae24e43c3ecbf291a0f5a52765/contracts/ClearingHouse.sol#L344-L354 https://github.com/code-423n4/2022-02-hubble/blob/8c157f519bc32e552f8cc832ecc75dc381faa91e/contracts/legos/Governable.sol#L15-L21   # Vulnerability details  When fees/margin or governance are involved it's important to emit events for off-chain monitors/tools to be able to react if necessary.  ## Impact Automated tools especially need all relevant ancillary data to be emitted in order to efficiently react to it. An automated bot trading with the hubble exchange will not be able to see changes to fee/margin changes in real time, and may submit orders which cause it to miscalculate P&L, causing it to lose capital. This is especially true because the contracts do not use timelocks for changes. See [these](https://github.com/code-423n4/2021-06-tracer-findings/issues/64) [examples](https://github.com/code-423n4/2021-09-swivel-findings/issues/101) [where](https://blog.openzeppelin.com/uma-audit-phase-4/) [similar](https://blog.openzeppelin.com/audius-contracts-audit/#high) findings have been flagged as medium/high-severity issues.  ## Proof of Concept ```solidity     function setParams(         int _maintenanceMargin,         int _minAllowableMargin,         uint _tradeFee,         uint _liquidationPenality     ) external onlyGovernance {         tradeFee = _tradeFee;         liquidationPenalty = _liquidationPenality;         maintenanceMargin = _maintenanceMargin;         minAllowableMargin = _minAllowableMargin;     } ``` https://github.com/code-423n4/2022-02-hubble/blob/ed1d885d5dbc2eae24e43c3ecbf291a0f5a52765/contracts/ClearingHouse.sol#L344-L354  ```solidity     function setGovernace(address _governance) external onlyGovernance {         _setGovernace(_governance);     }      function _setGovernace(address _governance) internal {         governance = _governance;     } ``` https://github.com/code-423n4/2022-02-hubble/blob/8c157f519bc32e552f8cc832ecc75dc381faa91e/contracts/legos/Governable.sol#L15-L21  The `onlyGovernance` modifier does not emit events ```solidity     address public governance;      modifier onlyGovernance() {         require(msg.sender == governance, "ONLY_GOVERNANCE");         _;     } ``` https://github.com/code-423n4/2022-02-hubble/blob/ed1d885d5dbc2eae24e43c3ecbf291a0f5a52765/contracts/legos/Governable.sol#L8-L13  The provided deployment script [only uses a signer](https://github.com/code-423n4/2022-02-hubble/blob/ed1d885d5dbc2eae24e43c3ecbf291a0f5a52765/scripts/deploy.js#L18) rather than a contract as the governance address. Furthermore, the live environment deployed on testnet has a [deployed](https://testnet.snowtrace.io/address/0x089f4f3b4aedc41d6ffd4908f4ff32e6a915996b) `InsuranceFund` which uses the `onlyGovernance` modifier... ```solidity     function syncDeps(IRegistry _registry) public onlyGovernance {         vusd = IERC20(_registry.vusd());         marginAccount = _registry.marginAccount();     } ``` https://github.com/code-423n4/2022-02-hubble/blob/ed1d885d5dbc2eae24e43c3ecbf291a0f5a52765/contracts/InsuranceFund.sol#L116-L119  ...and the only transaction interacting with this function appears [here](https://testnet.snowtrace.io/tx/0x31d395e69753469c86a7ed9ab817f15c6a6362ebe31397373daabc83f24d567c) and is called by an [address](https://testnet.snowtrace.io/address/0x835ce0760387bc894e91039a88a00b6a69e65d94), not a contract. There are no other transactions to the insurance fund to change the governance address, so it's clear that the testnet does not use an emitting governor either.  ## Tools Used Code inspection Hardhat snowtrace.io  ## Recommended Mitigation Steps Emit events for these changes   
