## Inefficient safe cast  A safe cast check is done here:  https://github.com/code-423n4/2022-04-backed/blob/e8015d7c4b295af131f017e646ba1b99c8f608f0/contracts/NFTLoanFacilitator.sol#L188  The check uses `<=`, which compiles down to 2 opcodes (`ISZERO`, `GT`). This check can be done in a single opcode like so:  ```solidity require(accumulatedInterest < 1 << 128, "NFTLoanFacilitator: accumulated interest exceeds uint128"); ```  because `1 << 128` is equivalent to `2 ** 128` which is equal to `type(uin128).max + 1`  ## Unnecessary ownerOf check  A check that the `from` address equals `ownerOf[id]` is performed here:  https://github.com/code-423n4/2022-04-backed/blob/e8015d7c4b295af131f017e646ba1b99c8f608f0/contracts/LendTicket.sol#L32  This is unnecessary as the only place where the internal `_transfer` is ever called (via the access controlled public version: `loanFacilitatorTransfer`) will only ever pass the owner of the token as ensured by this line:  https://github.com/code-423n4/2022-04-backed/blob/e8015d7c4b295af131f017e646ba1b99c8f608f0/contracts/NFTLoanFacilitator.sol#L197  Therefore the check can be removed to save an SLOAD.
