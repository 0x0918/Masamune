-- 1  All functions that receive uints which are not uint256 could be changed to uint256 and only casted to the intended size when storing it.  More info at: https://github.com/ourzora/v3/pull/125#issuecomment-1034238815  Just swapped the `lend()` function and consequent related tests resulting in: ```(...) Overall gas change: -11839 (-0.041%)``` But there are many other functions (eg. `createLoan`) which could use such change, so the gas saving should be way more than that.  -- 2 cache `borrowTicketContract` at `createLoan` to save one SLOAD on a successful transaction.  -- 3 use cached `previousInterestRate` on calling `_interestOwed`  Overall gas change: -60 (-0.000%)  ```diff diff --git a/contracts/NFTLoanFacilitator.sol b/contracts/NFTLoanFacilitator.sol index 46d6ef5..bb25958 100644 --- a/contracts/NFTLoanFacilitator.sol +++ b/contracts/NFTLoanFacilitator.sol @@ -165,6 +165,7 @@ contract NFTLoanFacilitator is Ownable, INFTLoanFacilitator {              // will underflow if amount < previousAmount              uint256 amountIncrease = amount - previousLoanAmount;   +            uint256 accumulatedInterest;              {                  uint256 previousInterestRate = loan.perAnumInterestRate;                  uint256 previousDurationSeconds = loan.durationSeconds; @@ -177,14 +178,14 @@ contract NFTLoanFacilitator is Ownable, INFTLoanFacilitator {                  || (previousInterestRate != 0 // do not allow rate improvement if rate already 0                      && previousInterestRate - (previousInterestRate * requiredImprovementRate / SCALAR) >= interestRate),                   "NFTLoanFacilitator: proposed terms must be better than existing terms"); -            }   -            uint256 accumulatedInterest = _interestOwed( -                previousLoanAmount, -                loan.lastAccumulatedTimestamp, -                loan.perAnumInterestRate, -                loan.accumulatedInterest -            ); +                 = _interestOwed( +                    previousLoanAmount, +                    loan.lastAccumulatedTimestamp, +                    previousInterestRate, +                    loan.accumulatedInterest +                ); +            }              require(accumulatedInterest <= type(uint128).max,              "NFTLoanFacilitator: accumulated interest exceeds uint128"); ```  -- 4  cache `loan.loanAmount` on `repayAndCloseLoan`  ``` testRepayInterestOwedExceedingUint128() (gas: -253 (-0.001%))  testRepayAndCloseSuccessful() (gas: -253 (-0.001%))  testRepayAndClose() (gas: -253 (-0.003%))  Overall gas change: -759 (-0.004%) ``` ```diff diff --git a/contracts/NFTLoanFacilitator.sol b/contracts/NFTLoanFacilitator.sol index f1f570f..ff2e3f7 100644 --- a/contracts/NFTLoanFacilitator.sol +++ b/contracts/NFTLoanFacilitator.sol @@ -231,23 +231,24 @@ contract NFTLoanFacilitator is Ownable, INFTLoanFacilitator {      /// See {INFTLoanFacilitator-repayAndCloseLoan}.      function repayAndCloseLoan(uint256 loanId) external override notClosed(loanId) {          Loan storage loan = loanInfo[loanId]; +        uint256 _loanAmount = loan.loanAmount;            uint256 interest = _interestOwed( -            loan.loanAmount, +            _loanAmount,              loan.lastAccumulatedTimestamp,              loan.perAnumInterestRate,              loan.accumulatedInterest          );          address lender = IERC721(lendTicketContract).ownerOf(loanId);          loan.closed = true; -        ERC20(loan.loanAssetContractAddress).safeTransferFrom(msg.sender, lender, interest + loan.loanAmount); +        ERC20(loan.loanAssetContractAddress).safeTransferFrom(msg.sender, lender, interest + _loanAmount);          IERC721(loan.collateralContractAddress).safeTransferFrom(              address(this),              IERC721(borrowTicketContract).ownerOf(loanId),              loan.collateralTokenId          );   -        emit Repay(loanId, msg.sender, lender, interest, loan.loanAmount); +        emit Repay(loanId, msg.sender, lender, interest, _loanAmount);          emit Close(loanId);      } ```
