## [L] `bytes32Value.length > 0` is misused, should be `bytes32Value != bytes32(0)`   `bytes32Value.length > 0` is meanless, as it always be `true`, because `.length` yields the fixed length of the byte array. `bytes32Value.length` == 32.  `bytes32` is a value type, you should use `!=` to do the comparison.  See: https://docs.soliditylang.org/en/v0.8.12/types.html#fixed-size-byte-arrays  https://github.com/code-423n4/2022-02-redacted-cartel/blob/92c4d5810df7b9de15eae55dc7641c8b36cd799d/contracts/BribeVault.sol#L164-L205  ```solidity     function depositBribeERC20(         bytes32 bribeIdentifier,         bytes32 rewardIdentifier,         address token,         uint256 amount,         address briber     ) external onlyRole(DEPOSITOR_ROLE) {         require(bribeIdentifier.length > 0, "Invalid bribeIdentifier");         require(rewardIdentifier.length > 0, "Invalid rewardIdentifier");         // ...     } ```  Can be changed to:  ```solidity     function depositBribeERC20(         bytes32 bribeIdentifier,         bytes32 rewardIdentifier,         address token,         uint256 amount,         address briber     ) external onlyRole(DEPOSITOR_ROLE) {         require(bribeIdentifier.length != bytes32(0), "Invalid bribeIdentifier");         require(rewardIdentifier.length != bytes32(0), "Invalid rewardIdentifier");         // ...     } ```  https://github.com/code-423n4/2022-02-redacted-cartel/blob/92c4d5810df7b9de15eae55dc7641c8b36cd799d/contracts/BribeVault.sol#L213-L248  ```solidity     function depositBribe(         bytes32 bribeIdentifier,         bytes32 rewardIdentifier,         address briber     ) external payable onlyRole(DEPOSITOR_ROLE) {         require(bribeIdentifier.length > 0, "Invalid bribeIdentifier");         require(rewardIdentifier.length > 0, "Invalid rewardIdentifier");         // ...     } ```  Can be changed to:  ```solidity     function depositBribe(         bytes32 bribeIdentifier,         bytes32 rewardIdentifier,         address briber     ) external payable onlyRole(DEPOSITOR_ROLE) {         require(bribeIdentifier.length != bytes32(0), "Invalid bribeIdentifier");         require(rewardIdentifier.length != bytes32(0), "Invalid rewardIdentifier");         // ...     } ```  ## [L] Unchecked return value for `token.transfer` call  It is usually good to add a require-statement that checks the return value or to use something like safeTransfer; unless one is sure the given token reverts in case of a failure.  Instances include:  https://github.com/code-423n4/2022-02-redacted-cartel/blob/92c4d5810df7b9de15eae55dc7641c8b36cd799d/contracts/BribeVault.sol#L296-L297  ```solidity IERC20(token).transfer(feeRecipient, feeAmount); IERC20(token).transfer(distributor, distributorAmount); ```  https://github.com/code-423n4/2022-02-redacted-cartel/blob/92c4d5810df7b9de15eae55dc7641c8b36cd799d/contracts/ThecosomataETH.sol#L146-L146  ```solidity IERC20(token).transfer(TREASURY, tokenBalance); ```  ### Recommendation  Consider adding a require-statement or using `safeTransfer` of SafeERC20.
