### 1. Emitted event reports wrong value  In the function `stakeFor()` the event should report `staked` instead of `amount`  ```solidity     function stakeFor(address account, uint256 amount) public virtual override returns (bool) {         ........         uint256 staked = newBal - oldBal;         balances[account] += staked;         totalStaked += staked;         emit AmmStaked(account, ammToken, amount);         // recommendation         // emit AmmStaked(account, ammToken, staked);     } ```  - [AmmGauge.sol#L66](https://github.com/code-423n4/2022-05-backd/blob/2a5664d35cde5b036074edef3c1369b984d10010/protocol/contracts/tokenomics/AmmGauge.sol#L66) - Same for function `unstakeFor()` [AmmGauge.sol#L136](https://github.com/code-423n4/2022-05-backd/blob/2a5664d35cde5b036074edef3c1369b984d10010/protocol/contracts/tokenomics/AmmGauge.sol#L136)  ### 2. Use Two-Step Transfer Pattern for Access Controls  - It is  possible that the role accidentally transfers ownership to the wrong address, resulting in a loss of the role.  - For example : [setMinter()](https://github.com/code-423n4/2022-05-backd/blob/2a5664d35cde5b036074edef3c1369b984d10010/protocol/contracts/tokenomics/InflationManager.sol#L58-L63)  Recommendation:  ```solidity address minter; address temporaryMinter;  function setMinter(address owner_) external onlyGovernance {   temporaryMinter = owner_; }  function claimOwnership() external {   require(msg.sender == temporaryMinter);   minter = temporaryMinter;   temporaryOwner = address(0); } ```
