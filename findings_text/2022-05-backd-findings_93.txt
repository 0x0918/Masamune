# Gas optimizations   ## Use unchecked lib to increment safe variables  ### `PoolMigrationZap.sol`  You can add the unchecked math lib like you do on the others contracts to safely increment the `i` var, saving gas and make contract consistent with the others by enforcing the same style.  Recommendation, add `using UncheckedMath for uint256` And on line [`PoolMigrationZap.sol#L22`](https://github.com/code-423n4/2022-05-backd/blob/8121e5244ca29f87b0763d05a69e7fc654d14f45/protocol/contracts/zaps/PoolMigrationZap.sol#L22) change; ```solidity for (uint256 i; i < newPools_.length; ++i) { ``` To ```solidity for (uint256 i; i < newPools_.length; i = i.uncheckedInc()) { ```  ### `TopUpKeeperHelper.sol`  On line [TopUpKeeperHelper.sol#L52](https://github.com/code-423n4/2022-05-backd/blob/8121e5244ca29f87b0763d05a69e7fc654d14f45/protocol/contracts/actions/topup/TopUpKeeperHelper.sol#L52) you coul use unchecked math lib to increment the variable. Change: ```solidity topupsAdded++; ``` To: ```solidity topupsAdded = topupsAdded.uncheckedInc(); ```  ### `KeeperGauge.sol`  On lines [#L98](https://github.com/code-423n4/2022-05-backd/blob/8121e5244ca29f87b0763d05a69e7fc654d14f45/protocol/contracts/tokenomics/KeeperGauge.sol#L98) and [L59](https://github.com/code-423n4/2022-05-backd/blob/8121e5244ca29f87b0763d05a69e7fc654d14f45/protocol/contracts/tokenomics/KeeperGauge.sol#L59) you could use unchecked math lib, consider change;  ```solidity epoch++; ``` To; ```solidity epoch = epoch.uncheckedInc(); ```  ### Use unchecked for decrement `i` On [BkdLocker.sol#L140](https://github.com/code-423n4/2022-05-backd/blob/8121e5244ca29f87b0763d05a69e7fc654d14f45/protocol/contracts/BkdLocker.sol#L140) you can do a unchecked decrement (or add a function to the Unchecked math to do it) change; ```solidity i = i - 1; ``` to; ```solidity unchecked { --i; } ```  ### Cache `.length`  You could cache lenght of arrays to save gas; [`RewardHandler.sol#L41-L42`](https://github.com/code-423n4/2022-05-backd/blob/8121e5244ca29f87b0763d05a69e7fc654d14f45/protocol/contracts/RewardHandler.sol#L41-L42) [`StakerVault.sol#L259`](https://github.com/code-423n4/2022-05-backd/blob/8121e5244ca29f87b0763d05a69e7fc654d14f45/protocol/contracts/StakerVault.sol#L259) [`VestedEscrow.sol#L94`](https://github.com/code-423n4/2022-05-backd/blob/8121e5244ca29f87b0763d05a69e7fc654d14f45/protocol/contracts/tokenomics/VestedEscrow.sol#L94)   ### Use `require(foo != 0)` instead of `require(foo > 0)`  `>0` is less gas efficient than `!0` if you enable the optimizer at 10k AND youâ€™re in a require statement.  [`BkdLocker.sol#L91`](https://github.com/code-423n4/2022-05-backd/blob/8121e5244ca29f87b0763d05a69e7fc654d14f45/protocol/contracts/BkdLocker.sol#L91) [`BkdLocker.sol#L92`](https://github.com/code-423n4/2022-05-backd/blob/8121e5244ca29f87b0763d05a69e7fc654d14f45/protocol/contracts/BkdLocker.sol#L92) [`BkdLocker.sol#L137`](https://github.com/code-423n4/2022-05-backd/blob/8121e5244ca29f87b0763d05a69e7fc654d14f45/protocol/contracts/BkdLocker.sol#L137) [`VestedEscrow.sol#L84`](https://github.com/code-423n4/2022-05-backd/blob/8121e5244ca29f87b0763d05a69e7fc654d14f45/protocol/contracts/tokenomics/VestedEscrow.sol#L84) [`KeeperGauge.sol#L140`](https://github.com/code-423n4/2022-05-backd/blob/8121e5244ca29f87b0763d05a69e7fc654d14f45/protocol/contracts/tokenomics/KeeperGauge.sol#L140) [`AmmGauge.sol#L104`](https://github.com/code-423n4/2022-05-backd/blob/8121e5244ca29f87b0763d05a69e7fc654d14f45/protocol/contracts/tokenomics/AmmGauge.sol#L104) [`AmmGauge.sol#L125`](https://github.com/code-423n4/2022-05-backd/blob/8121e5244ca29f87b0763d05a69e7fc654d14f45/protocol/contracts/tokenomics/AmmGauge.sol#L125) 
