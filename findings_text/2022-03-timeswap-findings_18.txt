1. considered using bool in `modifier lock()` can save gas https://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Core/contracts/TimeswapPair.sol#L130  Example: ``` pragma solidity =0.8.4;  contract test {  bool internal _locked = true; uint256 internal _lock = 1;  modifier noReenter() {         require(_locked, "LOCKED");         _locked = true;         _;         _locked = false;     } modifier noReentir(){         require(_lock == 1, "LOCKED");         _lock = 2;         _;         _lock = 1; }      function abc() public noReenter returns(uint){         return 12121;         // 22066     }     function def() public noReentir returns(uint){         return 1234;         // 23752     } } ```  ========================================================================  2. `> 0` is less efficient than `!= 0` for uint in require condition https://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Core/contracts/TimeswapPair.sol#L225  Change it the same as this: https://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Core/contracts/TimeswapPair.sol#L281  ========================================================================  3. Shift right instead of dividing by 2 https://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Convenience/contracts/libraries/SquareRoot.sol#L6  issue information: https://github.com/byterocket/c4-common-issues/blob/main/0-Gas-Optimizations.md#g008---use-shift-rightleft-instead-of-divisionmultiplication-if-possible  Tools used c4udit  ========================================================================  4. multiple `require` can save gas https://github.com/code-423n4/2022-03-timeswap/blob/main/Timeswap/Core/contracts/TimeswapFactory.sol#L49  Change to: ``` require(asset != IERC20(address(0)); require(collateral != IERC20(address(0)), 'E101'); ```
