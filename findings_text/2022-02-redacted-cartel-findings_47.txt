# Codebase Impressions & Summary  This audit scope consisted of 4 contracts. Overall, the code quality is great. Inline comments and documentation provided was adequate. Various parties / roles and contract interactions were well explained.  Most issues raised are minor improvements to improve the security of the contracts. The only notable findings made had to do with the usage of the curve crypto pool’s price oracle, and protection against sandwich attacks when adding liquidity.  In addition, I made a suggestion regarding the syncing of Tokemak’s rounds with the `TokemakBribe` contract.  Note that I refrained raising issues regarding FoT tokens because I assume they are not meant to be supported.  # Low Severity Findings  ## L01: RewardDistributor: Change `payable(account).transfer()` to `.call()` for native fund transfers  ### Line References  [https://github.com/code-423n4/2022-02-redacted-cartel/blob/main/contracts/RewardDistributor.sol#L181](https://github.com/code-423n4/2022-02-redacted-cartel/blob/main/contracts/RewardDistributor.sol#L181)  ### Description  `BribeVault` uses `.call()` for native fund transfers, but `RewardDistributor` uses `.transfer()`. They should be standardized to `.call()`, the currently recommended method since [`.transfer()` fowards 2300 gas whereas `.call()` forwards all / set gas.](https://solidity-by-example.org/sending-ether/)  ### Recommended Mitigation Steps  ```jsx (bool sentAccount, ) = _account.call{value: _amount}(""); require(sentAccount, "Failed to transfer to _account"); ```  ## L02: BribeVault: Use `safeTransfer` for tokens  ### Line References  [https://github.com/code-423n4/2022-02-redacted-cartel/blob/main/contracts/BribeVault.sol#L296-L297](https://github.com/code-423n4/2022-02-redacted-cartel/blob/main/contracts/BribeVault.sol#L296-L297)  [https://github.com/code-423n4/2022-02-redacted-cartel/blob/main/contracts/BribeVault.sol#L337](https://github.com/code-423n4/2022-02-redacted-cartel/blob/main/contracts/BribeVault.sol#L337)  ### Description  Some ERC20 tokens like ZRX don’t revert if the transfer fails. Since the `SafeERC20` has already been imported and the `safeTransferFrom` method used, the same should be done for token transfers.  ### Recommended Mitigation Steps  Replace `transfer` with `safeTransfer`.  ## L03: RewardDistributor: Limit native fund transfers to `bribeVault`  ### Line References  [https://github.com/code-423n4/2022-02-redacted-cartel/blob/main/contracts/RewardDistributor.sol#L58-L59](https://github.com/code-423n4/2022-02-redacted-cartel/blob/main/contracts/RewardDistributor.sol#L58-L59)  ### Description  Since the only source of native fund transfers is expected to be the `bribeVault` contract, it would be good to restrict incoming fund transfers from other sources to prevent accidental transfers.  ### Recommended Mitigation Steps  ```jsx receive() external payable {   require(msg.sender == bribeVault, 'only bribeVault'); } ```  ## L04: TokemakBribe: `getBribe()` has incorrect description  ### Line References  [https://github.com/code-423n4/2022-02-redacted-cartel/blob/main/contracts/TokemakBribe.sol#L188-L194](https://github.com/code-423n4/2022-02-redacted-cartel/blob/main/contracts/TokemakBribe.sol#L188-L194)  ### Description  - Missing `round` param - `bribeAmount` has incorrect description  ### Recommended Mitigation Steps  ```jsx /**    @notice Get bribe from BribeVault    @param  proposal            address  Proposal           @param  round               uint256  Round    @param  token               address  Token    @return bribeToken          address  Bribe token address    @return bribeAmount         uint256  Bribe token amount */ ```  ## L05: Emit relevant events in constructor methods when variables are set, or abstract to internal functions  ### Line References  [https://github.com/code-423n4/2022-02-redacted-cartel/blob/main/contracts/BribeVault.sol#L59-L74](https://github.com/code-423n4/2022-02-redacted-cartel/blob/main/contracts/BribeVault.sol#L59-L74)  [https://github.com/code-423n4/2022-02-redacted-cartel/blob/main/contracts/RewardDistributor.sol#L51-L56](https://github.com/code-423n4/2022-02-redacted-cartel/blob/main/contracts/RewardDistributor.sol#L51-L56)  ### Description  Some variables are set in the constructor method but do not emit events, unlike their setter counterparts. For instance, `bribeVault` in the `RewardDistributor` contract fails to emit the `SetBribeVault` event, but this is emitted in the `setBribeVault()` function.  ### Recommended Mitigation Steps  Either emit the events in the constructor, or make the setter functions public and have the constructor call it.  # Suggestions  ## S01: TokemakBribe: Sync rounds with Tokemak’s manager instead of manually setting rounds via `setRound()`  ### Line References  [https://github.com/code-423n4/2022-02-redacted-cartel/blob/main/contracts/TokemakBribe.sol#L104-L110](https://github.com/code-423n4/2022-02-redacted-cartel/blob/main/contracts/TokemakBribe.sol#L104-L110)  ### Description  Instead of manually setting rounds, consider fetching the round number directly from Tokemak’s manager contract via `[manager.currentCycleIndex()](https://etherscan.io/address/0xa86e412109f77c45a3bc1c5870b880492fb86a14#readProxyContract)`. While I initially wrote an issue about being able to set previous round numbers, after having chatted with the sponsor, it is intended to be a feature, not a bug.  ### Recommended Mitigation Steps  ```jsx // TODO: change _round to getRound() wherever it is called in other internal functions function getRound() public view returns (uint256) {   // if round is overridden, return set value   if (_round != 0) return _round;   // otherwise, if value is 0, use Tokemak's currentCycleIndex()   // Tokemak manager at 0xa86e412109f77c45a3bc1c5870b880492fb86a14   return manager.currentCycleIndex(); } ```
