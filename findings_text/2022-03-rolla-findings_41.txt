# Lines of code  https://github.com/code-423n4/2022-03-rolla/blob/main/quant-protocol/contracts/QuantCalculator.sol#L176-L180   # Vulnerability details  ## Impact  A switch to an assetsRegistry that doesn't contain a particular underlying by mistake or as a part of griefing attack will freeze all the payoff funds accounted for already issued QTokens with this underlying. I.e. all buyers and sellers of the associated QTokens will have the payoff funds frozen until assetsRegistry be updated as Controller's _claimCollateral, _neutralizePosition and _exercise will be failing in this case.  For example, suppose LINK is added as an underlying to assetsRegistry, some time passed and options were minted, then the registry is updated and LINK is no longer listed there. All the users with not yet fulfilled claims on the issued LINK options will have their funds frozen until assetsRegistry be updated again to include LINK back.  In other words, at the moment there is no way to separate new options issuance and existing options settlement, which makes a removal of an underlying a tricky task, given that maturity of the options isn't restricted.  ## Proof of Concept  In QuantConfig the priceRegistry setting is immutable, while oracleRegistry and assetsRegistry can be reset by an owner:  https://github.com/code-423n4/2022-03-rolla/blob/main/quant-protocol/contracts/QuantConfig.sol#L47-L64  oracleRegistry reset affect new option creation and minting only.  On the other hand, apart from QToken creation, assetsRegistry is used in the most of payoff calculations.  This way assetsRegistry reset to a contract that doesn't have a record of a particular underlying will freeze all the payoff calculation functionality as OptionsUtils.getPayoutDecimals, which will become unavailable, is called by QuantCalculator's getCollateralRequirement, getExercisePayout, calculateClaimableCollateral and getNeutralizationPayout.   Here is getPayoutDecimals called by getNeutralizationPayout:  https://github.com/code-423n4/2022-03-rolla/blob/main/quant-protocol/contracts/QuantCalculator.sol#L176-L180  Also, by calculateClaimableCollateral, getCollateralRequirement, getExercisePayout:  https://github.com/code-423n4/2022-03-rolla/blob/main/quant-protocol/contracts/QuantCalculator.sol#L133-L137  https://github.com/code-423n4/2022-03-rolla/blob/main/quant-protocol/contracts/QuantCalculator.sol#L210-L214  https://github.com/code-423n4/2022-03-rolla/blob/main/quant-protocol/contracts/QuantCalculator.sol#L261-L265  This way, a switch to an assetsRegistry that doesn't constant the underlying will make most of the QuantCalculator's payoff calculations fail, freezing all the payoff funds accounted for all the QTokens with this underlying.   ## Recommended Mitigation Steps  As getPayoutDecimals is the basic function to request the decimals, which a single constant value, consider moving it to the QToken storage instead of requesting from an outside contracts each time.  Apart from removing this attack surface, this will also provide some gas optimisation, which is viable as mentioned operations are common enough, justifying a minor increase in storage space.   
