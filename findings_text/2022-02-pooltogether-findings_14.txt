  Title: Not verified input Severity: Low Risk       external / public functions parameters should be validated to make sure the address is not 0.     Otherwise if not given the right input it can mistakenly lead to loss of user funds.                       TWABDelegator.sol.permitAndMulticall _from         Delegation.sol._executeCall to         PermitAndMulticall.sol._permitAndMulticall _from         TWABDelegator.sol.stake _to         TWABDelegator.sol._requireDelegateeNotZeroAddress _delegatee         TWABDelegator.sol.setRepresentative _representative         TWABDelegator.sol._computeAddress _delegator         TWABDelegator.sol._requireDelegatorNotZeroAddress _delegator         TWABDelegator.sol.updateDelegatee _delegatee         TWABDelegator.sol.isRepresentativeOf _delegator         TWABDelegator.sol._transfer _to         TWABDelegator.sol._requireContract _address         TWABDelegator.sol._transferCall _to         LowLevelDelegator.sol._computeSalt _delegator         TWABDelegator.sol.createDelegation _delegatee         TWABDelegator.sol.transferDelegationTo _to         TWABDelegator.sol.unstake _to         TWABDelegator.sol.computeDelegationAddress _delegator         TWABDelegator.sol.fundDelegation _delegator         TWABDelegator.sol.isRepresentativeOf _representative         TWABDelegator.sol._delegateCall _delegatee         TWABDelegator.sol.getDelegation _delegator         TWABDelegator.sol._requireRecipientNotZeroAddress _to    Title: Named return issue Severity: Low Risk  Users can mistakenly think that the return value is the named return, but it is actually the actualreturn statement that comes after. To know that the user needs to read the code and is confusing. Furthermore, removing either the actual return or the named return will save gas.           TWABDelegator.sol, multicall         PermitAndMulticall.sol, _multicall    Title: Never used parameters Severity: Low Risk  Those are functions and parameters pairs that the function doesn't use the parameter. In case those functions are external/public this is even worst since the user is required to put value that never used and can misslead him and waste its time.           Delegation.sol: function _executeCall parameter value isn't used. (_executeCall is internal)         TWABDelegator.sol: function _executeCall parameter _data isn't used. (_executeCall is internal)         Delegation.sol: function _executeCall parameter data isn't used. (_executeCall is internal)         Delegation.sol: function _executeCall parameter to isn't used. (_executeCall is internal)    Title: Mult instead div in compares Severity: Low Risk       To improve algorithm precision instead using division in comparison use multiplication in the following scenario:                          Instead a < b / c use a * c < b.               In all of the big and trusted contracts this rule is maintained.              TWABDelegator.sol, 625, require(block.timestamp >= _delegation.lockUntil(), "TWABDelegator/delegation-locked");         TWABDelegator.sol, 601, require(_amount > 0, "TWABDelegator/amount-gt-zero");         TWABDelegator.sol, 641, require(_lockDuration <= MAX_LOCK, "TWABDelegator/lock-too-long");    Title: Override function but with different argument location Severity: Low/Med Risk                     TWABDelegator.sol._computeAddress inherent LowLevelDelegator.sol._computeAddress but the parameters does not match         TWABDelegator.sol.constructor inherent LowLevelDelegator.sol.constructor but the parameters does not match 
