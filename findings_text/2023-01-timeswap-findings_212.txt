# Lines of code  https://github.com/code-423n4/2023-01-timeswap/blob/ef4c84fb8535aad8abd6b67cc45d994337ec4514/packages/v2-pool/src/TimeswapV2PoolFactory.sol#L37 https://github.com/code-423n4/2023-01-timeswap/blob/ef4c84fb8535aad8abd6b67cc45d994337ec4514/packages/v2-pool/src/TimeswapV2Pool.sol#L184-L199 https://github.com/code-423n4/2023-01-timeswap/blob/ef4c84fb8535aad8abd6b67cc45d994337ec4514/packages/v2-pool/src/base/OwnableTwoSteps.sol#L23-L32   # Vulnerability details  ## Impact If the pool factory gets deployed with `chosenOwner` as address(0) the factory owner will be address(0) and there will be no way of changing the owner address back to the intended owner. If this factory owner did not realize the mistake and deployed lots of pools through the factory, the protocol fees will be locked forever.  There will be no way for the intended factory owner to collect the protocol fees.  https://github.com/code-423n4/2023-01-timeswap/blob/ef4c84fb8535aad8abd6b67cc45d994337ec4514/packages/v2-pool/src/TimeswapV2Pool.sol#L184-L199  ```     function collectProtocolFees(TimeswapV2PoolCollectParam calldata param) external override noDelegateCall returns (uint256 long0Amount, uint256 long1Amount, uint256 shortAmount) {         ParamLibrary.check(param);         raiseGuard(param.strike, param.maturity);          // Can only be called by the TimeswapV2Pool factory owner.         ITimeswapV2PoolFactory(poolFactory).owner().checkIfOwner();          // Calculate the main logic of protocol fee.         (long0Amount, long1Amount, shortAmount) = pools[param.strike][param.maturity].collectProtocolFees(param.long0Requested, param.long1Requested, param.shortRequested);          collect(param.strike, param.maturity, param.long0To, param.long1To, param.shortTo, long0Amount, long1Amount, shortAmount);          lowerGuard(param.strike, param.maturity);          emit CollectProtocolFees(param.strike, param.maturity, msg.sender, param.long0To, param.long1To, param.shortTo, long0Amount, long1Amount, shortAmount);     } ```  ## Proof of Concept  ``` //SPDX-License-Identifier: Unlicense pragma solidity 0.8.8;  import "forge-std/Test.sol";  //import "@timeswap-labs/v2-pool/src/TimeswapV2Pool.sol"; import "@timeswap-labs/v2-option/src/TimeswapV2OptionFactory.sol"; import "@timeswap-labs/v2-pool/src/interfaces/ITimeswapV2Pool.sol"; import "@timeswap-labs/v2-option/src/interfaces/ITimeswapV2Option.sol"; import "@timeswap-labs/v2-pool/src/TimeswapV2PoolFactory.sol";  import "@helpers/HelperERC20.sol";  contract ContractTest is Test {     TimeswapV2OptionFactory optionFactory;     TimeswapV2PoolFactory poolFactory;      ITimeswapV2Option opPair;     ITimeswapV2Pool pool;      HelperERC20 tokenA;     HelperERC20 tokenB;      // random values     uint256 chosenTransactionFee = 5;     uint256 chosenProtocolFee = 4;      address deployer = vm.addr(1);      address alice = vm.addr(2);      function setUp() public {}      function testOwner() public {         optionFactory = new TimeswapV2OptionFactory();         tokenA = new HelperERC20("Token A", "A");         tokenB = new HelperERC20("Token B", "B");         address opAddress = optionFactory.create(             address(tokenA),             address(tokenB)         );         opPair = ITimeswapV2Option(opAddress);         poolFactory = new TimeswapV2PoolFactory(             address(0),             chosenTransactionFee,             chosenProtocolFee         );         pool = ITimeswapV2Pool(poolFactory.create(opAddress));          console.log("pool factory owner", poolFactory.owner());         console.log("pool factory pending owner", poolFactory.pendingOwner());          console.log("Setting pending owner to alice");         poolFactory.setPendingOwner(address(alice));                   console.log("pool factory owner", poolFactory.owner());         console.log("pool factory pending owner", poolFactory.pendingOwner());     } } ```  and the output: ```   pool factory owner 0x0000000000000000000000000000000000000000   pool factory pending owner 0x0000000000000000000000000000000000000000   Setting pending owner to alice  Test result: FAILED. 0 passed; 1 failed; finished in 9.22ms  Failing tests: Encountered 1 failing test in test/m01.t.sol:ContractTest [FAIL. Reason: NotTheOwner(0x34A1D3fff3958843C43aD80F30b94c510645C316, 0x0000000000000000000000000000000000000000)] testOwner() (gas: 15246385)  Encountered a total of 1 failing tests, 0 tests succeeded ```  ## Tools Used Manual review  ## Recommended Mitigation Steps In the constructor check for zero address or make the owner msg.sender, where the deployer could the call the setPendingOwner function to set the new owner. setPendingOwner checks for zero address.  https://github.com/code-423n4/2023-01-timeswap/blob/ef4c84fb8535aad8abd6b67cc45d994337ec4514/packages/v2-pool/src/base/OwnableTwoSteps.sol#L23-L32  ```     function setPendingOwner(address chosenPendingOwner) external override {         Ownership.checkIfOwner(owner);          if (chosenPendingOwner == address(0)) Error.zeroAddress();         chosenPendingOwner.checkIfAlreadyOwner(owner);          pendingOwner = chosenPendingOwner;          emit SetOwner(pendingOwner);     } ``` 
