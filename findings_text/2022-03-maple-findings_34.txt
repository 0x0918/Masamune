## Adding Payable Keyword to Constructor **Context** [ERC20.sol](https://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/ERC20.sol), [Migrator.sol](https://github.com/maple-labs/mpl-migration/blob/a99549d96ed12cd4589a02bccf70747dbaebeb5b/contracts/Migrator.sol), [xMPL.sol](https://github.com/maple-labs/xMPL/blob/23301839c389142f9e75d88121316d9751833b71/contracts/xMPL.sol), [RevenueDistributionToken.sol](https://github.com/maple-labs/revenue-distribution-token/blob/41a3e40bf8c109ff19b38b80fde300c44fd42a3d/contracts/RevenueDistributionToken.sol).  **Description** Making the ```constructor()``` payable eliminates the need for an initial check of msg.value == 0 and saves 21 gas. This shouldn't not increase security risk and the savings is on deployment.  **Recommendation**  Add payable keyword to ```constructors()```   ## Catching The Array Length Prior To Loop. **Context** [MapleLoanInternals.sol](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol).  **Description** One can save gas by caching the array length (in stack) and using that set variable in the loop. This can be done for the function [_acceptNewTerms()](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L229).  **Recommendation**  Simply do something like so before the for loop: ```uint length = calls_.length```. Then add ```length``` in place of ```calls_.length``` in the for loop.   ## Function Ordering via Method ID **Context** [All contracts](https://github.com/code-423n4/2022-03-maple).  **Description** Most called functions could save gas by function ordering via Method ID. Calling a function at runtime will be cheaper if the function is positioned earlier in the order (has a relatively lower Method ID) because 22 gas are added to the cost of a function for every position that came before it. The caller can save on gas if you prioritize most called functions. One could use [This tool](https://emn178.github.io/solidity-optimize-name/) to help find alternative function names with lower Method IDs while keeping the original name intact.  **Recommendation**  Find a lower method ID name for the most called functions for example ```mostCalled()``` vs. ```mostCalled_41q()``` is cheaper by 44 gas.   ## Setting State Variable To Local Variable And Using Keyword delete **Context** [MapleLoanInternals.sol](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol) and [xMPL.sol](https://github.com/maple-labs/xMPL/blob/23301839c389142f9e75d88121316d9751833b71/contracts/xMPL.sol).  **Description** Several functions are clearing state variables by setting them to ```=uint256(0)```. To make these cheaper you could set the state variables to local variables within the function and then use the delete keyword to set them to their initial value. In ```MapleLoanInternals.sol``` there are: [_clearLoanAccounting()](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L63), [_repossess()](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L358), [_closeLoan()](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L143) and [_makePayment()](https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L172).   In ```xMPL.sol``` there is: [_cleanupMigration()](https://github.com/maple-labs/xMPL/blob/23301839c389142f9e75d88121316d9751833b71/contracts/xMPL.sol#L91) which uses the ```delete``` keyword but do so to the state variable directly and it would be cheaper to set the state variables to local variables and then use ```delete```.  [scheduleMigration()](https://github.com/maple-labs/xMPL/blob/23301839c389142f9e75d88121316d9751833b71/contracts/xMPL.sol#L76) just setting the state variable and then using them to save gas.  **Recommendation**  Set the state variables to local variables within the function and then use the delete keyword to set them to their initial value. 
