## Functions Visibility Can Be Declared External **Context**: [`ERC20.sol#L69-L72`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/ERC20.sol#L69-L72), [`ERC20.sol#L81-L84`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/ERC20.sol#L81-L84), [`ERC20.sol#L99-L107`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/ERC20.sol#L99-L107), [`ERC20.sol#L121-L124`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/ERC20.sol#L121-L124), [`ERC20.sol#L140-L143`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/ERC20.sol#L140-L143), [`MintableCappedERC20.sol#L23-L28`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/MintableCappedERC20.sol#L23-L28), [`Ownable.sol#L20-L25`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/Ownable.sol#L20-L25), [`EternalStorage.sol#L18-L20`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/Ownable.sol#L20-L25), [`EternalStorage.sol#L22-L24`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/EternalStorage.sol#L22-L24), [`EternalStorage.sol#L26-L28`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/EternalStorage.sol#L26-L28), [`EternalStorage.sol#L30-L32`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/EternalStorage.sol#L30-L32), [`EternalStorage.sol#L34-L36`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/EternalStorage.sol#L34-L36), [`EternalStorage.sol#L38-L40`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/EternalStorage.sol#L38-L40)  **Description**: Several functions across multiple contracts have a public visibility and can be marked with external visibility to save gas.    **Recommendation**:  Change the functions visibility to external to save gas.   ## Catching The Array Length Prior To Loop **Context**: [`AxelarGatewayMultisig.sol#L41-L49`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/AxelarGatewayMultisig.sol#L41-L49), [`AxelarGatewayMultisig.sol#L114-L123`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/AxelarGatewayMultisig.sol#L114-L123), [`AxelarGatewayMultisig.sol#L267-L276`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/AxelarGatewayMultisig.sol#L267-L276)  **Description**: One can save gas by caching the array length (in stack) and using that set variable in the loop. Replace state variable reads and writes within loops with local variable reads and writes. This is done by assigning state variable values to new local variables, reading and/or writing the local variables in a loop, then after the loop assigning any changed local variables to their equivalent state variables.   **Recommendation**:  Simply do something like so before the for loop: ```uint length =  variable.length```. Then add ```length``` in place of ``` variable.length``` in the for loop.    ## Function Ordering via Method ID **Context**: [`All Contracts`](https://github.com/code-423n4/2022-04-axelar)  **Description**: Contracts most called functions could simply save gas by function ordering via Method ID. Calling a function at runtime will be cheaper if the function is positioned earlier in the order (has a relatively lower Method ID) because 22 gas are added to the cost of a function for every position that came before it. The caller can save on gas if you prioritize most called functions. One could use [`This tool`](https://emn178.github.io/solidity-optimize-name/) to help find alternative function names with lower Method IDs while keeping the original name intact.  **Recommendation**:  Find a lower method ID name for the most called functions for example ```mostCalled()``` vs. ```mostCalled_41q()``` is cheaper by 44 gas.   ## Use ++index instead of index++ to increment a loop counter **Context**: [`AxelarGateway.sol#L221-L228`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/AxelarGateway.sol#L221-L228), [`AxelarGatewayMultisig.sol#L136-L143`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/AxelarGatewayMultisig.sol#L136-L143), [`AxelarGatewayMultisig.sol#L167-L191`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/AxelarGatewayMultisig.sol#L167-L191), [`AxelarGatewayMultisig.sol#L267-L276`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/AxelarGatewayMultisig.sol#L267-L276), [`AxelarGatewayMultisig.sol#L289-L296`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/AxelarGatewayMultisig.sol#L289-L296), [`AxelarGatewayMultisig.sol#L318-L344`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/AxelarGatewayMultisig.sol#L318-L344), [`AxelarGatewayMultisig.sol#L490-L575 (for both for loops)`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/AxelarGatewayMultisig.sol#L490-L575), [`AdminMultisigBase.sol#L25-L54`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/AdminMultisigBase.sol#L25-L54), [`AdminMultisigBase.sol#L144-L168`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/AdminMultisigBase.sol#L144-L168)  **Description**: Due to reduced stack operations, using ++index saves 5 gas per iteration.  **Recommendation**:  Use ++index to increment a loop counter.   ## State Variable Is Read From More Than Once In A Function **Context**: [`AxelarGateway.sol#L558-L560`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/AxelarGateway.sol#L558-L560)  **Description**: If there's a state variable you'll read from more than once in a function, it's best to cast it into memory.  **Recommendation**:  Where state varibables are read from more than once in a function, cast it into memory and then use the casted varable.   ## Setting The Constructor To Payable **Context**: [`Ownable.sol#L10-L13`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/Ownable.sol#L10-L13), [`BurnableMintableCappedERC20.sol#L21-L26`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/BurnableMintableCappedERC20.sol#L21-L26), [`MintableCappedERC20.sol#L14-L21`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/MintableCappedERC20.sol#L14-L21), [`ERC20Permit.sol#L22-L32`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/ERC20Permit.sol#L22-L32), [`ERC20.sol#L51-L59`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/ERC20.sol#L51-L59), [`AxelarGatewayMultisig.sol#L39`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/AxelarGatewayMultisig.sol#L39), [`AxelarGateway.sol#L66-L68`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/AxelarGateway.sol#L66-L68), [`AxelarGatewayProxy.sol#L16-L24`](https://github.com/code-423n4/2022-04-axelar/blob/main/src/AxelarGatewayProxy.sol#L16-L24)  **Description**: You can cut out 10 opcodes in the creation-time EVM bytecode if you declare a constructor payable. Making the constructor payable eliminates the need for an initial check of `msg.value == 0` and saves 21 gas on deployment with no security risks.  **Recommendation**:  Set the constructor to payable. 
