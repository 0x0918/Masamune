1. The require statements could be put at the beginning part of a block of statements if it doesn’t affect the logic to save gas. a. [require(_orders.length != 0, "NF: INVALID_ORDERS");]("https://github.com/code-423n4/2022-06-nested/blob/main/contracts/NestedFactory.sol#L250")   2. Initializing i to 0 inside a for loop is redundant. As its initialized to 0 by default.  Also i++ or ++I in the for loops can be put inside an unchecked block to save gas.   a. [for (uint256 i = 0; i < operatorsCache.length; i++) ]("https://github.com/code-423n4/2022-06-nested/blob/main/contracts/NestedFactory.sol#L124") b. [for (uint256 i = 0; i < operatorsLength; i++) ]("https://github.com/code-423n4/2022-06-nested/blob/main/contracts/NestedFactory.sol#L136") c. [for (uint256 i = 0; i < batchedOrdersLength; i++)]("https://github.com/code-423n4/2022-06-nested/blob/main/contracts/NestedFactory.sol#L196") d. [for (uint256 i = 0; i < tokensLength; i++)](“https://github.com/code-423n4/2022-06-nested/blob/main/contracts/NestedFactory.sol#L256") e. [for (uint256 i = 0; i < batchedOrdersLength; i++)]("https://github.com/code-423n4/2022-06-nested/blob/main/contracts/NestedFactory.sol#L315") f. [for (uint256 i = 0; i < batchedOrdersLength; i++)]("https://github.com/code-423n4/2022-06-nested/blob/main/contracts/NestedFactory.sol#L333") g. [for (uint256 i = 0; i < batchLength; i++)]("https://github.com/code-423n4/2022-06-nested/blob/main/contracts/NestedFactory.sol#L369") h. [ for (uint256 i = 0; i < batchLength; i++)]("https://github.com/code-423n4/2022-06-nested/blob/main/contracts/NestedFactory.sol#L412") i. [for (uint256 i = 0; i < _batchedOrders.length; i++)]("https://github.com/code-423n4/2022-06-nested/blob/main/contracts/NestedFactory.sol#L651") j. [for (uint256 i = 0; i < namesLength; i++) ](“https://github.com/code-423n4/2022-06-nested/blob/main/contracts/OperatorResolver.sol#L40”) k. [for (uint256 i = 0; i < names.length; i++)](“https://github.com/code-423n4/2022-06-nested/blob/main/contracts/OperatorResolver.sol#L60”) l. [for (uint256 i = 0; i < destinations.length; i++) ](“https://github.com/code-423n4/2022-06-nested/blob/main/contracts/OperatorResolver.sol#L75”) m. [  for (uint256 i = 0; i < requiredOperators.length; i++)](“https://github.com/code-423n4/2022-06-nested/blob/main/contracts/abstracts/MixinOperatorResolver.sol#L37”) n. [  for (uint256 i = 0; i < requiredOperators.length; i++)](“https://github.com/code-423n4/2022-06-nested/blob/main/contracts/abstracts/MixinOperatorResolver.sol#L56”) o. [for (uint256 i = 0; i < targets.length; ++i)](“https://github.com/code-423n4/2022-06-nested/blob/main/contracts/governance/TimelockControllerEmergency.sol#L234”) p. [for (uint256 i = 0; i < targets.length; ++i)](“https://github.com/code-423n4/2022-06-nested/blob/main/contracts/governance/TimelockControllerEmergency.sol#L324”)   3. Unless it was introduced for readability saving memory to memory is redundant. [address token = tokens[i];](“https://github.com/code-423n4/2022-06-nested/blob/b4a153c943d54755711a2f7b80cbbf3a5bb49d76/contracts/NestedFactory.sol#L257”)   4. These arithmetic operations can be unchecked. a. [ uint256 halfInvestment = investmentA / 2;](“https://github.com/code-423n4/2022-06-nested/blob/main/contracts/operators/Beefy/lp/BeefyZapBiswapLPVaultOperator.sol#L275”) b. [uint256 halfInvestment = investmentA / 2;](“https://github.com/code-423n4/2022-06-nested/blob/main/contracts/operators/Beefy/lp/BeefyZapUniswapLPVaultOperator.sol#L273”)   5. This line could be pre-computed and defined as a constant to save gas. a. [bytes4(keccak256(bytes("remove_liquidity_one_coin(uint256,int128,uint256)")))](“https://github.com/code-423n4/2022-06-nested/blob/main/contracts/libraries/StakingLPVaultHelpers.sol#L105”) b. [bytes4(keccak256(bytes("remove_liquidity_one_coin(uint256,uint256,uint256)")))](“https://github.com/code-423n4/2022-06-nested/blob/main/contracts/libraries/StakingLPVaultHelpers.sol#L135”) 
