# Lines of code  https://github.com/code-423n4/2022-04-backed/blob/e8015d7c4b295af131f017e646ba1b99c8f608f0/contracts/NFTLoanFacilitator.sol#L144   # Vulnerability details  ## Impact  Backed uses `solmate`'s `SafeTransferLib` to safely transfer non-standard ERC20 tokens:  https://github.com/code-423n4/2022-04-backed/blob/e8015d7c4b295af131f017e646ba1b99c8f608f0/contracts/NFTLoanFacilitator.sol#L5  Notably, `SafeTransferLib` does not revert if the token being transferred has no code at all:  https://github.com/Rari-Capital/solmate/blob/4eaf6b68202e36f67cab379768ac6be304c8ebde/src/utils/SafeTransferLib.sol#L9  This means transferring `address(0)` as a token will succeed, which could confuse users. As a result, Backed checks that the token is not `address(0)` on this line:  https://github.com/code-423n4/2022-04-backed/blob/e8015d7c4b295af131f017e646ba1b99c8f608f0/contracts/NFTLoanFacilitator.sol#L144  However, this check is insufficient to protect users from accidentally creating loans with invalid tokens, as any address without code will be accepted as a valid token. One particularly consequential example of how this could go wrong for users would be inputting the address of a common token like DAI or USDC for another network on accident, but having the loan creation succeed as if it was the correct token. See the proof of concept for more details:  ## Proof of Concept  - Alice wants to create a DAI loan on Ethereum - Alice googles the DAI address and mistakenly copies the address of DAI on Optimism - Alice creates a the loan using Optimistic DAI and it succeeds - Alice is annoyed and confused why no one is lending to her - Alice closes the loan in anger and does not return to use Backed protocol  ## Recommended Mitigation Steps  Rewrite the require like so:  ```solidity    require(loanAssetContractAddress.code.length != 0, "NFTLoanFacilitator: invalid loan"); ```  
