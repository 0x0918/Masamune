1. Harvesting vault can be front-run for profit Severity: High Difficulty: n/a Type: n/a Target: n/a Description: Calling harvestRewards() will collect and distribute rewards. A bad actor can deposit tokens into the ovToken before the harvest and withdraw from ovToken right after. The sharesToReserves value will instantaneously increase and the attacker will be able to withdraw more tokens than deposited with reduced incentives for users to invest in the protocol in the future. 
2. _handleGmxRewards() returned values can lead to wrong accounting Severity: Medium Difficulty: n/a Type: n/a Target: n/a Description: The function _handleGmxRewards() calculates GMX rewards based on balance changes and claimable rewards from GLP without considering if the claimed tokens are staked. When staking rewards, the code doesn't set to zero esGmxFromGlp. This is inconsistent with esGmxFromGmx computed using a balance change esGmxFromGlp and will be zero if rewards get staked. OrigamiGmxEarnAccount.sol#L396-L424 
3. Use glpRewardRouter for fetching glp trackers Severity: Low Difficulty: n/a Type: n/a Target: n/a Description: Currently, both routers point to the same trackers, but this could change. Deployed glpRewardRouter, for GMX trackers aren't set, points to address 0. The same could happen for gmxRewardRouter, GLP trackers could point to address 0. 
4. No Chainlink staleness check in oraclePrice() Severity: Low Difficulty: n/a Type: n/a Target: n/a Description: The Chainlink latestRoundData() function returns price data along with the roundId and timestamp of the data. If the data is stale, it should be discarded. Otherwise the protocol will trust outdated data that could lead to a loss of value from using an inaccurate exchange rate. It is recommended to check the roundId and timestamp values that the oracle returns, as shown in other security report findings here and here. 
5. Variables could be immutables Severity: Gas Difficulty: n/a Type: n/a Target: n/a Description: These variables can be declared immutable: /// @notice $GMX IERC20Upgradeable public gmxToken; /// @notice $esGMX - escrowed GMX IERC20Upgradeable public esGmxToken; /// @notice $wrappedNative - wrapped ETH/AVAX IERC20Upgradeable public wrappedNativeToken; These three variables won't change. The contract constructor can set them appropriately. 
6. Initialize variable only if needed Severity: Gas Difficulty: n/a Type: n/a Target: n/a Description: Variable esGmxReinvested is initialized before the if statement but it's only used inside the if block. 
7. Reuse local variable Severity: Gas Difficulty: n/a Type: n/a Target: n/a Description: Variable fromToken can be reused instead of initializing the new variable tokenIn. The same applies to variable tokenOut. Local variable reserveAmount can be dropped from here and here if inline is used like this: underlyingQuoteData.underlyingExitQuoteData.investmentTokenAmount = _redeemReservesFromShares 
8. Use msg.sender not owner() Severity: Gas Difficulty: n/a Type: n/a Target: n/a Description: It is cheaper to call msg.sender instead of ownable() when they both return the same value. If this change is made in the constructor of MintableToken, the range of gas used on the deployment of MintableToken is reduced from the original range of 2296764-2296884 to 2296354-2296474, saving roughly 400 gas. 
9. Incorrect comment Severity: Informational Difficulty: n/a Type: n/a Target: n/a Description: File OrigamiGmxInvestment has a comment with an incorrect file name. 
10. Oracles price can be exploited Severity: Informational Difficulty: n/a Type: n/a Target: n/a Description: TokenPrices.sol#L74: this price oracle can be exploited with a single block sandwich attack. TokenPrices.sol#L85: this price oracle can be exploited via a multi-block attack by block producers. More info. 
11. Update comment to NatSpec format Severity: Informational Difficulty: n/a Type: n/a Target: n/a Description: In file OrigamiGmxManager variables primaryEarnAccount and secondaryEarnAccount could be in NatSpec format. At least two comments (1, 2) are missing the @notice NatSpec tag. Finally, the comment on reservesToShares() is identical to the comment on sharesToReserves(), which is incorrect. The comment for reservesToShares() should be reversed to read "How many shares given a number of reserve tokens". 
12. Verify fees and rewards addresses Severity: Informational Difficulty: n/a Type: n/a Target: n/a Description: Setter functions in OrigamiGmxManager for feeCollector and rewards aggregators doesn't verify input for the default 0 value. There are no checks to prevent an address of 0 when the fees and rewards are distributed. 
13. Remove removeReserves(uint256 amount) Severity: Informational Difficulty: n/a Type: n/a Target: n/a Description: The function enables operators to take all reserveToken which can after be redeemed for other tokens depending on the OrigamiInvestment implementation. Even recoverToken(address _token, address _to, uint256 _amount) function, which is limited to only the owner, verifies the owner cannot drain the protocol. 
14. Trader Joe AMM is moving liquidity to a new AMM design Severity: Informational Difficulty: n/a Type: n/a Target: n/a Description: Trader Joe is used as a price oracle on TokenPrices.sol#L74. Trader Joe announced a new AMM design with breaking ABI changes. The design will allow anyone, not just Trader Joe, to create new trading pools, so liquidity is expected to move to the new AMM. announcement doc 
15. Incorrect NatSpec Severity: Informational Difficulty: n/a Type: n/a Target: n/a Description: On Operators.sol#L19 @dev NatSpec specifies this __Operators_init() initializes the owner, but it's not initializing the owner. 
16. addToReserveAmount could be a percentage value Severity: Informational Difficulty: n/a Type: n/a Target: n/a Description: In _compoundOvGmxRewards() and _compoundOvGlpRewards(), the number of tokens to add to the reserve could be calculated using the returned value from investWithToken() and a percentage. This change would improve the precision of tokens added to the reserve, making it easier to send 100% of the rewards after slippage to the reserve. 
17. Replace deprecated dependency Severity: Informational Difficulty: n/a Type: n/a Target: n/a Description: draft-ERC20Permit.sol is the old file in @openzeppelin/contracts which has been replaced with ERC20Permit.sol. Remove the import of draft-ERC20Permit.sol and instead import ERC20Permit.sol. A related simplification is the ERC20.sol dependency can be removed from MintableToken because it is already imported through ERC20Permit.sol. 
18. Unusual Operator.sol implementation Severity: Informational Difficulty: n/a Type: n/a Target: n/a Description: The Operator.sol contract is implemented in the same pattern as contracts from openzeppelin-contracts-upgradeable. This includes inheriting Initializeable and having an init function. But unlike other OZ upgradeable contracts, the init functions in Operator.sol don't do anything. There is no difference in the contract if it is initialize or not. A side effect of how this contract is used by other contracts is that every contract that inherits Operator.sol will have its own list of operators. If the intent is to manage only a single list of operators that have access to several different contracts, then consider deploying Operator.sol on its own, rather than as a dependency, and integrate it with the other contracts accordingly. 
19. Reconsider using DEFAULT_ADMIN_ROLE Severity: Informational Difficulty: n/a Type: n/a Target: n/a Description: OpenZeppelin's documentation for DEFAULT_ADMIN_ROLE warns that the role is effectively a superuser. If the only changing of roles is through addMinter() and revokeRole(), using DEFAULT_ADMIN_ROLE and importing AccessControl may be overkill. It could be simpler to maintain a mapping of addresses that have this access instead of inheriting the library. Related to this, addMinter() and removeMinter() have duplicate modifiers. In the existing code, the caller must be the owner because of the modifier in MintableToken and the caller must be the adminRole because of the modifier in AccessControl. Consider removing the onlyOwner modifier to save gas. 
20. Consider zero for minAmount Severity: Informational Difficulty: n/a Type: n/a Target: n/a Description: glpRewardRouter.mintAndStakeGlp() has two minAmount arguments. Only one of these is really necessary. Consider removing the other and replacing it with a zero minAmount depending on the standard use case for the mintAndStakeGlp() function. 
21. Broken link Severity: Informational Difficulty: n/a Type: n/a Target: n/a Description: TokenPrices.sol links to https://docs.uniswap.org/sdk/guides/fetching-prices which returns Page Not Found. Consider linking to the archived page https://web.archive.org/web/20210918154903/https://docs.uniswap.org/sdk/guides/fetching-prices. 
22. Typo Severity: Informational Difficulty: n/a Type: n/a Target: n/a Description: adggregator -> aggregator 
