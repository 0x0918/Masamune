1. On-chain contracts assume off-chain trust Severity: High Difficulty: n/a Type: n/a Target: n/a Description: The 90-day phase 1 period of the Incubator DAO ROOK rage quit process will involve swapping ROOK for pROOK at a 1-to-1 exchange rate. Along with the pROOK token, USDC will also be received at a rate specified by the exchangeRate value. The ROOK token will effectively be pegged to a specific number of USDC tokens during Phase 1. There are some ROOK holders that are excluded from participating in this redemption process according to the governance proposal, but there is no logic in the exchangeROOK.sol contract to prevent these parties from interacting with the contract. This could result in the draining of USDC held in the contract by these excluded parties, which would effectively cause a bank run on the exchangeROOK.sol contract because some ROOK holders will not be able to receive their promised USDC at the set exchange rate. However, it should be noted that the evidence of these acts would be visible on-chain and there is a level of established trust between the ROOK holders which allowed the current governance proposal to be agreed on. Another scenario that would have a negative impact for ROOK holders would involve the Incubator DAO multisig withdrawing ROOK from exchangeROOK.sol using withdrawAssets() to take all the USDC from this contract before other ROOK holders can redeem their tokens. By depositing ROOK into exchangeROOK.sol to get USDC, then using withdrawAssets() to withdraw the ROOK, then depositing ROOK into exchangeROOK.sol ad infinitum, the USDC would get drained from exchangeROOK.sol. This would also effectively cause a bank run on the exchangeROOK.sol contract because some ROOK holders will not be able to receive their promised USDC at the set exchange rate. An alternative approach for the Incubator DAO multisig to gain value is to withdraw ROOK from exchangeROOK.sol using withdrawAssets(), then to swap the ROOK tokens in a liquidity pool before the ROOK token has no value. While the liquidity pool would be imbalanced and be arbitraged due to the set exchangeRate value in exchangeROOK.sol, the multisig could once again take any new ROOK tokens deposited into exchangeROOK.sol and swap it into a liquidity pool again until the exchangeROOK.sol holds no more USDC. 
2. Contract owner can manipulate value received by ROOK or pROOK holders Severity: Low Difficulty: n/a Type: n/a Target: n/a Description: The contract owner will be a 3-of-4 multisig and should generally be a trusted party. However, if this assumption does not hold true, there are several ways the owner could manipulate the value received by ROOK or pROOK token holders: withdrawAssets() could take out all the USDC from the exchangeROOK.sol or exchangepROOK.sol contracts. The mint() function in prook.sol can be called at any time for any amount. The owner could mint many pROOK tokens at the start of Phase 2 and sweep all the USDC from this contract before other token holders get the chance to redeem their pROOK. The setExchangeRate() function could be called to change the ROOK-USDC or pROOK-USDC exchangeRate value in exchangeROOK.sol or exchangepROOK.sol, giving some users more or less USDC in return for their ROOK tokens. 
3. Remove ERC20Votes.sol import Severity: Low Difficulty: n/a Type: n/a Target: n/a Description: Incubator DAO will use the incubdao.eth snapshot.org space for governance voting. Because the governance approach will follow the approach used by ROOK, the same erc20-balance-of snapshot.org voting strategy will be used. This means that there is no need for the pROOK token to include voting logic on-chain, because the token balance held by an address will determine the votes that address receives. 
4. Limit pROOK burn functions Severity: Low Difficulty: n/a Type: n/a Target: n/a Description: If a user burns their pROOK token, they will lose the chance to redeem their pROOK for USDC during Phase 2 of the Incubator DAO rage quit process. Because ERC20Burnable.sol includes a public burnFrom() function, which only requires an allowance to be given to burn pROOK tokens, it's possible that scam websites could attempt to phish users to sign a pROOK allowance and burn their tokens during Phase 1 so that pROOK holders in Phase 2 would be allocated more USDC. This is because the exchangeRate in Phase 2 will be set to remaining_USDC / pRook.totalSupply(), and burning pROOK would reduce the totalSupply value. 
5. Remove SafeMath import Severity: Gas Difficulty: n/a Type: n/a Target: n/a Description: Solidity 0.8.0 introduced a breaking change to implement overflow and underflow protection. This means the SafeMath imports can be removed to save gas on deployment: exchangeROOK.sol import exchangepROOK.sol import 
6. Declare variables immutable when possible Severity: Gas Difficulty: n/a Type: n/a Target: n/a Description: The token variables in exchangeROOK.sol and exchangepROOK.sol can be immutable. They are only set in the constructor and are not changed after that. exchangeROOK.sol token variables exchangepROOK.sol token variables 
7. Remove ERC20.sol import from exchange contracts Severity: Gas Difficulty: n/a Type: n/a Target: n/a Description: The ERC20.sol import in the exchange contracts is not needed and will spend unnecessary gas on deployment, so it can be removed. exchangeROOK.sol ERC20 import exchangepROOK.sol ERC20 import 
8. Use consistent solidity versions Severity: Informational Difficulty: n/a Type: n/a Target: n/a Description: exchangeROOK.sol and exchangepROOK.sol use solidity 0.8.12, but prook.sol uses solidity ^0.8.9. Because different versions of solidity contain minor differences, and because the newer versions of solidity contain bug fixes and gas optimizations, it is generally recommended to use one of the most recent solidity versions. 
9. Add event to setExchangeRate() Severity: Informational Difficulty: n/a Type: n/a Target: n/a Description: Consider adding a ExchangeRateSet event in: exchangeRook.setExchangeRate() exchangepRook.setExchangeRate() 
10. Make public functions external Severity: Informational Difficulty: n/a Type: n/a Target: n/a Description: Declare these public functions as external because they do not need to be called internally: mint() in prook.sol pause() in exchangeROOK.sol and in exchangepROOK.sol unpause() in exchangepROOK.sol and in exchangepROOK.sol 
11. Incorrect values in governance proposal Severity: Informational Difficulty: n/a Type: n/a Target: n/a Description: The governance proposal states that the exchangeROOK.sol exchangeRate will be set by the following equation: an exchange rate defined by Incubator DAO total treasury รท (ROOK total supply [1,268,253.79] - DAO owned ROOK [162,807.40] - Strategic Reserve owned ROOK [452,137.53] - DAO contributors owned ROOK [35,175.14]) The first number in this equation is inaccurate and is off by about 5 ROOK. The current on-chain totalSupply value of ROOK token is 1268248.759, which is visible with etherscan or with: cast --from-wei $(cast call 0xfa5047c9c78b8877af97bdcb85db743fd7313d4a "totalSupply()(uint256)") The second number in this equation is also inaccurate. Based on the top ROOK holders etherscan chart, the 2nd largest ROOK holder, which we will assume is the DAO owned ROOK tokens, holds 162,780 ROOK. This is a difference of roughly 27 ROOK from the value in the governance proposal. The governance proposal does use the correct value for the Strategic Reserve owner ROOK of 452,137.53. The DAO contributors owned ROOK value is not easily checked at the time of the audit because the tokens are held by different addresses but will be combined into a multisig. 
